
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output taliforth-py65mon.bin platform/platform-py65mon.asm
; Fri Jun 21 13:35:55 2024

;Offset	;PC	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-py65mon.asm

=$7fff						ram_end = $7fff
=						TALI_OPTIONAL_WORDS := [ "ed", "editor", "ramdrive", "block", "environment?", "assembler", "disassembler", "wordlist" ]
=["lf"]						TALI_OPTION_CR_EOL := [ "lf" ]
=1						TALI_OPTION_HISTORY := 1
=0						TALI_OPTION_TERSE := 0

;******  Processing file: platform/simulator.asm


;******  Processing file: platform/../taliforth.asm

.8000						code0:
.8000						forth:

;******  Processing file: platform/../words/all.asm

.8000						xt_cold:
.8000		d8		cld		                cld
.8001		a9 27		lda #$27	                lda #<kernel_putc
.8003		85 12		sta $12		                sta output
.8005		a9 f0		lda #$f0	                lda #>kernel_putc
.8007		85 13		sta $13		                sta output+1
.8009		a2 1d		ldx #$1d	                ldx #cold_zp_table_end-cold_zp_table-1
.800b						_load_zp_loop:
.800b		bd d7 b3	lda $b3d7,x	                lda cold_zp_table,x
.800e		95 00		sta $00,x	                sta zpage,x
.8010		ca		dex		                dex
.8011		d0 f8		bne $800b	                bne _load_zp_loop
.8013		ad d7 b3	lda $b3d7	                lda cold_zp_table
.8016		85 00		sta $00		                sta zpage
.8018		a2 ff		ldx #$ff	                ldx #rsp0
.801a		9a		txs		                txs
.801b		a2 78		ldx #$78	                ldx #dsp0
.801d		a0 35		ldy #$35	                ldy #cold_user_table_end-cold_user_table-1
.801f						_load_user_vars_loop:
.801f		b9 f5 b3	lda $b3f5,y	                lda cold_user_table,y
.8022		91 08		sta ($08),y	                sta (up),y
.8024		88		dey		                dey
.8025		d0 f8		bne $801f	                bne _load_user_vars_loop
.8027		ad f5 b3	lda $b3f5	                lda cold_user_table
.802a		92 08		sta ($08)	                sta (up)
.802c		20 3a 84	jsr $843a	                jsr xt_cr
.802f		ca		dex		                dex
.8030		ca		dex		                dex
.8031		ca		dex		                dex
.8032		ca		dex		                dex
.8033		a9 d8		lda #$d8	                lda #<forth_words_start
.8035		95 02		sta $02,x	                sta 2,x
.8037		a9 ba		lda #$ba	                lda #>forth_words_start
.8039		95 03		sta $03,x	                sta 3,x
.803b		a9 e2		lda #$e2	                lda #<(user_words_end-forth_words_start)
.803d		95 00		sta $00,x	                sta 0,x
.803f		a9 00		lda #$00	                lda #>(user_words_end-forth_words_start)
.8041		95 01		sta $01,x	                sta 1,x
.8043		20 b2 88	jsr $88b2	                jsr xt_evaluate
.8046		9c 00 7c	stz $7c00	                stz hist_buff
.8049		9c 80 7c	stz $7c80	                stz hist_buff+$80
.804c		9c 00 7d	stz $7d00	                stz hist_buff+$100
.804f		9c 80 7d	stz $7d80	                stz hist_buff+$180
.8052		9c 00 7e	stz $7e00	                stz hist_buff+$200
.8055		9c 80 7e	stz $7e80	                stz hist_buff+$280
.8058		9c 00 7f	stz $7f00	                stz hist_buff+$300
.805b		9c 80 7f	stz $7f80	                stz hist_buff+$380
.805e						xt_abort:
.805e		a2 78		ldx #$78	                ldx #dsp0
.8060						xt_quit:
.8060		8a		txa		                txa             ; Save the DSP that we just defined
.8061		a2 ff		ldx #$ff	                ldx #rsp0
.8063		9a		txs		                txs
.8064		aa		tax		                tax             ; Restore the DSP. Dude, seriously.
.8065		64 04		stz $04		                stz ip
.8067		64 05		stz $05		                stz ip+1
.8069		64 0a		stz $0a		                stz insrc
.806b		64 0b		stz $0b		                stz insrc+1
.806d		a9 00		lda #$00	                lda #0
.806f		a0 04		ldy #$04	                ldy #blk_offset
.8071		91 08		sta ($08),y	                sta (up),y
.8073		c8		iny		                iny
.8074		91 08		sta ($08),y	                sta (up),y
.8076		a9 fc		lda #$fc	                lda #(256-4)
.8078		85 1f		sta $1f		                sta loopctrl
.807a		64 1a		stz $1a		                stz state
.807c		64 1b		stz $1b		                stz state+1
.807e						_get_line:
.807e		a9 00		lda #$00	                lda #<buffer0   ; input buffer, this is paranoid
.8080		85 0c		sta $0c		                sta cib
.8082		a9 02		lda #$02	                lda #>buffer0
.8084		85 0d		sta $0d		                sta cib+1
.8086		64 0e		stz $0e		                stz ciblen
.8088		64 0f		stz $0f		                stz ciblen+1
.808a		20 48 8f	jsr $8f48	                jsr xt_refill           ; ( -- f )
.808d		b5 00		lda $00,x	                lda 0,x
.808f		d0 05		bne $8096	                bne _success
.8091		a9 06		lda #$06	                lda #err_refill
.8093		4c 44 d8	jmp $d844	                jmp error
.8096						_success:
.8096		e8		inx		                inx                     ; drop
.8097		e8		inx		                inx
.8098		20 ab d7	jsr $d7ab	                jsr interpret
.809b		e0 78		cpx #$78	                cpx #dsp0
.809d		f0 05		beq $80a4	                beq _stack_ok
.809f		90 03		bcc $80a4	                bcc _stack_ok           ; DSP must always be smaller than DSP0
.80a1		4c 42 d8	jmp $d842	                jmp underflow_error
.80a4						_stack_ok:
.80a4		a5 1a		lda $1a		                lda state
.80a6		f0 02		beq $80aa	                beq _print
.80a8		a9 01		lda #$01	                lda #1                  ; number for "compile" string
.80aa						_print:
.80aa		20 95 d8	jsr $d895	                jsr print_string
.80ad		80 cf		bra $807e	                bra _get_line
.80af						z_cold:
.80af						z_abort:
.80af						z_quit:

;******  Processing file: platform/../words/core.asm

.80af						xt_abort_quote:
.80af		20 e0 8f	jsr $8fe0	                jsr xt_s_quote          ; S"
.80b2		a0 80		ldy #$80	                ldy #>abort_quote_runtime
.80b4		a9 ba		lda #$ba	                lda #<abort_quote_runtime
.80b6		20 86 97	jsr $9786	                jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
.80b9		60		rts		z_abort_quote:  rts
.80ba						abort_quote_runtime:
.80ba		b5 04		lda $04,x	                lda 4,x
.80bc		15 05		ora $05,x	                ora 5,x
.80be		f0 09		beq $80c9	                beq _done       ; if FALSE, we're done
.80c0		20 bb 94	jsr $94bb	                jsr xt_type
.80c3		20 3a 84	jsr $843a	                jsr xt_cr
.80c6		4c 5e 80	jmp $805e	                jmp xt_abort    ; not JSR, so never come back
.80c9						_done:
.80c9		8a		txa		                txa
.80ca		18		clc		                clc
.80cb		69 06		adc #$06	                adc #6
.80cd		aa		tax		                tax
.80ce		60		rts		                rts
.80cf						xt_abs:
.80cf		20 2e d8	jsr $d82e	                jsr underflow_1
.80d2		b5 01		lda $01,x	                lda 1,x
.80d4		10 0d		bpl $80e3	                bpl _done       ; positive number, easy money!
.80d6		38		sec		                sec
.80d7		a9 00		lda #$00	                lda #0
.80d9		f5 00		sbc $00,x	                sbc 0,x         ; LSB
.80db		95 00		sta $00,x	                sta 0,x
.80dd		a9 00		lda #$00	                lda #0          ; MSB
.80df		f5 01		sbc $01,x	                sbc 1,x
.80e1		95 01		sta $01,x	                sta 1,x
.80e3						_done:
.80e3		60		rts		z_abs:          rts
.80e4						xt_accept:
.80e4		20 33 d8	jsr $d833	                jsr underflow_2
.80e7		b5 00		lda $00,x	                lda 0,x
.80e9		15 01		ora $01,x	                ora 1,x
.80eb		d0 09		bne $80f6	                bne _not_zero
.80ed		e8		inx		                inx
.80ee		e8		inx		                inx
.80ef		74 00		stz $00,x	                stz 0,x
.80f1		74 01		stz $01,x	                stz 1,x
.80f3		4c c2 81	jmp $81c2	                jmp accept_done
.80f6						_not_zero:
.80f6		b5 00		lda $00,x	                lda 0,x         ; number of chars to get in tmp2 ...
.80f8		85 27		sta $27		                sta tmp2
.80fa		64 28		stz $28		                stz tmp2+1      ; ... but we only accept max 255 chars
.80fc		b5 02		lda $02,x	                lda 2,x         ; address of buffer is NOS, to tmp1
.80fe		85 25		sta $25		                sta tmp1
.8100		b5 03		lda $03,x	                lda 3,x
.8102		85 26		sta $26		                sta tmp1+1
.8104		e8		inx		                inx
.8105		e8		inx		                inx
.8106		a0 00		ldy #$00	                ldy #0
.8108		a5 1c		lda $1c		                lda status
.810a		29 f7		and #$f7	                and #$F7
.810c		1a		inc a		                ina
.810d		09 08		ora #$08	                ora #%00001000
.810f		85 1c		sta $1c		                sta status
.8111						accept_loop:
.8111		20 b1 89	jsr $89b1	                jsr key_a
.8114		c9 0a		cmp #$0a	                cmp #AscLF
.8116		f0 20		beq $8138	                beq _eol
.8118		c9 0d		cmp #$0d	                cmp #AscCR
.811a		f0 1c		beq $8138	                beq _eol
.811c		c9 08		cmp #$08	                cmp #AscBS
.811e		f0 22		beq $8142	                beq _backspace
.8120		c9 7f		cmp #$7f	                cmp #AscDEL     ; (CTRL-h)
.8122		f0 1e		beq $8142	                beq _backspace
.8124		c9 10		cmp #$10	                cmp #AscCP
.8126		f0 36		beq $815e	                beq _ctrl_p
.8128		c9 0e		cmp #$0e	                cmp #AscCN
.812a		f0 44		beq $8170	                beq _ctrl_n
.812c		91 25		sta ($25),y	                sta (tmp1),y
.812e		c8		iny		                iny
.812f		20 c5 86	jsr $86c5	                jsr emit_a
.8132		c4 27		cpy $27		                cpy tmp2        ; reached character limit?
.8134		d0 db		bne $8111	                bne accept_loop       ; fall through if buffer limit reached
.8136		80 03		bra $813b	                bra _buffer_full
.8138						_eol:
.8138		20 d1 91	jsr $91d1	                jsr xt_space    ; print final space
.813b						_buffer_full:
.813b		94 00		sty $00,x	                sty 0,x         ; Y contains number of chars accepted already
.813d		74 01		stz $01,x	                stz 1,x         ; we only accept 256 chars
.813f		4c c2 81	jmp $81c2	                jmp accept_done
.8142						_backspace:
.8142		c0 00		cpy #$00	                cpy #0          ; buffer empty?
.8144		d0 06		bne $814c	                bne +
.8146		a9 07		lda #$07	                lda #AscBELL    ; complain and don't delete beyond the start of line
.8148		20 c5 86	jsr $86c5	                jsr emit_a
.814b		c8		iny		                iny
.814c						+
.814c		88		dey		                dey
.814d		a9 08		lda #$08	                lda #AscBS      ; move back one
.814f		20 c5 86	jsr $86c5	                jsr emit_a
.8152		a9 20		lda #$20	                lda #AscSP      ; print a space (rubout)
.8154		20 c5 86	jsr $86c5	                jsr emit_a
.8157		a9 08		lda #$08	                lda #AscBS      ; move back over space
.8159		20 c5 86	jsr $86c5	                jsr emit_a
.815c		80 b3		bra $8111	                bra accept_loop
.815e						_ctrl_p:
.815e		a5 1c		lda $1c		                lda status
.8160		29 07		and #$07	                and #7
.8162		d0 08		bne $816c	                bne _ctrl_p_dec
.8164		a5 1c		lda $1c		                lda status
.8166		09 07		ora #$07	                ora #7
.8168		85 1c		sta $1c		                sta status
.816a		80 11		bra $817d	                bra _recall_history
.816c						_ctrl_p_dec:
.816c		c6 1c		dec $1c		                dec status
.816e		80 0d		bra $817d	                bra _recall_history
.8170						_ctrl_n:
.8170		a9 08		lda #$08	                lda #$8
.8172		24 1c		bit $1c		                bit status
.8174		d0 07		bne $817d	                bne _recall_history
.8176		a5 1c		lda $1c		                lda status
.8178		29 f7		and #$f7	                and #$F7
.817a		1a		inc a		               ina
.817b		85 1c		sta $1c		                sta status
.817d						_recall_history:
.817d		a9 08		lda #$08	                lda #%00001000
.817f		14 1c		trb $1c		                trb status
.8181		20 dd 81	jsr $81dd	                jsr accept_total_recall
.8184		a9 0d		lda #$0d	                lda #AscCR
.8186		20 c5 86	jsr $86c5	                jsr emit_a
.8189						input_clear:
.8189		c0 00		cpy #$00	                cpy #0
.818b		f0 08		beq $8195	                beq input_cleared
.818d		a9 20		lda #$20	                lda #AscSP
.818f		20 c5 86	jsr $86c5	                jsr emit_a
.8192		88		dey		                dey
.8193		80 f4		bra $8189	                bra input_clear
.8195						input_cleared:
.8195		a9 0d		lda #$0d	                lda #AscCR
.8197		20 c5 86	jsr $86c5	                jsr emit_a
.819a		b1 29		lda ($29),y	                lda (tmp3),y
.819c		85 1d		sta $1d		                sta status+1
.819e		e6 29		inc $29		                inc tmp3
.81a0		d0 02		bne $81a4	                bne +           ; Increment the upper byte on carry.
.81a2		e6 2a		inc $2a		                inc tmp3+1
.81a4						+
.81a4		a9 0d		lda #$0d	                lda #AscCR
.81a6		20 c5 86	jsr $86c5	                jsr emit_a
.81a9						_history_loop:
.81a9		c4 1d		cpy $1d		                cpy status+1
.81ab		d0 03		bne $81b0	                bne +
.81ad		4c 11 81	jmp $8111	                jmp accept_loop       ; Needs a long jump
.81b0						+
.81b0		c4 27		cpy $27		                cpy tmp2
.81b2		f0 0a		beq $81be	                beq _hist_filled_buffer
.81b4		b1 29		lda ($29),y	                lda (tmp3),y
.81b6		91 25		sta ($25),y	                sta (tmp1),y
.81b8		20 c5 86	jsr $86c5	                jsr emit_a
.81bb		c8		iny		                iny
.81bc		80 eb		bra $81a9	                bra _history_loop
.81be						_hist_filled_buffer:
.81be		88		dey		                dey
.81bf		4c 11 81	jmp $8111	                jmp accept_loop
.81c2						accept_done:
.81c2		20 dd 81	jsr $81dd	                jsr accept_total_recall
.81c5		85 1d		sta $1d		                sta status+1
.81c7		a0 00		ldy #$00	                ldy #0
.81c9		91 29		sta ($29),y	                sta (tmp3),y
.81cb		e6 29		inc $29		                inc tmp3
.81cd		d0 02		bne $81d1	                bne +           ; Increment the upper byte on carry.
.81cf		e6 2a		inc $2a		                inc tmp3+1
.81d1						+
.81d1						_save_history_loop:
.81d1		c4 1d		cpy $1d		                cpy status+1
.81d3		f0 07		beq $81dc	                beq _save_history_done
.81d5		b1 25		lda ($25),y	                lda (tmp1),y
.81d7		91 29		sta ($29),y	                sta (tmp3),y
.81d9		c8		iny		                iny
.81da		80 f5		bra $81d1	                bra _save_history_loop
.81dc						_save_history_done:
.81dc						z_accept:
.81dc		60		rts		                rts
.81dd						accept_total_recall:
.81dd		a9 00		lda #$00	                lda #<hist_buff
.81df		85 29		sta $29		                sta tmp3
.81e1		a9 7c		lda #$7c	                lda #>hist_buff
.81e3		85 2a		sta $2a		                sta tmp3+1
.81e5		a5 1c		lda $1c		                lda status
.81e7		6a		ror a		                ror
.81e8		29 03		and #$03	                and #3
.81ea		18		clc		                clc
.81eb		65 2a		adc $2a		                adc tmp3+1
.81ed		85 2a		sta $2a		                sta tmp3+1
.81ef		a5 1c		lda $1c		                lda status
.81f1		6a		ror a		                ror             ; Rotate through carry into msb.
.81f2		6a		ror a		                ror
.81f3		29 80		and #$80	                and #$80
.81f5		18		clc		                clc
.81f6		65 29		adc $29		                adc tmp3
.81f8		85 29		sta $29		                sta tmp3
.81fa		90 02		bcc $81fe	                bcc +           ; Increment the upper byte on carry.
.81fc		e6 2a		inc $2a		                inc tmp3+1
.81fe						+
.81fe		98		tya		                tya
.81ff		c9 80		cmp #$80	                cmp #$80
.8201		90 02		bcc $8205	                bcc +
.8203		a9 7f		lda #$7f	                lda #$7F
.8205						+
.8205		60		rts		                rts
.8206						xt_action_of:
.8206		a5 1a		lda $1a		                lda state
.8208		05 1b		ora $1b		                ora state+1
.820a		f0 0c		beq $8218	                beq _interpreting
.820c		20 14 83	jsr $8314	                jsr xt_bracket_tick
.820f		a0 85		ldy #$85	                ldy #>xt_defer_fetch
.8211		a9 44		lda #$44	                lda #<xt_defer_fetch
.8213		20 86 97	jsr $9786	                jsr cmpl_subroutine
.8216		80 06		bra $821e	                bra _done
.8218						_interpreting:
.8218		20 48 92	jsr $9248	                jsr xt_tick
.821b		20 44 85	jsr $8544	                jsr xt_defer_fetch
.821e						_done:
.821e		60		rts		z_action_of:           rts
.821f						xt_again:
.821f		20 2e d8	jsr $d82e	                jsr underflow_1
.8222		20 9f 97	jsr $979f	                jsr cmpl_jump_tos
.8225		60		rts		z_again:        rts
.8226						xt_align:
.8226						xt_aligned:
.8226						z_align:
.8226						z_aligned:
.8226		60		rts		                rts             ; stripped out during native compile
.8227						xt_allot:
.8227		20 2e d8	jsr $d82e	                jsr underflow_1
.822a		b5 01		lda $01,x	                lda 1,x
.822c		30 22		bmi $8250	                bmi _release
.822e		18		clc		                clc
.822f		a5 00		lda $00		                lda cp
.8231		75 00		adc $00,x	                adc 0,x
.8233		85 00		sta $00		                sta cp
.8235		a5 01		lda $01		                lda cp+1
.8237		75 01		adc $01,x	                adc 1,x
.8239		85 01		sta $01		                sta cp+1
.823b		a0 00		ldy #$00	                ldy #<cp_end
.823d		c4 00		cpy $00		                cpy cp
.823f		a9 7c		lda #$7c	                lda #>cp_end
.8241		e5 01		sbc $01		                sbc cp+1
.8243		b0 48		bcs $828d	                bcs _done               ; we're fine.
.8245		84 00		sty $00		                sty cp                  ; still #<cp_end
.8247		a9 7c		lda #$7c	                lda #>cp_end
.8249		85 01		sta $01		                sta cp+1
.824b		a9 00		lda #$00	                lda #err_allot
.824d		4c 44 d8	jmp $d844	                jmp error
.8250						_release:
.8250		ca		dex		                dex
.8251		ca		dex		                dex
.8252		a5 00		lda $00		                lda cp
.8254		95 00		sta $00,x	                sta 0,x
.8256		a5 01		lda $01		                lda cp+1
.8258		95 01		sta $01,x	                sta 1,x
.825a		20 5f 8e	jsr $8e5f	                jsr xt_plus                     ; new CP is now TOS
.825d		ca		dex		                dex
.825e		ca		dex		                dex                             ; new CP now NOS
.825f		a9 00		lda #$00	                lda #<cp0
.8261		95 00		sta $00,x	                sta 0,x
.8263		a9 03		lda #$03	                lda #>cp0
.8265		95 01		sta $01,x	                sta 1,x                         ; CP0 is TOS
.8267		20 6c d7	jsr $d76c	                jsr compare_16bit               ; still ( CP CP0 )
.826a		f0 17		beq $8283	                beq _nega_done
.826c		30 15		bmi $8283	                bmi _nega_done
.826e		a9 00		lda #$00	                lda #<cp0
.8270		85 00		sta $00		                sta cp
.8272		a9 03		lda #$03	                lda #>cp0
.8274		85 01		sta $01		                sta cp+1
.8276		a9 ba		lda #$ba	                lda #<dictionary_start
.8278		85 02		sta $02		                sta dp
.827a		a9 bb		lda #$bb	                lda #>dictionary_start
.827c		85 03		sta $03		                sta dp+1
.827e		a9 0a		lda #$0a	                lda #err_negallot
.8280		4c 44 d8	jmp $d844	                jmp error
.8283						_nega_done:
.8283		b5 02		lda $02,x	                lda 2,x
.8285		85 00		sta $00		                sta cp
.8287		b5 03		lda $03,x	                lda 3,x
.8289		85 01		sta $01		                sta cp+1
.828b		e8		inx		                inx
.828c		e8		inx		                inx                     ; drop through to _done
.828d						_done:
.828d		e8		inx		                inx
.828e		e8		inx		                inx
.828f						z_allot:
.828f		60		rts		                rts
.8290						xt_and:
.8290		20 33 d8	jsr $d833	                jsr underflow_2
.8293		b5 00		lda $00,x	                lda 0,x
.8295		35 02		and $02,x	                and 2,x
.8297		95 02		sta $02,x	                sta 2,x
.8299		b5 01		lda $01,x	                lda 1,x
.829b		35 03		and $03,x	                and 3,x
.829d		95 03		sta $03,x	                sta 3,x
.829f		e8		inx		                inx
.82a0		e8		inx		                inx
.82a1		60		rts		z_and:          rts
.82a2						xt_at_xy:
.82a2		20 33 d8	jsr $d833	                jsr underflow_2
.82a5		a5 18		lda $18		                lda base
.82a7		48		pha		                pha
.82a8		a9 0a		lda #$0a	                lda #10
.82aa		85 18		sta $18		                sta base
.82ac		a9 1b		lda #$1b	                lda #AscESC
.82ae		20 c5 86	jsr $86c5	                jsr emit_a
.82b1		a9 5b		lda #$5b	                lda #'['
.82b3		20 c5 86	jsr $86c5	                jsr emit_a
.82b6		20 f5 8c	jsr $8cf5	                jsr xt_one_plus ; AT-XY is zero based, but ANSI is 1 based
.82b9		20 9b d8	jsr $d89b	                jsr print_u
.82bc		a9 3b		lda #$3b	                lda #';'
.82be		20 c5 86	jsr $86c5	                jsr emit_a
.82c1		20 f5 8c	jsr $8cf5	                jsr xt_one_plus ; AT-XY is zero based, but ANSI is 1 based
.82c4		20 9b d8	jsr $d89b	                jsr print_u
.82c7		a9 48		lda #$48	                lda #'H'
.82c9		20 c5 86	jsr $86c5	                jsr emit_a
.82cc		68		pla		                pla
.82cd		85 18		sta $18		                sta base
.82cf		60		rts		z_at_xy:        rts
.82d0						xt_backslash:
.82d0		a0 04		ldy #$04	                ldy #blk_offset
.82d2		b1 08		lda ($08),y	                lda (up),y
.82d4		c8		iny		                iny
.82d5		11 08		ora ($08),y	                ora (up),y
.82d7		f0 19		beq $82f2	                beq backslash_not_block
.82d9		a5 10		lda $10		                lda toin
.82db		29 3f		and #$3f	                and #$3F
.82dd		f0 1b		beq $82fa	                beq z_backslash
.82df		c9 01		cmp #$01	                cmp #$1
.82e1		f0 17		beq $82fa	                beq z_backslash
.82e3		a5 10		lda $10		                lda toin
.82e5		29 c0		and #$c0	                and #$C0        ; Clear lower bits to move to beginning of line.
.82e7		18		clc		                clc             ; Add $40 (64 decimal) to move to next line.
.82e8		69 40		adc #$40	                adc #$40
.82ea		85 10		sta $10		                sta toin
.82ec		90 0c		bcc $82fa	                bcc z_backslash
.82ee		e6 11		inc $11		                inc toin+1
.82f0		80 08		bra $82fa	                bra z_backslash
.82f2						backslash_not_block:
.82f2		a5 0e		lda $0e		                lda ciblen
.82f4		85 10		sta $10		                sta toin
.82f6		a5 0f		lda $0f		                lda ciblen+1
.82f8		85 11		sta $11		                sta toin+1
.82fa		60		rts		z_backslash:    rts
.82fb						xt_base:
.82fb		ca		dex		                dex
.82fc		ca		dex		                dex
.82fd		a9 18		lda #$18	                lda #<base
.82ff		95 00		sta $00,x	                sta 0,x         ; LSB
.8301		74 01		stz $01,x	                stz 1,x         ; MSB is always 0
.8303		60		rts		z_base:         rts
.8304						xt_bl:
.8304		ca		dex		                dex
.8305		ca		dex		                dex
.8306		a9 20		lda #$20	                lda #AscSP
.8308		95 00		sta $00,x	                sta 0,x
.830a		74 01		stz $01,x	                stz 1,x
.830c		60		rts		z_bl:           rts
.830d						xt_bracket_char:
.830d		20 53 83	jsr $8353	                jsr xt_char
.8310		20 04 8a	jsr $8a04	                jsr xt_literal
.8313		60		rts		z_bracket_char: rts
.8314						xt_bracket_tick:
.8314		20 48 92	jsr $9248	                jsr xt_tick
.8317		20 04 8a	jsr $8a04	                jsr xt_literal
.831a		60		rts		z_bracket_tick: rts
.831b						xt_buffer_colon:
.831b		20 40 84	jsr $8440	                jsr xt_create
.831e		20 27 82	jsr $8227	                jsr xt_allot
.8321		60		rts		z_buffer_colon: rts
.8322						xt_c_comma:
.8322		20 2e d8	jsr $d82e	                jsr underflow_1
.8325		b5 00		lda $00,x	                lda 0,x
.8327		20 96 97	jsr $9796	                jsr cmpl_a
.832a		e8		inx		                inx
.832b		e8		inx		                inx
.832c		60		rts		z_c_comma:      rts
.832d						xt_c_fetch:
.832d		20 2e d8	jsr $d82e	                jsr underflow_1
.8330		a1 00		lda ($00,x)	                lda (0,x)
.8332		95 00		sta $00,x	                sta 0,x
.8334		74 01		stz $01,x	                stz 1,x         ; Ignore LSB
.8336		60		rts		z_c_fetch:      rts
.8337						xt_c_store:
.8337		20 33 d8	jsr $d833	                jsr underflow_2
.833a		b5 02		lda $02,x	                lda 2,x
.833c		81 00		sta ($00,x)	                sta (0,x)
.833e		e8		inx		                inx
.833f		e8		inx		                inx
.8340		e8		inx		                inx
.8341		e8		inx		                inx
.8342		60		rts		z_c_store:      rts
.8343						xt_cell_plus:
.8343		20 2e d8	jsr $d82e	                jsr underflow_1
.8346		f6 00		inc $00,x	                inc 0,x
.8348		d0 02		bne $834c	                bne +
.834a		f6 01		inc $01,x	                inc 1,x
.834c						+
.834c		f6 00		inc $00,x	                inc 0,x
.834e		d0 02		bne $8352	                bne _done
.8350		f6 01		inc $01,x	                inc 1,x
.8352						_done:
.8352		60		rts		z_cell_plus:    rts
.8353						xt_char:
.8353		20 5d 8d	jsr $8d5d	                jsr xt_parse_name
.8356		b5 00		lda $00,x	                lda 0,x
.8358		15 01		ora $01,x	                ora 1,x
.835a		d0 05		bne $8361	                bne _not_empty
.835c		a9 05		lda #$05	                lda #err_noname
.835e		4c 44 d8	jmp $d844	                jmp error
.8361						_not_empty:
.8361		e8		inx		                inx             ; drop number of characters, leave addr
.8362		e8		inx		                inx
.8363		a1 00		lda ($00,x)	                lda (0,x)       ; get character (equivalent to C@)
.8365		95 00		sta $00,x	                sta 0,x
.8367		74 01		stz $01,x	                stz 1,x         ; MSB is always zero
.8369		60		rts		z_char:         rts
.836a						xt_chars:
.836a		20 2e d8	jsr $d82e	                jsr underflow_1
.836d		60		rts		z_chars:        rts
.836e						xt_colon:
.836e		a5 1a		lda $1a		                lda state
.8370		05 1b		ora $1b		                ora state+1
.8372		f0 05		beq $8379	                beq +
.8374		a9 07		lda #$07	                lda #err_state
.8376		4c 44 d8	jmp $d844	                jmp error
.8379						+
.8379		c6 1a		dec $1a		                dec state
.837b		c6 1b		dec $1b		                dec state+1
.837d		a9 40		lda #$40	                lda #%01000000
.837f		04 1c		tsb $1c		                tsb status
.8381		20 85 d7	jsr $d785	                jsr current_to_dp
.8384		a5 03		lda $03		                lda dp+1            ; CREATE uses a lot of variables
.8386		48		pha		                pha
.8387		a5 02		lda $02		                lda dp
.8389		48		pha		                pha
.838a		a9 80		lda #$80	                lda #%10000000
.838c		04 1c		tsb $1c		                tsb status
.838e		20 40 84	jsr $8440	                jsr xt_create
.8391		20 85 d7	jsr $d785	                jsr current_to_dp   ; This might be able to be omitted
.8394		a5 02		lda $02		                lda dp
.8396		85 06		sta $06		                sta workword
.8398		a5 03		lda $03		                lda dp+1
.839a		85 07		sta $07		                sta workword+1
.839c		68		pla		                pla
.839d		85 02		sta $02		                sta dp
.839f		68		pla		                pla
.83a0		85 03		sta $03		                sta dp+1
.83a2		20 98 d7	jsr $d798	                jsr dp_to_current
.83a5		a5 00		lda $00		                lda cp
.83a7		38		sec		                sec
.83a8		e9 03		sbc #$03	                sbc #3
.83aa		85 00		sta $00		                sta cp
.83ac		b0 02		bcs $83b0	                bcs _done
.83ae		c6 01		dec $01		                dec cp+1
.83b0						_done:
.83b0		60		rts		z_colon:        rts
.83b1						xt_colon_noname:
.83b1		a5 1a		lda $1a		                lda state
.83b3		05 1b		ora $1b		                ora state+1
.83b5		f0 05		beq $83bc	                beq +
.83b7		a9 07		lda #$07	                lda #err_state
.83b9		4c 44 d8	jmp $d844	                jmp error
.83bc						+
.83bc		c6 1a		dec $1a		                dec state
.83be		c6 1b		dec $1b		                dec state+1
.83c0		a9 40		lda #$40	                lda #%01000000
.83c2		14 1c		trb $1c		                trb status
.83c4		a5 00		lda $00		                lda cp
.83c6		85 06		sta $06		                sta workword
.83c8		a5 01		lda $01		                lda cp+1
.83ca		85 07		sta $07		                sta workword+1
.83cc		60		rts		z_colon_noname:        rts
.83cd						xt_comma:
.83cd		20 2e d8	jsr $d82e	                jsr underflow_1
.83d0		a0 02		ldy #$02	                ldy #2
.83d2		b5 00		lda $00,x	_twice:         lda 0,x
.83d4		20 96 97	jsr $9796	                jsr cmpl_a
.83d7		e8		inx		                inx
.83d8		88		dey		                dey
.83d9		d0 f7		bne $83d2	                bne _twice
.83db		60		rts		z_comma:        rts
.83dc						xt_compile_only:
.83dc		20 85 d7	jsr $d785	                jsr current_to_dp
.83df		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.83e1		b1 02		lda ($02),y	                lda (dp),y
.83e3		09 01		ora #$01	                ora #CO        ; make sure bit 7 is set
.83e5		91 02		sta ($02),y	                sta (dp),y
.83e7		60		rts		z_compile_only: rts
.83e8						xt_value:
.83e8						xt_constant:
.83e8		20 2e d8	jsr $d82e	                jsr underflow_1
.83eb		20 40 84	jsr $8440	                jsr xt_create
.83ee		38		sec		                sec
.83ef		a5 00		lda $00		                lda cp
.83f1		e9 02		sbc #$02	                sbc #2
.83f3		85 25		sta $25		                sta tmp1
.83f5		a5 01		lda $01		                lda cp+1
.83f7		e9 00		sbc #$00	                sbc #0
.83f9		85 26		sta $26		                sta tmp1+1
.83fb		a9 96		lda #$96	                lda #<doconst           ; LSB of DOCONST
.83fd		92 25		sta ($25)	                sta (tmp1)
.83ff		a0 01		ldy #$01	                ldy #1
.8401		a9 d6		lda #$d6	                lda #>doconst           ; MSB of DOCONST
.8403		91 25		sta ($25),y	                sta (tmp1),y
.8405		20 cd 83	jsr $83cd	                jsr xt_comma            ; drop through to adjust_z
.8408						adjust_z:
.8408		20 30 9c	jsr $9c30	                jsr xt_latestnt         ; gives us ( -- nt )
.840b		b5 00		lda $00,x	                lda 0,x
.840d		85 25		sta $25		                sta tmp1
.840f		b5 01		lda $01,x	                lda 1,x
.8411		85 26		sta $26		                sta tmp1+1
.8413		a0 06		ldy #$06	                ldy #6
.8415		b1 25		lda ($25),y	                lda (tmp1),y
.8417		18		clc		                clc
.8418		69 02		adc #$02	                adc #2
.841a		91 25		sta ($25),y	                sta (tmp1),y
.841c		c8		iny		                iny
.841d		b1 25		lda ($25),y	                lda (tmp1),y
.841f		69 00		adc #$00	                adc #0                  ; only need carry
.8421		91 25		sta ($25),y	                sta (tmp1),y
.8423		e8		inx		                inx
.8424		e8		inx		                inx
.8425						z_value:
.8425		60		rts		z_constant:     rts
.8426						xt_count:
.8426		20 2e d8	jsr $d82e	                jsr underflow_1
.8429		a1 00		lda ($00,x)	                lda (0,x)       ; Get number of characters (255 max)
.842b		a8		tay		                tay
.842c		f6 00		inc $00,x	                inc 0,x         ; LSB
.842e		d0 02		bne $8432	                bne +
.8430		f6 01		inc $01,x	                inc 1,x         ; MSB
.8432		98		tya		+               tya
.8433		ca		dex		                dex
.8434		ca		dex		                dex
.8435		95 00		sta $00,x	                sta 0,x         ; LSB
.8437		74 01		stz $01,x	                stz 1,x         ; MSB, always zero
.8439		60		rts		z_count:        rts
.843a						xt_cr:
.843a		a9 0a		lda #$0a	                lda #AscLF
.843c		20 c5 86	jsr $86c5	                jsr emit_a
.843f		60		rts		z_cr:           rts
.8440						xt_create:
.8440		20 5d 8d	jsr $8d5d	                jsr xt_parse_name       ; ( addr u )
.8443		b5 00		lda $00,x	                lda 0,x
.8445		15 01		ora $01,x	                ora 1,x
.8447		d0 05		bne $844e	                bne _got_name
.8449		a9 05		lda #$05	                lda #err_noname
.844b		4c 44 d8	jmp $d844	                jmp error
.844e						_got_name:
.844e		74 01		stz $01,x	                stz 1,x
.8450		20 b1 93	jsr $93b1	                jsr xt_two_dup          ; ( addr u addr u )
.8453		20 fc 9a	jsr $9afc	                jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
.8456		b5 00		lda $00,x	                lda 0,x
.8458		15 01		ora $01,x	                ora 1,x
.845a		f0 1e		beq $847a	                beq _new_name           ; We haven't seen this one before.
.845c		e8		inx		                inx                     ; Drop flag (nt) from find-name.
.845d		e8		inx		                inx
.845e		24 1c		bit $1c		                bit status
.8460		10 08		bpl $846a	                bpl _redefined_name     ; Bit 7 is zero, so print the message.
.8462		a9 80		lda #$80	                lda #$80                ; Set bit 7 to indicate dup
.8464		05 1c		ora $1c		                ora status
.8466		85 1c		sta $1c		                sta status
.8468		80 18		bra $8482	                bra _process_name
.846a						_redefined_name:
.846a		a9 02		lda #$02	                lda #str_redefined
.846c		20 6a d8	jsr $d86a	                jsr print_string_no_lf
.846f		20 b1 93	jsr $93b1	                jsr xt_two_dup           ; ( addr u addr u )
.8472		20 bb 94	jsr $94bb	                jsr xt_type
.8475		20 d1 91	jsr $91d1	                jsr xt_space
.8478		80 08		bra $8482	                bra _process_name
.847a						_new_name:
.847a		e8		inx		                inx                     ; Drop flag (0) from find-name.
.847b		e8		inx		                inx
.847c		a9 7f		lda #$7f	                lda #$7F                ; Clear bit 0 of status to indicate new word.
.847e		25 1c		and $1c		                and status
.8480		85 1c		sta $1c		                sta status
.8482						_process_name:
.8482		b5 00		lda $00,x	                lda 0,x
.8484		85 27		sta $27		                sta tmp2                ; store length of string in tmp2
.8486		a5 00		lda $00		                lda cp
.8488		85 25		sta $25		                sta tmp1
.848a		a5 01		lda $01		                lda cp+1
.848c		85 26		sta $26		                sta tmp1+1
.848e		b5 00		lda $00,x	                lda 0,x
.8490		18		clc		                clc
.8491		69 08		adc #$08	                adc #8
.8493		85 29		sta $29		                sta tmp3                ; total header length
.8495		95 00		sta $00,x	                sta 0,x
.8497		74 01		stz $01,x	                stz 1,x         ; max header size is 255 chars
.8499		20 27 82	jsr $8227	                jsr xt_allot    ; ( addr )
.849c		20 85 d7	jsr $d785	                jsr current_to_dp
.849f		a0 00		ldy #$00	                ldy #0
.84a1		a5 27		lda $27		                lda tmp2
.84a3		91 25		sta ($25),y	                sta (tmp1),y
.84a5		a9 08		lda #$08	                lda #NN
.84a7		09 20		ora #$20	                ora #HC
.84a9		c8		iny		                iny
.84aa		91 25		sta ($25),y	                sta (tmp1),y
.84ac		c8		iny		                iny
.84ad		a5 02		lda $02		                lda dp
.84af		91 25		sta ($25),y	                sta (tmp1),y
.84b1		c8		iny		                iny
.84b2		a5 03		lda $03		                lda dp+1
.84b4		91 25		sta ($25),y	                sta (tmp1),y
.84b6		c8		iny		                iny
.84b7		a5 26		lda $26		                lda tmp1+1
.84b9		85 03		sta $03		                sta dp+1
.84bb		a5 25		lda $25		                lda tmp1
.84bd		85 02		sta $02		                sta dp
.84bf		18		clc		                clc
.84c0		65 29		adc $29		                adc tmp3        ; add total header length
.84c2		91 25		sta ($25),y	                sta (tmp1),y
.84c4		48		pha		                pha             ; we need this in the next step
.84c5		c8		iny		                iny
.84c6		a5 26		lda $26		                lda tmp1+1
.84c8		69 00		adc #$00	                adc #0          ; only need the carry
.84ca		91 25		sta ($25),y	                sta (tmp1),y
.84cc		c8		iny		                iny
.84cd		68		pla		                pla             ; LSB of "z_" address
.84ce		18		clc		                clc
.84cf		69 03		adc #$03	                adc #3
.84d1		91 25		sta ($25),y	                sta (tmp1),y
.84d3		88		dey		                dey             ; get the MSB of xt back
.84d4		b1 25		lda ($25),y	                lda (tmp1),y
.84d6		69 00		adc #$00	                adc #0          ; only need the carry
.84d8		c8		iny		                iny
.84d9		c8		iny		                iny
.84da		91 25		sta ($25),y	                sta (tmp1),y
.84dc		c8		iny		                iny
.84dd		b5 00		lda $00,x	                lda 0,x
.84df		38		sec		                sec
.84e0		e9 08		sbc #$08	                sbc #8
.84e2		85 23		sta $23		                sta tmptos
.84e4		b5 01		lda $01,x	                lda 1,x
.84e6		e9 00		sbc #$00	                sbc #0          ; only need carry
.84e8		85 24		sta $24		                sta tmptos+1
.84ea						_name_loop:
.84ea		b1 23		lda ($23),y	                lda (tmptos),y
.84ec		c9 5b		cmp #$5b	                cmp #'Z'+1
.84ee		b0 06		bcs $84f6	                bcs _store_name
.84f0		c9 41		cmp #$41	                cmp #'A'
.84f2		90 02		bcc $84f6	                bcc _store_name
.84f4		09 20		ora #$20	                ora #$20
.84f6						_store_name:
.84f6		91 25		sta ($25),y	                sta (tmp1),y
.84f8		c8		iny		                iny
.84f9		c6 27		dec $27		                dec tmp2
.84fb		d0 ed		bne $84ea	                bne _name_loop
.84fd		a0 d6		ldy #$d6	                ldy #>dovar
.84ff		a9 dc		lda #$dc	                lda #<dovar
.8501		20 86 97	jsr $9786	                jsr cmpl_subroutine
.8504		20 98 d7	jsr $d798	                jsr dp_to_current
.8507		e8		inx		                inx
.8508		e8		inx		                inx
.8509		60		rts		z_create:       rts
.850a						xt_decimal:
.850a		a9 0a		lda #$0a	                lda #10
.850c		85 18		sta $18		                sta base
.850e		64 19		stz $19		                stz base+1              ; paranoid
.8510		60		rts		z_decimal:      rts
.8511						xt_defer:
.8511		20 40 84	jsr $8440	                jsr xt_create
.8514		a5 00		lda $00		                lda cp          ; LSB
.8516		38		sec		                sec
.8517		e9 02		sbc #$02	                sbc #2
.8519		85 25		sta $25		                sta tmp1
.851b		a5 01		lda $01		                lda cp+1        ; MSB
.851d		e9 00		sbc #$00	                sbc #0          ; we only care about the borrow
.851f		85 26		sta $26		                sta tmp1+1
.8521		a0 00		ldy #$00	                ldy #0
.8523		a9 aa		lda #$aa	                lda #<dodefer   ; LSB
.8525		91 25		sta ($25),y	                sta (tmp1),y
.8527		c8		iny		                iny
.8528		a9 d6		lda #$d6	                lda #>dodefer   ; MSB
.852a		91 25		sta ($25),y	                sta (tmp1),y
.852c		a9 be		lda #$be	                lda #<defer_error
.852e		92 00		sta ($00)	                sta (cp)
.8530		e6 00		inc $00		                inc cp
.8532		d0 02		bne $8536	                bne +
.8534		e6 01		inc $01		                inc cp+1
.8536						+
.8536		a9 d6		lda #$d6	                lda #>defer_error
.8538		92 00		sta ($00)	                sta (cp)
.853a		e6 00		inc $00		                inc cp
.853c		d0 02		bne $8540	                bne +
.853e		e6 01		inc $01		                inc cp+1
.8540						+
.8540		20 08 84	jsr $8408	                jsr adjust_z    ; adjust header to correct length
.8543		60		rts		z_defer:        rts
.8544						xt_defer_fetch:
.8544		20 a4 92	jsr $92a4	                jsr xt_to_body
.8547		20 1a 88	jsr $881a	                jsr xt_fetch
.854a		60		rts		z_defer_fetch:  rts
.854b						xt_defer_store:
.854b		20 a4 92	jsr $92a4	                jsr xt_to_body
.854e		20 1e 92	jsr $921e	                jsr xt_store
.8551		60		rts		z_defer_store:  rts
.8552						xt_depth:
.8552		a9 78		lda #$78	                lda #dsp0
.8554		86 1e		stx $1e		                stx tmpdsp
.8556		38		sec		                sec
.8557		e5 1e		sbc $1e		                sbc tmpdsp
.8559		4a		lsr a		                lsr
.855a		ca		dex		                dex
.855b		ca		dex		                dex
.855c		95 00		sta $00,x	                sta 0,x
.855e		74 01		stz $01,x	                stz 1,x
.8560		60		rts		z_depth:        rts
.8561						xt_question_do:
.8561		ca		dex		                dex
.8562		ca		dex		                dex
.8563		a9 a4		lda #$a4	                lda #<question_do_runtime
.8565		95 00		sta $00,x	                sta 0,x
.8567		a9 85		lda #$85	                lda #>question_do_runtime
.8569		95 01		sta $01,x	                sta 1,x
.856b		20 a0 86	jsr $86a0	                jsr xt_dup              ; xt and xt' are the same
.856e		ca		dex		                dex
.856f		ca		dex		                dex
.8570		a9 10		lda #$10	                lda #question_do_runtime_size
.8572		95 00		sta $00,x	                sta 0,x
.8574		74 01		stz $01,x	                stz 1,x
.8576		20 11 97	jsr $9711	                jsr cmpl_by_limit
.8579		90 0b		bcc $8586	                bcc _native
.857b		20 1b 89	jsr $891b	                jsr xt_here
.857e		20 08 9e	jsr $9e08	                jsr xt_zero
.8581		20 cd 83	jsr $83cd	                jsr xt_comma
.8584		80 08		bra $858e	                bra do_common
.8586						_native:
.8586		20 a7 97	jsr $97a7	                jsr cmpl_jump_later
.8589		80 03		bra $858e	                bra do_common
.858b						xt_do:
.858b		20 08 9e	jsr $9e08	                jsr xt_zero             ; push 0 TOS
.858e						do_common:
.858e		ca		dex		                dex
.858f		ca		dex		                dex
.8590		a5 21		lda $21		                lda loopleave
.8592		95 00		sta $00,x	                sta 0,x
.8594		a5 22		lda $22		                lda loopleave+1
.8596		95 01		sta $01,x	                sta 1,x
.8598		64 22		stz $22		                stz loopleave+1
.859a		a0 85		ldy #$85	                ldy #>do_runtime
.859c		a9 bc		lda #$bc	                lda #<do_runtime
.859e		20 86 97	jsr $9786	                jsr cmpl_subroutine
.85a1		4c 1b 89	jmp $891b	                jmp xt_here
.85a4						z_question_do:
.85a4						z_do:
.85a4						question_do_runtime:
.85a4		b5 00		lda $00,x	                lda 0,x
.85a6		d5 02		cmp $02,x	                cmp 2,x
.85a8		d0 0d		bne $85b7	                bne _begin
.85aa		b5 01		lda $01,x	                lda 1,x
.85ac		d5 03		cmp $03,x	                cmp 3,x
.85ae		d0 07		bne $85b7	                bne _begin
.85b0		e8		inx		                inx                     ; drop loop limits and skip
.85b1		e8		inx		                inx
.85b2		e8		inx		                inx
.85b3		e8		inx		                inx
=16						question_do_runtime_size = * - question_do_runtime
.85b4		a9 00		lda #$00	                lda #0
>85b6		2c				                .byte $2c               ; BIT llhh to hide the lda #1
.85b7		a9 01		lda #$01	_begin:         lda #1
.85b9		4c 40 98	jmp $9840	                jmp zbranch_runtime
.85bc						do_runtime:
.85bc		a4 1f		ldy $1f		                ldy loopctrl
.85be		30 05		bmi $85c5	                bmi +                   ; is this the first LCB?
.85c0		a5 20		lda $20		                lda loopidx0            ; no, write cached LSB
.85c2		99 00 01	sta $0100,y	                sta loopindex,y         ; back to loopindex in the LCB
.85c5						+
.85c5		c8		iny		                iny                     ; Reserve 4 bytes for next LCB
.85c6		c8		iny		                iny
.85c7		c8		iny		                iny
.85c8		c8		iny		                iny
.85c9		84 1f		sty $1f		                sty loopctrl            ; Udpate LCB stack pointer
.85cb		38		sec		                sec
.85cc		a9 00		lda #$00	                lda #0
.85ce		f5 02		sbc $02,x	                sbc 2,x             ; LSB of limit
.85d0		99 02 01	sta $0102,y	                sta loopfufa,y      ; write to loop control block
.85d3		a9 80		lda #$80	                lda #$80
.85d5		f5 03		sbc $03,x	                sbc 3,x             ; MSB of limit
.85d7		99 03 01	sta $0103,y	                sta loopfufa+1,y
.85da		18		clc		                clc
.85db		b5 00		lda $00,x	                lda 0,x             ; LSB of original index
.85dd		79 02 01	adc $0102,y	                adc loopfufa,y
.85e0		85 20		sta $20		                sta loopidx0        ; write LSB to cache not LCB
.85e2		b5 01		lda $01,x	                lda 1,x             ; MSB of orginal index
.85e4		79 03 01	adc $0103,y	                adc loopfufa+1,y
.85e7		99 01 01	sta $0101,y	                sta loopindex+1,y
.85ea		e8		inx		                inx                 ; clean up the stack
.85eb		e8		inx		                inx
.85ec		e8		inx		                inx
.85ed		e8		inx		                inx
.85ee		60		rts		                rts
.85ef						xt_does:
.85ef		a0 85		ldy #$85	                ldy #>does_runtime
.85f1		a9 fe		lda #$fe	                lda #<does_runtime
.85f3		20 86 97	jsr $9786	                jsr cmpl_subroutine
.85f6		a0 d6		ldy #$d6	                ldy #>dodoes
.85f8		a9 c3		lda #$c3	                lda #<dodoes
.85fa		20 86 97	jsr $9786	                jsr cmpl_subroutine
.85fd		60		rts		z_does:         rts
.85fe						does_runtime:
.85fe		7a		ply		                ply             ; LSB
.85ff		68		pla		                pla             ; MSB
.8600		c8		iny		                iny
.8601		d0 01		bne $8604	                bne +
.8603		1a		inc a		                ina
.8604						+
.8604		84 25		sty $25		                sty tmp1
.8606		85 26		sta $26		                sta tmp1+1
.8608		20 85 d7	jsr $d785	                jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
.860b		a5 02		lda $02		                lda dp
.860d		18		clc		                clc
.860e		69 04		adc #$04	                adc #4
.8610		85 27		sta $27		                sta tmp2
.8612		a5 03		lda $03		                lda dp+1
.8614		69 00		adc #$00	                adc #0          ; we only care about the carry
.8616		85 28		sta $28		                sta tmp2+1
.8618		b2 27		lda ($27)	                lda (tmp2)
.861a		18		clc		                clc
.861b		69 01		adc #$01	                adc #1
.861d		85 29		sta $29		                sta tmp3
.861f		a0 01		ldy #$01	                ldy #1
.8621		b1 27		lda ($27),y	                lda (tmp2),y
.8623		69 00		adc #$00	                adc #0          ; we only care about the carry
.8625		85 2a		sta $2a		                sta tmp3+1
.8627		a5 25		lda $25		                lda tmp1        ; LSB
.8629		92 29		sta ($29)	                sta (tmp3)
.862b		a5 26		lda $26		                lda tmp1+1
.862d		91 29		sta ($29),y	                sta (tmp3),y    ; Y is still 1
.862f		60		rts		                rts
.8630						xt_dot:
.8630		20 2e d8	jsr $d82e	                jsr underflow_1
.8633		20 a0 86	jsr $86a0	                jsr xt_dup                      ; ( n n )
.8636		20 cf 80	jsr $80cf	                jsr xt_abs                      ; ( n u )
.8639		20 08 9e	jsr $9e08	                jsr xt_zero                     ; ( n u 0 )
.863c		20 e1 89	jsr $89e1	                jsr xt_less_number_sign         ; ( n u 0 )
.863f		20 bf 8c	jsr $8cbf	                jsr xt_number_sign_s            ; ( n ud )
.8642		20 97 8f	jsr $8f97	                jsr xt_rot                      ; ( ud n )
.8645		20 56 91	jsr $9156	                jsr xt_sign                     ; ( ud )
.8648		20 9d 8c	jsr $8c9d	                jsr xt_number_sign_greater      ; ( addr u )
.864b		20 bb 94	jsr $94bb	                jsr xt_type
.864e		20 d1 91	jsr $91d1	                jsr xt_space
.8651		60		rts		z_dot:          rts
.8652						xt_dot_paren:
.8652		ca		dex		                dex
.8653		ca		dex		                dex
.8654		a9 29		lda #$29	                lda #41     ; Right parenthesis
.8656		95 00		sta $00,x	                sta 0,x
.8658		74 01		stz $01,x	                stz 1,x
.865a		20 b8 8d	jsr $8db8	                jsr xt_parse
.865d		20 bb 94	jsr $94bb	                jsr xt_type
.8660		60		rts		z_dot_paren:    rts
.8661						xt_dot_quote:
.8661		20 e0 8f	jsr $8fe0	                jsr xt_s_quote
.8664		a0 94		ldy #$94	                ldy #>xt_type
.8666		a9 bb		lda #$bb	                lda #<xt_type
.8668		20 86 97	jsr $9786	                jsr cmpl_subroutine
.866b		60		rts		z_dot_quote:    rts
.866c						xt_dot_r:
.866c		20 33 d8	jsr $d833	                jsr underflow_2
.866f		20 72 93	jsr $9372	                jsr xt_to_r
.8672		20 a0 86	jsr $86a0	                jsr xt_dup
.8675		20 cf 80	jsr $80cf	                jsr xt_abs
.8678		20 08 9e	jsr $9e08	                jsr xt_zero
.867b		20 e1 89	jsr $89e1	                jsr xt_less_number_sign
.867e		20 bf 8c	jsr $8cbf	                jsr xt_number_sign_s
.8681		20 97 8f	jsr $8f97	                jsr xt_rot
.8684		20 56 91	jsr $9156	                jsr xt_sign
.8687		20 9d 8c	jsr $8c9d	                jsr xt_number_sign_greater
.868a		20 fa 8e	jsr $8efa	                jsr xt_r_from
.868d		20 11 8d	jsr $8d11	                jsr xt_over
.8690		20 f6 8b	jsr $8bf6	                jsr xt_minus
.8693		20 d7 91	jsr $91d7	                jsr xt_spaces
.8696		20 bb 94	jsr $94bb	                jsr xt_type
.8699		60		rts		z_dot_r:        rts
.869a						xt_drop:
.869a		20 2e d8	jsr $d82e	                jsr underflow_1
.869d		e8		inx		                inx
.869e		e8		inx		                inx
.869f		60		rts		z_drop:         rts
.86a0						xt_dup:
.86a0		20 2e d8	jsr $d82e	                jsr underflow_1
.86a3		ca		dex		                dex
.86a4		ca		dex		                dex
.86a5		b5 02		lda $02,x	                lda 2,x         ; LSB
.86a7		95 00		sta $00,x	                sta 0,x
.86a9		b5 03		lda $03,x	                lda 3,x         ; MSB
.86ab		95 01		sta $01,x	                sta 1,x
.86ad		60		rts		z_dup:          rts
.86ae						xt_else:
.86ae						xt_endof:
.86ae		20 a7 97	jsr $97a7	                jsr cmpl_jump_later
.86b1		20 34 92	jsr $9234	                jsr xt_swap         ; ( target orig )
.86b4						xt_then:
.86b4		20 1b 89	jsr $891b	                jsr xt_here
.86b7		20 34 92	jsr $9234	                jsr xt_swap
.86ba		20 1e 92	jsr $921e	                jsr xt_store
.86bd						z_else:
.86bd						z_endof:
.86bd		60		rts		z_then:         rts
.86be						xt_emit:
.86be		20 2e d8	jsr $d82e	                jsr underflow_1
.86c1		b5 00		lda $00,x	                lda 0,x
.86c3		e8		inx		                inx
.86c4		e8		inx		                inx
.86c5						emit_a:
.86c5		6c 12 00	jmp ($0012)	                jmp (output)            ; JSR/RTS
.86c8						z_emit:
.86c8						xt_endcase:
.86c8		a0 86		ldy #$86	                ldy #>xt_drop
.86ca		a9 9a		lda #$9a	                lda #<xt_drop
.86cc		20 86 97	jsr $9786	                jsr cmpl_subroutine
.86cf						_endcase_loop:
.86cf		b5 00		lda $00,x	                lda 0,x
.86d1		15 01		ora $01,x	                ora 1,x
.86d3		f0 05		beq $86da	                beq _done
.86d5		20 b4 86	jsr $86b4	                jsr xt_then
.86d8		80 f5		bra $86cf	                bra _endcase_loop
.86da						_done:
.86da		e8		inx		                inx
.86db		e8		inx		                inx
.86dc		60		rts		z_endcase:      rts
.86dd						xt_environment_q:
.86dd		20 2e d8	jsr $d82e	                jsr underflow_1
.86e0		a0 00		ldy #$00	                ldy #00                 ; counter for table
.86e2		5a		phy		                phy
.86e3						_table_loop:
.86e3		20 b1 93	jsr $93b1	                jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
.86e6		ca		dex		                dex
.86e7		ca		dex		                dex                     ; ( addr u addr u ? )
.86e8		b9 5a 87	lda $875a,y	                lda env_table_single,y
.86eb		95 00		sta $00,x	                sta 0,x
.86ed		c8		iny		                iny
.86ee		b9 5a 87	lda $875a,y	                lda env_table_single,y
.86f1		95 01		sta $01,x	                sta 1,x                 ; ( addr u addr u addr-t )
.86f3		c8		iny		                iny
.86f4		15 00		ora $00,x	                ora 0,x
.86f6		f0 4d		beq $8745	                beq _table_done
.86f8		5a		phy		                phy                     ; save Y, which is used by COUNT
.86f9		20 26 84	jsr $8426	                jsr xt_count            ; ( addr u addr u addr-s u-s )
.86fc		20 36 a0	jsr $a036	                jsr xt_compare          ; ( addr u f )
.86ff		7a		ply		                ply
.8700		b5 00		lda $00,x	                lda 0,x
.8702		15 01		ora $01,x	                ora 1,x
.8704		f0 04		beq $870a	                beq _got_result
.8706		e8		inx		                inx                     ; DROP, now ( addr u )
.8707		e8		inx		                inx
.8708		80 d9		bra $86e3	                bra _table_loop
.870a						_got_result:
.870a		e8		inx		                inx                     ; drop flag, now ( addr u )
.870b		e8		inx		                inx
.870c		88		dey		                dey                     ; go back to index we had
.870d		88		dey		                dey
.870e		68		pla		                pla
.870f		d0 0d		bne $871e	                bne _double_result
.8711		b9 78 87	lda $8778,y	                lda env_results_single,y
.8714		95 02		sta $02,x	                sta 2,x
.8716		c8		iny		                iny
.8717		b9 78 87	lda $8778,y	                lda env_results_single,y
.871a		95 03		sta $03,x	                sta 3,x                 ; ( res u )
.871c		80 1f		bra $873d	                bra _set_flag
.871e						_double_result:
.871e		ca		dex		                dex                     ; ( addr u ? )
.871f		ca		dex		                dex
.8720		98		tya		                tya
.8721		38		sec		                sec
.8722		e9 18		sbc #$18	                sbc #24
.8724		0a		asl a		                asl
.8725		a8		tay		                tay
.8726		b9 8e 87	lda $878e,y	                lda env_results_double,y
.8729		95 02		sta $02,x	                sta 2,x
.872b		c8		iny		                iny
.872c		b9 8e 87	lda $878e,y	                lda env_results_double,y
.872f		95 03		sta $03,x	                sta 3,x                 ; ( res u ? )
.8731		c8		iny		                iny
.8732		b9 8e 87	lda $878e,y	                lda env_results_double,y
.8735		95 04		sta $04,x	                sta 4,x
.8737		c8		iny		                iny
.8738		b9 8e 87	lda $878e,y	                lda env_results_double,y
.873b		95 05		sta $05,x	                sta 5,x                 ; ( res res ? )
.873d						_set_flag:
.873d		a9 ff		lda #$ff	                lda #$FF
.873f		95 00		sta $00,x	                sta 0,x
.8741		95 01		sta $01,x	                sta 1,x                 ; ( res f )
.8743		80 14		bra $8759	                bra _done
.8745						_table_done:
.8745		68		pla		                pla
.8746		d0 09		bne $8751	                bne _no_match
.8748		1a		inc a		                ina
.8749		48		pha		                pha
.874a		8a		txa		                txa
.874b		18		clc		                clc
.874c		69 06		adc #$06	                adc #6                  ; skip six bytes
.874e		aa		tax		                tax                     ; ( addr u )
.874f		80 92		bra $86e3	                bra _table_loop
.8751						_no_match:
.8751		8a		txa		                txa
.8752		18		clc		                clc
.8753		69 0a		adc #$0a	                adc #10
.8755		aa		tax		                tax                     ; ( addr ) - not ( 0 ) !
.8756		20 08 9e	jsr $9e08	                jsr xt_false
.8759						_done:
.8759						z_environment_q:
.8759		60		rts		                rts
.875a						env_table_single:
>875a		16 d6 26 d6 2c d6 31 d6		        .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
>8762		43 d6
>8764		4b d6 54 d6 5a d6 60 d6		        .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
>876c		73 d6 7f d6 00 00		        .word envs_sc, envs_wl, 0000
.8772						env_table_double:
>8772		89 d6 8f d6 00 00		        .word envs_max_d, envs_max_ud, 0000
.8778						env_results_single:
>8778		ff 00				        .word $00FF     ; /COUNTED-STRING
>877a		ff 00				        .word $00FF     ; /HOLD
>877c		54 00				        .word $0054     ; /PAD (this is 84 decimal)
>877e		08 00				        .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
>8780		00 00				        .word 0000      ; FLOORED ("FALSE", we have symmetric)
>8782		ff 00				        .word $00FF     ; MAX-CHAR
>8784		ff 7f				        .word $7FFF     ; MAX-N
>8786		ff ff				        .word $FFFF     ; MAX-U
>8788		80 00				        .word $0080     ; RETURN-STACK-CELLS
>878a		20 00				        .word $0020     ; STACK-CELLS (from definitions.asm)
>878c		09 00				        .word $0009     ; WORDLISTS
.878e						env_results_double:
>878e		ff 7f ff ff			        .word $7FFF, $FFFF      ; MAX-D
>8792		ff ff ff ff			        .word $FFFF, $FFFF      ; MAX-UD
.8796						xt_equal:
.8796		20 33 d8	jsr $d833	                jsr underflow_2
.8799		b5 00		lda $00,x	                lda 0,x                 ; LSB
.879b		d5 02		cmp $02,x	                cmp 2,x
.879d		d0 0a		bne $87a9	                bne _false
.879f		b5 01		lda $01,x	                lda 1,x                 ; MSB
.87a1		d5 03		cmp $03,x	                cmp 3,x
.87a3		d0 04		bne $87a9	                bne _false
.87a5		a9 ff		lda #$ff	                lda #$FF
.87a7		80 02		bra $87ab	                bra _done
.87a9		a9 00		lda #$00	_false:         lda #0                  ; drop thru to done
.87ab		95 02		sta $02,x	_done:          sta 2,x
.87ad		95 03		sta $03,x	                sta 3,x
.87af		e8		inx		                inx
.87b0		e8		inx		                inx
.87b1		60		rts		z_equal:        rts
.87b2						xt_blank:
.87b2		ca		dex		                dex
.87b3		ca		dex		                dex
.87b4		a9 20		lda #$20	                lda #AscSP
.87b6		95 00		sta $00,x	                sta 0,x
.87b8		74 01		stz $01,x	                stz 1,x
.87ba		80 06		bra $87c2	                bra xt_fill     ; skip over code for ERASE
.87bc						xt_erase:
.87bc		ca		dex		                dex
.87bd		ca		dex		                dex
.87be		74 00		stz $00,x	                stz 0,x
.87c0		74 01		stz $01,x	                stz 1,x
.87c2						xt_fill:
.87c2		20 38 d8	jsr $d838	                jsr underflow_3
.87c5		b5 04		lda $04,x	                lda 4,x         ; LSB
.87c7		85 25		sta $25		                sta tmp1
.87c9		b5 05		lda $05,x	                lda 5,x
.87cb		85 26		sta $26		                sta tmp1+1
.87cd		b5 02		lda $02,x	                lda 2,x
.87cf		85 27		sta $27		                sta tmp2
.87d1		b5 03		lda $03,x	                lda 3,x
.87d3		85 28		sta $28		                sta tmp2+1
.87d5		b5 00		lda $00,x	                lda 0,x
.87d7		a8		tay		                tay
.87d8						_loop:
.87d8		a9 7f		lda #$7f	                lda #>ram_end           ; MSB
.87da		c5 26		cmp $26		                cmp tmp1+1
.87dc		90 21		bcc $87ff	                bcc _done               ; RAM_END < TMP1, so leave
.87de		d0 06		bne $87e6	                bne _check_counter      ; RAM_END is not smaller and not equal
.87e0		a9 ff		lda #$ff	                lda #<ram_end           ; LSB, because MSBs were equal
.87e2		c5 25		cmp $25		                cmp tmp1
.87e4		90 19		bcc $87ff	                bcc _done               ; RAM_END < TMP1, so leave
.87e6						_check_counter:
.87e6		a5 27		lda $27		                lda tmp2
.87e8		05 28		ora $28		                ora tmp2+1
.87ea		f0 13		beq $87ff	                beq _done
.87ec		98		tya		                tya
.87ed		92 25		sta ($25)	                sta (tmp1)
.87ef		a5 27		lda $27		                lda tmp2
.87f1		d0 02		bne $87f5	                bne +
.87f3		c6 28		dec $28		                dec tmp2+1
.87f5		c6 27		dec $27		+               dec tmp2
.87f7		e6 25		inc $25		                inc tmp1
.87f9		d0 dd		bne $87d8	                bne _loop
.87fb		e6 26		inc $26		                inc tmp1+1
.87fd		80 d9		bra $87d8	                bra _loop
.87ff						_done:
.87ff		8a		txa		                txa
.8800		18		clc		                clc
.8801		69 06		adc #$06	                adc #6
.8803		aa		tax		                tax
.8804						z_blank:
.8804						z_erase:
.8804		60		rts		z_fill:         rts
.8805						xt_execute:
.8805		20 2e d8	jsr $d82e	                jsr underflow_1
.8808		20 0c 88	jsr $880c	                jsr doexecute   ; do not combine to JMP (native coding)
.880b		60		rts		z_execute:      rts
.880c						doexecute:
.880c		b5 00		lda $00,x	                lda 0,x
.880e		85 04		sta $04		                sta ip
.8810		b5 01		lda $01,x	                lda 1,x
.8812		85 05		sta $05		                sta ip+1
.8814		e8		inx		                inx
.8815		e8		inx		                inx
.8816		6c 04 00	jmp ($0004)	                jmp (ip)
.8819						xt_exit:
.8819		60		rts		                rts             ; keep before z_exit
.881a						z_exit:
.881a						xt_fetch:
.881a		20 2e d8	jsr $d82e	                jsr underflow_1
.881d		a1 00		lda ($00,x)	                lda (0,x)               ; LSB
.881f		a8		tay		                tay
.8820		f6 00		inc $00,x	                inc 0,x
.8822		d0 02		bne $8826	                bne +
.8824		f6 01		inc $01,x	                inc 1,x
.8826						+
.8826		a1 00		lda ($00,x)	                lda (0,x)               ; MSB
.8828		95 01		sta $01,x	                sta 1,x
.882a		94 00		sty $00,x	                sty 0,x
.882c		60		rts		z_fetch:        rts
.882d						xt_find:
.882d		20 2e d8	jsr $d82e	                jsr underflow_1
.8830		b5 01		lda $01,x	                lda 1,x                 ; MSB
.8832		48		pha		                pha
.8833		b5 00		lda $00,x	                lda 0,x                 ; LSB
.8835		48		pha		                pha
.8836		20 26 84	jsr $8426	                jsr xt_count            ; ( caddr -- addr u )
.8839		20 fc 9a	jsr $9afc	                jsr xt_find_name        ; ( addr u -- nt | 0 )
.883c		b5 00		lda $00,x	                lda 0,x
.883e		15 01		ora $01,x	                ora 1,x
.8840		d0 0b		bne $884d	                bne _found_word
.8842		20 08 9e	jsr $9e08	                jsr xt_false            ; ( 0 0 )
.8845		68		pla		                pla                     ; LSB of address
.8846		95 02		sta $02,x	                sta 2,x
.8848		68		pla		                pla
.8849		95 03		sta $03,x	                sta 3,x                 ; MSB of address
.884b		80 27		bra $8874	                bra _done               ; ( addr 0 )
.884d						_found_word:
.884d		68		pla		                pla
.884e		68		pla		                pla
.884f		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( nt nt )
.8852		20 45 9c	jsr $9c45	                jsr xt_name_to_int      ; ( nt xt )
.8855		20 34 92	jsr $9234	                jsr xt_swap             ; ( xt nt )
.8858		a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.885a		f6 00		inc $00,x	                inc 0,x
.885c		d0 02		bne $8860	                bne +
.885e		f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.8860						+
.8860		a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.8862		29 04		and #$04	                and #IM
.8864		d0 08		bne $886e	                bne _immediate          ; bit set, we're immediate
.8866		a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.8868		95 00		sta $00,x	                sta 0,x
.886a		95 01		sta $01,x	                sta 1,x
.886c		80 06		bra $8874	                bra _done
.886e						_immediate:
.886e		a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.8870		95 00		sta $00,x	                sta 0,x
.8872		74 01		stz $01,x	                stz 1,x
.8874						_done:
.8874		60		rts		z_find:         rts
.8875						xt_fm_slash_mod:
.8875		20 38 d8	jsr $d838	                jsr underflow_3
.8878		64 27		stz $27		                stz tmp2        ; default: n is positive
.887a		b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.887c		10 0e		bpl $888c	                bpl _check_d
.887e		e6 27		inc $27		                inc tmp2        ; set flag to negative for n1
.8880		20 31 8c	jsr $8c31	                jsr xt_negate   ; NEGATE
.8883		20 72 93	jsr $9372	                jsr xt_to_r     ; >R
.8886		20 76 9e	jsr $9e76	                jsr xt_dnegate  ; DNEGATE
.8889		20 fa 8e	jsr $8efa	                jsr xt_r_from   ; R>
.888c						_check_d:
.888c		b5 03		lda $03,x	                lda 3,x         ; MSB of high word of d
.888e		10 0d		bpl $889d	                bpl _multiply
.8890		18		clc		                clc
.8891		b5 00		lda $00,x	                lda 0,x         ; LSB of n1
.8893		75 02		adc $02,x	                adc 2,x         ; LSB of dh
.8895		95 02		sta $02,x	                sta 2,x
.8897		b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.8899		75 03		adc $03,x	                adc 3,x         ; MSB of dh
.889b		95 03		sta $03,x	                sta 3,x
.889d						_multiply:
.889d		20 40 95	jsr $9540	                jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
.88a0		a5 27		lda $27		                lda tmp2
.88a2		f0 07		beq $88ab	                beq _done
.88a4		e8		inx		                inx             ; pretend that we SWAP
.88a5		e8		inx		                inx
.88a6		20 31 8c	jsr $8c31	                jsr xt_negate
.88a9		ca		dex		                dex
.88aa		ca		dex		                dex
.88ab						_done:
.88ab		60		rts		z_fm_slash_mod: rts
.88ac						load_evaluate:
.88ac		a9 ff		lda #$ff	                lda #$FF
.88ae		85 25		sta $25		                sta tmp1
.88b0		80 11		bra $88c3	                bra load_evaluate_start
.88b2						xt_evaluate:
.88b2		20 33 d8	jsr $d833	                jsr underflow_2
.88b5		64 25		stz $25		                stz tmp1
.88b7		b5 00		lda $00,x	                lda 0,x
.88b9		15 01		ora $01,x	                ora 1,x
.88bb		d0 06		bne $88c3	                bne evaluate_got_work
.88bd		e8		inx		                inx
.88be		e8		inx		                inx
.88bf		e8		inx		                inx
.88c0		e8		inx		                inx
.88c1		80 42		bra $8905	                bra evaluate_done
.88c3						load_evaluate_start:
.88c3						evaluate_got_work:
.88c3		a0 05		ldy #$05	                ldy #blk_offset+1
.88c5		b1 08		lda ($08),y	                lda (up),y
.88c7		48		pha		                pha
.88c8		88		dey		                dey
.88c9		b1 08		lda ($08),y	                lda (up),y
.88cb		48		pha		                pha
.88cc		a5 25		lda $25		                lda tmp1
.88ce		d0 05		bne $88d5	                bne _nozero
.88d0		91 08		sta ($08),y	                sta (up),y
.88d2		c8		iny		                iny
.88d3		91 08		sta ($08),y	                sta (up),y
.88d5						_nozero:
.88d5		20 a9 9b	jsr $9ba9	                jsr xt_input_to_r
.88d8		a9 ff		lda #$ff	                lda #$FF
.88da		85 0a		sta $0a		                sta insrc
.88dc		85 0b		sta $0b		                sta insrc+1
.88de		64 10		stz $10		                stz toin
.88e0		64 11		stz $11		                stz toin+1
.88e2		b5 00		lda $00,x	                lda 0,x
.88e4		85 0e		sta $0e		                sta ciblen
.88e6		b5 01		lda $01,x	                lda 1,x
.88e8		85 0f		sta $0f		                sta ciblen+1
.88ea		b5 02		lda $02,x	                lda 2,x
.88ec		85 0c		sta $0c		                sta cib
.88ee		b5 03		lda $03,x	                lda 3,x
.88f0		85 0d		sta $0d		                sta cib+1
.88f2		e8		inx		                inx             ; A clean stack is a clean mind
.88f3		e8		inx		                inx
.88f4		e8		inx		                inx
.88f5		e8		inx		                inx
.88f6		20 ab d7	jsr $d7ab	                jsr interpret   ; ( -- )
.88f9		20 b6 9d	jsr $9db6	                jsr xt_r_to_input
.88fc		a0 04		ldy #$04	                ldy #blk_offset
.88fe		68		pla		                pla
.88ff		91 08		sta ($08),y	                sta (up),y
.8901		c8		iny		                iny
.8902		68		pla		                pla
.8903		91 08		sta ($08),y	                sta (up),y
.8905						evaluate_done:
.8905		60		rts		z_evaluate:     rts
.8906						xt_greater_than:
.8906		20 33 d8	jsr $d833	                jsr underflow_2
.8909		a0 00		ldy #$00	                ldy #0          ; default false
.890b		20 6c d7	jsr $d76c	                jsr compare_16bit
.890e		f0 03		beq $8913	                beq _false
.8910		10 01		bpl $8913	                bpl _false
.8912		88		dey		                dey
.8913						_false:
.8913		98		tya		                tya
.8914		e8		inx		                inx
.8915		e8		inx		                inx
.8916		95 00		sta $00,x	                sta 0,x
.8918		95 01		sta $01,x	                sta 1,x
.891a		60		rts		z_greater_than: rts
.891b						xt_here:
.891b						xt_begin:
.891b						xt_asm_arrow:
.891b		ca		dex		                dex
.891c		ca		dex		                dex
.891d		a5 00		lda $00		                lda cp
.891f		95 00		sta $00,x	                sta 0,x
.8921		a5 01		lda $01		                lda cp+1
.8923		95 01		sta $01,x	                sta 1,x
.8925						z_here:
.8925						z_begin:
.8925						z_asm_arrow:
.8925		60		rts		                rts
.8926						xt_hex:
.8926		a9 10		lda #$10	                lda #16
.8928		85 18		sta $18		                sta base
.892a		64 19		stz $19		                stz base+1              ; paranoid
.892c		60		rts		z_hex:          rts
.892d						xt_hold:
.892d		20 2e d8	jsr $d82e	                jsr underflow_1
.8930		a5 2b		lda $2b		                lda tohold
.8932		d0 02		bne $8936	                bne +
.8934		c6 2c		dec $2c		                dec tohold+1
.8936						+
.8936		c6 2b		dec $2b		                dec tohold
.8938		b5 00		lda $00,x	                lda 0,x
.893a		92 2b		sta ($2b)	                sta (tohold)
.893c		e8		inx		                inx
.893d		e8		inx		                inx
.893e		60		rts		z_hold:         rts
.893f						xt_i:
.893f		ca		dex		                dex
.8940		ca		dex		                dex
.8941		a4 1f		ldy $1f		                ldy loopctrl
.8943		38		sec		                sec
.8944		a5 20		lda $20		                lda loopidx0        ; cached LSB of loopindex
.8946		f9 02 01	sbc $0102,y	                sbc loopfufa,y
.8949		95 00		sta $00,x	                sta 0,x
.894b		b9 01 01	lda $0101,y	                lda loopindex+1,y
.894e		f9 03 01	sbc $0103,y	                sbc loopfufa+1,y
.8951		95 01		sta $01,x	                sta 1,x
.8953		60		rts		z_i:            rts
.8954						xt_if:
.8954		20 c3 97	jsr $97c3	                jsr cmpl_0branch_later
.8957		60		rts		z_if:           rts
.8958						xt_immediate:
.8958		20 85 d7	jsr $d785	                jsr current_to_dp
.895b		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.895d		b1 02		lda ($02),y	                lda (dp),y
.895f		09 04		ora #$04	                ora #IM        ; make sure bit 7 is set
.8961		91 02		sta ($02),y	                sta (dp),y
.8963		60		rts		z_immediate:    rts
.8964						xt_invert:
.8964		20 2e d8	jsr $d82e	                jsr underflow_1
.8967		a9 ff		lda #$ff	                lda #$FF
.8969		55 00		eor $00,x	                eor 0,x         ; LSB
.896b		95 00		sta $00,x	                sta 0,x
.896d		a9 ff		lda #$ff	                lda #$FF
.896f		55 01		eor $01,x	                eor 1,x         ; MSB
.8971		95 01		sta $01,x	                sta 1,x
.8973		60		rts		z_invert:       rts
.8974						xt_is:
.8974		a5 1a		lda $1a		                lda state
.8976		05 1b		ora $1b		                ora state+1
.8978		f0 0c		beq $8986	                beq _interpreting
.897a		20 14 83	jsr $8314	                jsr xt_bracket_tick
.897d		a0 85		ldy #$85	                ldy #>xt_defer_store
.897f		a9 4b		lda #$4b	                lda #<xt_defer_store
.8981		20 86 97	jsr $9786	                jsr cmpl_subroutine
.8984		80 06		bra $898c	                bra _done
.8986						_interpreting:
.8986		20 48 92	jsr $9248	                jsr xt_tick
.8989		20 4b 85	jsr $854b	                jsr xt_defer_store
.898c						_done:
.898c		60		rts		z_is:           rts
.898d						xt_j:
.898d		ca		dex		                dex                 ; make space on the stack
.898e		ca		dex		                dex
.898f		a5 1f		lda $1f		                lda loopctrl
.8991		38		sec		                sec
.8992		e9 04		sbc #$04	                sbc #4
.8994		a8		tay		                tay
.8995		38		sec		                sec
.8996		b9 00 01	lda $0100,y	                lda loopindex,y
.8999		f9 02 01	sbc $0102,y	                sbc loopfufa,y
.899c		95 00		sta $00,x	                sta 0,x
.899e		b9 01 01	lda $0101,y	                lda loopindex+1,y
.89a1		f9 03 01	sbc $0103,y	                sbc loopfufa+1,y
.89a4		95 01		sta $01,x	                sta 1,x
.89a6		60		rts		z_j:            rts
.89a7						xt_key:
.89a7		20 b1 89	jsr $89b1	                jsr key_a               ; returns char in A
.89aa		ca		dex		                dex
.89ab		ca		dex		                dex
.89ac		95 00		sta $00,x	                sta 0,x
.89ae		74 01		stz $01,x	                stz 1,x
.89b0		60		rts		z_key:          rts
.89b1						key_a:
.89b1		6c 14 00	jmp ($0014)	                jmp (input)             ; JSR/RTS
.89b4						xt_keyq:
.89b4		a0 00		ldy #$00	                ldy #0
.89b6		20 c3 89	jsr $89c3	                jsr keyq_a
.89b9		f0 01		beq $89bc	                beq +           ; A=0 => Y=0
.89bb		88		dey		                dey             ; A<>0 => Y=#$ff
.89bc						+
.89bc		ca		dex		                dex
.89bd		ca		dex		                dex
.89be		94 00		sty $00,x	                sty 0,x         ; store either $0000 or $ffff
.89c0		94 01		sty $01,x	                sty 1,x
.89c2		60		rts		z_keyq:         rts
.89c3		6c 16 00	jmp ($0016)	keyq_a:         jmp (havekey)
.89c6						xt_leave:
.89c6		a5 21		lda $21		                lda loopleave
.89c8		a4 22		ldy $22		                ldy loopleave+1
.89ca		20 8b 97	jsr $978b	                jsr cmpl_jump   ; emit the JMP chaining prior leave address
.89cd		38		sec		                sec
.89ce		a5 00		lda $00		                lda cp
.89d0		e9 02		sbc #$02	                sbc #2
.89d2		85 21		sta $21		                sta loopleave
.89d4		a5 01		lda $01		                lda cp+1
.89d6		b0 01		bcs $89d9	                bcs +
.89d8		3a		dec a		                dea
.89d9		85 22		sta $22		+               sta loopleave+1
.89db						z_leave:
.89db		60		rts		                rts
.89dc						xt_left_bracket:
.89dc		64 1a		stz $1a		                stz state
.89de		64 1b		stz $1b		                stz state+1
.89e0		60		rts		z_left_bracket: rts
.89e1						xt_less_number_sign:
.89e1		20 1f 8d	jsr $8d1f	                jsr xt_pad      ; ( addr )
.89e4		b5 00		lda $00,x	                lda 0,x
.89e6		85 2b		sta $2b		                sta tohold
.89e8		b5 01		lda $01,x	                lda 1,x
.89ea		85 2c		sta $2c		                sta tohold+1
.89ec		e8		inx		                inx
.89ed		e8		inx		                inx
.89ee						z_less_number_sign:
.89ee		60		rts		                rts
.89ef						xt_less_than:
.89ef		20 33 d8	jsr $d833	                jsr underflow_2
.89f2		a0 00		ldy #$00	                ldy #0          ; default false
.89f4		20 6c d7	jsr $d76c	                jsr compare_16bit
.89f7		f0 03		beq $89fc	                beq _false
.89f9		30 01		bmi $89fc	                bmi _false
.89fb		88		dey		                dey
.89fc						_false:
.89fc		98		tya		                tya
.89fd		e8		inx		                inx
.89fe		e8		inx		                inx
.89ff		95 00		sta $00,x	                sta 0,x
.8a01		95 01		sta $01,x	                sta 1,x
.8a03		60		rts		z_less_than:    rts
.8a04						xt_literal:
.8a04		20 2e d8	jsr $d82e	                jsr underflow_1
.8a07		a9 0a		lda #$0a	                lda #template_push_tos_size
.8a09		20 b1 97	jsr $97b1	                jsr check_nc_limit
.8a0c		90 0c		bcc $8a1a	                bcc _inline
.8a0e		a0 8a		ldy #$8a	                ldy #>literal_runtime
.8a10		a9 4c		lda #$4c	                lda #<literal_runtime
.8a12		20 86 97	jsr $9786	                jsr cmpl_subroutine
.8a15		20 cd 83	jsr $83cd	                jsr xt_comma
.8a18		80 27		bra $8a41	                bra z_literal
.8a1a						_inline:
.8a1a		a0 94		ldy #$94	                ldy #$94        ; STY opcode
.8a1c		b5 01		lda $01,x	                lda 1,x         ; MSB
.8a1e		d0 02		bne $8a22	                bne +
.8a20		a0 74		ldy #$74	                ldy #$74        ; STZ opcode
.8a22		5a		phy		+               phy
.8a23		b5 00		lda $00,x	                lda 0,x         ; LSB
.8a25		48		pha		                pha
.8a26		a0 02		ldy #$02	                ldy #2
.8a28		b5 01		lda $01,x	                lda 1,x         ; MSB
.8a2a		f0 03		beq $8a2f	                beq _copy
.8a2c		a0 00		ldy #$00	                ldy #0
.8a2e		48		pha		                pha
.8a2f		b9 42 8a	lda $8a42,y	_copy:          lda template_push_tos,y
.8a32		c9 ff		cmp #$ff	                cmp #$ff        ; is it a placeholder?
.8a34		d0 01		bne $8a37	                bne +
.8a36		68		pla		                pla
.8a37		20 96 97	jsr $9796	+               jsr cmpl_a
.8a3a		c8		iny		                iny
.8a3b		c0 0a		cpy #$0a	                cpy #template_push_tos_size
.8a3d		d0 f0		bne $8a2f	                bne _copy
.8a3f		e8		inx		                inx             ; drop the literal
.8a40		e8		inx		                inx
.8a41		60		rts		z_literal:      rts
.8a42						template_push_tos:
.8a42		a0 ff		ldy #$ff	                ldy #$ff        ; we'll omit this if MSB is zero
.8a44		a9 ff		lda #$ff	                lda #$ff
.8a46		ca		dex		                dex
.8a47		ca		dex		                dex
.8a48		95 00		sta $00,x	                sta 0,x
>8a4a		ff 01				                .byte $ff, 1    ; this will become either sty 1,x or stz 1,x
=10						template_push_tos_size = * - template_push_tos
.8a4c						literal_runtime:
.8a4c		ca		dex		                dex
.8a4d		ca		dex		                dex
.8a4e		68		pla		                pla             ; LSB
.8a4f		85 25		sta $25		                sta tmp1
.8a51		68		pla		                pla             ; MSB
.8a52		85 26		sta $26		                sta tmp1+1
.8a54		a0 01		ldy #$01	                ldy #1
.8a56		b1 25		lda ($25),y	                lda (tmp1),y    ; LSB
.8a58		95 00		sta $00,x	                sta 0,x
.8a5a		c8		iny		                iny
.8a5b		b1 25		lda ($25),y	                lda (tmp1),y    ; MSB
.8a5d		95 01		sta $01,x	                sta 1,x
.8a5f		98		tya		                tya
.8a60		18		clc		                clc
.8a61		65 25		adc $25		                adc tmp1
.8a63		a8		tay		                tay
.8a64		a5 26		lda $26		                lda tmp1+1
.8a66		69 00		adc #$00	                adc #0
.8a68		48		pha		                pha
.8a69		5a		phy		                phy
.8a6a		60		rts		                rts
.8a6b						xt_loop:
.8a6b		ca		dex		                dex
.8a6c		ca		dex		                dex
.8a6d		ca		dex		                dex
.8a6e		ca		dex		                dex
.8a6f		a9 e4		lda #$e4	                lda #<loop_runtime
.8a71		95 02		sta $02,x	                sta 2,x
.8a73		a9 8a		lda #$8a	                lda #>loop_runtime
.8a75		95 03		sta $03,x	                sta 3,x
.8a77		a9 11		lda #$11	                lda #loop_runtime_size
.8a79		95 00		sta $00,x	                sta 0,x
.8a7b		74 01		stz $01,x	                stz 1,x
.8a7d		80 12		bra $8a91	                bra xt_loop_common
.8a7f						xt_plus_loop:
.8a7f		ca		dex		                dex
.8a80		ca		dex		                dex
.8a81		ca		dex		                dex
.8a82		ca		dex		                dex
.8a83		a9 fd		lda #$fd	                lda #<plus_loop_runtime
.8a85		95 02		sta $02,x	                sta 2,x
.8a87		a9 8a		lda #$8a	                lda #>plus_loop_runtime
.8a89		95 03		sta $03,x	                sta 3,x
.8a8b		a9 1a		lda #$1a	                lda #plus_loop_runtime_size
.8a8d		95 00		sta $00,x	                sta 0,x
.8a8f		74 01		stz $01,x	                stz 1,x
.8a91						xt_loop_common:
.8a91		20 11 8d	jsr $8d11	                jsr xt_over
.8a94		20 34 92	jsr $9234	                jsr xt_swap             ; xt and xt' are the same
.8a97		20 11 97	jsr $9711	                jsr cmpl_by_limit
.8a9a		90 05		bcc $8aa1	                bcc _native
.8a9c		20 cd 83	jsr $83cd	                jsr xt_comma
.8a9f		80 03		bra $8aa4	                bra +
.8aa1						_native:
.8aa1		20 9f 97	jsr $979f	                jsr cmpl_jump_tos
.8aa4						+
.8aa4		a5 22		lda $22		                lda loopleave+1         ; MSB=0 means we're done
.8aa6		f0 19		beq $8ac1	                beq _noleave
.8aa8						_next:
.8aa8		a0 01		ldy #$01	                ldy #1
.8aaa		b1 21		lda ($21),y	                lda (loopleave),y
.8aac		48		pha		                pha
.8aad		a5 01		lda $01		                lda cp+1
.8aaf		91 21		sta ($21),y	                sta (loopleave),y
.8ab1		88		dey		                dey
.8ab2		b1 21		lda ($21),y	                lda (loopleave),y
.8ab4		48		pha		                pha
.8ab5		a5 00		lda $00		                lda cp
.8ab7		91 21		sta ($21),y	                sta (loopleave),y
.8ab9		68		pla		                pla
.8aba		85 21		sta $21		                sta loopleave
.8abc		68		pla		                pla
.8abd		85 22		sta $22		                sta loopleave+1
.8abf		d0 e7		bne $8aa8	                bne _next
.8ac1						_noleave:
.8ac1		b5 00		lda $00,x	                lda 0,x
.8ac3		85 21		sta $21		                sta loopleave
.8ac5		b5 01		lda $01,x	                lda 1,x
.8ac7		85 22		sta $22		                sta loopleave+1
.8ac9		a9 c8		lda #$c8	                lda #<xt_unloop
.8acb		95 00		sta $00,x	                sta 0,x
.8acd		a9 95		lda #$95	                lda #>xt_unloop
.8acf		95 01		sta $01,x	                sta 1,x
.8ad1		20 be 96	jsr $96be	                jsr xt_compile_comma
.8ad4		b5 01		lda $01,x	                lda 1,x                 ; MSB=0 means DO so nothing to do
.8ad6		f0 09		beq $8ae1	                beq +
.8ad8		20 1b 89	jsr $891b	                jsr xt_here
.8adb		20 34 92	jsr $9234	                jsr xt_swap
.8ade		4c 1e 92	jmp $921e	                jmp xt_store            ; write here as ?DO jmp target and return
.8ae1		e8		inx		+               inx                     ; drop the ignored word for DO
.8ae2		e8		inx		                inx
.8ae3						z_loop:
.8ae3		60		rts		z_plus_loop:    rts
.8ae4						loop_runtime:
.8ae4		e6 20		inc $20		                inc loopidx0            ; increment the LSB of loopindex
.8ae6		d0 0d		bne $8af5	                bne _repeat             ; avoid expensive test most of the time
.8ae8		a4 1f		ldy $1f		                ldy loopctrl
.8aea		b9 01 01	lda $0101,y	                lda loopindex+1,y
.8aed		1a		inc a		                ina
.8aee		c9 80		cmp #$80	                cmp #$80
.8af0		f0 06		beq $8af8	                beq _done
.8af2		99 01 01	sta $0101,y	                sta loopindex+1,y
=17						loop_runtime_size = * - loop_runtime
.8af5						_repeat:
.8af5		a9 00		lda #$00	                lda #0
>8af7		2c				                .byte $2c               ; BIT llhh to hide the lda #1
.8af8		a9 01		lda #$01	_done:          lda #1
.8afa		4c 40 98	jmp $9840	                jmp zbranch_runtime
.8afd						plus_loop_runtime:
.8afd		18		clc		                clc
.8afe		b5 00		lda $00,x	                lda 0,x                 ; LSB of step
.8b00		65 20		adc $20		                adc loopidx0
.8b02		85 20		sta $20		                sta loopidx0
.8b04		e8		inx		                inx                     ; dump step from TOS before MSB test
.8b05		e8		inx		                inx                     ; since we might skip it
.8b06		b5 ff		lda $ff,x	                lda $FF,x               ; MSB of step since 1,x == -1,x+2
.8b08		d0 02		bne $8b0c	                bne _chkv               ; if it's non-zero we have to check
.8b0a		90 0b		bcc $8b17	                bcc _repeat             ; but if 0 and no carry, we're good
.8b0c		b8		clv		_chkv:          clv
.8b0d		a4 1f		ldy $1f		                ldy loopctrl            ; get LCB offset
.8b0f		79 01 01	adc $0101,y	                adc loopindex+1,y       ; MSB of index
.8b12		99 01 01	sta $0101,y	                sta loopindex+1,y       ; put MSB of index back on stack
.8b15		70 03		bvs $8b1a	                bvs _done               ; skip over JMP instruction
=26						plus_loop_runtime_size = * - plus_loop_runtime
.8b17						_repeat:
.8b17		a9 00		lda #$00	                lda #0
>8b19		2c				                .byte $2c               ; BIT llhh to hide the lda #1
.8b1a		a9 01		lda #$01	_done:          lda #1
.8b1c		4c 40 98	jmp $9840	                jmp zbranch_runtime
.8b1f						xt_lshift:
.8b1f		20 33 d8	jsr $d833	                jsr underflow_2
.8b22		b5 00		lda $00,x	                lda 0,x
.8b24		29 0f		and #$0f	                and #%00001111
.8b26		f0 08		beq $8b30	                beq _done
.8b28		a8		tay		                tay
.8b29						_loop:
.8b29		16 02		asl $02,x	                asl 2,x
.8b2b		36 03		rol $03,x	                rol 3,x
.8b2d		88		dey		                dey
.8b2e		d0 f9		bne $8b29	                bne _loop
.8b30						_done:
.8b30		e8		inx		                inx
.8b31		e8		inx		                inx
.8b32		60		rts		z_lshift:       rts
.8b33						xt_m_star:
.8b33		20 33 d8	jsr $d833	                jsr underflow_2
.8b36		b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.8b38		55 03		eor $03,x	                eor 3,x         ; MSB of n2
.8b3a		48		pha		                pha
.8b3b		20 cf 80	jsr $80cf	                jsr xt_abs
.8b3e		20 34 92	jsr $9234	                jsr xt_swap
.8b41		20 cf 80	jsr $80cf	                jsr xt_abs
.8b44		20 82 95	jsr $9582	                jsr xt_um_star          ; ( d )
.8b47		68		pla		                pla
.8b48		10 03		bpl $8b4d	                bpl _done
.8b4a		20 76 9e	jsr $9e76	                jsr xt_dnegate
.8b4d						_done:
.8b4d		60		rts		z_m_star:       rts
.8b4e						xt_marker:
.8b4e		20 85 d7	jsr $d785	                jsr current_to_dp
.8b51		a5 02		lda $02		                lda dp
.8b53		48		pha		                pha
.8b54		a5 03		lda $03		                lda dp+1
.8b56		48		pha		                pha
.8b57		a5 00		lda $00		                lda cp
.8b59		48		pha		                pha
.8b5a		a5 01		lda $01		                lda cp+1
.8b5c		48		pha		                pha
.8b5d		20 40 84	jsr $8440	                jsr xt_create
.8b60		a5 00		lda $00		                lda cp          ; LSB
.8b62		38		sec		                sec
.8b63		e9 02		sbc #$02	                sbc #2
.8b65		85 00		sta $00		                sta cp
.8b67		b0 02		bcs $8b6b	                bcs +
.8b69		c6 01		dec $01		                dec cp+1        ; we only care about the borrow
.8b6b						+
.8b6b		a0 8b		ldy #$8b	                ldy #>marker_runtime
.8b6d		a9 89		lda #$89	                lda #<marker_runtime
.8b6f		20 92 97	jsr $9792	                jsr cmpl_word
.8b72		7a		ply		                ply                     ; MSB
.8b73		68		pla		                pla                     ; LSB
.8b74		20 92 97	jsr $9792	                jsr cmpl_word
.8b77		7a		ply		                ply                     ; MSB
.8b78		68		pla		                pla                     ; LSB
.8b79		20 92 97	jsr $9792	                jsr cmpl_word
.8b7c		a0 08		ldy #$08	                ldy #marker_start_offset
.8b7e						-
.8b7e		b1 08		lda ($08),y	                lda (up),y
.8b80		20 96 97	jsr $9796	                jsr cmpl_a
.8b83		c8		iny		                iny
.8b84		c0 2c		cpy #$2c	                cpy #marker_end_offset
.8b86		d0 f6		bne $8b7e	                bne -
.8b88		60		rts		z_marker:       rts
.8b89						marker_runtime:
.8b89		68		pla		                pla
.8b8a		85 25		sta $25		                sta tmp1        ; LSB of address
.8b8c		68		pla		                pla
.8b8d		85 26		sta $26		                sta tmp1+1      ; MSB of address
.8b8f		a0 01		ldy #$01	                ldy #1          ; start at 1 due to RTS mechanics
.8b91		b1 25		lda ($25),y	                lda (tmp1),y
.8b93		85 00		sta $00		                sta cp
.8b95		c8		iny		                iny
.8b96		b1 25		lda ($25),y	                lda (tmp1),y
.8b98		85 01		sta $01		                sta cp+1
.8b9a		c8		iny		                iny
.8b9b		b1 25		lda ($25),y	                lda (tmp1),y
.8b9d		85 02		sta $02		                sta dp
.8b9f		c8		iny		                iny
.8ba0		b1 25		lda ($25),y	                lda (tmp1),y
.8ba2		85 03		sta $03		                sta dp+1
.8ba4		38		sec		                sec
.8ba5		a5 25		lda $25		                lda tmp1
.8ba7		e9 03		sbc #$03	                sbc #marker_start_offset - 5
.8ba9		85 25		sta $25		                sta tmp1
.8bab		b0 02		bcs $8baf	                bcs +
.8bad		c6 26		dec $26		                dec tmp1+1
.8baf						+
.8baf		a0 08		ldy #$08	                ldy #marker_start_offset
.8bb1						-
.8bb1		b1 25		lda ($25),y	                lda (tmp1),y
.8bb3		91 08		sta ($08),y	                sta (up),y
.8bb5		c8		iny		                iny
.8bb6		c0 2c		cpy #$2c	                cpy #marker_end_offset
.8bb8		d0 f7		bne $8bb1	                bne -
.8bba		20 98 d7	jsr $d798	                jsr dp_to_current       ; Move the CURRENT DP back.
.8bbd		60		rts		                rts
.8bbe						xt_max:
.8bbe		20 33 d8	jsr $d833	                jsr underflow_2
.8bc1		b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.8bc3		d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets the carry
.8bc5		b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.8bc7		f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.8bc9		50 02		bvc $8bcd	                bvc _no_overflow
.8bcb		49 80		eor #$80	                eor #$80        ; complement negative flag
.8bcd						_no_overflow:
.8bcd		30 08		bmi $8bd7	                bmi _keep_nos
.8bcf		b5 00		lda $00,x	                lda 0,x
.8bd1		95 02		sta $02,x	                sta 2,x
.8bd3		b5 01		lda $01,x	                lda 1,x
.8bd5		95 03		sta $03,x	                sta 3,x
.8bd7						_keep_nos:
.8bd7		e8		inx		                inx
.8bd8		e8		inx		                inx
.8bd9		60		rts		z_max:          rts
.8bda						xt_min:
.8bda		20 33 d8	jsr $d833	                jsr underflow_2
.8bdd		b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.8bdf		d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets carry
.8be1		b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.8be3		f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.8be5		50 02		bvc $8be9	                bvc _no_overflow
.8be7		49 80		eor #$80	                eor #$80
.8be9						_no_overflow:
.8be9		10 08		bpl $8bf3	                bpl _keep_nos
.8beb		b5 00		lda $00,x	                lda 0,x
.8bed		95 02		sta $02,x	                sta 2,x
.8bef		b5 01		lda $01,x	                lda 1,x
.8bf1		95 03		sta $03,x	                sta 3,x
.8bf3						_keep_nos:
.8bf3		e8		inx		                inx
.8bf4		e8		inx		                inx
.8bf5		60		rts		z_min:          rts
.8bf6						xt_minus:
.8bf6		20 33 d8	jsr $d833	                jsr underflow_2
.8bf9		38		sec		                sec
.8bfa		b5 02		lda $02,x	                lda 2,x         ; LSB
.8bfc		f5 00		sbc $00,x	                sbc 0,x
.8bfe		95 02		sta $02,x	                sta 2,x
.8c00		b5 03		lda $03,x	                lda 3,x         ; MSB
.8c02		f5 01		sbc $01,x	                sbc 1,x
.8c04		95 03		sta $03,x	                sta 3,x
.8c06		e8		inx		                inx
.8c07		e8		inx		                inx
.8c08		60		rts		z_minus:        rts
.8c09						xt_mod:
.8c09		20 33 d8	jsr $d833	                jsr underflow_2
.8c0c		20 70 91	jsr $9170	                jsr xt_slash_mod
.8c0f		e8		inx		                inx             ; DROP
.8c10		e8		inx		                inx
.8c11						z_mod:
.8c11		60		rts		                rts
.8c12						xt_move:
.8c12		b5 03		lda $03,x	                lda 3,x                 ; MSB of addr2
.8c14		d5 05		cmp $05,x	                cmp 5,x                 ; MSB of addr1
.8c16		f0 05		beq $8c1d	                beq _lsb                ; wasn't helpful, move to LSB
.8c18		b0 0e		bcs $8c28	                bcs _to_move_up         ; we want CMOVE>
.8c1a		4c c0 9f	jmp $9fc0	                jmp xt_cmove            ; JSR/RTS
.8c1d						_lsb:
.8c1d		b5 02		lda $02,x	                lda 2,x                 ; LSB of addr2
.8c1f		d5 04		cmp $04,x	                cmp 4,x                 ; LSB of addr1
.8c21		f0 08		beq $8c2b	                beq _equal              ; LSB is equal as well
.8c23		b0 03		bcs $8c28	                bcs _to_move_up         ; we want CMOVE>
.8c25		4c c0 9f	jmp $9fc0	                jmp xt_cmove            ; JSR/RTS
.8c28						_to_move_up:
.8c28		4c fb 9f	jmp $9ffb	                jmp xt_cmove_up         ; JSR/RTS
.8c2b						_equal:
.8c2b		8a		txa		                txa
.8c2c		18		clc		                clc
.8c2d		69 06		adc #$06	                adc #6
.8c2f		aa		tax		                tax
.8c30		60		rts		z_move:         rts
.8c31						xt_negate:
.8c31		20 2e d8	jsr $d82e	                jsr underflow_1
.8c34		a9 00		lda #$00	        	lda #0
.8c36		38		sec		                sec
.8c37		f5 00		sbc $00,x	                sbc 0,x         ; LSB
.8c39		95 00		sta $00,x	                sta 0,x
.8c3b		a9 00		lda #$00	                lda #0
.8c3d		f5 01		sbc $01,x	                sbc 1,x         ; MSB
.8c3f		95 01		sta $01,x	                sta 1,x
.8c41		60		rts		z_negate:       rts
.8c42						xt_nip:
.8c42		20 33 d8	jsr $d833	                jsr underflow_2
.8c45		b5 00		lda $00,x	                lda 0,x         ; LSB
.8c47		95 02		sta $02,x	                sta 2,x
.8c49		b5 01		lda $01,x	                lda 1,x         ; MSB
.8c4b		95 03		sta $03,x	                sta 3,x
.8c4d		e8		inx		                inx
.8c4e		e8		inx		                inx
.8c4f		60		rts		z_nip:          rts
.8c50						xt_not_equals:
.8c50		20 33 d8	jsr $d833	                jsr underflow_2
.8c53		a0 00		ldy #$00	                ldy #0                  ; default is true
.8c55		b5 00		lda $00,x	                lda 0,x                 ; LSB
.8c57		d5 02		cmp $02,x	                cmp 2,x
.8c59		d0 0a		bne $8c65	                bne _not_equal
.8c5b		b5 01		lda $01,x	                lda 1,x                 ; MSB
.8c5d		d5 03		cmp $03,x	                cmp 3,x
.8c5f		d0 04		bne $8c65	                bne _not_equal
.8c61		a9 ff		lda #$ff	                lda #$FF
.8c63		80 01		bra $8c66	                bra _done
.8c65						_not_equal:
.8c65		88		dey		                dey                     ; drop thru to done
.8c66						_done:
.8c66		98		tya		                tya
.8c67		e8		inx		                inx
.8c68		e8		inx		                inx
.8c69		95 00		sta $00,x	                sta 0,x
.8c6b		95 01		sta $01,x	                sta 1,x
.8c6d		60		rts		z_not_equals:   rts
.8c6e						xt_number_sign:
.8c6e		20 33 d8	jsr $d833	                jsr underflow_2         ; double number
.8c71		20 fb 82	jsr $82fb	                jsr xt_base
.8c74		20 1a 88	jsr $881a	                jsr xt_fetch            ; ( ud1 base )
.8c77		20 72 93	jsr $9372	                jsr xt_to_r             ; >r
.8c7a		20 08 9e	jsr $9e08	                jsr xt_zero             ; 0
.8c7d		20 e5 8e	jsr $8ee5	                jsr xt_r_fetch          ; r@
.8c80		20 40 95	jsr $9540	                jsr xt_um_slash_mod     ; um/mod
.8c83		20 8c 9c	jsr $9c8c	                jsr xt_not_rote         ; rot rot
.8c86		20 fa 8e	jsr $8efa	                jsr xt_r_from           ; r>
.8c89		20 40 95	jsr $9540	                jsr xt_um_slash_mod     ; um/mod
.8c8c		20 8c 9c	jsr $9c8c	                jsr xt_not_rote         ; rot ( rem ud ) rot ( ud rem )
.8c8f		b5 00		lda $00,x	                lda 0,x
.8c91		a8		tay		                tay
.8c92		b9 b4 d3	lda $d3b4,y	                lda s_abc_upper,y
.8c95		95 00		sta $00,x	                sta 0,x
.8c97		74 01		stz $01,x	                stz 1,x                 ; paranoid; now ( ud char )
.8c99		20 2d 89	jsr $892d	                jsr xt_hold
.8c9c						z_number_sign:
.8c9c		60		rts		                rts
.8c9d						xt_number_sign_greater:
.8c9d		20 33 d8	jsr $d833	                jsr underflow_2         ; double number
.8ca0		a5 2b		lda $2b		                lda tohold
.8ca2		95 00		sta $00,x	                sta 0,x         ; LSB of tohold
.8ca4		95 02		sta $02,x	                sta 2,x
.8ca6		a5 2c		lda $2c		                lda tohold+1
.8ca8		95 01		sta $01,x	                sta 1,x         ; MSB of addr
.8caa		95 03		sta $03,x	                sta 3,x         ; ( addr addr )
.8cac		20 1f 8d	jsr $8d1f	                jsr xt_pad      ; ( addr addr pad )
.8caf		38		sec		                sec
.8cb0		b5 00		lda $00,x	                lda 0,x         ; LSB of pad address
.8cb2		f5 02		sbc $02,x	                sbc 2,x
.8cb4		95 02		sta $02,x	                sta 2,x
.8cb6		b5 01		lda $01,x	                lda 1,x         ; MSB, which should always be zero
.8cb8		f5 03		sbc $03,x	                sbc 3,x
.8cba		95 03		sta $03,x	                sta 3,x         ; ( addr u pad )
.8cbc		e8		inx		                inx
.8cbd		e8		inx		                inx
.8cbe						z_number_sign_greater:
.8cbe		60		rts		                rts
.8cbf						xt_number_sign_s:
.8cbf		20 33 d8	jsr $d833	                jsr underflow_2
.8cc2						_loop:
.8cc2		20 6e 8c	jsr $8c6e	                jsr xt_number_sign
.8cc5		b5 00		lda $00,x	                lda 0,x
.8cc7		15 01		ora $01,x	                ora 1,x
.8cc9		15 02		ora $02,x	                ora 2,x
.8ccb		15 03		ora $03,x	                ora 3,x
.8ccd		d0 f3		bne $8cc2	                bne _loop
.8ccf						z_number_sign_s:
.8ccf		60		rts		                rts
.8cd0						xt_of:
.8cd0		a0 8d		ldy #$8d	                ldy #>xt_over
.8cd2		a9 11		lda #$11	                lda #<xt_over
.8cd4		20 86 97	jsr $9786	                jsr cmpl_subroutine
.8cd7		a0 87		ldy #$87	                ldy #>xt_equal
.8cd9		a9 96		lda #$96	                lda #<xt_equal
.8cdb		20 86 97	jsr $9786	                jsr cmpl_subroutine
.8cde		20 54 89	jsr $8954	                jsr xt_if
.8ce1		a0 86		ldy #$86	                ldy #>xt_drop
.8ce3		a9 9a		lda #$9a	                lda #<xt_drop
.8ce5		20 86 97	jsr $9786	                jsr cmpl_subroutine
.8ce8		60		rts		z_of:           rts
.8ce9						xt_one_minus:
.8ce9		20 2e d8	jsr $d82e	                jsr underflow_1
.8cec		b5 00		lda $00,x	                lda 0,x
.8cee		d0 02		bne $8cf2	                bne +
.8cf0		d6 01		dec $01,x	                dec 1,x
.8cf2						+
.8cf2		d6 00		dec $00,x	                dec 0,x
.8cf4		60		rts		z_one_minus:    rts
.8cf5						xt_char_plus:
.8cf5						xt_one_plus:
.8cf5		20 2e d8	jsr $d82e	                jsr underflow_1
.8cf8		f6 00		inc $00,x	                inc 0,x
.8cfa		d0 02		bne $8cfe	                bne _done
.8cfc		f6 01		inc $01,x	                inc 1,x
.8cfe						_done:
.8cfe						z_char_plus:
.8cfe		60		rts		z_one_plus:     rts
.8cff						xt_or:
.8cff		20 33 d8	jsr $d833	                jsr underflow_2
.8d02		b5 00		lda $00,x	                lda 0,x
.8d04		15 02		ora $02,x	                ora 2,x
.8d06		95 02		sta $02,x	                sta 2,x
.8d08		b5 01		lda $01,x	                lda 1,x
.8d0a		15 03		ora $03,x	                ora 3,x
.8d0c		95 03		sta $03,x	                sta 3,x
.8d0e		e8		inx		                inx
.8d0f		e8		inx		                inx
.8d10		60		rts		z_or:           rts
.8d11						xt_over:
.8d11		20 33 d8	jsr $d833	                jsr underflow_2
.8d14		ca		dex		                dex
.8d15		ca		dex		                dex
.8d16		b5 04		lda $04,x	                lda 4,x         ; LSB
.8d18		95 00		sta $00,x	                sta 0,x
.8d1a		b5 05		lda $05,x	                lda 5,x         ; MSB
.8d1c		95 01		sta $01,x	                sta 1,x
.8d1e		60		rts		z_over:         rts
.8d1f						xt_pad:
.8d1f		ca		dex		                dex
.8d20		ca		dex		                dex
.8d21		a5 00		lda $00		                lda cp
.8d23		18		clc		                clc
.8d24		69 ff		adc #$ff	                adc #padoffset  ; assumes padoffset one byte in size
.8d26		95 00		sta $00,x	                sta 0,x
.8d28		a5 01		lda $01		                lda cp+1
.8d2a		69 00		adc #$00	                adc #0          ; only need carry
.8d2c		95 01		sta $01,x	                sta 1,x
.8d2e		60		rts		z_pad:          rts
.8d2f						xt_page:
.8d2f		a9 1b		lda #$1b	                lda #AscESC
.8d31		20 c5 86	jsr $86c5	                jsr emit_a
.8d34		a9 5b		lda #$5b	                lda #'['
.8d36		20 c5 86	jsr $86c5	                jsr emit_a
.8d39		a9 32		lda #$32	                lda #'2'
.8d3b		20 c5 86	jsr $86c5	                jsr emit_a
.8d3e		a9 4a		lda #$4a	                lda #'J'
.8d40		20 c5 86	jsr $86c5	                jsr emit_a
.8d43		20 08 9e	jsr $9e08	                jsr xt_zero
.8d46		20 08 9e	jsr $9e08	                jsr xt_zero
.8d49		20 a2 82	jsr $82a2	                jsr xt_at_xy
.8d4c		60		rts		z_page:         rts
.8d4d						xt_paren:
.8d4d		ca		dex		                dex
.8d4e		ca		dex		                dex
.8d4f		a9 29		lda #$29	                lda #41     ; Right parenthesis
.8d51		95 00		sta $00,x	                sta 0,x
.8d53		74 01		stz $01,x	                stz 1,x
.8d55		20 b8 8d	jsr $8db8	                jsr xt_parse
.8d58		e8		inx		                inx
.8d59		e8		inx		                inx
.8d5a		e8		inx		                inx
.8d5b		e8		inx		                inx
.8d5c		60		rts		z_paren:        rts
.8d5d						xt_parse_name:
.8d5d		a5 0e		lda $0e		                lda ciblen              ; LSB of counter
.8d5f		38		sec		                sec
.8d60		e5 10		sbc $10		                sbc toin
.8d62		85 25		sta $25		                sta tmp1
.8d64		a5 0f		lda $0f		                lda ciblen+1            ; MSB
.8d66		e5 11		sbc $11		                sbc toin+1
.8d68		85 26		sta $26		                sta tmp1+1
.8d6a		a5 25		lda $25		                lda tmp1
.8d6c		05 26		ora $26		                ora tmp1+1
.8d6e		f0 28		beq $8d98	                beq _empty_line
.8d70		a5 0c		lda $0c		                lda cib
.8d72		18		clc		                clc
.8d73		65 10		adc $10		                adc toin
.8d75		85 27		sta $27		                sta tmp2                ; LSB of first character
.8d77		a5 0d		lda $0d		                lda cib+1
.8d79		65 11		adc $11		                adc toin+1
.8d7b		85 28		sta $28		                sta tmp2+1              ; MSB
.8d7d						_skip_loop:
.8d7d		b2 27		lda ($27)	                lda (tmp2)              ; work copy of cib
.8d7f		20 21 d8	jsr $d821	                jsr is_whitespace
.8d82		90 1f		bcc $8da3	                bcc _char_found
.8d84		e6 27		inc $27		                inc tmp2
.8d86		d0 02		bne $8d8a	                bne +
.8d88		e6 28		inc $28		                inc tmp2+1
.8d8a						+
.8d8a		a5 25		lda $25		                lda tmp1
.8d8c		d0 02		bne $8d90	                bne +
.8d8e		c6 26		dec $26		                dec tmp1+1
.8d90		c6 25		dec $25		+               dec tmp1
.8d92		a5 25		lda $25		                lda tmp1
.8d94		05 26		ora $26		                ora tmp1+1
.8d96		d0 e5		bne $8d7d	                bne _skip_loop          ; fall through if empty line
.8d98						_empty_line:
.8d98		ca		dex		                dex
.8d99		ca		dex		                dex
.8d9a		ca		dex		                dex
.8d9b		ca		dex		                dex
.8d9c		74 00		stz $00,x	                stz 0,x                 ; TOS is zero
.8d9e		74 01		stz $01,x	                stz 1,x
.8da0		4c 4d 8e	jmp $8e4d	                jmp z_parse_name        ; skip over PARSE
.8da3						_char_found:
.8da3		a5 27		lda $27		                lda tmp2
.8da5		38		sec		                sec
.8da6		e5 0c		sbc $0c		                sbc cib
.8da8		85 10		sta $10		                sta toin
.8daa		a5 28		lda $28		                lda tmp2+1
.8dac		e5 0d		sbc $0d		                sbc cib+1
.8dae		85 11		sta $11		                sta toin+1
.8db0		ca		dex		                dex
.8db1		ca		dex		                dex
.8db2		a9 20		lda #$20	                lda #AscSP
.8db4		95 00		sta $00,x	                sta 0,x
.8db6		74 01		stz $01,x	                stz 1,x                 ; paranoid, now ( "name" c )
.8db8						xt_parse:
.8db8		20 2e d8	jsr $d82e	                jsr underflow_1
.8dbb		a5 0e		lda $0e		                lda ciblen
.8dbd		05 0f		ora $0f		                ora ciblen+1
.8dbf		f0 0c		beq $8dcd	                beq _abort_parse
.8dc1		a5 11		lda $11		                lda toin+1              ; MSB
.8dc3		c5 0f		cmp $0f		                cmp ciblen+1
.8dc5		90 0e		bcc $8dd5	                bcc _go_parse           ; unsigned comparison
.8dc7		a5 10		lda $10		                lda toin                ; LSB
.8dc9		c5 0e		cmp $0e		                cmp ciblen
.8dcb		90 08		bcc $8dd5	                bcc _go_parse
.8dcd						_abort_parse:
.8dcd		ca		dex		                dex
.8dce		ca		dex		                dex
.8dcf		74 00		stz $00,x	                stz 0,x
.8dd1		74 01		stz $01,x	                stz 1,x
.8dd3		80 78		bra $8e4d	                bra _done
.8dd5						_go_parse:
.8dd5		b5 00		lda $00,x	                lda 0,x
.8dd7		85 23		sta $23		                sta tmptos
.8dd9		ca		dex		                dex
.8dda		ca		dex		                dex
.8ddb		a5 0c		lda $0c		                lda cib
.8ddd		18		clc		                clc
.8dde		65 10		adc $10		                adc toin        ; LSB
.8de0		85 25		sta $25		                sta tmp1
.8de2		85 27		sta $27		                sta tmp2
.8de4		95 02		sta $02,x	                sta 2,x
.8de6		a5 0d		lda $0d		                lda cib+1
.8de8		65 11		adc $11		                adc toin+1      ; MSB
.8dea		85 26		sta $26		                sta tmp1+1
.8dec		85 28		sta $28		                sta tmp2+1
.8dee		95 03		sta $03,x	                sta 3,x
.8df0		a5 0c		lda $0c		                lda cib
.8df2		18		clc		                clc
.8df3		65 0e		adc $0e		                adc ciblen
.8df5		85 29		sta $29		                sta tmp3
.8df7		a5 0d		lda $0d		                lda cib+1
.8df9		65 0f		adc $0f		                adc ciblen+1
.8dfb		85 2a		sta $2a		                sta tmp3+1
.8dfd		64 24		stz $24		                stz tmptos+1
.8dff						_loop:
.8dff		a5 27		lda $27		                lda tmp2
.8e01		c5 29		cmp $29		                cmp tmp3
.8e03		d0 06		bne $8e0b	                bne _not_empty
.8e05		a5 28		lda $28		                lda tmp2+1
.8e07		c5 2a		cmp $2a		                cmp tmp3+1
.8e09		f0 1d		beq $8e28	                beq _eol
.8e0b						_not_empty:
.8e0b		b2 27		lda ($27)	                lda (tmp2)
.8e0d		a4 23		ldy $23		                ldy tmptos
.8e0f		c0 20		cpy #$20	                cpy #AscSP
.8e11		d0 07		bne $8e1a	                bne _not_whitespace
.8e13		20 21 d8	jsr $d821	                jsr is_whitespace
.8e16		90 02		bcc $8e1a	                bcc _not_whitespace
.8e18		80 0c		bra $8e26	                bra _found_delimiter
.8e1a						_not_whitespace:
.8e1a		c5 23		cmp $23		                cmp tmptos
.8e1c		f0 08		beq $8e26	                beq _found_delimiter
.8e1e		e6 27		inc $27		                inc tmp2
.8e20		d0 dd		bne $8dff	                bne _loop
.8e22		e6 28		inc $28		                inc tmp2+1
.8e24		80 d9		bra $8dff	                bra _loop
.8e26						_found_delimiter:
.8e26		e6 24		inc $24		                inc tmptos+1
.8e28						_eol:
.8e28		a5 27		lda $27		                lda tmp2
.8e2a		38		sec		                sec
.8e2b		e5 25		sbc $25		                sbc tmp1
.8e2d		95 00		sta $00,x	                sta 0,x
.8e2f		a5 28		lda $28		                lda tmp2+1
.8e31		e5 26		sbc $26		                sbc tmp1+1
.8e33		95 01		sta $01,x	                sta 1,x
.8e35		a5 27		lda $27		                lda tmp2
.8e37		38		sec		                sec
.8e38		e5 0c		sbc $0c		                sbc cib
.8e3a		85 10		sta $10		                sta toin
.8e3c		a5 28		lda $28		                lda tmp2+1
.8e3e		e5 0d		sbc $0d		                sbc cib+1
.8e40		85 11		sta $11		                sta toin+1
.8e42		a5 10		lda $10		                lda toin
.8e44		18		clc		                clc
.8e45		65 24		adc $24		                adc tmptos+1
.8e47		85 10		sta $10		                sta toin
.8e49		90 02		bcc $8e4d	                bcc +
.8e4b		e6 11		inc $11		                inc toin+1
.8e4d						+
.8e4d						_done:
.8e4d						z_parse_name:
.8e4d		60		rts		z_parse:        rts
.8e4e						xt_pick:
.8e4e		16 00		asl $00,x	                asl 0,x         ; we assume u < 128 (stack is small)
.8e50		8a		txa		                txa
.8e51		75 00		adc $00,x	                adc 0,x
.8e53		a8		tay		                tay
.8e54		b9 02 00	lda $0002,y	                lda 0002,y
.8e57		95 00		sta $00,x	                sta 0,x
.8e59		b9 03 00	lda $0003,y	                lda 0003,y
.8e5c		95 01		sta $01,x	                sta 1,x
.8e5e		60		rts		z_pick:         rts
.8e5f						xt_plus:
.8e5f		20 33 d8	jsr $d833	                jsr underflow_2
.8e62		18		clc		                clc
.8e63		b5 00		lda $00,x	                lda 0,x         ; LSB
.8e65		75 02		adc $02,x	                adc 2,x
.8e67		95 02		sta $02,x	                sta 2,x
.8e69		b5 01		lda $01,x	                lda 1,x         ; MSB. No CLC, conserve carry bit
.8e6b		75 03		adc $03,x	                adc 3,x
.8e6d		95 03		sta $03,x	                sta 3,x
.8e6f		e8		inx		                inx
.8e70		e8		inx		                inx
.8e71		60		rts		z_plus:         rts
.8e72						xt_plus_store:
.8e72		20 33 d8	jsr $d833	                jsr underflow_2
.8e75		b5 00		lda $00,x	                lda 0,x
.8e77		85 25		sta $25		                sta tmp1
.8e79		b5 01		lda $01,x	                lda 1,x
.8e7b		85 26		sta $26		                sta tmp1+1
.8e7d		a0 00		ldy #$00	                ldy #0          ; LSB
.8e7f		b1 25		lda ($25),y	                lda (tmp1),y
.8e81		18		clc		                clc
.8e82		75 02		adc $02,x	                adc 2,x
.8e84		91 25		sta ($25),y	                sta (tmp1),y
.8e86		c8		iny		                iny             ; MSB
.8e87		b1 25		lda ($25),y	                lda (tmp1),y
.8e89		75 03		adc $03,x	                adc 3,x
.8e8b		91 25		sta ($25),y	                sta (tmp1),y
.8e8d		e8		inx		                inx
.8e8e		e8		inx		                inx
.8e8f		e8		inx		                inx
.8e90		e8		inx		                inx
.8e91		60		rts		z_plus_store:   rts
.8e92						xt_postpone:
.8e92		20 5d 8d	jsr $8d5d	                jsr xt_parse_name               ; ( -- addr n )
.8e95		b5 00		lda $00,x	                lda 0,x
.8e97		15 01		ora $01,x	                ora 1,x
.8e99		d0 05		bne $8ea0	                bne +
.8e9b		a9 05		lda #$05	                lda #err_noname
.8e9d		4c 44 d8	jmp $d844	                jmp error
.8ea0						+
.8ea0		20 fc 9a	jsr $9afc	                jsr xt_find_name                ; ( -- nt | 0 )
.8ea3		d0 05		bne $8eaa	                bne +
.8ea5		a9 05		lda #$05	                lda #err_noname
.8ea7		4c 44 d8	jmp $d844	                jmp error
.8eaa						+
.8eaa		b5 00		lda $00,x	                lda 0,x
.8eac		85 25		sta $25		                sta tmp1
.8eae		b5 01		lda $01,x	                lda 1,x
.8eb0		85 26		sta $26		                sta tmp1+1
.8eb2		20 45 9c	jsr $9c45	                jsr xt_name_to_int              ; ( nt -- xt )
.8eb5		e6 25		inc $25		                inc tmp1
.8eb7		d0 02		bne $8ebb	                bne +
.8eb9		e6 26		inc $26		                inc tmp1+1
.8ebb						+
.8ebb		b2 25		lda ($25)	                lda (tmp1)
.8ebd		29 04		and #$04	                and #IM         ; mask all but Intermediate flag
.8ebf		f0 05		beq $8ec6	                beq _not_immediate
.8ec1		20 be 96	jsr $96be	                jsr xt_compile_comma
.8ec4		80 0a		bra $8ed0	                bra _done
.8ec6						_not_immediate:
.8ec6		20 04 8a	jsr $8a04	                jsr xt_literal
.8ec9		a0 96		ldy #$96	                ldy #>xt_compile_comma
.8ecb		a9 be		lda #$be	                lda #<xt_compile_comma
.8ecd		20 86 97	jsr $9786	                jsr cmpl_subroutine
.8ed0						_done:
.8ed0		60		rts		z_postpone:     rts
.8ed1						xt_question_dup:
.8ed1		20 2e d8	jsr $d82e	                jsr underflow_1
.8ed4		b5 00		lda $00,x	                lda 0,x
.8ed6		15 01		ora $01,x	                ora 1,x
.8ed8		f0 0a		beq $8ee4	                beq _done
.8eda		ca		dex		                dex
.8edb		ca		dex		                dex
.8edc		b5 02		lda $02,x	                lda 2,x
.8ede		95 00		sta $00,x	                sta 0,x
.8ee0		b5 03		lda $03,x	                lda 3,x
.8ee2		95 01		sta $01,x	                sta 1,x
.8ee4						_done:
.8ee4		60		rts		z_question_dup: rts
.8ee5						xt_r_fetch:
.8ee5		7a		ply		                ply             ; LSB
.8ee6		84 25		sty $25		                sty tmp1
.8ee8		7a		ply		                ply             ; MSB
.8ee9		ca		dex		                dex
.8eea		ca		dex		                dex
.8eeb		68		pla		                pla             ; LSB
.8eec		95 00		sta $00,x	                sta 0,x
.8eee		68		pla		                pla             ; MSB
.8eef		95 01		sta $01,x	                sta 1,x
.8ef1		48		pha		                pha
.8ef2		b5 00		lda $00,x	                lda 0,x
.8ef4		48		pha		                pha
.8ef5		5a		phy		                phy             ; MSB
.8ef6		a4 25		ldy $25		                ldy tmp1
.8ef8		5a		phy		                phy             ; LSB
.8ef9		60		rts		z_r_fetch:      rts
.8efa						xt_r_from:
.8efa		68		pla		                pla             ; LSB
.8efb		85 23		sta $23		                sta tmptos
.8efd		7a		ply		                ply             ; MSB
.8efe		ca		dex		                dex
.8eff		ca		dex		                dex
.8f00		68		pla		                pla             ; LSB
.8f01		95 00		sta $00,x	                sta 0,x
.8f03		68		pla		                pla             ; MSB
.8f04		95 01		sta $01,x	                sta 1,x
.8f06		5a		phy		                phy             ; MSB
.8f07		a5 23		lda $23		                lda tmptos
.8f09		48		pha		                pha             ; LSB
.8f0a		60		rts		z_r_from:       rts
.8f0b						xt_recurse:
.8f0b		a0 00		ldy #$00	                ldy #0
.8f0d		a9 20		lda #$20	                lda #OpJSR
.8f0f		91 00		sta ($00),y	                sta (cp),y
.8f11		c8		iny		                iny
.8f12		24 1c		bit $1c		                bit status
.8f14		70 0c		bvs $8f22	                bvs _nt_in_workword
.8f16		a5 06		lda $06		                lda workword
.8f18		91 00		sta ($00),y	                sta (cp),y
.8f1a		c8		iny		                iny
.8f1b		a5 07		lda $07		                lda workword+1
.8f1d		91 00		sta ($00),y	                sta (cp),y
.8f1f		c8		iny		                iny
.8f20		80 1b		bra $8f3d	                bra _update_cp
.8f22						_nt_in_workword:
.8f22		a5 06		lda $06		                lda workword            ; LSB
.8f24		18		clc		                clc
.8f25		69 04		adc #$04	                adc #4
.8f27		85 25		sta $25		                sta tmp1
.8f29		a5 07		lda $07		                lda workword+1          ; MSB
.8f2b		69 00		adc #$00	                adc #0
.8f2d		85 26		sta $26		                sta tmp1+1
.8f2f		b2 25		lda ($25)	                lda (tmp1)
.8f31		91 00		sta ($00),y	                sta (cp),y
.8f33		5a		phy		                phy
.8f34		a0 01		ldy #$01	                ldy #1
.8f36		b1 25		lda ($25),y	                lda (tmp1),y
.8f38		7a		ply		                ply
.8f39		c8		iny		                iny
.8f3a		91 00		sta ($00),y	                sta (cp),y
.8f3c		c8		iny		                iny
.8f3d						_update_cp:
.8f3d		98		tya		                tya
.8f3e		18		clc		                clc
.8f3f		65 00		adc $00		                adc cp
.8f41		85 00		sta $00		                sta cp
.8f43		90 02		bcc $8f47	                bcc _done
.8f45		e6 01		inc $01		                inc cp+1
.8f47						_done:
.8f47		60		rts		z_recurse:      rts
.8f48						xt_refill:
.8f48		a5 0a		lda $0a		                lda insrc               ; cheat: We only check LSB
.8f4a		d0 2d		bne $8f79	                bne _src_not_kbd
.8f4c		ca		dex		                dex
.8f4d		ca		dex		                dex
.8f4e		ca		dex		                dex
.8f4f		ca		dex		                dex
.8f50		a5 0c		lda $0c		                lda cib                 ; address of CIB is NOS
.8f52		95 02		sta $02,x	                sta 2,x
.8f54		a5 0d		lda $0d		                lda cib+1
.8f56		95 03		sta $03,x	                sta 3,x
.8f58		64 0e		stz $0e		                stz ciblen              ; go in with empty buffer
.8f5a		64 0f		stz $0f		                stz ciblen+1
.8f5c		a9 ff		lda #$ff	                lda #bsize              ; max number of chars is TOS
.8f5e		95 00		sta $00,x	                sta 0,x
.8f60		74 01		stz $01,x	                stz 1,x                 ; cheat: We only accept max 255
.8f62		20 e4 80	jsr $80e4	                jsr xt_accept           ; ( addr n1 -- n2)
.8f65		b5 00		lda $00,x	                lda 0,x
.8f67		85 0e		sta $0e		                sta ciblen
.8f69		b5 01		lda $01,x	                lda 1,x
.8f6b		85 0f		sta $0f		                sta ciblen+1            ; though we only accept 255 chars
.8f6d		64 10		stz $10		                stz toin
.8f6f		64 11		stz $11		                stz toin+1
.8f71		a9 ff		lda #$ff	                lda #$FF                ; overwrite with TRUE flag
.8f73		95 00		sta $00,x	                sta 0,x
.8f75		95 01		sta $01,x	                sta 1,x
.8f77		80 10		bra $8f89	                bra _done
.8f79						_src_not_kbd:
.8f79		1a		inc a		                ina
.8f7a		d0 08		bne $8f84	                bne _src_not_string
.8f7c		ca		dex		                dex
.8f7d		ca		dex		                dex
.8f7e		74 00		stz $00,x	                stz 0,x
.8f80		74 01		stz $01,x	                stz 1,x
.8f82		80 05		bra $8f89	                bra z_refill
.8f84						_src_not_string:
.8f84		a9 01		lda #$01	                lda #err_badsource
.8f86		4c 44 d8	jmp $d844	                jmp error
.8f89						_done:
.8f89		60		rts		z_refill:       rts
.8f8a						xt_repeat:
.8f8a		20 1f 82	jsr $821f	                jsr xt_again
.8f8d		4c b4 86	jmp $86b4	                jmp xt_then
.8f90						z_repeat:
.8f90						xt_right_bracket:
.8f90		a9 ff		lda #$ff	                lda #$FF
.8f92		85 1a		sta $1a		                sta state
.8f94		85 1b		sta $1b		                sta state+1
.8f96						z_right_bracket:
.8f96		60		rts		                rts
.8f97						xt_rot:
.8f97		20 38 d8	jsr $d838	                jsr underflow_3
.8f9a		b4 05		ldy $05,x	                ldy 5,x         ; MSB first
.8f9c		b5 03		lda $03,x	                lda 3,x
.8f9e		95 05		sta $05,x	                sta 5,x
.8fa0		b5 01		lda $01,x	                lda 1,x
.8fa2		95 03		sta $03,x	                sta 3,x
.8fa4		94 01		sty $01,x	                sty 1,x
.8fa6		b4 04		ldy $04,x	                ldy 4,x         ; LSB next
.8fa8		b5 02		lda $02,x	                lda 2,x
.8faa		95 04		sta $04,x	                sta 4,x
.8fac		b5 00		lda $00,x	                lda 0,x
.8fae		95 02		sta $02,x	                sta 2,x
.8fb0		94 00		sty $00,x	                sty 0,x
.8fb2		60		rts		z_rot:          rts
.8fb3						xt_rshift:
.8fb3		20 33 d8	jsr $d833	                jsr underflow_2
.8fb6		b5 00		lda $00,x	                lda 0,x
.8fb8		29 0f		and #$0f	                and #%00001111
.8fba		f0 08		beq $8fc4	                beq _done               ; if 0 shifts, quit
.8fbc		a8		tay		                tay
.8fbd						_loop:
.8fbd		56 03		lsr $03,x	                lsr 3,x
.8fbf		76 02		ror $02,x	                ror 2,x
.8fc1		88		dey		                dey
.8fc2		d0 f9		bne $8fbd	                bne _loop
.8fc4						_done:
.8fc4		e8		inx		                inx
.8fc5		e8		inx		                inx
.8fc6		60		rts		z_rshift:       rts
.8fc7						xt_s_backslash_quote:
.8fc7		a9 ff		lda #$ff	                lda #$FF
.8fc9		85 27		sta $27		                sta tmp2
.8fcb		64 28		stz $28		                stz tmp2+1
.8fcd		20 e4 8f	jsr $8fe4	                jsr s_quote_start
.8fd0						z_s_backslash_quote:
.8fd0		60		rts		                rts
.8fd1						convert_hex_value:
.8fd1		c9 41		cmp #$41	        cmp #'A'
.8fd3		90 07		bcc $8fdc	        bcc _digit
.8fd5		29 df		and #$df	        and #$DF                ; Make it uppercase.
.8fd7		38		sec		        sec
.8fd8		e9 37		sbc #$37	        sbc #'7'                ; gives value 10 for 'A'
.8fda		80 03		bra $8fdf	        bra _done
.8fdc						_digit:
.8fdc		38		sec		        sec
.8fdd		e9 30		sbc #$30	        sbc #'0'
.8fdf						_done:
.8fdf		60		rts		        rts
.8fe0						xt_s_quote:
.8fe0		64 27		stz $27		                stz tmp2
.8fe2		64 28		stz $28		                stz tmp2+1
.8fe4						s_quote_start:
.8fe4		20 a7 97	jsr $97a7	                jsr cmpl_jump_later
.8fe7		20 1b 89	jsr $891b	                jsr xt_here             ; the start of the string
.8fea						_savechars_loop:
.8fea		a5 11		lda $11		                lda toin+1              ; MSB
.8fec		c5 0f		cmp $0f		                cmp ciblen+1
.8fee		90 2a		bcc $901a	                bcc _input_fine         ; unsigned comparison
.8ff0		a5 10		lda $10		                lda toin                ; LSB
.8ff2		c5 0e		cmp $0e		                cmp ciblen
.8ff4		90 24		bcc $901a	                bcc _input_fine
.8ff6		a5 27		lda $27		                lda tmp2
.8ff8		48		pha		                pha
.8ff9		a5 28		lda $28		                lda tmp2+1
.8ffb		48		pha		                pha
.8ffc		a5 29		lda $29		                lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
.8ffe		48		pha		                pha
.8fff		20 48 8f	jsr $8f48	                jsr xt_refill           ; ( -- f )
.9002		68		pla		                pla
.9003		85 29		sta $29		                sta tmp3
.9005		68		pla		                pla
.9006		85 28		sta $28		                sta tmp2+1
.9008		68		pla		                pla
.9009		85 27		sta $27		                sta tmp2
.900b		b5 00		lda $00,x	                lda 0,x
.900d		15 01		ora $01,x	                ora 1,x
.900f		d0 05		bne $9016	                bne _refill_ok
.9011		a9 06		lda #$06	                lda #err_refill
.9013		4c 44 d8	jmp $d844	                jmp error
.9016						_refill_ok:
.9016		e8		inx		                inx
.9017		e8		inx		                inx
.9018		80 d0		bra $8fea	                bra _savechars_loop
.901a						_input_fine:
.901a		a5 0c		lda $0c		                lda cib
.901c		18		clc		                clc
.901d		65 10		adc $10		                adc toin        ; LSB
.901f		85 25		sta $25		                sta tmp1
.9021		a5 0d		lda $0d		                lda cib+1
.9023		65 11		adc $11		                adc toin+1      ; MSB
.9025		85 26		sta $26		                sta tmp1+1
.9027		b2 25		lda ($25)	                lda (tmp1)
.9029		24 27		bit $27		                bit tmp2
.902b		30 03		bmi $9030	                bmi _handle_escapes    ; Only checking bit 7
.902d		4c b3 90	jmp $90b3	                jmp _regular_char
.9030						_handle_escapes:
.9030		24 28		bit $28		                bit tmp2+1
.9032		30 03		bmi $9037	                bmi _escaped
.9034		4c a9 90	jmp $90a9	                jmp _not_escaped
.9037						_escaped:
.9037		70 3c		bvs $9075	                bvs _check_esc_chars
.9039		a9 01		lda #$01	                lda #1
.903b		24 28		bit $28		                bit tmp2+1
.903d		d0 10		bne $904f	                bne _esc_x_second_digit
.903f		e6 28		inc $28		                inc tmp2+1  ; Adjust flag for second digit next time.
.9041		b2 25		lda ($25)	                lda (tmp1)  ; Get the char again.
.9043		20 d1 8f	jsr $8fd1	                jsr convert_hex_value
.9046		0a		asl a		                asl
.9047		0a		asl a		                asl
.9048		0a		asl a		                asl
.9049		0a		asl a		                asl
.904a		85 29		sta $29		                sta tmp3    ; Save it for later.
.904c		4c ba 90	jmp $90ba	                jmp _next_character
.904f						_esc_x_second_digit:
.904f		64 28		stz $28		                stz tmp2+1
.9051		b2 25		lda ($25)	                lda (tmp1)
.9053		20 d1 8f	jsr $8fd1	                jsr convert_hex_value
.9056		05 29		ora $29		                ora tmp3
.9058		4c b7 90	jmp $90b7	                jmp _save_character
.905b						_esc_tr_table:
>905b		07				    .byte   7               ; a -> BEL (ASCII value 7)
>905c		08				    .byte   8               ; b -> Backspace (ASCII value 8)
>905d		00 00				    .byte   0,0             ; c, d no escape
>905f		1b				    .byte   27              ; e -> ESC (ASCII value 27)
>9060		0c				    .byte   12              ; f -> FF (ASCII value 12)
>9061		00 00 00 00 00			    .byte   0,0,0,0,0       ; g,h,i,j,k
>9066		0a				    .byte   10              ; l -> LF (ASCII value 10)
>9067		8d				    .byte   13+128          ; m -> CR/LF pair (ASCII values 13, 10)
>9068		0a				    .byte   10              ; n behaves like l --> lf
>9069		00 00				    .byte   0,0             ; o,p
>906b		22				    .byte   34              ; q -> Double quote (ASCII value 34)
>906c		0d				    .byte   13              ; r ->  CR (ASCII value 13)
>906d		00				    .byte   0               ; s
>906e		09				    .byte   9               ; t -> Horizontal TAB (ASCII value 9)
>906f		00				    .byte   0               ; u
>9070		0b				    .byte   11              ; v -> Vertical TAB (ASCII value 11)
>9071		00 00 00			    .byte   0,0,0           ; w,x,y   (x is a special case later)
>9074		80				    .byte   0+128           ; z -> NULL (ASCII value 0)
.9075						_check_esc_chars:
.9075		64 28		stz $28		                stz tmp2+1
.9077		c9 61		cmp #$61	                cmp #'a'
.9079		30 1a		bmi $9095	                bmi _check_esc_quote
.907b		c9 7b		cmp #$7b	                cmp #'z'+1
.907d		10 16		bpl $9095	                bpl _check_esc_quote
.907f		a8		tay		                tay
.9080		b9 fa 8f	lda $8ffa,y	                lda _esc_tr_table - 'a',y   ; fake base address to index with a-z directly
.9083		d0 03		bne $9088	                bne _esc_replace
.9085		98		tya		                tya                     ; revert if no translation
.9086		80 0d		bra $9095	                bra _check_esc_quote
.9088		10 2d		bpl $90b7	_esc_replace:   bpl _save_character     ; simple replacement
.908a		29 7f		and #$7f	                and #$7F                ; clear hi bit
.908c		f0 29		beq $90b7	                beq _save_character     ; NUL we can just output
.908e		20 96 97	jsr $9796	                jsr cmpl_a              ; else output first char (CR)
.9091		a9 0a		lda #$0a	                lda #10                 ; followed by LF
.9093		80 22		bra $90b7	                bra _save_character
.9095						_check_esc_quote:
.9095		c9 22		cmp #$22	                cmp #'"'
.9097		f0 1e		beq $90b7	                beq _save_character
.9099		c9 78		cmp #$78	                cmp #'x'
.909b		d0 06		bne $90a3	                bne _check_esc_backslash
.909d		a9 be		lda #$be	                lda #%10111110        ; Clear bits 6 and 0
.909f		85 28		sta $28		                sta tmp2+1
.90a1		80 17		bra $90ba	                bra _next_character
.90a3						_check_esc_backslash:
.90a3		c9 5c		cmp #$5c	                cmp #'\'
.90a5		d0 0c		bne $90b3	                bne _regular_char
.90a7		80 0e		bra $90b7	                bra _save_character
.90a9						_not_escaped:
.90a9		c9 5c		cmp #$5c	                cmp #'\'
.90ab		d0 06		bne $90b3	                bne _regular_char
.90ad		a9 ff		lda #$ff	                lda #$FF
.90af		85 28		sta $28		                sta tmp2+1
.90b1		80 07		bra $90ba	                bra _next_character
.90b3						_regular_char:
.90b3		c9 22		cmp #$22	                cmp #'"'
.90b5		f0 0c		beq $90c3	                beq _found_string_end
.90b7						_save_character:
.90b7		20 96 97	jsr $9796	                jsr cmpl_a
.90ba						_next_character:
.90ba		e6 10		inc $10		                inc toin
.90bc		d0 02		bne $90c0	                bne _savechars_loop_longjump
.90be		e6 11		inc $11		                inc toin+1
.90c0						_savechars_loop_longjump:
.90c0		4c ea 8f	jmp $8fea	                jmp _savechars_loop
.90c3						_found_string_end:
.90c3		e6 10		inc $10		                inc toin
.90c5		d0 02		bne $90c9	                bne +
.90c7		e6 11		inc $11		                inc toin+1
.90c9						+
.90c9		20 1b 89	jsr $891b	                jsr xt_here
.90cc		20 97 8f	jsr $8f97	                jsr xt_rot
.90cf		20 1e 92	jsr $921e	                jsr xt_store    ; Update the jmp target
.90d2		20 1b 89	jsr $891b	                jsr xt_here
.90d5		20 11 8d	jsr $8d11	                jsr xt_over
.90d8		20 f6 8b	jsr $8bf6	                jsr xt_minus    ; HERE - addr gives string length
.90db		a5 1a		lda $1a		                lda state
.90dd		05 1b		ora $1b		                ora state+1             ; paranoid
.90df		f0 03		beq $90e4	                beq _done
.90e1		20 da a1	jsr $a1da	                jsr cmpl_sliteral         ; ( addr u -- )
.90e4						_done:
.90e4		60		rts		z_s_quote:      rts
.90e5						xt_s_to_d:
.90e5		20 2e d8	jsr $d82e	                jsr underflow_1
.90e8		ca		dex		                dex
.90e9		ca		dex		                dex
.90ea		74 00		stz $00,x	                stz 0,x
.90ec		74 01		stz $01,x	                stz 1,x
.90ee		b5 03		lda $03,x	                lda 3,x
.90f0		10 04		bpl $90f6	                bpl _done
.90f2		d6 00		dec $00,x	                dec 0,x
.90f4		d6 01		dec $01,x	                dec 1,x
.90f6						_done:
.90f6		60		rts		z_s_to_d:       rts
.90f7						xt_semicolon:
.90f7		24 1c		bit $1c		                bit status
.90f9		70 11		bvs $910c	                bvs _colonword
.90fb		a9 60		lda #$60	                lda #OpRTS
.90fd		20 96 97	jsr $9796	                jsr cmpl_a
.9100		ca		dex		                dex
.9101		ca		dex		                dex
.9102		a5 06		lda $06		                lda workword
.9104		95 00		sta $00,x	                sta 0,x
.9106		a5 07		lda $07		                lda workword+1
.9108		95 01		sta $01,x	                sta 1,x
.910a		80 45		bra $9151	                bra _semicolon_done
.910c						_colonword:
.910c		a0 06		ldy #$06	                ldy #6
.910e		a5 00		lda $00		                lda cp
.9110		91 06		sta ($06),y	                sta (workword),y
.9112		c8		iny		                iny
.9113		a5 01		lda $01		                lda cp+1
.9115		91 06		sta ($06),y	                sta (workword),y
.9117		a9 60		lda #$60	                lda #OpRTS
.9119		20 96 97	jsr $9796	                jsr cmpl_a
.911c		24 1c		bit $1c		                bit status
.911e		10 26		bpl $9146	                bpl _new_word   ; Bit 7 is clear = new word
.9120		ca		dex		                dex
.9121		ca		dex		                dex
.9122		ca		dex		                dex
.9123		ca		dex		                dex
.9124		b2 06		lda ($06)	                lda (workword)
.9126		95 00		sta $00,x	                sta 0,x
.9128		74 01		stz $01,x	                stz 1,x
.912a		a5 06		lda $06		                lda workword
.912c		18		clc		                clc
.912d		69 08		adc #$08	                adc #8
.912f		95 02		sta $02,x	                sta 2,x
.9131		a5 07		lda $07		                lda workword+1
.9133		69 00		adc #$00	                adc #0                  ; only want carry
.9135		95 03		sta $03,x	                sta 3,x
.9137		a9 02		lda #$02	                lda #str_redefined       ; address of string "redefined"
.9139		20 6a d8	jsr $d86a	                jsr print_string_no_lf
.913c		20 bb 94	jsr $94bb	                jsr xt_type
.913f		20 d1 91	jsr $91d1	                jsr xt_space
.9142		a9 80		lda #$80	                lda #%10000000
.9144		14 1c		trb $1c		                trb status
.9146						_new_word:
.9146		a5 06		lda $06		                lda workword
.9148		85 02		sta $02		                sta dp
.914a		a5 07		lda $07		                lda workword+1
.914c		85 03		sta $03		                sta dp+1
.914e		20 98 d7	jsr $d798	                jsr dp_to_current       ; Save the updated DP to the
.9151						_semicolon_done:
.9151		64 1a		stz $1a		                stz state
.9153		64 1b		stz $1b		                stz state+1
.9155		60		rts		z_semicolon:    rts
.9156						xt_sign:
.9156		20 2e d8	jsr $d82e	                jsr underflow_1
.9159		b5 01		lda $01,x	                lda 1,x         ; check MSB of TOS
.915b		30 04		bmi $9161	                bmi _minus
.915d		e8		inx		                inx
.915e		e8		inx		                inx
.915f		80 09		bra $916a	                bra _done
.9161						_minus:
.9161		a9 2d		lda #$2d	                lda #'-'
.9163		95 00		sta $00,x	                sta 0,x         ; overwrite TOS
.9165		74 01		stz $01,x	                stz 1,x         ; paranoid
.9167		20 2d 89	jsr $892d	                jsr xt_hold
.916a						_done:
.916a		60		rts		z_sign:         rts
.916b						xt_slash:
.916b		a9 00		lda #$00	                lda #0
.916d		48		pha		                pha
.916e		80 03		bra $9173	                bra slashmod_common
.9170						xt_slash_mod:
.9170		a9 ff		lda #$ff	                lda #$FF
.9172		48		pha		                pha             ; falls through to _common
.9173						slashmod_common:
.9173		20 72 93	jsr $9372	                jsr xt_to_r             ; >R
.9176		20 e5 90	jsr $90e5	                jsr xt_s_to_d           ; S>D
.9179		20 fa 8e	jsr $8efa	                jsr xt_r_from           ; R>
.917c		20 88 91	jsr $9188	                jsr xt_sm_slash_rem     ; SM/REM
.917f		68		pla		                pla
.9180		d0 05		bne $9187	                bne _done
.9182		20 34 92	jsr $9234	                jsr xt_swap
.9185		e8		inx		                inx             ; DROP
.9186		e8		inx		                inx
.9187						_done:
.9187						z_slash_mod:
.9187		60		rts		z_slash:        rts
.9188						xt_sm_slash_rem:
.9188		20 38 d8	jsr $d838	                jsr underflow_3 ; contains double number
.918b		b5 03		lda $03,x	                lda 3,x
.918d		48		pha		                pha
.918e		b5 01		lda $01,x	                lda 1,x
.9190		55 03		eor $03,x	                eor 3,x
.9192		48		pha		                pha
.9193		20 cf 80	jsr $80cf	                jsr xt_abs
.9196		e8		inx		                inx             ; pretend we pushed n1 to R
.9197		e8		inx		                inx
.9198		20 57 9e	jsr $9e57	                jsr xt_dabs
.919b		ca		dex		                dex
.919c		ca		dex		                dex
.919d		20 40 95	jsr $9540	                jsr xt_um_slash_mod     ; UM/MOD
.91a0		68		pla		                pla
.91a1		10 03		bpl $91a6	                bpl +
.91a3		20 31 8c	jsr $8c31	                jsr xt_negate
.91a6						+
.91a6		68		pla		                pla
.91a7		10 07		bpl $91b0	                bpl _done
.91a9		e8		inx		                inx             ; pretend we pushed quotient to R
.91aa		e8		inx		                inx
.91ab		20 31 8c	jsr $8c31	                jsr xt_negate
.91ae		ca		dex		                dex
.91af		ca		dex		                dex
.91b0						_done:
.91b0		60		rts		z_sm_slash_rem: rts
.91b1						xt_source:
.91b1		ca		dex		                dex
.91b2		ca		dex		                dex
.91b3		a5 0c		lda $0c		                lda cib
.91b5		95 00		sta $00,x	                sta 0,x
.91b7		a5 0d		lda $0d		                lda cib+1
.91b9		95 01		sta $01,x	                sta 1,x
.91bb		ca		dex		                dex
.91bc		ca		dex		                dex
.91bd		a5 0e		lda $0e		                lda ciblen
.91bf		95 00		sta $00,x	                sta 0,x
.91c1		a5 0f		lda $0f		                lda ciblen+1
.91c3		95 01		sta $01,x	                sta 1,x
.91c5		60		rts		z_source:       rts
.91c6						xt_source_id:
.91c6		ca		dex		                dex
.91c7		ca		dex		                dex
.91c8		a5 0a		lda $0a		                lda insrc
.91ca		95 00		sta $00,x	                sta 0,x
.91cc		a5 0b		lda $0b		                lda insrc+1
.91ce		95 01		sta $01,x	                sta 1,x
.91d0		60		rts		z_source_id:    rts
.91d1						xt_space:
.91d1		a9 20		lda #$20	                lda #AscSP
.91d3		20 c5 86	jsr $86c5	                jsr emit_a
.91d6		60		rts		z_space:        rts
.91d7						xt_spaces:
.91d7		20 2e d8	jsr $d82e	                jsr underflow_1
.91da		b5 01		lda $01,x	                lda 1,x         ; ANS says this word takes a signed value
.91dc		30 10		bmi $91ee	                bmi _done       ; but prints no spaces for negative values.
.91de		b4 00		ldy $00,x	                ldy 0,x
.91e0		f0 08		beq $91ea	                beq _msb
.91e2						_loop:
.91e2		a9 20		lda #$20	                lda #AscSP
.91e4		20 c5 86	jsr $86c5	                jsr emit_a      ; user routine preserves X and Y
.91e7		88		dey		                dey
.91e8		d0 f8		bne $91e2	                bne _loop       ; Y is zero on exit so looping again emits 256 more spaces
.91ea						_msb:
.91ea		d6 01		dec $01,x	                dec 1,x         ; when decrementing MSB goes negative, it was zero so we're done
.91ec		10 f4		bpl $91e2	                bpl _loop       ; otherwise emit another 256 spaces
.91ee		e8		inx		_done:          inx
.91ef		e8		inx		                inx
.91f0		60		rts		z_spaces:       rts
.91f1						xt_star:
.91f1		20 33 d8	jsr $d833	                jsr underflow_2
.91f4		20 82 95	jsr $9582	                jsr xt_um_star
.91f7		e8		inx		                inx
.91f8		e8		inx		                inx
.91f9		60		rts		z_star:         rts
.91fa						xt_star_slash:
.91fa		20 03 92	jsr $9203	                jsr xt_star_slash_mod
.91fd		20 34 92	jsr $9234	                jsr xt_swap
.9200		e8		inx		                inx
.9201		e8		inx		                inx
.9202						z_star_slash:
.9202		60		rts		                rts
.9203						xt_star_slash_mod:
.9203		20 38 d8	jsr $d838	                jsr underflow_3
.9206		20 72 93	jsr $9372	                jsr xt_to_r
.9209		20 33 8b	jsr $8b33	                jsr xt_m_star
.920c		20 fa 8e	jsr $8efa	                jsr xt_r_from
.920f		20 88 91	jsr $9188	                jsr xt_sm_slash_rem
.9212						z_star_slash_mod:
.9212		60		rts		                rts
.9213						xt_state:
.9213		ca		dex		                dex
.9214		ca		dex		                dex
.9215		a9 1a		lda #$1a	                lda #<state
.9217		95 00		sta $00,x	                sta 0,x
.9219		a9 00		lda #$00	                lda #>state
.921b		95 01		sta $01,x	                sta 1,x
.921d		60		rts		z_state:        rts
.921e						xt_store:
.921e		20 33 d8	jsr $d833	                jsr underflow_2
.9221		b5 02		lda $02,x	                lda 2,x         ; LSB
.9223		81 00		sta ($00,x)	                sta (0,x)
.9225		f6 00		inc $00,x	                inc 0,x
.9227		d0 02		bne $922b	                bne +
.9229		f6 01		inc $01,x	                inc 1,x
.922b						+
.922b		b5 03		lda $03,x	                lda 3,x         ; MSB
.922d		81 00		sta ($00,x)	                sta (0,x)
.922f		e8		inx		                inx             ; 2DROP
.9230		e8		inx		                inx
.9231		e8		inx		                inx
.9232		e8		inx		                inx
.9233		60		rts		z_store:        rts
.9234						xt_swap:
.9234		20 33 d8	jsr $d833	                jsr underflow_2
.9237		b5 00		lda $00,x	                lda 0,x         ; LSB
.9239		b4 02		ldy $02,x	                ldy 2,x
.923b		95 02		sta $02,x	                sta 2,x
.923d		94 00		sty $00,x	                sty 0,x
.923f		b5 01		lda $01,x	                lda 1,x         ; MSB
.9241		b4 03		ldy $03,x	                ldy 3,x
.9243		95 03		sta $03,x	                sta 3,x
.9245		94 01		sty $01,x	                sty 1,x
.9247		60		rts		z_swap:         rts
.9248						xt_tick:
.9248		20 5d 8d	jsr $8d5d	                jsr xt_parse_name       ; ( -- addr u )
.924b		b5 00		lda $00,x	                lda 0,x
.924d		15 01		ora $01,x	                ora 1,x
.924f		d0 05		bne $9256	                bne +
.9251		a9 05		lda #$05	                lda #err_noname
.9253		4c 44 d8	jmp $d844	                jmp error
.9256						+
.9256		20 fc 9a	jsr $9afc	                jsr xt_find_name        ; ( addr u -- nt )
.9259		b5 00		lda $00,x	                lda 0,x
.925b		15 01		ora $01,x	                ora 1,x
.925d		d0 05		bne $9264	                bne +
.925f		a9 08		lda #$08	                lda #err_syntax
.9261		4c 44 d8	jmp $d844	                jmp error
.9264						+
.9264		20 45 9c	jsr $9c45	                jsr xt_name_to_int      ; ( nt -- xt )
.9267		60		rts		z_tick:         rts
.9268						xt_to:
.9268		20 48 92	jsr $9248	                jsr xt_tick             ; ( [n] xt )
.926b		b5 00		lda $00,x	                lda 0,x                 ; LSB
.926d		18		clc		                clc
.926e		69 03		adc #$03	                adc #3
.9270		85 25		sta $25		                sta tmp1
.9272		b5 01		lda $01,x	                lda 1,x                 ; MSB
.9274		69 00		adc #$00	                adc #0                  ; we just want the carry
.9276		85 26		sta $26		                sta tmp1+1
.9278		a5 1a		lda $1a		                lda state
.927a		05 1b		ora $1b		                ora state+1
.927c		f0 14		beq $9292	                beq _interpret
.927e		a5 25		lda $25		                lda tmp1            ; replace TOS with tmp1
.9280		95 00		sta $00,x	                sta 0,x
.9282		a5 26		lda $26		                lda tmp1+1
.9284		95 01		sta $01,x	                sta 1,x
.9286		20 04 8a	jsr $8a04	                jsr xt_literal      ; generate the runtime for LITERAL tmp1
.9289		a0 92		ldy #$92	                ldy #>xt_store      ; write the runtime for !
.928b		a9 1e		lda #$1e	                lda #<xt_store
.928d		20 86 97	jsr $9786	                jsr cmpl_subroutine
.9290		80 11		bra $92a3	                bra _done
.9292						_interpret:
.9292		20 33 d8	jsr $d833	                jsr underflow_2
.9295		e8		inx		                inx
.9296		e8		inx		                inx                     ; leaving just ( n )
.9297		b5 00		lda $00,x	                lda 0,x
.9299		92 25		sta ($25)	                sta (tmp1)              ; LSB
.929b		a0 01		ldy #$01	                ldy #1
.929d		b5 01		lda $01,x	                lda 1,x                 ; MSB
.929f		91 25		sta ($25),y	                sta (tmp1),y            ; fall through to common
.92a1		e8		inx		                inx                     ; DROP
.92a2		e8		inx		                inx
.92a3						_done:
.92a3		60		rts		z_to:           rts
.92a4						xt_to_body:
.92a4		20 2e d8	jsr $d82e	                jsr underflow_1
.92a7		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( xt xt )
.92aa		20 bf 9b	jsr $9bbf	                jsr xt_int_to_name      ; ( xt nt )
.92ad		f6 00		inc $00,x	                inc 0,x
.92af		d0 02		bne $92b3	                bne +
.92b1		f6 01		inc $01,x	                inc 1,x
.92b3						+
.92b3		a1 00		lda ($00,x)	                lda (0,x)               ; get status byte
.92b5		29 20		and #$20	                and #HC
.92b7		f0 0b		beq $92c4	                beq _no_cfa
.92b9		18		clc		                clc
.92ba		b5 02		lda $02,x	                lda 2,x         ; LSB
.92bc		69 03		adc #$03	                adc #3
.92be		95 02		sta $02,x	                sta 2,x
.92c0		90 02		bcc $92c4	                bcc _no_cfa
.92c2		f6 03		inc $03,x	                inc 3,x         ; MSB
.92c4						_no_cfa:
.92c4		e8		inx		                inx             ; get rid of the nt
.92c5		e8		inx		                inx
.92c6		60		rts		z_to_body:      rts
.92c7						xt_to_in:
.92c7		ca		dex		                dex
.92c8		ca		dex		                dex
.92c9		a9 10		lda #$10	                lda #<toin
.92cb		95 00		sta $00,x	                sta 0,x
.92cd		a9 00		lda #$00	                lda #>toin      ; paranoid, should be zero
.92cf		95 01		sta $01,x	                sta 1,x
.92d1		60		rts		z_to_in:        rts
.92d2						xt_to_number:
.92d2		20 3d d8	jsr $d83d	                jsr underflow_4
.92d5		b5 06		lda $06,x	                lda 6,x         ; ud-lo LSB
.92d7		85 2d		sta $2d		                sta scratch
.92d9		b5 07		lda $07,x	                lda 7,x         ; ud-lo MSB
.92db		85 2e		sta $2e		                sta scratch+1
.92dd		b5 04		lda $04,x	                lda 4,x         ; ud-hi LSB
.92df		85 2f		sta $2f		                sta scratch+2
.92e1		b5 05		lda $05,x	                lda 5,x         ; ud-hi MSB
.92e3		85 30		sta $30		                sta scratch+3
.92e5		ca		dex		                dex
.92e6		ca		dex		                dex
.92e7						_loop:
.92e7		a1 04		lda ($04,x)	                lda (4,x)
.92e9		95 00		sta $00,x	                sta 0,x                 ; ( ud-lo ud-hi addr u char )
.92eb		74 01		stz $01,x	                stz 1,x                 ; paranoid
.92ed		20 a0 9a	jsr $9aa0	                jsr xt_digit_question   ; ( char -- n -1 | char 0 )
.92f0		b5 00		lda $00,x	                lda 0,x
.92f2		d0 04		bne $92f8	                bne _digit_ok
.92f4		e8		inx		                inx
.92f5		e8		inx		                inx
.92f6		80 67		bra $935f	                bra _done       ; ( ud-lo ud-hi addr u char )
.92f8						_digit_ok:
.92f8		b5 02		lda $02,x	                lda 2,x
.92fa		85 31		sta $31		                sta scratch+4
.92fc		b5 03		lda $03,x	                lda 3,x
.92fe		85 32		sta $32		                sta scratch+5
.9300		a5 2f		lda $2f		                lda scratch+2
.9302		95 02		sta $02,x	                sta 2,x         ; NOS
.9304		a5 30		lda $30		                lda scratch+3
.9306		95 03		sta $03,x	                sta 3,x
.9308		a5 18		lda $18		                lda base
.930a		95 00		sta $00,x	                sta 0,x         ; TOS
.930c		74 01		stz $01,x	                stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
.930e		20 82 95	jsr $9582	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
.9311		b5 02		lda $02,x	                lda 2,x         ; ud-hi-lo
.9313		85 33		sta $33		                sta scratch+6
.9315		b5 03		lda $03,x	                lda 3,x
.9317		85 34		sta $34		                sta scratch+7
.9319		a5 2d		lda $2d		                lda scratch
.931b		95 02		sta $02,x	                sta 2,x
.931d		a5 2e		lda $2e		                lda scratch+1
.931f		95 03		sta $03,x	                sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
.9321		a5 18		lda $18		                lda base
.9323		95 00		sta $00,x	                sta 0,x
.9325		74 01		stz $01,x	                stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
.9327		20 82 95	jsr $9582	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
.932a		b5 00		lda $00,x	                lda 0,x
.932c		85 2f		sta $2f		                sta scratch+2
.932e		b5 01		lda $01,x	                lda 1,x
.9330		85 30		sta $30		                sta scratch+3
.9332		b5 02		lda $02,x	                lda 2,x
.9334		85 2d		sta $2d		                sta scratch
.9336		b5 03		lda $03,x	                lda 3,x
.9338		85 2e		sta $2e		                sta scratch+1
.933a		18		clc		                clc
.933b		a5 2d		lda $2d		                lda scratch     ; ud-lo LSB
.933d		65 31		adc $31		                adc scratch+4   ; n LSB
.933f		85 2d		sta $2d		                sta scratch     ; this is the new ud-lo
.9341		a5 2e		lda $2e		                lda scratch+1   ; ud-lo MSB
.9343		65 32		adc $32		                adc scratch+5   ; n MSB
.9345		85 2e		sta $2e		                sta scratch+1
.9347		a5 2f		lda $2f		                lda scratch+2   ; LSB
.9349		65 33		adc $33		                adc scratch+6
.934b		85 2f		sta $2f		                sta scratch+2   ; this is the new ud-hi
.934d		a5 30		lda $30		                lda scratch+3   ; MSB
.934f		65 34		adc $34		                adc scratch+7
.9351		85 30		sta $30		                sta scratch+3
.9353		e8		inx		                inx
.9354		e8		inx		                inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
.9355		f6 04		inc $04,x	                inc 4,x
.9357		d0 02		bne $935b	                bne +
.9359		f6 05		inc $05,x	                inc 5,x
.935b						+
.935b		d6 02		dec $02,x	                dec 2,x
.935d		d0 88		bne $92e7	                bne _loop
.935f						_done:
.935f		e8		inx		                inx
.9360		e8		inx		                inx             ; ( ud-lo ud-hi addr u )
.9361		a5 2d		lda $2d		                lda scratch     ; new ud-lo
.9363		95 06		sta $06,x	                sta 6,x
.9365		a5 2e		lda $2e		                lda scratch+1
.9367		95 07		sta $07,x	                sta 7,x
.9369		a5 2f		lda $2f		                lda scratch+2
.936b		95 04		sta $04,x	                sta 4,x
.936d		a5 30		lda $30		                lda scratch+3
.936f		95 05		sta $05,x	                sta 5,x
.9371		60		rts		z_to_number:    rts
.9372						xt_to_r:
.9372		68		pla		                pla             ; LSB
.9373		85 23		sta $23		                sta tmptos
.9375		7a		ply		                ply             ; MSB
.9376		20 2e d8	jsr $d82e	                jsr underflow_1
.9379		b5 01		lda $01,x	                lda 1,x         ; MSB
.937b		48		pha		                pha
.937c		b5 00		lda $00,x	                lda 0,x         ; LSB
.937e		48		pha		                pha
.937f		e8		inx		                inx
.9380		e8		inx		                inx
.9381		5a		phy		                phy             ; MSB
.9382		a5 23		lda $23		                lda tmptos
.9384		48		pha		                pha             ; LSB
.9385		60		rts		z_to_r:         rts
.9386						xt_true:
.9386		ca		dex		                dex
.9387		ca		dex		                dex
.9388		a9 ff		lda #$ff	                lda #$FF
.938a		95 00		sta $00,x	                sta 0,x
.938c		95 01		sta $01,x	                sta 1,x
.938e		60		rts		z_true:         rts
.938f						xt_tuck:
.938f		20 33 d8	jsr $d833	                jsr underflow_2
.9392		ca		dex		                dex
.9393		ca		dex		                dex
.9394		b4 04		ldy $04,x	                ldy 4,x         ; LSB
.9396		b5 02		lda $02,x	                lda 2,x
.9398		95 04		sta $04,x	                sta 4,x
.939a		94 02		sty $02,x	                sty 2,x
.939c		95 00		sta $00,x	                sta 0,x
.939e		b4 05		ldy $05,x	                ldy 5,x         ; MSB
.93a0		b5 03		lda $03,x	                lda 3,x
.93a2		95 05		sta $05,x	                sta 5,x
.93a4		94 03		sty $03,x	                sty 3,x         ; bba
.93a6		95 01		sta $01,x	                sta 1,x         ; baa
.93a8		60		rts		z_tuck:         rts
.93a9						xt_two_drop:
.93a9		20 33 d8	jsr $d833	                jsr underflow_2
.93ac		e8		inx		                inx
.93ad		e8		inx		                inx
.93ae		e8		inx		                inx
.93af		e8		inx		                inx
.93b0		60		rts		z_two_drop:     rts
.93b1						xt_two_dup:
.93b1		20 33 d8	jsr $d833	                jsr underflow_2
.93b4		ca		dex		                dex
.93b5		ca		dex		                dex
.93b6		ca		dex		                dex
.93b7		ca		dex		                dex
.93b8		b5 04		lda $04,x	                lda 4,x         ; TOS
.93ba		95 00		sta $00,x	                sta 0,x
.93bc		b5 05		lda $05,x	                lda 5,x
.93be		95 01		sta $01,x	                sta 1,x
.93c0		b5 06		lda $06,x	                lda 6,x         ; NOS
.93c2		95 02		sta $02,x	                sta 2,x
.93c4		b5 07		lda $07,x	                lda 7,x
.93c6		95 03		sta $03,x	                sta 3,x
.93c8		60		rts		z_two_dup:      rts
.93c9						xt_two_fetch:
.93c9		20 2e d8	jsr $d82e	                jsr underflow_1
.93cc		b5 00		lda $00,x	                lda 0,x
.93ce		85 25		sta $25		                sta tmp1
.93d0		b4 01		ldy $01,x	                ldy 1,x
.93d2		84 26		sty $26		                sty tmp1+1
.93d4		ca		dex		                dex             ; reuse one stack element
.93d5		ca		dex		                dex
.93d6		b2 25		lda ($25)	                lda (tmp1)      ; copy LSB
.93d8		95 00		sta $00,x	                sta 0,x
.93da		a0 01		ldy #$01	                ldy #1          ; copy next
.93dc		b1 25		lda ($25),y	                lda (tmp1),y
.93de		95 01		sta $01,x	                sta 1,x
.93e0		c8		iny		                iny             ; copy next
.93e1		b1 25		lda ($25),y	                lda (tmp1),y
.93e3		95 02		sta $02,x	                sta 2,x
.93e5		c8		iny		                iny             ; copy next
.93e6		b1 25		lda ($25),y	                lda (tmp1),y
.93e8		95 03		sta $03,x	                sta 3,x
.93ea		60		rts		z_two_fetch:    rts
.93eb						xt_two_over:
.93eb		20 3d d8	jsr $d83d	                jsr underflow_4
.93ee		ca		dex		                dex
.93ef		ca		dex		                dex
.93f0		ca		dex		                dex
.93f1		ca		dex		                dex
.93f2		b5 08		lda $08,x	                lda 8,x
.93f4		95 00		sta $00,x	                sta 0,x
.93f6		b5 09		lda $09,x	                lda 9,x
.93f8		95 01		sta $01,x	                sta 1,x
.93fa		b5 0a		lda $0a,x	                lda 10,x
.93fc		95 02		sta $02,x	                sta 2,x
.93fe		b5 0b		lda $0b,x	                lda 11,x
.9400		95 03		sta $03,x	                sta 3,x
.9402		60		rts		z_two_over:     rts
.9403						xt_two_r_fetch:
.9403		ca		dex		                dex
.9404		ca		dex		                dex
.9405		ca		dex		                dex
.9406		ca		dex		                dex
.9407		8a		txa		                txa
.9408		ba		tsx		                tsx
.9409		da		phx		                phx             ; 65c02 has no TXY, so do it the hard way
.940a		7a		ply		                ply
.940b		aa		tax		                tax
.940c		b9 03 01	lda $0103,y	                lda $0103,y     ; LSB of top entry
.940f		95 00		sta $00,x	                sta 0,x
.9411		b9 04 01	lda $0104,y	                lda $0104,y     ; MSB of top entry
.9414		95 01		sta $01,x	                sta 1,x
.9416		b9 05 01	lda $0105,y	                lda $0105,y     ; LSB of bottom entry
.9419		95 02		sta $02,x	                sta 2,x
.941b		b9 06 01	lda $0106,y	                lda $0106,y     ; MSB of top entry
.941e		95 03		sta $03,x	                sta 3,x
.9420		60		rts		z_two_r_fetch:  rts
.9421						xt_two_r_from:
.9421		68		pla		                pla                     ; LSB
.9422		85 25		sta $25		                sta tmp1
.9424		68		pla		                pla                     ; MSB
.9425		85 26		sta $26		                sta tmp1+1
.9427		ca		dex		                dex
.9428		ca		dex		                dex
.9429		ca		dex		                dex
.942a		ca		dex		                dex
.942b		68		pla		                pla                     ; LSB
.942c		95 00		sta $00,x	                sta 0,x
.942e		68		pla		                pla                     ; MSB
.942f		95 01		sta $01,x	                sta 1,x
.9431		68		pla		                pla                     ; LSB
.9432		95 02		sta $02,x	                sta 2,x
.9434		68		pla		                pla                     ; MSB
.9435		95 03		sta $03,x	                sta 3,x
.9437		a5 26		lda $26		                lda tmp1+1              ; MSB
.9439		48		pha		                pha
.943a		a5 25		lda $25		                lda tmp1                ; LSB
.943c		48		pha		                pha
.943d		60		rts		z_two_r_from:   rts
.943e						xt_two_slash:
.943e		20 2e d8	jsr $d82e	                jsr underflow_1
.9441		b5 01		lda $01,x	                lda 1,x
.9443		0a		asl a		                asl                     ; save the sign
.9444		76 01		ror $01,x	                ror 1,x
.9446		76 00		ror $00,x	                ror 0,x
.9448		60		rts		z_two_slash:    rts
.9449						xt_two_star:
.9449						xt_cells:
.9449		20 2e d8	jsr $d82e	                jsr underflow_1
.944c		16 00		asl $00,x	                asl 0,x
.944e		36 01		rol $01,x	                rol 1,x
.9450						z_cells:
.9450		60		rts		z_two_star:     rts
.9451						xt_two_store:
.9451		20 38 d8	jsr $d838	                jsr underflow_3
.9454		b5 00		lda $00,x	                lda 0,x
.9456		85 25		sta $25		                sta tmp1
.9458		b4 01		ldy $01,x	                ldy 1,x
.945a		84 26		sty $26		                sty tmp1+1
.945c		e8		inx		                inx
.945d		e8		inx		                inx
.945e		b5 00		lda $00,x	                lda 0,x         ; copy MSB
.9460		92 25		sta ($25)	                sta (tmp1)
.9462		b5 01		lda $01,x	                lda 1,x         ; copy next
.9464		a0 01		ldy #$01	                ldy #1
.9466		91 25		sta ($25),y	                sta (tmp1),y
.9468		b5 02		lda $02,x	                lda 2,x         ; copy next
.946a		c8		iny		                iny
.946b		91 25		sta ($25),y	                sta (tmp1),y
.946d		b5 03		lda $03,x	                lda 3,x         ; copy MSB
.946f		c8		iny		                iny
.9470		91 25		sta ($25),y	                sta (tmp1),y
.9472		e8		inx		                inx             ; 2DROP
.9473		e8		inx		                inx
.9474		e8		inx		                inx
.9475		e8		inx		                inx
.9476		60		rts		z_two_store:    rts
.9477						xt_two_swap:
.9477		20 3d d8	jsr $d83d	                jsr underflow_4
.947a		b5 00		lda $00,x	                lda 0,x
.947c		b4 04		ldy $04,x	                ldy 4,x
.947e		95 04		sta $04,x	                sta 4,x
.9480		94 00		sty $00,x	                sty 0,x
.9482		b5 01		lda $01,x	                lda 1,x
.9484		b4 05		ldy $05,x	                ldy 5,x
.9486		95 05		sta $05,x	                sta 5,x
.9488		94 01		sty $01,x	                sty 1,x
.948a		b5 02		lda $02,x	                lda 2,x
.948c		b4 06		ldy $06,x	                ldy 6,x
.948e		95 06		sta $06,x	                sta 6,x
.9490		94 02		sty $02,x	                sty 2,x
.9492		b5 03		lda $03,x	                lda 3,x
.9494		b4 07		ldy $07,x	                ldy 7,x
.9496		95 07		sta $07,x	                sta 7,x
.9498		94 03		sty $03,x	                sty 3,x
.949a		60		rts		z_two_swap:     rts
.949b						xt_two_to_r:
.949b		68		pla		                pla             ; LSB
.949c		85 25		sta $25		                sta tmp1
.949e		68		pla		                pla             ; MSB
.949f		85 26		sta $26		                sta tmp1+1
.94a1		20 33 d8	jsr $d833	                jsr underflow_2
.94a4		b5 03		lda $03,x	                lda 3,x         ; MSB
.94a6		48		pha		                pha
.94a7		b5 02		lda $02,x	                lda 2,x         ; LSB
.94a9		48		pha		                pha
.94aa		b5 01		lda $01,x	                lda 1,x         ; MSB
.94ac		48		pha		                pha
.94ad		b5 00		lda $00,x	                lda 0,x         ; LSB
.94af		48		pha		                pha
.94b0		e8		inx		                inx
.94b1		e8		inx		                inx
.94b2		e8		inx		                inx
.94b3		e8		inx		                inx
.94b4		a5 26		lda $26		                lda tmp1+1      ; MSB
.94b6		48		pha		                pha
.94b7		a5 25		lda $25		                lda tmp1        ; LSB
.94b9		48		pha		                pha
.94ba		60		rts		z_two_to_r:     rts
.94bb						xt_type:
.94bb		20 33 d8	jsr $d833	                jsr underflow_2
.94be		b5 02		lda $02,x	                lda 2,x
.94c0		85 25		sta $25		                sta tmp1
.94c2		b5 03		lda $03,x	                lda 3,x
.94c4		85 26		sta $26		                sta tmp1+1
.94c6						_loop:
.94c6		b5 00		lda $00,x	                lda 0,x
.94c8		15 01		ora $01,x	                ora 1,x
.94ca		f0 15		beq $94e1	                beq _done
.94cc		b2 25		lda ($25)	                lda (tmp1)
.94ce		20 c5 86	jsr $86c5	                jsr emit_a      ; avoids stack foolery
.94d1		e6 25		inc $25		                inc tmp1
.94d3		d0 02		bne $94d7	                bne +
.94d5		e6 26		inc $26		                inc tmp1+1
.94d7						+
.94d7		b5 00		lda $00,x	                lda 0,x
.94d9		d0 02		bne $94dd	                bne +
.94db		d6 01		dec $01,x	                dec 1,x
.94dd						+
.94dd		d6 00		dec $00,x	                dec 0,x
.94df		80 e5		bra $94c6	                bra _loop
.94e1						_done:
.94e1		e8		inx		                inx
.94e2		e8		inx		                inx
.94e3		e8		inx		                inx
.94e4		e8		inx		                inx
.94e5		60		rts		z_type:         rts
.94e6						xt_u_dot:
.94e6		20 2e d8	jsr $d82e	                jsr underflow_1
.94e9		20 9b d8	jsr $d89b	                jsr print_u
.94ec		a9 20		lda #$20	                lda #AscSP
.94ee		20 c5 86	jsr $86c5	                jsr emit_a
.94f1		60		rts		z_u_dot:        rts
.94f2						xt_u_dot_r:
.94f2		20 33 d8	jsr $d833	                jsr underflow_2
.94f5		20 72 93	jsr $9372	                jsr xt_to_r
.94f8		20 08 9e	jsr $9e08	                jsr xt_zero
.94fb		20 e1 89	jsr $89e1	                jsr xt_less_number_sign
.94fe		20 bf 8c	jsr $8cbf	                jsr xt_number_sign_s
.9501		20 9d 8c	jsr $8c9d	                jsr xt_number_sign_greater
.9504		20 fa 8e	jsr $8efa	                jsr xt_r_from
.9507		20 11 8d	jsr $8d11	                jsr xt_over
.950a		20 f6 8b	jsr $8bf6	                jsr xt_minus
.950d		20 d7 91	jsr $91d7	                jsr xt_spaces
.9510		20 bb 94	jsr $94bb	                jsr xt_type
.9513		60		rts		z_u_dot_r:      rts
.9514						xt_u_greater_than:
.9514		20 33 d8	jsr $d833	                jsr underflow_2
.9517		b5 00		lda $00,x	                lda 0,x
.9519		d5 02		cmp $02,x	                cmp 2,x
.951b		b5 01		lda $01,x	                lda 1,x
.951d		f5 03		sbc $03,x	                sbc 3,x
.951f		e8		inx		                inx
.9520		e8		inx		                inx
.9521		a9 00		lda #$00	                lda #0
.9523		69 ff		adc #$ff	                adc #$FF
.9525		95 00		sta $00,x	                sta 0,x         ; store flag
.9527		95 01		sta $01,x	                sta 1,x
.9529		60		rts		z_u_greater_than:    rts
.952a						xt_u_less_than:
.952a		20 33 d8	jsr $d833	                jsr underflow_2
.952d		b5 02		lda $02,x	                lda 2,x
.952f		d5 00		cmp $00,x	                cmp 0,x
.9531		b5 03		lda $03,x	                lda 3,x
.9533		f5 01		sbc $01,x	                sbc 1,x
.9535		e8		inx		                inx
.9536		e8		inx		                inx
.9537		a9 00		lda #$00	                lda #0
.9539		69 ff		adc #$ff	                adc #$FF
.953b		95 00		sta $00,x	                sta 0,x         ; store flag
.953d		95 01		sta $01,x	                sta 1,x
.953f		60		rts		z_u_less_than:    rts
.9540						xt_um_slash_mod:
.9540		20 38 d8	jsr $d838	                jsr underflow_3
.9543		b5 00		lda $00,x	                lda 0,x
.9545		15 01		ora $01,x	                ora 1,x
.9547		d0 05		bne $954e	                bne _not_zero
.9549		a9 04		lda #$04	                lda #err_divzero
.954b		4c 44 d8	jmp $d844	                jmp error
.954e						_not_zero:
.954e		a9 11		lda #$11	                lda #17
.9550		85 23		sta $23		                sta tmptos
.9552						_loop:
.9552		36 04		rol $04,x	                rol 4,x
.9554		36 05		rol $05,x	                rol 5,x
.9556		c6 23		dec $23		                dec tmptos
.9558		f0 22		beq $957c	                beq _done
.955a		36 02		rol $02,x	                rol 2,x
.955c		36 03		rol $03,x	                rol 3,x
.955e		64 25		stz $25		                stz tmp1        ; store the bit we got from hi cell (MSB)
.9560		26 25		rol $25		                rol tmp1
.9562		38		sec		                sec
.9563		b5 02		lda $02,x	                lda 2,x
.9565		f5 00		sbc $00,x	                sbc 0,x
.9567		85 26		sta $26		                sta tmp1+1
.9569		b5 03		lda $03,x	                lda 3,x
.956b		f5 01		sbc $01,x	                sbc 1,x
.956d		a8		tay		                tay
.956e		a5 25		lda $25		                lda tmp1
.9570		e9 00		sbc #$00	                sbc #0
.9572		90 de		bcc $9552	                bcc _loop
.9574		a5 26		lda $26		                lda tmp1+1
.9576		95 02		sta $02,x	                sta 2,x
.9578		94 03		sty $03,x	                sty 3,x         ; used as temp storage
.957a		80 d6		bra $9552	                bra _loop
.957c						_done:
.957c		e8		inx		                inx
.957d		e8		inx		                inx
.957e		20 34 92	jsr $9234	                jsr xt_swap
.9581		60		rts		z_um_slash_mod: rts
.9582						xt_um_star:
.9582		20 33 d8	jsr $d833	                jsr underflow_2
.9585		18		clc		                clc
.9586		b5 00		lda $00,x	                lda 0,x         ; copy TOS to tmp2
.9588		e9 00		sbc #$00	                sbc #0
.958a		85 27		sta $27		                sta tmp2
.958c		b5 01		lda $01,x	                lda 1,x
.958e		e9 00		sbc #$00	                sbc #0
.9590		90 31		bcc $95c3	                bcc _zero       ; is TOS zero?
.9592		85 28		sta $28		                sta tmp2+1
.9594		a9 00		lda #$00	                lda #0
.9596		85 25		sta $25		                sta tmp1
.9598		86 29		stx $29		                stx tmp3        ; tested for exit from outer loop
.959a		ca		dex		                dex
.959b		ca		dex		                dex
.959c						_outer_loop:
.959c		a0 08		ldy #$08	                ldy #8          ; counter inner loop
.959e		56 04		lsr $04,x	                lsr 4,x         ; think "2,x" then later "3,x"
.95a0						_inner_loop:
.95a0		90 0c		bcc $95ae	                bcc _no_add
.95a2		85 26		sta $26		                sta tmp1+1      ; save time, don't CLC
.95a4		a5 25		lda $25		                lda tmp1
.95a6		65 27		adc $27		                adc tmp2
.95a8		85 25		sta $25		                sta tmp1
.95aa		a5 26		lda $26		                lda tmp1+1
.95ac		65 28		adc $28		                adc tmp2+1
.95ae						_no_add:
.95ae		6a		ror a		                ror
.95af		66 25		ror $25		                ror tmp1
.95b1		76 04		ror $04,x	                ror 4,x         ; think "2,x" then later "3,x"
.95b3		88		dey		                dey
.95b4		d0 ea		bne $95a0	                bne _inner_loop ; go back for one more shift?
.95b6		e8		inx		                inx
.95b7		e4 29		cpx $29		                cpx tmp3
.95b9		d0 e1		bne $959c	                bne _outer_loop ; go back for eight more shifts?
.95bb		95 01		sta $01,x	                sta 1,x
.95bd		a5 25		lda $25		                lda tmp1
.95bf		95 00		sta $00,x	                sta 0,x
.95c1		80 04		bra $95c7	                bra _done
.95c3						_zero:
.95c3		74 02		stz $02,x	                stz 2,x
.95c5		74 03		stz $03,x	                stz 3,x
.95c7						_done:
.95c7		60		rts		z_um_star:      rts
.95c8						xt_unloop:
.95c8		a4 1f		ldy $1f		                ldy loopctrl
.95ca		88		dey		                dey
.95cb		88		dey		                dey
.95cc		88		dey		                dey
.95cd		88		dey		                dey
.95ce		84 1f		sty $1f		                sty loopctrl
.95d0		30 05		bmi $95d7	                bmi z_unloop            ; no active loops?
.95d2		b9 00 01	lda $0100,y	                lda loopindex,y         ; else re-cache the LSB of loopindex
.95d5		85 20		sta $20		                sta loopidx0
.95d7		60		rts		z_unloop:       rts
.95d8						xt_until:
.95d8		20 d8 97	jsr $97d8	                jsr cmpl_0branch_tos
.95db		60		rts		z_until:        rts
.95dc						xt_unused:
.95dc		ca		dex		                dex
.95dd		ca		dex		                dex
.95de		a9 00		lda #$00	                lda #<cp_end
.95e0		38		sec		                sec
.95e1		e5 00		sbc $00		                sbc cp
.95e3		95 00		sta $00,x	                sta 0,x
.95e5		a9 7c		lda #$7c	                lda #>cp_end
.95e7		e5 01		sbc $01		                sbc cp+1
.95e9		95 01		sta $01,x	                sta 1,x
.95eb		60		rts		z_unused:       rts
.95ec						xt_variable:
.95ec		20 40 84	jsr $8440	                jsr xt_create
.95ef		a9 00		lda #$00	                lda #0
.95f1		92 00		sta ($00)	                sta (cp)
.95f3		e6 00		inc $00		                inc cp
.95f5		d0 02		bne $95f9	                bne +
.95f7		e6 01		inc $01		                inc cp+1
.95f9						+
.95f9		92 00		sta ($00)	                sta (cp)
.95fb		e6 00		inc $00		                inc cp
.95fd		d0 02		bne $9601	                bne +
.95ff		e6 01		inc $01		                inc cp+1
.9601						+
.9601		20 08 84	jsr $8408	                jsr adjust_z
.9604		60		rts		z_variable:     rts
.9605						xt_while:
.9605		20 c3 97	jsr $97c3	                jsr cmpl_0branch_later          ; branch to location we'll determine later
.9608		20 34 92	jsr $9234	                jsr xt_swap
.960b		60		rts		z_while:        rts
.960c						xt_within:
.960c		20 38 d8	jsr $d838	                jsr underflow_3
.960f		20 11 8d	jsr $8d11	                jsr xt_over
.9612		20 f6 8b	jsr $8bf6	                jsr xt_minus
.9615		20 72 93	jsr $9372	                jsr xt_to_r
.9618		20 f6 8b	jsr $8bf6	                jsr xt_minus
.961b		20 fa 8e	jsr $8efa	                jsr xt_r_from
.961e		20 2a 95	jsr $952a	                jsr xt_u_less_than
.9621		60		rts		z_within:       rts
.9622						xt_word:
.9622		20 2e d8	jsr $d82e	                jsr underflow_1
.9625		a4 10		ldy $10		                ldy toin                ; >IN
.9627						_loop:
.9627		c4 0e		cpy $0e		                cpy ciblen              ; quit if end of input
.9629		f0 09		beq $9634	                beq _found_char
.962b		b1 0c		lda ($0c),y	                lda (cib),y
.962d		d5 00		cmp $00,x	                cmp 0,x                 ; ASCII of delimiter
.962f		d0 03		bne $9634	                bne _found_char
.9631		c8		iny		                iny
.9632		80 f3		bra $9627	                bra _loop
.9634						_found_char:
.9634		84 10		sty $10		                sty toin
.9636		20 b8 8d	jsr $8db8	                jsr xt_parse            ; Returns ( addr u )
.9639		b5 00		lda $00,x	                lda 0,x
.963b		92 00		sta ($00)	                sta (cp)                ; Save length of string
.963d		48		pha		                pha                     ; Keep copy of length for later
.963e		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( addr u u )
.9641		a5 00		lda $00		                lda cp
.9643		18		clc		                clc
.9644		69 01		adc #$01	                adc #1
.9646		95 02		sta $02,x	                sta 2,x                 ; LSB of CP
.9648		a5 01		lda $01		                lda cp+1
.964a		69 00		adc #$00	                adc #0
.964c		95 03		sta $03,x	                sta 3,x                 ; ( addr cp+1 u )
.964e		20 12 8c	jsr $8c12	                jsr xt_move
.9651		ca		dex		                dex
.9652		ca		dex		                dex
.9653		a5 00		lda $00		                lda cp
.9655		95 00		sta $00,x	                sta 0,x
.9657		a5 01		lda $01		                lda cp+1
.9659		95 01		sta $01,x	                sta 1,x
.965b		68		pla		                pla                     ; length of string
.965c		18		clc		                clc
.965d		65 00		adc $00		                adc cp
.965f		85 00		sta $00		                sta cp
.9661		90 02		bcc $9665	                bcc z_word
.9663		e6 01		inc $01		                inc cp+1
.9665		60		rts		z_word:         rts
.9666						xt_xor:
.9666		20 33 d8	jsr $d833	                jsr underflow_2
.9669		b5 00		lda $00,x	                lda 0,x
.966b		55 02		eor $02,x	                eor 2,x
.966d		95 02		sta $02,x	                sta 2,x
.966f		b5 01		lda $01,x	                lda 1,x
.9671		55 03		eor $03,x	                eor 3,x
.9673		95 03		sta $03,x	                sta 3,x
.9675		e8		inx		                inx
.9676		e8		inx		                inx
.9677		60		rts		z_xor:          rts
.9678						xt_zero_equal:
.9678		20 2e d8	jsr $d82e	                jsr underflow_1
.967b		b5 00		lda $00,x	                lda 0,x
.967d		15 01		ora $01,x	                ora 1,x
.967f		f0 02		beq $9683	                beq _zero       ; if 0, A is inverse of the TRUE (-1) we want
.9681		a9 ff		lda #$ff	                lda #$FF        ; else set A inverse of the FALSE (0) we want
.9683						_zero:
.9683		49 ff		eor #$ff	                eor #$FF        ; now just invert:
.9685		95 00		sta $00,x	                sta 0,x
.9687		95 01		sta $01,x	                sta 1,x
.9689		60		rts		z_zero_equal:   rts
.968a						xt_zero_greater:
.968a		20 2e d8	jsr $d82e	                jsr underflow_1
.968d		a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS is negative)
.968f		b5 01		lda $01,x	                lda 1,x         ; MSB
.9691		30 05		bmi $9698	                bmi _done       ; TOS is negative, keep FLASE
.9693		15 00		ora $00,x	                ora 0,x
.9695		f0 01		beq $9698	                beq _done       ; TOS is zero, keep FALSE
.9697		88		dey		                dey             ; TOS is postive, make true
.9698						_done:
.9698		98		tya		                tya
.9699		95 00		sta $00,x	                sta 0,x
.969b		95 01		sta $01,x	                sta 1,x
.969d		60		rts		z_zero_greater: rts
.969e						xt_zero_less:
.969e		20 2e d8	jsr $d82e	                jsr underflow_1
.96a1		a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS positive)
.96a3		b5 01		lda $01,x	                lda 1,x         ; MSB
.96a5		10 01		bpl $96a8	                bpl _done       ; TOS is positive, so keep FALSE
.96a7		88		dey		                dey             ; TOS is negative, make TRUE
.96a8						_done:
.96a8		98		tya		                tya
.96a9		95 00		sta $00,x	                sta 0,x
.96ab		95 01		sta $01,x	                sta 1,x
.96ad		60		rts		z_zero_less:    rts
.96ae						xt_zero_unequal:
.96ae		20 2e d8	jsr $d82e	                jsr underflow_1
.96b1		b5 00		lda $00,x	                lda 0,x
.96b3		15 01		ora $01,x	                ora 1,x
.96b5		f0 02		beq $96b9	                beq _zero
.96b7		a9 ff		lda #$ff	                lda #$FF
.96b9						_zero:
.96b9		95 00		sta $00,x	                sta 0,x
.96bb		95 01		sta $01,x	                sta 1,x
.96bd		60		rts		z_zero_unequal: rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/compile.asm

.96be						xt_compile_comma:
.96be		20 2e d8	jsr $d82e	                jsr underflow_1
.96c1		20 a0 86	jsr $86a0	                jsr xt_dup              ; keep an unadjusted copy of xt
.96c4		20 a0 86	jsr $86a0	                jsr xt_dup              ; plus one to convert to nt
.96c7		20 bf 9b	jsr $9bbf	                jsr xt_int_to_name
.96ca		b5 00		lda $00,x	                lda 0,x
.96cc		15 01		ora $01,x	                ora 1,x
.96ce		f0 52		beq $9722	                beq cmpl_as_call        ; No nt so unknown size; must compile as a JSR
.96d0		20 a0 86	jsr $86a0	                jsr xt_dup
.96d3		20 f5 8c	jsr $8cf5	                jsr xt_one_plus         ; status is at nt+1
.96d6		a1 00		lda ($00,x)	                lda (0,x)               ; get status byte
.96d8		e8		inx		                inx                     ; drop pointer
.96d9		e8		inx		                inx
.96da		85 29		sta $29		                sta tmp3                ; keep copy of status byte
.96dc		29 08		and #$08	                and #NN
.96de		d0 42		bne $9722	                bne cmpl_as_call        ; never native
.96e0		20 e7 9d	jsr $9de7	                jsr xt_wordsize
.96e3		20 43 97	jsr $9743	                jsr check_strip_table
.96e6		a5 29		lda $29		                lda tmp3
.96e8		29 10		and #$10	                and #UF
.96ea		f0 1f		beq $970b	                beq _check_limit
.96ec		a0 02		ldy #$02	                ldy #uf_strip_offset
.96ee		b1 08		lda ($08),y	                lda (up),y
.96f0		c8		iny		                iny
.96f1		11 08		ora ($08),y	                ora (up),y
.96f3		f0 16		beq $970b	                beq _check_limit
.96f5		18		clc		                clc
.96f6		b5 02		lda $02,x	                lda 2,x
.96f8		69 03		adc #$03	                adc #3
.96fa		95 02		sta $02,x	                sta 2,x
.96fc		90 02		bcc $9700	                bcc +
.96fe		f6 03		inc $03,x	                inc 3,x                  ; we just care about the carry
.9700						+
.9700		38		sec		                sec
.9701		b5 00		lda $00,x	                lda 0,x
.9703		e9 03		sbc #$03	                sbc #3
.9705		95 00		sta $00,x	                sta 0,x
.9707		b0 02		bcs $970b	                bcs +
.9709		d6 01		dec $01,x	                dec 1,x                  ; we just care about the borrow
.970b						+
.970b						_check_limit:
.970b		a5 29		lda $29		                lda tmp3
.970d		29 02		and #$02	                and #AN                 ; check Always Native (AN) bit
.970f		d0 1e		bne $972f	                bne cmpl_inline         ; always natively compile
.9711						cmpl_by_limit:
.9711		a0 01		ldy #$01	                ldy #nc_limit_offset+1
.9713		b5 01		lda $01,x	                lda 1,x                 ; MSB of word size
.9715		d1 08		cmp ($08),y	                cmp (up),y              ; user-defined limit MSB
.9717		90 16		bcc $972f	                bcc cmpl_inline         ; borrow (C=0) means size < limit
.9719		d0 07		bne $9722	                bne cmpl_as_call        ; else non-zero means size > limit
.971b		88		dey		                dey
.971c		b1 08		lda ($08),y	                lda (up),y              ; user-defined limit LSB
.971e		d5 00		cmp $00,x	                cmp 0,x
.9720		b0 0d		bcs $972f	                bcs cmpl_inline         ; not bigger, so good to go
.9722						cmpl_as_call:
.9722		20 a9 93	jsr $93a9	                jsr xt_two_drop         ; either way 2drop leaves original xt
.9725		a9 20		lda #$20	                lda #OpJSR
.9727		20 96 97	jsr $9796	                jsr cmpl_a
.972a		20 cd 83	jsr $83cd	                jsr xt_comma
.972d		38		sec		                sec
.972e		60		rts		                rts
.972f						cmpl_inline:
.972f		20 1b 89	jsr $891b	                jsr xt_here
.9732		20 34 92	jsr $9234	                jsr xt_swap
.9735		20 a0 86	jsr $86a0	                jsr xt_dup
.9738		20 27 82	jsr $8227	                jsr xt_allot            ; allocate space for the word
.973b		20 12 8c	jsr $8c12	                jsr xt_move
.973e		20 9a 86	jsr $869a	                jsr xt_drop             ; drop original xt
.9741		18		clc		                clc
.9742		60		rts		                rts
.9743						check_strip_table:
.9743		a0 00		ldy #$00	                ldy #0
.9745						_strip_loop:
.9745		b9 77 97	lda $9777,y	                lda _strip_table,y       ; LSB of first word
.9748		d5 02		cmp $02,x	                cmp 2,x                 ; LSB of xt
.974a		d0 07		bne $9753	                bne _next_entry
.974c		b9 78 97	lda $9778,y	                lda _strip_table+1,y
.974f		d5 03		cmp $03,x	                cmp 3,x
.9751		f0 07		beq $975a	                beq _found_entry
.9753						_next_entry:
.9753		c8		iny		                iny
.9754		c8		iny		                iny
.9755		c0 0a		cpy #$0a	                cpy #_strip_table_size
.9757		d0 ec		bne $9745	                bne _strip_loop
.9759		60		rts		                rts
.975a						_found_entry:
.975a		98		tya		                tya
.975b		4a		lsr a		                lsr
.975c		a8		tay		                tay
.975d		b9 81 97	lda $9781,y	                lda _strip_size,y
.9760		48		pha		                pha                     ; save a copy
.9761		18		clc		                clc
.9762		75 02		adc $02,x	                adc 2,x
.9764		95 02		sta $02,x	                sta 2,x
.9766		90 02		bcc $976a	                bcc +
.9768		f6 03		inc $03,x	                inc 3,x                 ; we just care about the carry
.976a						+
.976a		68		pla		                pla
.976b		0a		asl a		                asl a                   ; Double to cut off both top and bottom.
.976c		f5 00		sbc $00,x	                sbc 0,x
.976e		49 ff		eor #$ff	                eor #$ff
.9770		95 00		sta $00,x	                sta 0,x
.9772		90 02		bcc $9776	                bcc +                   ; note inverted carry check
.9774		d6 01		dec $01,x	                dec 1,x                 ; we just care about the borrow
.9776						+
.9776		60		rts		                rts
.9777						_strip_table:
>9777		fa 8e e5 8e 72 93		                .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
>977d		9b 94 21 94			                .word xt_two_to_r, xt_two_r_from        ; 2>R, 2R>
=10						_strip_table_size = * - _strip_table
.9781						_strip_size:
>9781		04 04 04			                .byte 4, 4, 4                           ; R>, R@, >R
>9784		06 06				                .byte 6, 6                              ; 2>R, 2R>
.9786						z_compile_comma:
.9786						cmpl_subroutine:
.9786		48		pha		                pha             ; save LSB of address
.9787		a9 20		lda #$20	                lda #OpJSR      ; load opcode for JSR
.9789		80 03		bra $978e	                bra +
.978b						cmpl_jump:
.978b		48		pha		                pha             ; save LSB of address
.978c		a9 4c		lda #$4c	                lda #OpJMP      ; load opcode for JMP, fall thru
.978e						+
.978e		20 96 97	jsr $9796	                jsr cmpl_a      ; compile opcode
.9791		68		pla		                pla             ; retrieve address LSB; fall thru to cmpl_word
.9792						cmpl_word:
.9792		20 96 97	jsr $9796	                jsr cmpl_a      ; compile LSB of address
.9795		98		tya		                tya             ; fall thru for MSB
.9796						cmpl_a:
.9796		92 00		sta ($00)	                sta (cp)
.9798		e6 00		inc $00		                inc cp
.979a		d0 02		bne $979e	                bne _done
.979c		e6 01		inc $01		                inc cp+1
.979e						_done:
.979e		60		rts		                rts
.979f						cmpl_jump_tos:
.979f		a9 4c		lda #$4c	                lda #OpJMP
.97a1		20 96 97	jsr $9796	                jsr cmpl_a
.97a4		4c cd 83	jmp $83cd	                jmp xt_comma
.97a7						cmpl_jump_later:
.97a7		a9 4c		lda #$4c	                lda #OpJMP
.97a9		20 96 97	jsr $9796	                jsr cmpl_a
.97ac		20 1b 89	jsr $891b	                jsr xt_here
.97af		80 e1		bra $9792	                bra cmpl_word
.97b1						check_nc_limit:
.97b1		48		pha		                pha
.97b2		38		sec		                sec
.97b3		a0 01		ldy #$01	                ldy #nc_limit_offset+1
.97b5		b1 08		lda ($08),y	                lda (up),y              ; if MSB non zero we're good, leave with C=0
.97b7		f0 01		beq $97ba	                beq +
.97b9		18		clc		                clc
.97ba						+
.97ba		68		pla		                pla
.97bb		90 05		bcc $97c2	                bcc _done
.97bd		3a		dec a		                dea                     ; simplify test to A-1 < nc-limit
.97be		88		dey		                dey
.97bf		d1 08		cmp ($08),y	                cmp (up),y              ; A-1 < LSB leaves C=0, else C=1
.97c1		1a		inc a		                ina                     ; restore A, preserves carry
.97c2						_done:
.97c2		60		rts		                rts
.97c3						cmpl_0branch_later:
.97c3		20 08 9e	jsr $9e08	                jsr xt_zero             ; dummy placeholder, which forces long jmp in native version
.97c6		20 d8 97	jsr $97d8	                jsr cmpl_0branch_tos    ; generate native or subroutine branch code
.97c9		20 1b 89	jsr $891b	                jsr xt_here             ; either way the target address is two bytes before here
.97cc		38		sec		                sec
.97cd		b5 00		lda $00,x	                lda 0,x
.97cf		e9 02		sbc #$02	                sbc #2
.97d1		95 00		sta $00,x	                sta 0,x
.97d3		b0 02		bcs $97d7	                bcs +
.97d5		d6 01		dec $01,x	                dec 1,x
.97d7						+
.97d7		60		rts		                rts
.97d8						cmpl_0branch_tos:
.97d8		a9 0b		lda #$0b	                lda #ztest_runtime_size+5       ; typical size of inline form
.97da		20 b1 97	jsr $97b1	                jsr check_nc_limit              ; returns C=0 if we should native compile
.97dd		90 0a		bcc $97e9	                bcc _inline
.97df		a0 98		ldy #$98	                ldy #>zero_branch_runtime
.97e1		a9 3a		lda #$3a	                lda #<zero_branch_runtime
.97e3		20 86 97	jsr $9786	                jsr cmpl_subroutine             ; call the 0branch runtime
.97e6		4c cd 83	jmp $83cd	                jmp xt_comma                    ; add the payload and return
.97e9						_inline:
.97e9		a0 00		ldy #$00	                ldy #0
.97eb						-
.97eb		b9 3a 98	lda $983a,y	                lda ztest_runtime,y
.97ee		20 96 97	jsr $9796	                jsr cmpl_a
.97f1		c8		iny		                iny
.97f2		c0 06		cpy #$06	                cpy #ztest_runtime_size
.97f4		d0 f5		bne $97eb	                bne -
.97f6		b5 00		lda $00,x	                lda 0,x
.97f8		15 01		ora $01,x	                ora 1,x
.97fa		f0 31		beq $982d	                beq _long               ; always use the long form if target is 0
.97fc		20 a0 86	jsr $86a0	                jsr xt_dup
.97ff		20 1b 89	jsr $891b	                jsr xt_here
.9802		18		clc		                clc
.9803		a9 02		lda #$02	                lda #2
.9805		75 00		adc $00,x	                adc 0,x
.9807		95 00		sta $00,x	                sta 0,x
.9809		90 02		bcc $980d	                bcc +
.980b		f6 01		inc $01,x	                inc 1,x
.980d						+
.980d		20 f6 8b	jsr $8bf6	                jsr xt_minus
.9810		e8		inx		                inx             ; pre-drop offset and use wraparound indexing to preserve flags
.9811		e8		inx		                inx
.9812		b5 ff		lda $ff,x	                lda $ff,x
.9814		a8		tay		                tay             ; Y=MSB of offset
.9815		b5 fe		lda $fe,x	                lda $fe,x       ; A=LSB, setting N flag to bit 7
.9817		30 04		bmi $981d	                bmi _minus
.9819		c0 00		cpy #$00	                cpy #0          ; if LSB is positive we need MSB = 0
.981b		80 02		bra $981f	                bra +
.981d		c0 ff		cpy #$ff	_minus:         cpy #$ff        ; if LSB is negative we need MSB = ff
.981f		d0 0c		bne $982d	+               bne _long
.9821		a9 f0		lda #$f0	                lda #OpBEQ
.9823		20 96 97	jsr $9796	                jsr cmpl_a
.9826		b5 fe		lda $fe,x	                lda $fe,x
.9828		e8		inx		                inx             ; drop the original address we used to calc offset
.9829		e8		inx		                inx
.982a		4c 96 97	jmp $9796	                jmp cmpl_a
.982d						_long:
.982d		a9 d0		lda #$d0	                lda #OpBNE
.982f		20 96 97	jsr $9796	                jsr cmpl_a
.9832		a9 03		lda #$03	                lda #3
.9834		20 96 97	jsr $9796	                jsr cmpl_a
.9837		4c 9f 97	jmp $979f	                jmp cmpl_jump_tos
.983a						zero_branch_runtime:
.983a						ztest_runtime:
.983a		e8		inx		                inx
.983b		e8		inx		                inx
.983c		b5 fe		lda $fe,x	                lda $FE,x           ; wraparound so inx doesn't wreck Z status
.983e		15 ff		ora $ff,x	                ora $FF,x
=6						ztest_runtime_size = * - ztest_runtime
.9840						zbranch_runtime:
.9840		7a		ply		                ply
.9841		84 25		sty $25		                sty tmp1
.9843		7a		ply		                ply
.9844		84 26		sty $26		                sty tmp1+1
.9846		a8		tay		                tay             ; test if A = 0 which tells us whether to branch
.9847		f0 0d		beq $9856	                beq _branch
.9849		18		clc		                clc
.984a		a5 25		lda $25		                lda tmp1        ; LSB
.984c		69 03		adc #$03	                adc #3          ; skip two bytes plus the extra for jsr/rts behavior
.984e		85 25		sta $25		                sta tmp1
.9850		90 11		bcc $9863	                bcc _jmp
.9852		e6 26		inc $26		                inc tmp1+1
.9854		80 0d		bra $9863	                bra _jmp
.9856						_branch:
.9856		a0 01		ldy #$01	                ldy #1
.9858		b1 25		lda ($25),y	                lda (tmp1),y
.985a		48		pha		                pha                     ; stash the LSB until we've read the MSB too
.985b		c8		iny		                iny
.985c		b1 25		lda ($25),y	                lda (tmp1),y
.985e		85 26		sta $26		                sta tmp1+1              ; update tmp1 with our branch target
.9860		68		pla		                pla
.9861		85 25		sta $25		                sta tmp1
.9863						_jmp:
.9863		6c 25 00	jmp ($0025)	                jmp (tmp1)

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/tools.asm

.9866						xt_bye:
.9866		4c 26 f0	jmp $f026	                jmp kernel_bye
.9869						z_bye:
.9869						xt_dot_s:
.9869		20 52 85	jsr $8552	                jsr xt_depth    ; ( -- u )
.986c		a9 3c		lda #$3c	                lda #'<'
.986e		20 c5 86	jsr $86c5	                jsr emit_a
.9871		b5 00		lda $00,x	                lda 0,x
.9873		48		pha		                pha
.9874		ca		dex		                dex             ; DUP
.9875		ca		dex		                dex
.9876		95 00		sta $00,x	                sta 0,x
.9878		74 01		stz $01,x	                stz 1,x
.987a		20 9b d8	jsr $d89b	                jsr print_u
.987d		a9 3e		lda #$3e	                lda #'>'
.987f		20 c5 86	jsr $86c5	                jsr emit_a
.9882		a9 20		lda #$20	                lda #AscSP      ; ASCII for SPACE
.9884		20 c5 86	jsr $86c5	                jsr emit_a
.9887		e8		inx		                inx
.9888		e8		inx		                inx
.9889		e0 78		cpx #$78	                cpx #dsp0
.988b		f0 1e		beq $98ab	                beq _done
.988d		7a		ply		                ply
.988e		a9 77		lda #$77	                lda #dsp0-1     ; go up one to avoid garbage
.9890		85 29		sta $29		                sta tmp3
.9892		64 2a		stz $2a		                stz tmp3+1      ; must be zero page on the 65c02
.9894						_loop:
.9894		ca		dex		                dex
.9895		ca		dex		                dex
.9896		b2 29		lda ($29)	                lda (tmp3)
.9898		95 01		sta $01,x	                sta 1,x
.989a		c6 29		dec $29		                dec tmp3
.989c		b2 29		lda ($29)	                lda (tmp3)
.989e		95 00		sta $00,x	                sta 0,x
.98a0		c6 29		dec $29		                dec tmp3
.98a2		5a		phy		                phy
.98a3		20 30 86	jsr $8630	                jsr xt_dot
.98a6		7a		ply		                ply
.98a7		88		dey		                dey
.98a8		d0 ea		bne $9894	                bne _loop
.98aa		48		pha		                pha             ; dummy to balance stack
.98ab						_done:
.98ab		68		pla		                pla
.98ac		60		rts		z_dot_s:        rts
.98ad						xt_dump:
.98ad		20 33 d8	jsr $d833	                jsr underflow_2
.98b0						_row:
.98b0		a0 10		ldy #$10	                ldy #16
.98b2		64 27		stz $27		                stz tmp2
.98b4		20 3a 84	jsr $843a	                jsr xt_cr
.98b7		b5 03		lda $03,x	                lda 3,x
.98b9		20 f9 d6	jsr $d6f9	                jsr byte_to_ascii
.98bc		b5 02		lda $02,x	                lda 2,x
.98be		20 f9 d6	jsr $d6f9	                jsr byte_to_ascii
.98c1		20 d1 91	jsr $91d1	                jsr xt_space
.98c4		20 d1 91	jsr $91d1	                jsr xt_space
.98c7						_loop:
.98c7		b5 00		lda $00,x	                lda 0,x
.98c9		15 01		ora $01,x	                ora 1,x
.98cb		f0 39		beq $9906	                beq _all_printed
.98cd		a1 02		lda ($02,x)	                lda (2,x)
.98cf		48		pha		                pha                     ; byte_to_ascii destroys A
.98d0		20 f9 d6	jsr $d6f9	                jsr byte_to_ascii
.98d3		20 d1 91	jsr $91d1	                jsr xt_space
.98d6		68		pla		                pla
.98d7		20 14 d8	jsr $d814	                jsr is_printable
.98da		b0 02		bcs $98de	                bcs _printable
.98dc		a9 2e		lda #$2e	                lda #'.'                 ; Print dot if not printable
.98de						_printable:
.98de		5a		phy		                phy                     ; save counter
.98df		a4 27		ldy $27		                ldy tmp2
.98e1		91 00		sta ($00),y	                sta (cp),y
.98e3		e6 27		inc $27		                inc tmp2
.98e5		7a		ply		                ply
.98e6		c0 09		cpy #$09	                cpy #9
.98e8		d0 03		bne $98ed	                bne _next_char
.98ea		20 d1 91	jsr $91d1	                jsr xt_space
.98ed						_next_char:
.98ed		f6 02		inc $02,x	                inc 2,x
.98ef		d0 02		bne $98f3	                bne _counter
.98f1		f6 03		inc $03,x	                inc 3,x
.98f3						_counter:
.98f3		b5 00		lda $00,x	                lda 0,x
.98f5		d0 02		bne $98f9	                bne +
.98f7		d6 01		dec $01,x	                dec 1,x
.98f9						+
.98f9		d6 00		dec $00,x	                dec 0,x
.98fb		88		dey		                dey
.98fc		d0 c9		bne $98c7	                bne _loop               ; next byte
.98fe		20 d1 91	jsr $91d1	                jsr xt_space
.9901		20 14 99	jsr $9914	                jsr dump_print_ascii
.9904		80 aa		bra $98b0	                bra _row                ; new row
.9906						_all_printed:
.9906		a5 27		lda $27		                lda tmp2
.9908		f0 06		beq $9910	                beq _done
.990a		20 d1 91	jsr $91d1	                jsr xt_space
.990d		20 14 99	jsr $9914	                jsr dump_print_ascii
.9910						_done:
.9910		20 a9 93	jsr $93a9	                jsr xt_two_drop         ; one byte less than 4x INX
.9913		60		rts		z_dump:         rts
.9914						dump_print_ascii:
.9914		a0 00		ldy #$00	                ldy #0
.9916						_ascii_loop:
.9916		b1 00		lda ($00),y	                lda (cp),y
.9918		20 c5 86	jsr $86c5	                jsr emit_a
.991b		c8		iny		                iny
.991c		c0 08		cpy #$08	                cpy #8
.991e		d0 03		bne $9923	                bne +
.9920		20 d1 91	jsr $91d1	                jsr xt_space
.9923						+
.9923		c6 27		dec $27		                dec tmp2
.9925		d0 ef		bne $9916	                bne _ascii_loop
.9927		60		rts		                rts
.9928						xt_question:
.9928		20 1a 88	jsr $881a	                jsr xt_fetch
.992b		20 30 86	jsr $8630	                jsr xt_dot
.992e		60		rts		z_question:     rts
.992f						xt_see:
.992f		20 5d 8d	jsr $8d5d	                jsr xt_parse_name       ; ( addr u )
.9932		20 fc 9a	jsr $9afc	                jsr xt_find_name        ; ( nt | 0 )
.9935		b5 00		lda $00,x	                lda 0,x
.9937		15 01		ora $01,x	                ora 1,x
.9939		d0 05		bne $9940	                bne +
.993b		a9 05		lda #$05	                lda #err_noname
.993d		4c 44 d8	jmp $d844	                jmp error
.9940						+
.9940		20 3a 84	jsr $843a	                jsr xt_cr
.9943		a5 18		lda $18		                lda base
.9945		48		pha		                pha
.9946		20 26 89	jsr $8926	                jsr xt_hex
.9949		a9 09		lda #$09	                lda #str_see_nt
.994b		20 6a d8	jsr $d86a	                jsr print_string_no_lf
.994e		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( nt nt )
.9951		20 e6 94	jsr $94e6	                jsr xt_u_dot
.9954		20 d1 91	jsr $91d1	                jsr xt_space            ; ( nt )
.9957		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( nt nt )
.995a		20 45 9c	jsr $9c45	                jsr xt_name_to_int      ; ( nt xt )
.995d		a9 0a		lda #$0a	                lda #str_see_xt
.995f		20 6a d8	jsr $d86a	                jsr print_string_no_lf
.9962		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( nt xt xt )
.9965		20 e6 94	jsr $94e6	                jsr xt_u_dot
.9968		20 3a 84	jsr $843a	                jsr xt_cr               ; ( nt xt )
.996b		a9 08		lda #$08	                lda #str_see_flags
.996d		20 6a d8	jsr $d86a	                jsr print_string_no_lf
.9970		20 11 8d	jsr $8d11	                jsr xt_over             ; ( nt xt nt )
.9973		20 f5 8c	jsr $8cf5	                jsr xt_one_plus         ; ( nt xt nt+1 )
.9976		20 1a 88	jsr $881a	                jsr xt_fetch            ; ( nt xt flags )
.9979		b5 00		lda $00,x	                lda 0,x
.997b		a0 06		ldy #$06	                ldy #6                  ; Not all bits are used
.997d						_flag_loop:
.997d		48		pha		                pha
.997e		29 01		and #$01	                and #%00000001
.9980		18		clc		                clc
.9981		69 30		adc #$30	                adc #'0'
.9983		20 c5 86	jsr $86c5	                jsr emit_a
.9986		20 d1 91	jsr $91d1	                jsr xt_space
.9989		68		pla		                pla
.998a		6a		ror a		                ror                     ; Next flag
.998b		88		dey		                dey
.998c		d0 ef		bne $997d	                bne _flag_loop
.998e		20 3a 84	jsr $843a	                jsr xt_cr
.9991		e8		inx		                inx
.9992		e8		inx		                inx                     ; ( nt xt )
.9993		a9 0b		lda #$0b	                lda #str_see_size
.9995		20 6a d8	jsr $d86a	                jsr print_string_no_lf
.9998		20 34 92	jsr $9234	                jsr xt_swap             ; ( xt nt )
.999b		20 e7 9d	jsr $9de7	                jsr xt_wordsize         ; ( xt u )
.999e		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
.99a1		20 0a 85	jsr $850a	                jsr xt_decimal
.99a4		20 e6 94	jsr $94e6	                jsr xt_u_dot            ; ( xt u )
.99a7		20 26 89	jsr $8926	                jsr xt_hex
.99aa		20 3a 84	jsr $843a	                jsr xt_cr
.99ad		20 b1 93	jsr $93b1	                jsr xt_two_dup          ; ( xt u xt u )
.99b0		20 ad 98	jsr $98ad	                jsr xt_dump
.99b3		20 3a 84	jsr $843a	                jsr xt_cr
.99b6		20 1c a2	jsr $a21c	                jsr xt_disasm
.99b9		68		pla		                pla
.99ba		85 18		sta $18		                sta base
.99bc		60		rts		z_see:          rts
.99bd						xt_words:
.99bd		20 3a 84	jsr $843a	                jsr xt_cr
.99c0		a9 00		lda #$00	                lda #0
.99c2		48		pha		                pha
.99c3		ca		dex		                dex                     ; Make room on the stack for
.99c4		ca		dex		                dex                     ; a dictionary pointer.
.99c5		64 29		stz $29		                stz tmp3                ; Start at the beginning of
.99c7						_wordlist_loop:
.99c7		a0 22		ldy #$22	                ldy #num_order_offset   ; Check against byte variable #ORDER.
.99c9		a5 29		lda $29		                lda tmp3
.99cb		d1 08		cmp ($08),y	                cmp (up),y              ; See if we are done.
.99cd		d0 02		bne $99d1	                bne _have_wordlist
.99cf		80 45		bra $9a16	                bra _words_done
.99d1						_have_wordlist:
.99d1		18		clc		                clc                     ; Index into byte array SEARCH-ORDER.
.99d2		69 23		adc #$23	                adc #search_order_offset
.99d4		a8		tay		                tay
.99d5		b1 08		lda ($08),y	                lda (up),y              ; Get the index into array WORDLISTS
.99d7		0a		asl a		                asl                     ; Turn offset into cells offset.
.99d8		18		clc		                clc
.99d9		69 0a		adc #$0a	                adc #wordlists_offset
.99db		a8		tay		                tay
.99dc		b1 08		lda ($08),y	                lda (up),y              ; Save the DP for this wordlist
.99de		95 00		sta $00,x	                sta 0,x                 ; on the stack. ( nt )
.99e0		c8		iny		                iny
.99e1		b1 08		lda ($08),y	                lda (up),y
.99e3		95 01		sta $01,x	                sta 1,x
.99e5						_loop:
.99e5		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( nt nt )
.99e8		20 62 9c	jsr $9c62	                jsr xt_name_to_string   ; ( nt addr u )
.99eb		68		pla		                pla
.99ec		18		clc		                clc
.99ed		75 00		adc $00,x	                adc 0,x
.99ef		1a		inc a		                ina                     ; don't forget the space between words
.99f0		c9 4f		cmp #$4f	                cmp #MAX_LINE_LENGTH    ; usually 79
.99f2		90 06		bcc $99fa	                bcc +
.99f4		20 3a 84	jsr $843a	                jsr xt_cr
.99f7		b5 00		lda $00,x	                lda 0,x                 ; After going to next line, start
.99f9		1a		inc a		                ina                     ; with length of this word.
.99fa						+
.99fa		48		pha		                pha
.99fb		20 bb 94	jsr $94bb	                jsr xt_type             ; ( nt )
.99fe		a9 20		lda #$20	                lda #AscSP
.9a00		20 c5 86	jsr $86c5	                jsr emit_a
.9a03		20 f5 8c	jsr $8cf5	                jsr xt_one_plus         ; 1+
.9a06		20 f5 8c	jsr $8cf5	                jsr xt_one_plus         ; 1+
.9a09		20 1a 88	jsr $881a	                jsr xt_fetch            ; @ ( nt+1 )
.9a0c		b5 00		lda $00,x	                lda 0,x
.9a0e		15 01		ora $01,x	                ora 1,x
.9a10		d0 d3		bne $99e5	                bne _loop
.9a12		e6 29		inc $29		                inc tmp3
.9a14		80 b1		bra $99c7	                bra _wordlist_loop
.9a16						_words_done:
.9a16		68		pla		                pla                     ; dump counter
.9a17		e8		inx		                inx
.9a18		e8		inx		                inx
.9a19		60		rts		z_words:        rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/tali.asm

.9a1a						xt_allow_native:
.9a1a		20 85 d7	jsr $d785	                jsr current_to_dp
.9a1d		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.9a1f		b1 02		lda ($02),y	                lda (dp),y
.9a21		29 f5		and #$f5	                and #$FF-NN-AN  ; AN and NN flag is clear.
.9a23		91 02		sta ($02),y	                sta (dp),y
.9a25						z_allow_native:
.9a25		60		rts		                rts
.9a26						xt_always_native:
.9a26		20 85 d7	jsr $d785	                jsr current_to_dp
.9a29		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.9a2b		b1 02		lda ($02),y	                lda (dp),y
.9a2d		09 02		ora #$02	                ora #AN         ; Make sure AN flag is set
.9a2f		29 f7		and #$f7	                and #$FF-NN     ; and NN flag is clear.
.9a31		91 02		sta ($02),y	                sta (dp),y
.9a33						z_always_native:
.9a33		60		rts		                rts
.9a34						xt_bell:
.9a34		a9 07		lda #$07	                lda #7          ; ASCII value for BELl
.9a36		20 c5 86	jsr $86c5	                jsr emit_a
.9a39		60		rts		z_bell:         rts
.9a3a						xt_bounds:
.9a3a		20 33 d8	jsr $d833	                jsr underflow_2
.9a3d		18		clc		                clc
.9a3e		b5 00		lda $00,x	                lda 0,x                 ; LSB u
.9a40		b4 02		ldy $02,x	                ldy 2,x                 ; LSB addr
.9a42		75 02		adc $02,x	                adc 2,x
.9a44		95 02		sta $02,x	                sta 2,x                 ; LSB addr+u
.9a46		94 00		sty $00,x	                sty 0,x
.9a48		b5 01		lda $01,x	                lda 1,x                 ; MSB u
.9a4a		b4 03		ldy $03,x	                ldy 3,x                 ; MSB addr
.9a4c		75 03		adc $03,x	                adc 3,x
.9a4e		95 03		sta $03,x	                sta 3,x                 ; MSB addr+u
.9a50		94 01		sty $01,x	                sty 1,x
.9a52		60		rts		z_bounds:       rts
.9a53						xt_cleave:
.9a53		20 33 d8	jsr $d833	                jsr underflow_2
.9a56		20 9b a0	jsr $a09b	                jsr xt_minus_leading    ; -LEADING ( addr u )
.9a59		20 a9 9b	jsr $9ba9	                jsr xt_input_to_r       ; save old imput state
.9a5c		b5 00		lda $00,x	                lda 0,x         ; u is new ciblen
.9a5e		85 0e		sta $0e		                sta ciblen
.9a60		b5 01		lda $01,x	                lda 1,x
.9a62		85 0f		sta $0f		                sta ciblen+1
.9a64		b5 02		lda $02,x	                lda 2,x         ; addr is new cib
.9a66		85 0c		sta $0c		                sta cib
.9a68		b5 03		lda $03,x	                lda 3,x
.9a6a		85 0d		sta $0d		                sta cib+1
.9a6c		64 10		stz $10		                stz toin        ; >IN pointer is zero
.9a6e		64 11		stz $11		                stz toin+1
.9a70		20 5d 8d	jsr $8d5d	                jsr xt_parse_name       ; ( addr u addr-s u-s )
.9a73		b5 00		lda $00,x	                lda 0,x
.9a75		15 01		ora $01,x	                ora 1,x
.9a77		f0 23		beq $9a9c	                beq _done
.9a79		b5 04		lda $04,x	                lda 4,x         ; LSB of original u
.9a7b		38		sec		                sec
.9a7c		f5 00		sbc $00,x	                sbc 0,x
.9a7e		95 04		sta $04,x	                sta 4,x
.9a80		b5 05		lda $05,x	                lda 5,x         ; MSB of original u
.9a82		f5 01		sbc $01,x	                sbc 1,x
.9a84		95 05		sta $05,x	                sta 5,x
.9a86		b5 06		lda $06,x	                lda 6,x         ; LSB of original addr
.9a88		18		clc		                clc
.9a89		75 00		adc $00,x	                adc 0,x
.9a8b		95 06		sta $06,x	                sta 6,x
.9a8d		b5 07		lda $07,x	                lda 7,x         ; MSB of original addr
.9a8f		75 01		adc $01,x	                adc 1,x
.9a91		95 07		sta $07,x	                sta 7,x
.9a93		20 77 94	jsr $9477	                jsr xt_two_swap         ; ( addr-s u-s addr u )
.9a96		20 9b a0	jsr $a09b	                jsr xt_minus_leading
.9a99		20 77 94	jsr $9477	                jsr xt_two_swap         ; ( addr u addr-s u-s )
.9a9c						_done:
.9a9c		20 b6 9d	jsr $9db6	                jsr xt_r_to_input
.9a9f		60		rts		z_cleave:       rts
.9aa0						xt_digit_question:
.9aa0		20 2e d8	jsr $d82e	                jsr underflow_1
.9aa3		ca		dex		                dex
.9aa4		ca		dex		                dex
.9aa5		74 00		stz $00,x	                stz 0,x                 ; default flag is failure
.9aa7		74 01		stz $01,x	                stz 1,x
.9aa9		74 03		stz $03,x	                stz 3,x                 ; paranoid
.9aab		b5 02		lda $02,x	                lda 2,x
.9aad		c9 30		cmp #$30	                cmp #'0'
.9aaf		90 23		bcc $9ad4	                bcc _done               ; failure flag already set
.9ab1		c9 3a		cmp #$3a	                cmp #'9'+1               ; this is actually ":"
.9ab3		90 12		bcc $9ac7	                bcc _checkbase
.9ab5		c9 41		cmp #$41	                cmp #'A'
.9ab7		90 1b		bcc $9ad4	                bcc _done               ; failure flag is already set
.9ab9		c9 61		cmp #$61	                cmp #'a'
.9abb		90 07		bcc $9ac4	                bcc _case_done          ; not lower case, too low
.9abd		c9 7b		cmp #$7b	                cmp #'z'+1
.9abf		b0 03		bcs $9ac4	                bcs _case_done          ; not lower case, too high
.9ac1		18		clc		                clc                     ; just right
.9ac2		69 e0		adc #$e0	                adc #$E0                ; offset to upper case (wraps)
.9ac4						_case_done:
.9ac4		38		sec		                sec
.9ac5		e9 07		sbc #$07	                sbc #7                  ; fall through to _checkbase
.9ac7						_checkbase:
.9ac7		38		sec		                sec
.9ac8		e9 30		sbc #$30	                sbc #'0'                 ; this is also the conversion step
.9aca		c5 18		cmp $18		                cmp base
.9acc		b0 06		bcs $9ad4	                bcs _done               ; already have false flag
.9ace		95 02		sta $02,x	                sta 2,x                 ; put number in NOS
.9ad0		d6 00		dec $00,x	                dec 0,x                 ; set success flag
.9ad2		d6 01		dec $01,x	                dec 1,x
.9ad4						_done:
.9ad4						z_digit_question:
.9ad4		60		rts		                rts
.9ad5						xt_execute_parsing:
.9ad5		20 38 d8	jsr $d838	                jsr underflow_3
.9ad8		20 a9 9b	jsr $9ba9	                jsr xt_input_to_r       ; save normal input for later
.9adb		20 8c 9c	jsr $9c8c	                jsr xt_not_rote         ; -ROT ( xt addr u )
.9ade		b5 00		lda $00,x	                lda 0,x                 ; TOS is new ciblen
.9ae0		85 0e		sta $0e		                sta ciblen
.9ae2		b5 01		lda $01,x	                lda 1,x
.9ae4		85 0f		sta $0f		                sta ciblen+1
.9ae6		b5 02		lda $02,x	                lda 2,x                 ; NOS is new cib
.9ae8		85 0c		sta $0c		                sta cib
.9aea		b5 03		lda $03,x	                lda 3,x
.9aec		85 0d		sta $0d		                sta cib+1
.9aee		64 10		stz $10		                stz toin                ; Set >IN to zero
.9af0		64 11		stz $11		                stz toin+1
.9af2		20 a9 93	jsr $93a9	                jsr xt_two_drop         ; 2DROP ( xt )
.9af5		20 05 88	jsr $8805	                jsr xt_execute
.9af8		20 b6 9d	jsr $9db6	                jsr xt_r_to_input
.9afb						z_execute_parsing:
.9afb		60		rts		                rts
.9afc						xt_find_name:
.9afc		20 33 d8	jsr $d833	                jsr underflow_2
.9aff		b5 00		lda $00,x	                lda 0,x
.9b01		15 01		ora $01,x	                ora 1,x
.9b03		d0 03		bne $9b08	                bne _nonempty
.9b05		4c 39 9b	jmp $9b39	                jmp _fail_done
.9b08						_nonempty:
.9b08		64 29		stz $29		                stz tmp3                ; Start at the beginning
.9b0a						_wordlist_loop:
.9b0a		a0 22		ldy #$22	                ldy #num_order_offset   ; Compare to byte variable #ORDER
.9b0c		a5 29		lda $29		                lda tmp3
.9b0e		d1 08		cmp ($08),y	                cmp (up),y              ; Check to see if we are done
.9b10		f0 27		beq $9b39	                beq _fail_done
.9b12		18		clc		                clc             ; SEARCH-ORDER is array of bytes.
.9b13		69 23		adc #$23	                adc #search_order_offset
.9b15		a8		tay		                tay
.9b16		b1 08		lda ($08),y	                lda (up),y      ; Get the id byte, which is the offset
.9b18		0a		asl a		                asl                     ; Turn offset into cells offset.
.9b19		18		clc		                clc
.9b1a		69 0a		adc #$0a	                adc #wordlists_offset
.9b1c		a8		tay		                tay
.9b1d		b1 08		lda ($08),y	                lda (up),y
.9b1f		85 25		sta $25		                sta tmp1
.9b21		c8		iny		                iny
.9b22		b1 08		lda ($08),y	                lda (up),y
.9b24		85 26		sta $26		                sta tmp1+1
.9b26		20 10 d7	jsr $d710	                jsr find_header_name
.9b29		d0 04		bne $9b2f	                bne _success
.9b2b		e6 29		inc $29		                inc tmp3
.9b2d		80 db		bra $9b0a	                bra _wordlist_loop
.9b2f						_success:
.9b2f		a5 25		lda $25		                lda tmp1
.9b31		95 02		sta $02,x	                sta 2,x
.9b33		a5 26		lda $26		                lda tmp1+1
.9b35		95 03		sta $03,x	                sta 3,x
.9b37		80 04		bra $9b3d	                bra _done
.9b39						_fail_done:
.9b39		74 02		stz $02,x	                stz 2,x         ; failure flag
.9b3b		74 03		stz $03,x	                stz 3,x
.9b3d						_done:
.9b3d		e8		inx		                inx
.9b3e		e8		inx		                inx
.9b3f		60		rts		z_find_name:    rts
.9b40						xt_havekey:
.9b40		ca		dex		                dex
.9b41		ca		dex		                dex
.9b42		a9 16		lda #$16	                lda #<havekey
.9b44		95 00		sta $00,x	                sta 0,x
.9b46		a9 00		lda #$00	                lda #>havekey
.9b48		95 01		sta $01,x	                sta 1,x
.9b4a		60		rts		z_havekey:      rts
.9b4b						xt_hexstore:
.9b4b		20 38 d8	jsr $d838	                jsr underflow_3
.9b4e		20 a0 86	jsr $86a0	                jsr xt_dup              ; Save copy of original address
.9b51		20 9b 94	jsr $949b	                jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
.9b54						_loop:
.9b54		b5 00		lda $00,x	                lda 0,x
.9b56		15 01		ora $01,x	                ora 1,x
.9b58		f0 36		beq $9b90	                beq _done
.9b5a		20 53 9a	jsr $9a53	                jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.9b5d		20 9b 94	jsr $949b	                jsr xt_two_to_r
.9b60		20 08 9e	jsr $9e08	                jsr xt_zero
.9b63		20 08 9e	jsr $9e08	                jsr xt_zero
.9b66		20 21 94	jsr $9421	                jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.9b69		20 d2 92	jsr $92d2	                jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.9b6c		b5 00		lda $00,x	                lda 0,x
.9b6e		15 01		ora $01,x	                ora 1,x
.9b70		d0 17		bne $9b89	                bne _have_chars_left
.9b72		20 a9 93	jsr $93a9	                jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
.9b75		20 51 9e	jsr $9e51	                jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
.9b78		20 e5 8e	jsr $8ee5	                jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.9b7b		20 37 83	jsr $8337	                jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
.9b7e		20 fa 8e	jsr $8efa	                jsr xt_r_from           ; R>
.9b81		20 f5 8c	jsr $8cf5	                jsr xt_one_plus         ; 1+
.9b84		20 72 93	jsr $9372	                jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.9b87		80 cb		bra $9b54	                bra _loop
.9b89						_have_chars_left:
.9b89		8a		txa		                txa
.9b8a		18		clc		                clc
.9b8b		69 08		adc #$08	                adc #8
.9b8d		aa		tax		                tax
.9b8e		80 c4		bra $9b54	                bra _loop
.9b90						_done:
.9b90		e8		inx		                inx
.9b91		e8		inx		                inx
.9b92		e8		inx		                inx
.9b93		e8		inx		                inx                     ; 2DROP
.9b94		20 21 94	jsr $9421	                jsr xt_two_r_from       ; ( addr2+n addr2 )
.9b97		20 34 92	jsr $9234	                jsr xt_swap
.9b9a		20 f6 8b	jsr $8bf6	                jsr xt_minus            ; ( n )
.9b9d		60		rts		z_hexstore:     rts
.9b9e						xt_input:
.9b9e		ca		dex		                dex
.9b9f		ca		dex		                dex
.9ba0		a9 14		lda #$14	                lda #<input
.9ba2		95 00		sta $00,x	                sta 0,x
.9ba4		a9 00		lda #$00	                lda #>input
.9ba6		95 01		sta $01,x	                sta 1,x
.9ba8		60		rts		z_input:        rts
.9ba9						xt_input_to_r:
.9ba9		68		pla		                pla
.9baa		85 25		sta $25		                sta tmp1
.9bac		68		pla		                pla
.9bad		85 26		sta $26		                sta tmp1+1
.9baf		a0 07		ldy #$07	                ldy #7
.9bb1						_loop:
.9bb1		b9 0a 00	lda $000a,y	                lda insrc,y     ; insrc+7 is toin+1
.9bb4		48		pha		                pha
.9bb5		88		dey		                dey
.9bb6		10 f9		bpl $9bb1	                bpl _loop
.9bb8		a5 26		lda $26		                lda tmp1+1
.9bba		48		pha		                pha
.9bbb		a5 25		lda $25		                lda tmp1
.9bbd		48		pha		                pha
.9bbe		60		rts		z_input_to_r: 	rts
.9bbf						xt_int_to_name:
.9bbf		20 2e d8	jsr $d82e	                jsr underflow_1
.9bc2		ca		dex		                dex
.9bc3		ca		dex		                dex
.9bc4		74 00		stz $00,x	                stz 0,x
.9bc6		74 01		stz $01,x	                stz 1,x
.9bc8						_wordlist_loop:
.9bc8		b5 00		lda $00,x	                lda 0,x                 ; Get the current wordlist.
.9bca		0a		asl a		                asl                     ; Turn offset into cells offset.
.9bcb		18		clc		                clc
.9bcc		69 0a		adc #$0a	                adc #wordlists_offset
.9bce		a8		tay		                tay
.9bcf		b1 08		lda ($08),y	                lda (up),y              ; Save the DP for this wordlist
.9bd1		85 27		sta $27		                sta tmp2                ; into tmp2
.9bd3		c8		iny		                iny
.9bd4		b1 08		lda ($08),y	                lda (up),y
.9bd6		85 28		sta $28		                sta tmp2+1
.9bd8		a5 27		lda $27		                lda tmp2
.9bda		05 28		ora $28		                ora tmp2+1
.9bdc		f0 36		beq $9c14	                beq _next_wordlist
.9bde		b5 02		lda $02,x	                lda 2,x         ; Target xt is now behind wordlist id.
.9be0		85 29		sta $29		                sta tmp3        ; Save target xt in tmp3
.9be2		b5 03		lda $03,x	                lda 3,x
.9be4		85 2a		sta $2a		                sta tmp3+1
.9be6						_loop:
.9be6		a0 04		ldy #$04	                ldy #4          ; xt is four bytes down
.9be8		b1 27		lda ($27),y	                lda (tmp2),y    ; LSB of xt of current nt
.9bea		c5 29		cmp $29		                cmp tmp3
.9bec		d0 07		bne $9bf5	                bne _no_match
.9bee		c8		iny		                iny
.9bef		b1 27		lda ($27),y	                lda (tmp2),y    ; MSB of xt of current nt
.9bf1		c5 2a		cmp $2a		                cmp tmp3+1
.9bf3		f0 30		beq $9c25	                beq _match
.9bf5						_no_match:
.9bf5		18		clc		                clc
.9bf6		a5 27		lda $27		                lda tmp2
.9bf8		69 02		adc #$02	                adc #2
.9bfa		85 27		sta $27		                sta tmp2
.9bfc		90 02		bcc $9c00	                bcc +
.9bfe		e6 28		inc $28		                inc tmp2+1
.9c00						+
.9c00		a0 00		ldy #$00	                ldy #0
.9c02		b1 27		lda ($27),y	                lda (tmp2),y
.9c04		48		pha		                pha
.9c05		c8		iny		                iny
.9c06		11 27		ora ($27),y	                ora (tmp2),y
.9c08		f0 09		beq $9c13	                beq _zero
.9c0a		b1 27		lda ($27),y	                lda (tmp2),y
.9c0c		85 28		sta $28		                sta tmp2+1
.9c0e		68		pla		                pla
.9c0f		85 27		sta $27		                sta tmp2
.9c11		80 d3		bra $9be6	                bra _loop
.9c13						_zero:
.9c13		68		pla		                pla             ; Leftover from above loop
.9c14						_next_wordlist:
.9c14		b5 00		lda $00,x	                lda 0,x
.9c16		1a		inc a		                ina
.9c17		95 00		sta $00,x	                sta 0,x
.9c19		c9 0c		cmp #$0c	                cmp #max_wordlists
.9c1b		d0 ab		bne $9bc8	                bne _wordlist_loop
.9c1d		e8		inx		                inx
.9c1e		e8		inx		                inx
.9c1f		74 00		stz $00,x	                stz 0,x
.9c21		74 01		stz $01,x	                stz 1,x
.9c23		80 0a		bra $9c2f	                bra z_int_to_name
.9c25						_match:
.9c25		e8		inx		                inx
.9c26		e8		inx		                inx
.9c27		a5 27		lda $27		                lda tmp2
.9c29		95 00		sta $00,x	                sta 0,x
.9c2b		a5 28		lda $28		                lda tmp2+1
.9c2d		95 01		sta $01,x	                sta 1,x
.9c2f		60		rts		z_int_to_name:  rts
.9c30						xt_latestnt:
.9c30		ca		dex		                dex
.9c31		ca		dex		                dex
.9c32		20 85 d7	jsr $d785	                jsr current_to_dp
.9c35		a5 02		lda $02		                lda dp
.9c37		95 00		sta $00,x	                sta 0,x
.9c39		a5 03		lda $03		                lda dp+1
.9c3b		95 01		sta $01,x	                sta 1,x
.9c3d		60		rts		z_latestnt:     rts
.9c3e						xt_latestxt:
.9c3e		20 30 9c	jsr $9c30	                jsr xt_latestnt         ; ( nt )
.9c41		20 45 9c	jsr $9c45	                jsr xt_name_to_int      ; ( xt )
.9c44		60		rts		z_latestxt:     rts
.9c45						xt_name_to_int:
.9c45		20 2e d8	jsr $d82e	                jsr underflow_1
.9c48		b5 00		lda $00,x	                lda 0,x
.9c4a		18		clc		                clc
.9c4b		69 04		adc #$04	                adc #4
.9c4d		85 29		sta $29		                sta tmp3
.9c4f		b5 01		lda $01,x	                lda 1,x
.9c51		90 01		bcc $9c54	                bcc _done
.9c53		1a		inc a		                ina
.9c54						_done:
.9c54		85 2a		sta $2a		                sta tmp3+1
.9c56		a0 00		ldy #$00	                ldy #0
.9c58		b1 29		lda ($29),y	                lda (tmp3),y
.9c5a		95 00		sta $00,x	                sta 0,x
.9c5c		c8		iny		                iny
.9c5d		b1 29		lda ($29),y	                lda (tmp3),y
.9c5f		95 01		sta $01,x	                sta 1,x
.9c61		60		rts		z_name_to_int:  rts
.9c62						xt_name_to_string:
.9c62		20 2e d8	jsr $d82e	                jsr underflow_1
.9c65		ca		dex		                dex
.9c66		ca		dex		                dex
.9c67		a1 02		lda ($02,x)	                lda (2,x)
.9c69		95 00		sta $00,x	                sta 0,x
.9c6b		74 01		stz $01,x	                stz 1,x
.9c6d		b5 02		lda $02,x	                lda 2,x         ; LSB
.9c6f		18		clc		                clc
.9c70		69 08		adc #$08	                adc #8
.9c72		95 02		sta $02,x	                sta 2,x
.9c74		90 02		bcc $9c78	                bcc z_name_to_string
.9c76		f6 03		inc $03,x	                inc 3,x         ; MSB
.9c78						z_name_to_string:
.9c78		60		rts		                rts
.9c79						xt_nc_limit:
.9c79		a9 00		lda #$00	                lda #nc_limit_offset
.9c7b		4c ea d6	jmp $d6ea	                jmp push_upvar_tos
.9c7e						z_nc_limit:
.9c7e						xt_never_native:
.9c7e		20 85 d7	jsr $d785	                jsr current_to_dp
.9c81		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.9c83		b1 02		lda ($02),y	                lda (dp),y
.9c85		09 08		ora #$08	                ora #NN         ; Make sure NN flag is set
.9c87		29 fd		and #$fd	                and #$FF-AN     ; and AN flag is clear.
.9c89		91 02		sta ($02),y	                sta (dp),y
.9c8b						z_never_native:
.9c8b		60		rts		                rts
.9c8c						xt_not_rote:
.9c8c		20 38 d8	jsr $d838	                jsr underflow_3
.9c8f		b4 01		ldy $01,x	                ldy 1,x         ; MSB first
.9c91		b5 03		lda $03,x	                lda 3,x
.9c93		95 01		sta $01,x	                sta 1,x
.9c95		b5 05		lda $05,x	                lda 5,x
.9c97		95 03		sta $03,x	                sta 3,x
.9c99		94 05		sty $05,x	                sty 5,x
.9c9b		b4 00		ldy $00,x	                ldy 0,x         ; LSB second
.9c9d		b5 02		lda $02,x	                lda 2,x
.9c9f		95 00		sta $00,x	                sta 0,x
.9ca1		b5 04		lda $04,x	                lda 4,x
.9ca3		95 02		sta $02,x	                sta 2,x
.9ca5		94 04		sty $04,x	                sty 4,x
.9ca7		60		rts		z_not_rote:     rts
.9ca8						xt_number:
.9ca8		20 33 d8	jsr $d833	                jsr underflow_2
.9cab		64 1e		stz $1e		                stz tmpdsp      ; %n000 000d
.9cad		a5 18		lda $18		                lda base
.9caf		48		pha		                pha
.9cb0		20 b1 93	jsr $93b1	                jsr xt_two_dup
.9cb3		a1 02		lda ($02,x)	                lda (2,x)
.9cb5		c9 23		cmp #$23	                cmp #'#'                ; decimal?
.9cb7		d0 04		bne $9cbd	                bne _check_hex
.9cb9		a9 0a		lda #$0a	                lda #10
.9cbb		80 42		bra $9cff	                bra _base_changed
.9cbd						_check_hex:
.9cbd		c9 24		cmp #$24	                cmp #'$'
.9cbf		d0 04		bne $9cc5	                bne _check_binary
.9cc1		a9 10		lda #$10	                lda #16
.9cc3		80 3a		bra $9cff	                bra _base_changed
.9cc5						_check_binary:
.9cc5		c9 25		cmp #$25	                cmp #'%'
.9cc7		d0 04		bne $9ccd	                bne _check_char
.9cc9		a9 02		lda #$02	                lda #2
.9ccb		80 32		bra $9cff	                bra _base_changed
.9ccd						_check_char:
.9ccd		c9 27		cmp #$27	                cmp #"'"
.9ccf		d0 3a		bne $9d0b	                bne _check_minus
.9cd1		b5 00		lda $00,x	                lda 0,x         ; Get the length
.9cd3		c9 03		cmp #$03	                cmp #3
.9cd5		d0 26		bne $9cfd	                bne _not_a_char
.9cd7		b5 01		lda $01,x	                lda 1,x
.9cd9		d0 22		bne $9cfd	                bne _not_a_char ; No compare needed to check for non-zero.
.9cdb		b5 02		lda $02,x	                lda 2,x         ; LSB of address
.9cdd		18		clc		                clc
.9cde		69 02		adc #$02	                adc #2          ; length of string
.9ce0		85 23		sta $23		                sta tmptos
.9ce2		b5 03		lda $03,x	                lda 3,x
.9ce4		69 00		adc #$00	                adc #0          ; only need carry
.9ce6		85 24		sta $24		                sta tmptos+1
.9ce8		b2 23		lda ($23)	                lda (tmptos)
.9cea		c9 27		cmp #$27	                cmp #"'"
.9cec		d0 0f		bne $9cfd	                bne _not_a_char
.9cee		f6 02		inc $02,x	                inc 2,x
.9cf0		d0 02		bne $9cf4	                bne +
.9cf2		f6 03		inc $03,x	                inc 3,x
.9cf4						+
.9cf4		a1 02		lda ($02,x)	                lda (2,x)
.9cf6		95 02		sta $02,x	                sta 2,x
.9cf8		74 03		stz $03,x	                stz 3,x
.9cfa		4c 7d 9d	jmp $9d7d	                jmp _drop_original_string ; Single flag will drop the TOS for us.
.9cfd						_not_a_char:
.9cfd		80 5c		bra $9d5b	                bra _number_error
.9cff						_base_changed:
.9cff		85 18		sta $18		                sta base        ; Switch to the new base
.9d01		f6 02		inc $02,x	                inc 2,x         ; start one character later
.9d03		d0 02		bne $9d07	                bne +
.9d05		f6 03		inc $03,x	                inc 3,x
.9d07						+
.9d07		d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.9d09		a1 02		lda ($02,x)	                lda (2,x)       ; Load the first char again
.9d0b						_check_minus:
.9d0b		c9 2d		cmp #$2d	                cmp #'-'
.9d0d		d0 0c		bne $9d1b	                bne _check_dot
.9d0f		a9 80		lda #$80	                lda #$80
.9d11		85 1e		sta $1e		                sta tmpdsp      ; set the sign bit
.9d13		f6 02		inc $02,x	                inc 2,x         ; start one character later
.9d15		d0 02		bne $9d19	                bne +
.9d17		f6 03		inc $03,x	                inc 3,x
.9d19						+
.9d19		d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.9d1b						_check_dot:
.9d1b		b5 02		lda $02,x	                lda 2,x         ; LSB of address
.9d1d		18		clc		                clc
.9d1e		75 00		adc $00,x	                adc 0,x         ; length of string
.9d20		85 23		sta $23		                sta tmptos
.9d22		b5 03		lda $03,x	                lda 3,x
.9d24		69 00		adc #$00	                adc #0          ; only need carry
.9d26		85 24		sta $24		                sta tmptos+1
.9d28		a5 23		lda $23		                lda tmptos
.9d2a		d0 02		bne $9d2e	                bne +
.9d2c		c6 24		dec $24		                dec tmptos+1
.9d2e						+
.9d2e		c6 23		dec $23		                dec tmptos
.9d30		b2 23		lda ($23)	                lda (tmptos)
.9d32		c9 2e		cmp #$2e	                cmp #'.'
.9d34		d0 04		bne $9d3a	                bne _main
.9d36		e6 1e		inc $1e		                inc tmpdsp
.9d38		d6 00		dec $00,x	                dec 0,x
.9d3a						_main:
.9d3a		ca		dex		                dex
.9d3b		ca		dex		                dex
.9d3c		ca		dex		                dex
.9d3d		ca		dex		                dex
.9d3e		b5 04		lda $04,x	                lda 4,x         ; LSB of length
.9d40		95 00		sta $00,x	                sta 0,x
.9d42		74 01		stz $01,x	                stz 1,x         ; MSB, max length 255 chars
.9d44		b5 06		lda $06,x	                lda 6,x         ; LSB of address
.9d46		95 02		sta $02,x	                sta 2,x
.9d48		b5 07		lda $07,x	                lda 7,x         ; MSB of address
.9d4a		95 03		sta $03,x	                sta 3,x
.9d4c		74 04		stz $04,x	                stz 4,x         ; clear space for ud
.9d4e		74 05		stz $05,x	                stz 5,x
.9d50		74 06		stz $06,x	                stz 6,x
.9d52		74 07		stz $07,x	                stz 7,x
.9d54		20 d2 92	jsr $92d2	                jsr xt_to_number        ; (ud addr u -- ud addr u )
.9d57		b5 00		lda $00,x	                lda 0,x
.9d59		f0 1e		beq $9d79	                beq _all_converted
.9d5b						_number_error:
.9d5b		20 a9 93	jsr $93a9	                jsr xt_two_drop ; >NUMBER modified addr u
.9d5e		20 a9 93	jsr $93a9	                jsr xt_two_drop ; ud   (partially converted number)
.9d61		a9 3e		lda #$3e	                lda #'>'
.9d63		20 c5 86	jsr $86c5	                jsr emit_a
.9d66		20 bb 94	jsr $94bb	                jsr xt_type
.9d69		a9 3c		lda #$3c	                lda #'<'
.9d6b		20 c5 86	jsr $86c5	                jsr emit_a
.9d6e		20 d1 91	jsr $91d1	                jsr xt_space
.9d71		68		pla		                pla
.9d72		85 18		sta $18		                sta base
.9d74		a9 08		lda #$08	                lda #err_syntax
.9d76		4c 44 d8	jmp $d844	                jmp error
.9d79						_all_converted:
.9d79		e8		inx		                inx ; Drop the current addr u
.9d7a		e8		inx		                inx
.9d7b		e8		inx		                inx
.9d7c		e8		inx		                inx
.9d7d						_drop_original_string:
.9d7d		20 77 94	jsr $9477	                jsr xt_two_swap  ; Drop the original addr u
.9d80		20 a9 93	jsr $93a9	                jsr xt_two_drop  ; (was saved for unknown word error message)
.9d83		a5 1e		lda $1e		                lda tmpdsp      ; flag for double/minus
.9d85		a0 20		ldy #$20	                ldy #%00100000  ; status bit 5 for double(1) or single(0)
.9d87		0a		asl a		                asl             ; %n000 000d => %0000 00d0, C=n, Z=d
.9d88		f0 0a		beq $9d94	                beq _single
.9d8a		98		tya		                tya
.9d8b		04 1c		tsb $1c		                tsb status
.9d8d		90 0f		bcc $9d9e	                bcc _done       ; no minus, all done
.9d8f		20 76 9e	jsr $9e76	                jsr xt_dnegate
.9d92		80 0a		bra $9d9e	                bra _done
.9d94						_single:
.9d94		e8		inx		                inx
.9d95		e8		inx		                inx
.9d96		98		tya		                tya
.9d97		14 1c		trb $1c		                trb status
.9d99		90 03		bcc $9d9e	                bcc _done       ; no minus, all done
.9d9b		20 31 8c	jsr $8c31	                jsr xt_negate
.9d9e						_done:
.9d9e		68		pla		                pla
.9d9f		85 18		sta $18		                sta base
.9da1		60		rts		z_number:       rts
.9da2						xt_editor_wordlist:
.9da2						xt_one:
.9da2		ca		dex		                dex
.9da3		ca		dex		                dex
.9da4		a9 01		lda #$01	                lda #1
.9da6		95 00		sta $00,x	                sta 0,x
.9da8		74 01		stz $01,x	                stz 1,x
.9daa						z_editor_wordlist:
.9daa						z_one:
.9daa		60		rts		                rts
.9dab						xt_output:
.9dab		ca		dex		                dex
.9dac		ca		dex		                dex
.9dad		a9 12		lda #$12	                lda #<output
.9daf		95 00		sta $00,x	                sta 0,x
.9db1		a9 00		lda #$00	                lda #>output
.9db3		95 01		sta $01,x	                sta 1,x
.9db5		60		rts		z_output:       rts
.9db6						xt_r_to_input:
.9db6		68		pla		                pla
.9db7		85 25		sta $25		                sta tmp1
.9db9		68		pla		                pla
.9dba		85 26		sta $26		                sta tmp1+1
.9dbc		a0 00		ldy #$00	                ldy #0
.9dbe						_loop:
.9dbe		68		pla		                pla
.9dbf		99 0a 00	sta $000a,y	                sta insrc,y
.9dc2		c8		iny		                iny
.9dc3		c0 08		cpy #$08	                cpy #8
.9dc5		d0 f7		bne $9dbe	                bne _loop
.9dc7		a5 26		lda $26		                lda tmp1+1
.9dc9		48		pha		                pha
.9dca		a5 25		lda $25		                lda tmp1
.9dcc		48		pha		                pha
.9dcd		60		rts		z_r_to_input: 	rts
.9dce						xt_strip_underflow:
.9dce		a9 02		lda #$02	                lda #uf_strip_offset
.9dd0		4c ea d6	jmp $d6ea	                jmp push_upvar_tos
.9dd3						z_strip_underflow:
.9dd3						xt_assembler_wordlist:
.9dd3						xt_two:
.9dd3		ca		dex		                dex
.9dd4		ca		dex		                dex
.9dd5		a9 02		lda #$02	                lda #2
.9dd7		95 00		sta $00,x	                sta 0,x
.9dd9		74 01		stz $01,x	                stz 1,x
.9ddb						z_assembler_wordlist:
.9ddb		60		rts		z_two:          rts
.9ddc						xt_useraddr:
.9ddc		ca		dex		                dex
.9ddd		ca		dex		                dex
.9dde		a9 08		lda #$08	                lda #<up
.9de0		95 00		sta $00,x	                sta 0,x
.9de2		a9 00		lda #$00	                lda #>up
.9de4		95 01		sta $01,x	                sta 1,x
.9de6		60		rts		z_useraddr:     rts
.9de7						xt_wordsize:
.9de7		20 2e d8	jsr $d82e	                jsr underflow_1
.9dea		b5 00		lda $00,x	                lda 0,x
.9dec		85 25		sta $25		                sta tmp1
.9dee		b5 01		lda $01,x	                lda 1,x
.9df0		85 26		sta $26		                sta tmp1+1
.9df2		a0 06		ldy #$06	                ldy #6
.9df4		b1 25		lda ($25),y	                lda (tmp1),y    ; LSB of z
.9df6		88		dey		                dey
.9df7		88		dey		                dey
.9df8		38		sec		                sec
.9df9		f1 25		sbc ($25),y	                sbc (tmp1),y    ; LSB of xt
.9dfb		95 00		sta $00,x	                sta 0,x
.9dfd		a0 07		ldy #$07	                ldy #7
.9dff		b1 25		lda ($25),y	                lda (tmp1),y    ; MSB of z
.9e01		88		dey		                dey
.9e02		88		dey		                dey
.9e03		f1 25		sbc ($25),y	                sbc (tmp1),y    ; MSB of xt
.9e05		95 01		sta $01,x	                sta 1,x
.9e07		60		rts		z_wordsize:     rts
.9e08						xt_case:
.9e08						xt_false:
.9e08						xt_forth_wordlist:
.9e08						xt_zero:
.9e08		ca		dex		                dex             ; push
.9e09		ca		dex		                dex
.9e0a		74 00		stz $00,x	                stz 0,x
.9e0c		74 01		stz $01,x	                stz 1,x
.9e0e						z_case:
.9e0e						z_false:
.9e0e						z_forth_wordlist:
.9e0e						z_zero:
.9e0e		60		rts		                rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/double.asm

.9e0f						xt_d_minus:
.9e0f		20 3d d8	jsr $d83d	                jsr underflow_4 ; two double numbers
.9e12		38		sec		                sec
.9e13		b5 06		lda $06,x	                lda 6,x         ; LSB of lower word
.9e15		f5 02		sbc $02,x	                sbc 2,x
.9e17		95 06		sta $06,x	                sta 6,x
.9e19		b5 07		lda $07,x	                lda 7,x         ; MSB of lower word
.9e1b		f5 03		sbc $03,x	                sbc 3,x
.9e1d		95 07		sta $07,x	                sta 7,x
.9e1f		b5 04		lda $04,x	                lda 4,x         ; LSB of upper word
.9e21		f5 00		sbc $00,x	                sbc 0,x
.9e23		95 04		sta $04,x	                sta 4,x
.9e25		b5 05		lda $05,x	                lda 5,x         ; MSB of upper word
.9e27		f5 01		sbc $01,x	                sbc 1,x
.9e29		95 05		sta $05,x	                sta 5,x
.9e2b		e8		inx		                inx
.9e2c		e8		inx		                inx
.9e2d		e8		inx		                inx
.9e2e		e8		inx		                inx
.9e2f		60		rts		z_d_minus:      rts
.9e30						xt_d_plus:
.9e30		20 3d d8	jsr $d83d	                jsr underflow_4 ; two double numbers
.9e33		18		clc		                clc
.9e34		b5 02		lda $02,x	                lda 2,x         ; LSB of lower word
.9e36		75 06		adc $06,x	                adc 6,x
.9e38		95 06		sta $06,x	                sta 6,x
.9e3a		b5 03		lda $03,x	                lda 3,x         ; MSB of lower word
.9e3c		75 07		adc $07,x	                adc 7,x
.9e3e		95 07		sta $07,x	                sta 7,x
.9e40		b5 00		lda $00,x	                lda 0,x         ; LSB of upper word
.9e42		75 04		adc $04,x	                adc 4,x
.9e44		95 04		sta $04,x	                sta 4,x
.9e46		b5 01		lda $01,x	                lda 1,x         ; MSB of upper word
.9e48		75 05		adc $05,x	                adc 5,x
.9e4a		95 05		sta $05,x	                sta 5,x
.9e4c		e8		inx		                inx
.9e4d		e8		inx		                inx
.9e4e		e8		inx		                inx
.9e4f		e8		inx		                inx
.9e50		60		rts		z_d_plus:       rts
.9e51						xt_d_to_s:
.9e51		20 33 d8	jsr $d833	                jsr underflow_2
.9e54		e8		inx		                inx
.9e55		e8		inx		                inx
.9e56		60		rts		z_d_to_s:       rts
.9e57						xt_dabs:
.9e57		20 33 d8	jsr $d833	                jsr underflow_2 ; double number
.9e5a		b5 01		lda $01,x	                lda 1,x         ; MSB of high cell
.9e5c		10 17		bpl $9e75	                bpl _done       ; positive, we get off light
.9e5e		a0 00		ldy #$00	                ldy #0
.9e60		38		sec		                sec
.9e61		98		tya		                tya
.9e62		f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.9e64		95 02		sta $02,x	                sta 2,x
.9e66		98		tya		                tya
.9e67		f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.9e69		95 03		sta $03,x	                sta 3,x
.9e6b		98		tya		                tya
.9e6c		f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.9e6e		95 00		sta $00,x	                sta 0,x
.9e70		98		tya		                tya
.9e71		f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.9e73		95 01		sta $01,x	                sta 1,x
.9e75						_done:
.9e75		60		rts		z_dabs:         rts
.9e76						xt_dnegate:
.9e76		20 33 d8	jsr $d833	                jsr underflow_2 ; double number
.9e79		a0 00		ldy #$00	     		ldy #0
.9e7b		38		sec		                sec
.9e7c		98		tya		                tya
.9e7d		f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.9e7f		95 02		sta $02,x	                sta 2,x
.9e81		98		tya		                tya
.9e82		f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.9e84		95 03		sta $03,x	                sta 3,x
.9e86		98		tya		                tya
.9e87		f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.9e89		95 00		sta $00,x	                sta 0,x
.9e8b		98		tya		                tya
.9e8c		f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.9e8e		95 01		sta $01,x	                sta 1,x
.9e90		60		rts		z_dnegate:      rts
.9e91						xt_d_dot:
.9e91		20 33 d8	jsr $d833	                jsr underflow_2
.9e94		20 8f 93	jsr $938f	                jsr xt_tuck
.9e97		20 57 9e	jsr $9e57	                jsr xt_dabs
.9e9a		20 e1 89	jsr $89e1	                jsr xt_less_number_sign
.9e9d		20 bf 8c	jsr $8cbf	                jsr xt_number_sign_s
.9ea0		20 97 8f	jsr $8f97	                jsr xt_rot
.9ea3		20 56 91	jsr $9156	                jsr xt_sign
.9ea6		20 9d 8c	jsr $8c9d	                jsr xt_number_sign_greater
.9ea9		20 bb 94	jsr $94bb	                jsr xt_type
.9eac		20 d1 91	jsr $91d1	                jsr xt_space
.9eaf		60		rts		z_d_dot:        rts
.9eb0						xt_d_dot_r:
.9eb0		20 38 d8	jsr $d838	                jsr underflow_3
.9eb3		20 72 93	jsr $9372	                jsr xt_to_r
.9eb6		20 8f 93	jsr $938f	                jsr xt_tuck
.9eb9		20 57 9e	jsr $9e57	                jsr xt_dabs
.9ebc		20 e1 89	jsr $89e1	                jsr xt_less_number_sign
.9ebf		20 bf 8c	jsr $8cbf	                jsr xt_number_sign_s
.9ec2		20 97 8f	jsr $8f97	                jsr xt_rot
.9ec5		20 56 91	jsr $9156	                jsr xt_sign
.9ec8		20 9d 8c	jsr $8c9d	                jsr xt_number_sign_greater
.9ecb		20 fa 8e	jsr $8efa	                jsr xt_r_from
.9ece		20 11 8d	jsr $8d11	                jsr xt_over
.9ed1		20 f6 8b	jsr $8bf6	                jsr xt_minus
.9ed4		20 d7 91	jsr $91d7	                jsr xt_spaces
.9ed7		20 bb 94	jsr $94bb	                jsr xt_type
.9eda		60		rts		z_d_dot_r:      rts
.9edb						xt_m_star_slash:
.9edb		20 3d d8	jsr $d83d	                jsr underflow_4
.9ede		20 b1 93	jsr $93b1	                jsr xt_two_dup
.9ee1		20 66 96	jsr $9666	                jsr xt_xor
.9ee4		20 34 92	jsr $9234	                jsr xt_swap
.9ee7		20 cf 80	jsr $80cf	                jsr xt_abs
.9eea		20 72 93	jsr $9372	                jsr xt_to_r
.9eed		20 34 92	jsr $9234	                jsr xt_swap
.9ef0		20 cf 80	jsr $80cf	                jsr xt_abs
.9ef3		20 72 93	jsr $9372	                jsr xt_to_r
.9ef6		20 11 8d	jsr $8d11	                jsr xt_over
.9ef9		20 66 96	jsr $9666	                jsr xt_xor
.9efc		20 8c 9c	jsr $9c8c	                jsr xt_not_rote         ; rot rot
.9eff		20 57 9e	jsr $9e57	                jsr xt_dabs
.9f02		20 34 92	jsr $9234	                jsr xt_swap
.9f05		20 e5 8e	jsr $8ee5	                jsr xt_r_fetch
.9f08		20 82 95	jsr $9582	                jsr xt_um_star
.9f0b		20 97 8f	jsr $8f97	                jsr xt_rot
.9f0e		20 fa 8e	jsr $8efa	                jsr xt_r_from
.9f11		20 82 95	jsr $9582	                jsr xt_um_star
.9f14		20 97 8f	jsr $8f97	                jsr xt_rot
.9f17		20 08 9e	jsr $9e08	                jsr xt_zero
.9f1a		20 30 9e	jsr $9e30	                jsr xt_d_plus
.9f1d		20 e5 8e	jsr $8ee5	                jsr xt_r_fetch
.9f20		20 40 95	jsr $9540	                jsr xt_um_slash_mod
.9f23		20 8c 9c	jsr $9c8c	                jsr xt_not_rote         ; rot rot
.9f26		20 fa 8e	jsr $8efa	                jsr xt_r_from
.9f29		20 40 95	jsr $9540	                jsr xt_um_slash_mod
.9f2c		20 34 92	jsr $9234	                jsr xt_swap
.9f2f		20 9a 86	jsr $869a	                jsr xt_drop
.9f32		20 34 92	jsr $9234	                jsr xt_swap
.9f35		20 97 8f	jsr $8f97	                jsr xt_rot
.9f38		e8		inx		                inx                     ; drop TOS
.9f39		e8		inx		                inx
.9f3a		b5 fe		lda $fe,x	                lda $fe,x               ; but keep MSB
.9f3c		10 03		bpl $9f41	                bpl z_m_star_slash      ; ... 0< if ...
.9f3e		20 76 9e	jsr $9e76	                jsr xt_dnegate
.9f41		60		rts		z_m_star_slash: rts
.9f42						xt_two_constant:
.9f42		20 33 d8	jsr $d833	                jsr underflow_2
.9f45		20 40 84	jsr $8440	                jsr xt_create
.9f48		20 34 92	jsr $9234	                jsr xt_swap
.9f4b		20 cd 83	jsr $83cd	                jsr xt_comma
.9f4e		20 cd 83	jsr $83cd	                jsr xt_comma
.9f51		20 fe 85	jsr $85fe	                jsr does_runtime    ; does> turns into these two routines.
.9f54		20 c3 d6	jsr $d6c3	                jsr dodoes
.9f57		20 a0 86	jsr $86a0	                jsr xt_dup
.9f5a		20 1a 88	jsr $881a	                jsr xt_fetch
.9f5d		20 34 92	jsr $9234	                jsr xt_swap
.9f60		20 43 83	jsr $8343	                jsr xt_cell_plus
.9f63		20 1a 88	jsr $881a	                jsr xt_fetch
.9f66		60		rts		z_two_constant: rts
.9f67						xt_two_literal:
.9f67		20 33 d8	jsr $d833	                jsr underflow_2 ; double number
.9f6a		a9 0a		lda #$0a	                lda #template_push_tos_size
.9f6c		0a		asl a		                asl
.9f6d		20 b1 97	jsr $97b1	                jsr check_nc_limit
.9f70		b0 09		bcs $9f7b	                bcs _no_inline
.9f72		20 34 92	jsr $9234	                jsr xt_swap
.9f75		20 04 8a	jsr $8a04	                jsr xt_literal
.9f78		4c 04 8a	jmp $8a04	                jmp xt_literal
.9f7b						_no_inline:
.9f7b		20 da a1	jsr $a1da	                jsr cmpl_two_literal
.9f7e		60		rts		z_two_literal:  rts
.9f7f						xt_two_variable:
.9f7f		20 40 84	jsr $8440	                jsr xt_create
.9f82		ca		dex		                dex
.9f83		ca		dex		                dex
.9f84		a9 04		lda #$04	                lda #4
.9f86		95 00		sta $00,x	                sta 0,x
.9f88		74 01		stz $01,x	                stz 1,x
.9f8a		20 27 82	jsr $8227	                jsr xt_allot
.9f8d		60		rts		z_two_variable: rts
.9f8e						xt_ud_dot:
.9f8e		20 33 d8	jsr $d833	                jsr underflow_2 ; double number
.9f91		20 e1 89	jsr $89e1	                jsr xt_less_number_sign
.9f94		20 bf 8c	jsr $8cbf	                jsr xt_number_sign_s
.9f97		20 9d 8c	jsr $8c9d	                jsr xt_number_sign_greater
.9f9a		20 bb 94	jsr $94bb	                jsr xt_type
.9f9d		20 d1 91	jsr $91d1	                jsr xt_space
.9fa0		60		rts		z_ud_dot:        rts
.9fa1						xt_ud_dot_r:
.9fa1		20 38 d8	jsr $d838	                jsr underflow_3
.9fa4		20 72 93	jsr $9372	                jsr xt_to_r
.9fa7		20 e1 89	jsr $89e1	                jsr xt_less_number_sign
.9faa		20 bf 8c	jsr $8cbf	                jsr xt_number_sign_s
.9fad		20 9d 8c	jsr $8c9d	                jsr xt_number_sign_greater
.9fb0		20 fa 8e	jsr $8efa	                jsr xt_r_from
.9fb3		20 11 8d	jsr $8d11	                jsr xt_over
.9fb6		20 f6 8b	jsr $8bf6	                jsr xt_minus
.9fb9		20 d7 91	jsr $91d7	                jsr xt_spaces
.9fbc		20 bb 94	jsr $94bb	                jsr xt_type
.9fbf		60		rts		z_ud_dot_r:      rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/string.asm

.9fc0						xt_cmove:
.9fc0		20 38 d8	jsr $d838	                jsr underflow_3
.9fc3		b5 02		lda $02,x	                lda 2,x
.9fc5		85 27		sta $27		                sta tmp2        ; use tmp2 because easier to remember
.9fc7		b5 03		lda $03,x	                lda 3,x
.9fc9		85 28		sta $28		                sta tmp2+1
.9fcb		b5 04		lda $04,x	                lda 4,x
.9fcd		85 25		sta $25		                sta tmp1        ; use tmp1 because easier to remember
.9fcf		b5 05		lda $05,x	                lda 5,x
.9fd1		85 26		sta $26		                sta tmp1+1
.9fd3		a0 00		ldy #$00	                ldy #0
.9fd5		b5 01		lda $01,x	                lda 1,x         ; number of whole pages to move
.9fd7		f0 0f		beq $9fe8	                beq _dopartial
.9fd9						_page:
.9fd9		b1 25		lda ($25),y	                lda (tmp1),y
.9fdb		91 27		sta ($27),y	                sta (tmp2),y
.9fdd		c8		iny		                iny
.9fde		d0 f9		bne $9fd9	                bne _page
.9fe0		e6 26		inc $26		                inc tmp1+1
.9fe2		e6 28		inc $28		                inc tmp2+1
.9fe4		d6 01		dec $01,x	                dec 1,x
.9fe6		d0 f1		bne $9fd9	                bne _page
.9fe8						_dopartial:
.9fe8		b5 00		lda $00,x	                lda 0,x         ; length of last page
.9fea		f0 09		beq $9ff5	                beq _done
.9fec						_partial:
.9fec		b1 25		lda ($25),y	                lda (tmp1),y
.9fee		91 27		sta ($27),y	                sta (tmp2),y
.9ff0		c8		iny		                iny
.9ff1		d6 00		dec $00,x	                dec 0,x
.9ff3		d0 f7		bne $9fec	                bne _partial
.9ff5						_done:
.9ff5		8a		txa		                txa
.9ff6		18		clc		                clc
.9ff7		69 06		adc #$06	                adc #6
.9ff9		aa		tax		                tax
.9ffa		60		rts		z_cmove:        rts
.9ffb						xt_cmove_up:
.9ffb		20 38 d8	jsr $d838	                jsr underflow_3
.9ffe		b5 02		lda $02,x	                lda 2,x
.a000		85 27		sta $27		                sta tmp2        ; use tmp2 because easier to remember
.a002		b5 03		lda $03,x	                lda 3,x
.a004		18		clc		                clc
.a005		75 01		adc $01,x	                adc 1,x
.a007		85 28		sta $28		                sta tmp2+1      ; point to last page of destination
.a009		b5 04		lda $04,x	                lda 4,x
.a00b		85 25		sta $25		                sta tmp1        ; use tmp1 because easier to remember
.a00d		b5 05		lda $05,x	                lda 5,x
.a00f		18		clc		                clc
.a010		75 01		adc $01,x	                adc 1,x
.a012		85 26		sta $26		                sta tmp1+1      ; point to last page of source
.a014		f6 01		inc $01,x	                inc 1,x         ; allows us to use bne with dec 1,x below
.a016		b4 00		ldy $00,x	                ldy 0,x         ; length of last page
.a018		f0 0e		beq $a028	                beq _nopartial
.a01a						_outerloop:
.a01a		88		dey		                dey
.a01b		f0 07		beq $a024	                beq _finishpage
.a01d						_innerloop:
.a01d		b1 25		lda ($25),y	                lda (tmp1),y
.a01f		91 27		sta ($27),y	                sta (tmp2),y
.a021		88		dey		                dey
.a022		d0 f9		bne $a01d	                bne _innerloop
.a024						_finishpage:
.a024		b2 25		lda ($25)	                lda (tmp1)      ; handle y = 0 separately
.a026		92 27		sta ($27)	                sta (tmp2)
.a028						_nopartial:
.a028		c6 26		dec $26		                dec tmp1+1      ; back up to previous pages
.a02a		c6 28		dec $28		                dec tmp2+1
.a02c		d6 01		dec $01,x	                dec 1,x
.a02e		d0 ea		bne $a01a	                bne _outerloop
.a030		8a		txa		                txa
.a031		18		clc		                clc
.a032		69 06		adc #$06	                adc #6
.a034		aa		tax		                tax
.a035		60		rts		z_cmove_up:     rts
.a036						xt_compare:
.a036		20 3d d8	jsr $d83d	                jsr underflow_4
.a039		b5 02		lda $02,x	                lda 2,x
.a03b		85 27		sta $27		                sta tmp2
.a03d		b5 03		lda $03,x	                lda 3,x
.a03f		85 28		sta $28		                sta tmp2+1
.a041		b5 06		lda $06,x	                lda 6,x
.a043		85 25		sta $25		                sta tmp1
.a045		b5 07		lda $07,x	                lda 7,x
.a047		85 26		sta $26		                sta tmp1+1
.a049						_compare_loop:
.a049		b5 04		lda $04,x	                lda 4,x
.a04b		15 05		ora $05,x	                ora 5,x
.a04d		f0 2c		beq $a07b	                beq _str1_done
.a04f		b5 00		lda $00,x	                lda 0,x
.a051		15 01		ora $01,x	                ora 1,x
.a053		f0 3a		beq $a08f	                beq _greater    ; Str2 empty first
.a055		b2 25		lda ($25)	                lda (tmp1)
.a057		d2 27		cmp ($27)	                cmp (tmp2)
.a059		90 26		bcc $a081	                bcc _less
.a05b		d0 32		bne $a08f	                bne _greater
.a05d		e6 25		inc $25		                inc tmp1
.a05f		d0 02		bne $a063	                bne +
.a061		e6 26		inc $26		                inc tmp1+1
.a063						+
.a063		e6 27		inc $27		                inc tmp2
.a065		d0 02		bne $a069	                bne +
.a067		e6 28		inc $28		                inc tmp2+1
.a069						+
.a069		b5 04		lda $04,x	                lda 4,x
.a06b		d0 02		bne $a06f	                bne +
.a06d		d6 05		dec $05,x	                dec 5,x
.a06f						+
.a06f		d6 04		dec $04,x	                dec 4,x
.a071		b5 00		lda $00,x	                lda 0,x
.a073		d0 02		bne $a077	                bne +
.a075		d6 01		dec $01,x	                dec 1,x
.a077						+
.a077		d6 00		dec $00,x	                dec 0,x
.a079		80 ce		bra $a049	                bra _compare_loop
.a07b						_str1_done:
.a07b		b5 00		lda $00,x	                lda 0,x
.a07d		15 01		ora $01,x	                ora 1,x
.a07f		f0 08		beq $a089	                beq _equal      ; Both out of letters
.a081						_less:
.a081		a9 ff		lda #$ff	                lda #$FF
.a083		95 06		sta $06,x	                sta 6,x
.a085		95 07		sta $07,x	                sta 7,x
.a087		80 0c		bra $a095	                bra _done
.a089						_equal:
.a089		74 06		stz $06,x	                stz 6,x
.a08b		74 07		stz $07,x	                stz 7,x
.a08d		80 06		bra $a095	                bra _done
.a08f						_greater:
.a08f		a9 01		lda #$01	                lda #1
.a091		95 06		sta $06,x	                sta 6,x
.a093		74 07		stz $07,x	                stz 7,x
.a095						_done:
.a095		8a		txa		                txa
.a096		18		clc		                clc
.a097		69 06		adc #$06	                adc #6
.a099		aa		tax		                tax
.a09a		60		rts		z_compare:      rts
.a09b						xt_minus_leading:
.a09b		20 33 d8	jsr $d833	                jsr underflow_2
.a09e						_loop:
.a09e		b5 00		lda $00,x	                lda 0,x
.a0a0		15 01		ora $01,x	                ora 1,x
.a0a2		f0 0f		beq $a0b3	                beq _done
.a0a4		a1 02		lda ($02,x)	                lda (2,x)               ; get first character
.a0a6		20 21 d8	jsr $d821	                jsr is_whitespace
.a0a9		90 08		bcc $a0b3	                bcc _done
.a0ab		20 a2 9d	jsr $9da2	                jsr xt_one              ; ( addr u 1 )
.a0ae		20 90 a1	jsr $a190	                jsr xt_slash_string     ; ( addr+ u-1 )
.a0b1		80 eb		bra $a09e	                bra _loop
.a0b3						_done:
.a0b3						z_minus_leading:
.a0b3		60		rts		                rts
.a0b4						xt_minus_trailing:
.a0b4		20 33 d8	jsr $d833	                jsr underflow_2
.a0b7		b5 00		lda $00,x	                lda 0,x         ; LSB of n
.a0b9		15 01		ora $01,x	                ora 1,x         ; MSB of n
.a0bb		f0 33		beq $a0f0	                beq _done
.a0bd		18		clc		                clc
.a0be		b5 02		lda $02,x	                lda 2,x         ; LSB of addr
.a0c0		75 00		adc $00,x	                adc 0,x
.a0c2		85 25		sta $25		                sta tmp1
.a0c4		b5 03		lda $03,x	                lda 3,x         ; MSB of addr
.a0c6		75 01		adc $01,x	                adc 1,x
.a0c8		85 26		sta $26		                sta tmp1+1
.a0ca		a5 25		lda $25		                lda tmp1
.a0cc		d0 02		bne $a0d0	                bne +
.a0ce		c6 26		dec $26		                dec tmp1+1
.a0d0						+
.a0d0		c6 25		dec $25		                dec tmp1
.a0d2						_loop:
.a0d2		b2 25		lda ($25)	                lda (tmp1)
.a0d4		c9 20		cmp #$20	                cmp #AscSP
.a0d6		d0 18		bne $a0f0	                bne _done
.a0d8		a5 25		lda $25		                lda tmp1
.a0da		d0 02		bne $a0de	                bne +
.a0dc		c6 26		dec $26		                dec tmp1+1
.a0de						+
.a0de		c6 25		dec $25		                dec tmp1
.a0e0		b5 00		lda $00,x	                lda 0,x
.a0e2		d0 02		bne $a0e6	                bne +
.a0e4		d6 01		dec $01,x	                dec 1,x
.a0e6						+
.a0e6		d6 00		dec $00,x	                dec 0,x
.a0e8		b5 00		lda $00,x	                lda 0,x
.a0ea		15 01		ora $01,x	                ora 1,x
.a0ec		f0 02		beq $a0f0	                beq _done       ; Count has reached zero - we're done!
.a0ee		80 e2		bra $a0d2	                bra _loop
.a0f0						_done:
.a0f0						z_minus_trailing:
.a0f0		60		rts		                rts
.a0f1						xt_search:
.a0f1		20 3d d8	jsr $d83d	                jsr underflow_4
.a0f4		b5 00		lda $00,x	                lda 0,x
.a0f6		15 01		ora $01,x	                ora 1,x
.a0f8		d0 0b		bne $a105	                bne _start_search
.a0fa		e8		inx		                inx             ; Remove u2
.a0fb		e8		inx		                inx
.a0fc		a9 ff		lda #$ff	                lda #$FF        ; Turn addr2 into a true flag
.a0fe		95 00		sta $00,x	                sta 0,x
.a100		95 01		sta $01,x	                sta 1,x
.a102		4c 8f a1	jmp $a18f	                jmp z_search
.a105						_start_search:
.a105		20 08 9e	jsr $9e08	                jsr xt_zero
.a108						_search_loop:
.a108		18		clc		                clc
.a109		b5 00		lda $00,x	                lda 0,x
.a10b		75 02		adc $02,x	                adc 2,x
.a10d		85 25		sta $25		                sta tmp1
.a10f		b5 01		lda $01,x	                lda 1,x
.a111		75 03		adc $03,x	                adc 3,x
.a113		d5 07		cmp $07,x	                cmp 7,x
.a115		90 12		bcc $a129	                bcc _init_comparison ; Obviously less
.a117		d0 06		bne $a11f	                bne _not_found
.a119		b5 06		lda $06,x	                lda 6,x
.a11b		c5 25		cmp $25		                cmp tmp1
.a11d		b0 0a		bcs $a129	                bcs _init_comparison
.a11f						_not_found:
.a11f		e8		inx		                inx             ; Remove offset
.a120		e8		inx		                inx
.a121		e8		inx		                inx             ; Remove u2
.a122		e8		inx		                inx
.a123		74 00		stz $00,x	                stz 0,x         ; Turn addr2 into a false flag
.a125		74 01		stz $01,x	                stz 1,x
.a127		80 66		bra $a18f	                bra z_search
.a129						_init_comparison:
.a129		18		clc		                clc
.a12a		b5 08		lda $08,x	                lda 8,x
.a12c		75 00		adc $00,x	                adc 0,x
.a12e		85 25		sta $25		                sta tmp1
.a130		b5 09		lda $09,x	                lda 9,x
.a132		75 01		adc $01,x	                adc 1,x
.a134		85 26		sta $26		                sta tmp1+1
.a136		b5 04		lda $04,x	                lda 4,x
.a138		85 27		sta $27		                sta tmp2
.a13a		b5 05		lda $05,x	                lda 5,x
.a13c		85 28		sta $28		                sta tmp2+1
.a13e		b5 02		lda $02,x	                lda 2,x
.a140		85 29		sta $29		                sta tmp3
.a142		b5 03		lda $03,x	                lda 3,x
.a144		85 2a		sta $2a		                sta tmp3+1
.a146						_comparison_loop:
.a146		b2 25		lda ($25)	                lda (tmp1)
.a148		d2 27		cmp ($27)	                cmp (tmp2)
.a14a		f0 05		beq $a151	                beq _letters_match
.a14c		20 f5 8c	jsr $8cf5	                jsr xt_one_plus
.a14f		80 b7		bra $a108	                bra _search_loop
.a151						_letters_match:
.a151		e6 25		inc $25		                inc tmp1
.a153		d0 02		bne $a157	                bne +
.a155		e6 26		inc $26		                inc tmp1+1
.a157						+
.a157		e6 27		inc $27		                inc tmp2
.a159		d0 02		bne $a15d	                bne +
.a15b		e6 28		inc $28		                inc tmp2+1
.a15d						+
.a15d		a5 29		lda $29		                lda tmp3
.a15f		d0 02		bne $a163	                bne +
.a161		c6 2a		dec $2a		                dec tmp3+1
.a163						+
.a163		c6 29		dec $29		                dec tmp3
.a165		a5 29		lda $29		                lda tmp3
.a167		05 2a		ora $2a		                ora tmp3+1
.a169		d0 db		bne $a146	                bne _comparison_loop ; Check the next letter
.a16b		18		clc		                clc
.a16c		b5 00		lda $00,x	                lda 0,x
.a16e		75 08		adc $08,x	                adc 8,x
.a170		95 08		sta $08,x	                sta 8,x
.a172		b5 01		lda $01,x	                lda 1,x
.a174		75 09		adc $09,x	                adc 9,x
.a176		95 09		sta $09,x	                sta 9,x
.a178		38		sec		                sec
.a179		b5 06		lda $06,x	                lda 6,x
.a17b		f5 00		sbc $00,x	                sbc 0,x
.a17d		95 06		sta $06,x	                sta 6,x
.a17f		b5 07		lda $07,x	                lda 7,x
.a181		f5 01		sbc $01,x	                sbc 1,x
.a183		95 07		sta $07,x	                sta 7,x
.a185		e8		inx		                inx             ; drop offset
.a186		e8		inx		                inx
.a187		e8		inx		                inx             ; drop u2
.a188		e8		inx		                inx
.a189		a9 ff		lda #$ff	                lda #$FF
.a18b		95 00		sta $00,x	                sta 0,x         ; Turn addr2 into a true flag.
.a18d		95 01		sta $01,x	                sta 1,x
.a18f		60		rts		z_search:       rts
.a190						xt_slash_string:
.a190		20 38 d8	jsr $d838	                jsr underflow_3
.a193		18		clc		                clc             ; 3OS+TOS
.a194		b5 00		lda $00,x	                lda 0,x
.a196		75 04		adc $04,x	                adc 4,x
.a198		95 04		sta $04,x	                sta 4,x
.a19a		b5 01		lda $01,x	                lda 1,x
.a19c		75 05		adc $05,x	                adc 5,x
.a19e		95 05		sta $05,x	                sta 5,x
.a1a0		38		sec		                sec             ; NOS-TOS
.a1a1		b5 02		lda $02,x	                lda 2,x
.a1a3		f5 00		sbc $00,x	                sbc 0,x
.a1a5		95 02		sta $02,x	                sta 2,x
.a1a7		b5 03		lda $03,x	                lda 3,x
.a1a9		f5 01		sbc $01,x	                sbc 1,x
.a1ab		95 03		sta $03,x	                sta 3,x
.a1ad		e8		inx		                inx
.a1ae		e8		inx		                inx
.a1af		60		rts		z_slash_string: rts
.a1b0						xt_sliteral:
.a1b0		20 33 d8	jsr $d833	                jsr underflow_2
.a1b3		20 a7 97	jsr $97a7	                jsr cmpl_jump_later
.a1b6		20 72 93	jsr $9372	                jsr xt_to_r
.a1b9		20 1b 89	jsr $891b	                jsr xt_here
.a1bc		20 34 92	jsr $9234	                jsr xt_swap
.a1bf		20 a0 86	jsr $86a0	                jsr xt_dup
.a1c2		20 27 82	jsr $8227	                jsr xt_allot            ; reserve u bytes for string
.a1c5		20 1b 89	jsr $891b	                jsr xt_here
.a1c8		20 fa 8e	jsr $8efa	                jsr xt_r_from
.a1cb		20 1e 92	jsr $921e	                jsr xt_store            ; point jmp past string
.a1ce		20 b1 93	jsr $93b1	                jsr xt_two_dup
.a1d1		20 9b 94	jsr $949b	                jsr xt_two_to_r
.a1d4		20 12 8c	jsr $8c12	                jsr xt_move             ; copy u bytes from addr -> addr'
.a1d7		20 21 94	jsr $9421	                jsr xt_two_r_from
.a1da						cmpl_sliteral:
.a1da						cmpl_two_literal:
.a1da		a0 a1		ldy #$a1	                ldy #>sliteral_runtime
.a1dc		a9 f4		lda #$f4	                lda #<sliteral_runtime
.a1de		20 86 97	jsr $9786	                jsr cmpl_subroutine
.a1e1		b4 03		ldy $03,x	                ldy 3,x                ; address MSB
.a1e3		b5 02		lda $02,x	                lda 2,x                ; address LSB
.a1e5		20 92 97	jsr $9792	                jsr cmpl_word
.a1e8		b4 01		ldy $01,x	                ldy 1,x                ; length MSB
.a1ea		b5 00		lda $00,x	                lda 0,x                ; length LSB
.a1ec		20 92 97	jsr $9792	                jsr cmpl_word
.a1ef		e8		inx		                inx
.a1f0		e8		inx		                inx
.a1f1		e8		inx		                inx
.a1f2		e8		inx		                inx
.a1f3		60		rts		z_sliteral:     rts
.a1f4						sliteral_runtime:
.a1f4		ca		dex		                dex
.a1f5		ca		dex		                dex
.a1f6		ca		dex		                dex
.a1f7		ca		dex		                dex
.a1f8		68		pla		                pla
.a1f9		85 25		sta $25		                sta tmp1        ; LSB of address
.a1fb		7a		ply		                ply
.a1fc		84 26		sty $26		                sty tmp1+1      ; MSB of address
.a1fe		18		clc		                clc
.a1ff		69 04		adc #$04	                adc #4
.a201		90 01		bcc $a204	                bcc +
.a203		c8		iny		                iny
.a204						+
.a204		5a		phy		                phy
.a205		48		pha		                pha
.a206		a0 01		ldy #$01	                ldy #1          ; adjust for JSR/RTS mechanics on 65c02
.a208		b1 25		lda ($25),y	                lda (tmp1),y
.a20a		95 02		sta $02,x	                sta 2,x         ; LSB of address
.a20c		c8		iny		                iny
.a20d		b1 25		lda ($25),y	                lda (tmp1),y
.a20f		95 03		sta $03,x	                sta 3,x         ; MSB of address
.a211		c8		iny		                iny
.a212		b1 25		lda ($25),y	                lda (tmp1),y
.a214		95 00		sta $00,x	                sta 0,x         ; LSB of length
.a216		c8		iny		                iny
.a217		b1 25		lda ($25),y	                lda (tmp1),y
.a219		95 01		sta $01,x	                sta 1,x         ; MSB of length
.a21b		60		rts		                rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/disasm.asm

.a21c						xt_disasm:
.a21c		20 33 d8	jsr $d833	                jsr underflow_2
.a21f		20 23 a2	jsr $a223	                jsr disassembler
.a222		60		rts		z_disasm:       rts
.a223						disassembler:
.a223		64 32		stz $32		                stz scratch+5   ; flag indicating whether we're arriving at sliteral (vs 2literal)
.a225		20 3a 84	jsr $843a	                jsr xt_cr       ; ( addr u )
.a228						_byte_loop:
.a228		20 11 8d	jsr $8d11	                jsr xt_over     ; ( addr u addr )
.a22b		20 e6 94	jsr $94e6	                jsr xt_u_dot    ; ( addr u )
.a22e		20 d1 91	jsr $91d1	                jsr xt_space
.a231		a9 2b		lda #$2b	                lda #<oc_index_table
.a233		85 27		sta $27		                sta tmp2
.a235		a9 b4		lda #$b4	                lda #>oc_index_table
.a237		85 28		sta $28		                sta tmp2+1
.a239		a1 02		lda ($02,x)	                lda (2,x)       ; get opcode that addr points to
.a23b		85 2d		sta $2d		                sta scratch     ; Save opcode
.a23d		0a		asl a		                asl             ; multiply by two for offset
.a23e		90 02		bcc $a242	                bcc +
.a240		e6 28		inc $28		                inc tmp2+1      ; we're on second page
.a242						+
.a242		a8		tay		                tay             ; use Y as the index
.a243		b1 27		lda ($27),y	                lda (tmp2),y    ; LSB
.a245		85 29		sta $29		                sta tmp3
.a247		48		pha		                pha
.a248		c8		iny		                iny
.a249		b1 27		lda ($27),y	                lda (tmp2),y    ; MSB
.a24b		85 2a		sta $2a		                sta tmp3+1
.a24d		48		pha		                pha
.a24e		b2 29		lda ($29)	                lda (tmp3)
.a250		a8		tay		                tay                     ; save copy of lengths byte
.a251		10 3c		bpl $a28f	                bpl _no_operand         ; bit 7 clear, single-byte instruction
.a253		20 08 9e	jsr $9e08	                jsr xt_zero             ; ( addr u 0 ) ZERO does not use Y
.a256		f6 04		inc $04,x	                inc 4,x
.a258		d0 02		bne $a25c	                bne +
.a25a		f6 05		inc $05,x	                inc 5,x                 ; ( addr+1 u 0 )
.a25c						+
.a25c		b5 02		lda $02,x	                lda 2,x
.a25e		d0 02		bne $a262	                bne +
.a260		d6 03		dec $03,x	                dec 3,x
.a262						+
.a262		d6 02		dec $02,x	                dec 2,x                 ; ( addr+1 u-1 0 )
.a264		a1 04		lda ($04,x)	                lda (4,x)
.a266		95 00		sta $00,x	                sta 0,x                 ; LSB of operand ( addr+1 u-1 LSB )
.a268		85 2e		sta $2e		                sta scratch+1           ; Save a copy in the scratch buffer
.a26a		98		tya		                tya                     ; retrieve copy of lengths byte
.a26b		2a		rol a		                rol                     ; shift bit 6 to bit 7
.a26c		10 14		bpl $a282	                bpl _print_operand
.a26e		f6 04		inc $04,x	                inc 4,x
.a270		d0 02		bne $a274	                bne +
.a272		f6 05		inc $05,x	                inc 5,x                 ; ( addr+2 u-1 LSB )
.a274						+
.a274		b5 02		lda $02,x	                lda 2,x
.a276		d0 02		bne $a27a	                bne +
.a278		d6 03		dec $03,x	                dec 3,x
.a27a						+
.a27a		d6 02		dec $02,x	                dec 2,x                 ; ( addr+2 u-2 LSB )
.a27c		a1 04		lda ($04,x)	                lda (4,x)
.a27e		95 01		sta $01,x	                sta 1,x                 ; MSB of operand ( addr+2 u-2 opr )
.a280		85 2f		sta $2f		                sta scratch+2           ; Save a copy in the scratch buffer
.a282						_print_operand:
.a282		ca		dex		                dex
.a283		ca		dex		                dex
.a284		a9 05		lda #$05	                lda #5
.a286		95 00		sta $00,x	                sta 0,x
.a288		74 01		stz $01,x	                stz 1,x                 ; ( addr+n u-n opr 5 )
.a28a		20 f2 94	jsr $94f2	                jsr xt_u_dot_r          ; U.R ( addr+n u-n )
.a28d		80 0b		bra $a29a	                bra _print_mnemonic
.a28f						_no_operand:
.a28f		ca		dex		                dex
.a290		ca		dex		                dex
.a291		a9 05		lda #$05	                lda #5
.a293		95 00		sta $00,x	                sta 0,x
.a295		74 01		stz $01,x	                stz 1,x                 ; ( addr u 5 )
.a297		20 d7 91	jsr $91d7	                jsr xt_spaces           ; ( addr u )
.a29a						_print_mnemonic:
.a29a		20 d1 91	jsr $91d1	                jsr xt_space
.a29d		ca		dex		                dex
.a29e		ca		dex		                dex                     ; ( addr u ? )
.a29f		68		pla		                pla                     ; MSB
.a2a0		95 01		sta $01,x	                sta 1,x                 ; ( addr u MSB )
.a2a2		68		pla		                pla                     ; LSB
.a2a3		95 00		sta $00,x	                sta 0,x                 ; ( addr u addr-o )
.a2a5		20 26 84	jsr $8426	                jsr xt_count            ; ( addr u addr-o u-o )
.a2a8		74 01		stz $01,x	                stz 1,x                 ; paranoid
.a2aa		b5 00		lda $00,x	                lda 0,x
.a2ac		29 07		and #$07	                and #%00000111          ; ( addr u addr-o u-o )
.a2ae		95 00		sta $00,x	                sta 0,x
.a2b0		20 bb 94	jsr $94bb	                jsr xt_type             ; ( addr u )
.a2b3		a5 2d		lda $2d		                lda scratch
.a2b5		c9 20		cmp #$20	                cmp #OpJSR
.a2b7		d0 15		bne $a2ce	                bne _not_jsr
.a2b9		ca		dex		                dex
.a2ba		ca		dex		                dex
.a2bb		a9 05		lda #$05	                lda #5
.a2bd		95 00		sta $00,x	                sta 0,x
.a2bf		74 01		stz $01,x	                stz 1,x
.a2c1		20 d7 91	jsr $91d7	                jsr xt_spaces
.a2c4		20 9f a3	jsr $a39f	                jsr disasm_special
.a2c7		b0 70		bcs $a339	                bcs _printing_done
.a2c9		20 7f a3	jsr $a37f	                jsr disasm_jsr
.a2cc		b0 6b		bcs $a339	                bcs _printing_done
.a2ce						_not_jsr:
.a2ce		c9 4c		cmp #$4c	                cmp #OpJMP
.a2d0		d0 2d		bne $a2ff	                bne _not_jmp
.a2d2		a5 2e		lda $2e		                lda scratch+1   ; Copy the pointer.
.a2d4		85 30		sta $30		                sta scratch+3
.a2d6		a5 2f		lda $2f		                lda scratch+2
.a2d8		85 31		sta $31		                sta scratch+4
.a2da		b2 30		lda ($30)	                lda (scratch+3)
.a2dc		c9 20		cmp #$20	                cmp #OpJSR          ; check for JSR
.a2de		d0 59		bne $a339	                bne _printing_done
.a2e0		e6 30		inc $30		                inc scratch+3
.a2e2		d0 02		bne $a2e6	                bne +
.a2e4		e6 31		inc $31		                inc scratch+4
.a2e6						+
.a2e6		b2 30		lda ($30)	                lda (scratch+3)
.a2e8		c9 f4		cmp #$f4	                cmp #<sliteral_runtime
.a2ea		d0 4d		bne $a339	                bne _printing_done
.a2ec		e6 30		inc $30		                inc scratch+3
.a2ee		d0 02		bne $a2f2	                bne +
.a2f0		e6 31		inc $31		                inc scratch+4
.a2f2						+
.a2f2		b2 30		lda ($30)	                lda (scratch+3)
.a2f4		c9 a1		cmp #$a1	                cmp #>sliteral_runtime
.a2f6		d0 41		bne $a339	                bne _printing_done
.a2f8		c6 32		dec $32		                dec scratch+5                   ; flag for next go round
.a2fa		20 55 a3	jsr $a355	                jsr disasm_sliteral_jump
.a2fd		80 3a		bra $a339	                bra _printing_done
.a2ff						_not_jmp:
.a2ff		c9 80		cmp #$80	                cmp #OpBRA            ; is it bra?
.a301		f0 06		beq $a309	                beq _is_rel
.a303		29 1f		and #$1f	                and #$1F
.a305		49 10		eor #$10	                eor #$10            ; do bottom five bits match xxx10000 ?
.a307		d0 30		bne $a339	                bne _printing_done
.a309						_is_rel:
.a309		a0 76		ldy #$76	                ldy #'v'            ; we'll indicate branch forward or back with v or ^
.a30b		ca		dex		                dex
.a30c		ca		dex		                dex
.a30d		74 01		stz $01,x	                stz 1,x
.a30f		a5 2e		lda $2e		                lda scratch+1
.a311		95 00		sta $00,x	                sta 0,x
.a313		10 04		bpl $a319	                bpl +
.a315		d6 01		dec $01,x	                dec 1,x             ; for negative offsets extend the sign bit so add works out
.a317		a0 5e		ldy #$5e	                ldy #'^'            ; it's a backward branch
.a319		38		sec		+               sec                 ; start counting from address after opcode
.a31a		75 04		adc $04,x	                adc 4,x
.a31c		95 00		sta $00,x	                sta 0,x
.a31e		b5 01		lda $01,x	                lda 1,x
.a320		75 05		adc $05,x	                adc 5,x
.a322		95 01		sta $01,x	                sta 1,x
.a324		5a		phy		                phy                 ; save the direction indicator
.a325		ca		dex		                dex
.a326		ca		dex		                dex
.a327		a9 09		lda #$09	                lda #9
.a329		95 00		sta $00,x	                sta 0,x
.a32b		74 01		stz $01,x	                stz 1,x
.a32d		20 f2 94	jsr $94f2	                jsr xt_u_dot_r      ; print the destination with 5 leading spaces
.a330		a9 20		lda #$20	                lda #AscSP          ; print space and branch direction indicator
.a332		20 c5 86	jsr $86c5	                jsr emit_a
.a335		68		pla		                pla
.a336		20 c5 86	jsr $86c5	                jsr emit_a
.a339						_printing_done:
.a339		20 3a 84	jsr $843a	                jsr xt_cr
.a33c		f6 02		inc $02,x	                inc 2,x
.a33e		d0 02		bne $a342	                bne +
.a340		f6 03		inc $03,x	                inc 3,x                 ; ( addr+1 u )
.a342						+
.a342		20 e9 8c	jsr $8ce9	                jsr xt_one_minus        ; ( addr+1 u-1 )
.a345		b5 00		lda $00,x	                lda 0,x                 ; All done?
.a347		15 01		ora $01,x	                ora 1,x
.a349		f0 07		beq $a352	                beq _done
.a34b		b5 01		lda $01,x	                lda 1,x                 ; Catch mid-instruction ranges
.a34d		30 03		bmi $a352	                bmi _done
.a34f		4c 28 a2	jmp $a228	                jmp _byte_loop          ; out of range for BRA
.a352						_done:
.a352		4c a9 93	jmp $93a9	                jmp xt_two_drop         ; JSR/RTS
.a355						disasm_sliteral_jump:
.a355		20 34 92	jsr $9234	                jsr xt_swap
.a358		ca		dex		                dex
.a359		ca		dex		                dex
.a35a		a5 2e		lda $2e		                lda scratch+1
.a35c		95 00		sta $00,x	                sta 0,x
.a35e		a5 2f		lda $2f		                lda scratch+2
.a360		95 01		sta $01,x	                sta 1,x
.a362		20 34 92	jsr $9234	                jsr xt_swap
.a365		20 f6 8b	jsr $8bf6	                jsr xt_minus
.a368		20 e9 8c	jsr $8ce9	                jsr xt_one_minus
.a36b		20 f6 8b	jsr $8bf6	                jsr xt_minus
.a36e		ca		dex		                dex
.a36f		ca		dex		                dex
.a370		a5 2e		lda $2e		                lda scratch+1
.a372		95 00		sta $00,x	                sta 0,x
.a374		a5 2f		lda $2f		                lda scratch+2
.a376		95 01		sta $01,x	                sta 1,x
.a378		20 e9 8c	jsr $8ce9	                jsr xt_one_minus
.a37b		20 34 92	jsr $9234	                jsr xt_swap ; ( new_addr new_n )
.a37e		60		rts		                rts
.a37f						disasm_jsr:
.a37f		ca		dex		                dex
.a380		ca		dex		                dex
.a381		a5 2e		lda $2e		                lda scratch+1
.a383		95 00		sta $00,x	                sta 0,x
.a385		a5 2f		lda $2f		                lda scratch+2
.a387		95 01		sta $01,x	                sta 1,x
.a389		20 bf 9b	jsr $9bbf	                jsr xt_int_to_name
.a38c		b5 00		lda $00,x	                lda 0,x
.a38e		15 01		ora $01,x	                ora 1,x
.a390		f0 08		beq $a39a	                beq _no_nt
.a392		20 62 9c	jsr $9c62	                jsr xt_name_to_string
.a395		20 bb 94	jsr $94bb	                jsr xt_type
.a398		38		sec		                sec
.a399		60		rts		                rts
.a39a						_no_nt:
.a39a		20 a9 93	jsr $93a9	                jsr xt_two_drop
.a39d		18		clc		                clc
.a39e		60		rts		                rts
.a39f						disasm_special:
.a39f		a0 2c		ldy #$2c	                ldy #(_end_handlers - _special_handlers - 4)
.a3a1		b9 2d a4	lda $a42d,y	_check:         lda _special_handlers,y
.a3a4		c5 2e		cmp $2e		                cmp scratch+1
.a3a6		d0 07		bne $a3af	                bne _next
.a3a8		b9 2e a4	lda $a42e,y	                lda _special_handlers+1,y
.a3ab		c5 2f		cmp $2f		                cmp scratch+2
.a3ad		f0 08		beq $a3b7	                beq _found_handler
.a3af		88		dey		_next:          dey
.a3b0		88		dey		                dey
.a3b1		88		dey		                dey
.a3b2		88		dey		                dey
.a3b3		10 ec		bpl $a3a1	                bpl _check
.a3b5		18		clc		                clc
.a3b6		60		rts		                rts
.a3b7						_found_handler:
.a3b7		a5 32		lda $32		                lda scratch+5               ; are we expecting sliteral?
.a3b9		f0 04		beq $a3bf	                beq +
.a3bb		64 32		stz $32		                stz scratch+5               ; yes, skip 2literal and match again
.a3bd		80 f0		bra $a3af	                bra _next
.a3bf						+
.a3bf		b9 30 a4	lda $a430,y	                lda _special_handlers+3,y   ; payload + prefix
.a3c2		48		pha		                pha                         ; stash a copy for payload later
.a3c3		4a		lsr a		                lsr
.a3c4		4a		lsr a		                lsr
.a3c5		f0 06		beq $a3cd	                beq _no_prefix
.a3c7		18		clc		                clc
.a3c8		69 20		adc #$20	                adc #32
.a3ca		20 c5 86	jsr $86c5	                jsr emit_a
.a3cd						_no_prefix:
.a3cd		b9 2f a4	lda $a42f,y	                lda _special_handlers+2,y   ; string index
.a3d0		20 6a d8	jsr $d86a	                jsr print_string_no_lf
.a3d3		68		pla		                pla
.a3d4		29 03		and #$03	                and #3                      ; payload is 0, 1 or 2 words
.a3d6		f0 0f		beq $a3e7	                beq _done
.a3d8		c9 03		cmp #$03	                cmp #3                      ; but 3 means a double-word
.a3da		d0 03		bne $a3df	                bne _show_payload
.a3dc		4c 01 a4	jmp $a401	                jmp _print_2literal
.a3df						_show_payload:
.a3df		48		pha		                pha
.a3e0		20 e9 a3	jsr $a3e9	                jsr _print_literal
.a3e3		68		pla		                pla
.a3e4		3a		dec a		                dea
.a3e5		d0 f8		bne $a3df	                bne _show_payload
.a3e7		38		sec		_done:          sec
.a3e8		60		rts		                rts
.a3e9						_print_literal:
.a3e9		20 34 92	jsr $9234	                jsr xt_swap ; switch to (u addr)
.a3ec		20 f5 8c	jsr $8cf5	                jsr xt_one_plus
.a3ef		20 a0 86	jsr $86a0	                jsr xt_dup
.a3f2		20 28 99	jsr $9928	                jsr xt_question ; Print the value at the address
.a3f5		20 f5 8c	jsr $8cf5	                jsr xt_one_plus
.a3f8		20 34 92	jsr $9234	                jsr xt_swap ; (addr+2 u)
.a3fb		20 e9 8c	jsr $8ce9	                jsr xt_one_minus
.a3fe		4c e9 8c	jmp $8ce9	                jmp xt_one_minus ; (addr+2 u-2)
.a401						_print_2literal:
.a401		20 34 92	jsr $9234	                jsr xt_swap
.a404		20 f5 8c	jsr $8cf5	                jsr xt_one_plus
.a407		20 a0 86	jsr $86a0	                jsr xt_dup
.a40a		20 c9 93	jsr $93c9	                jsr xt_two_fetch
.a40d		20 34 92	jsr $9234	                jsr xt_swap             ; 2! / 2@ put MSW first; but 2literal writes LSW first
.a410		20 91 9e	jsr $9e91	                jsr xt_d_dot
.a413		18		clc		                clc
.a414		b5 00		lda $00,x	                lda 0,x
.a416		69 03		adc #$03	                adc #3
.a418		95 00		sta $00,x	                sta 0,x
.a41a		90 02		bcc $a41e	                bcc +
.a41c		f6 01		inc $01,x	                inc 1,x
.a41e						+
.a41e		20 34 92	jsr $9234	                jsr xt_swap ; ( addr+4 u )
.a421		38		sec		                sec
.a422		b5 00		lda $00,x	                lda 0,x
.a424		e9 04		sbc #$04	                sbc #4
.a426		95 00		sta $00,x	                sta 0,x
.a428		b0 02		bcs $a42c	                bcs +
.a42a		d6 01		dec $01,x	                dec 1,x
.a42c						+
.a42c		60		rts		                rts
.a42d						_special_handlers:
>a42d		2e d8				    .word underflow_1
>a42f		0c 44				        .byte str_disasm_sdc, 0 + ('1'-32)*4
>a431		33 d8				    .word underflow_2
>a433		0c 48				        .byte str_disasm_sdc, 0 + ('2'-32)*4
>a435		38 d8				    .word underflow_3
>a437		0c 4c				        .byte str_disasm_sdc, 0 + ('3'-32)*4
>a439		3d d8				    .word underflow_4
>a43b		0c 50				        .byte str_disasm_sdc, 0 + ('4'-32)*4
>a43d		4c 8a				    .word literal_runtime
>a43f		0d 01				        .byte str_disasm_lit, 1
>a441		f4 a1				    .word sliteral_runtime
>a443		0d ce				        .byte str_disasm_lit, 2 + ('S'-32)*4
>a445		f4 a1				    .word sliteral_runtime                      ; 2literal and sliteral use the same runtime
>a447		0d 4b				        .byte str_disasm_lit, 3 + ('2'-32)*4    ; list is searched in reverse, put 2literal first
>a449		3a 98				    .word zero_branch_runtime
>a44b		0e 01				        .byte str_disasm_0bra, 1
>a44d		e4 8a				    .word loop_runtime
>a44f		0f 01				        .byte str_disasm_loop, 1
>a451		fd 8a				    .word plus_loop_runtime
>a453		0f 2d				        .byte str_disasm_loop, 1 + ('+'-32)*4
>a455		bc 85				    .word do_runtime
>a457		10 00				        .byte str_disasm_do, 0
>a459		a4 85				    .word question_do_runtime
>a45b		10 7d				        .byte str_disasm_do, 1 + ('?'-32)*4
.a45d						_end_handlers:
.a45d						disassembler_end:

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/assembler.asm

.a45d						assembler:
.a45d						xt_asm_adc_h:
.a45d		a9 69		lda #$69	                lda #$69
.a45f		4c b8 a7	jmp $a7b8	                jmp asm_common
.a462						z_asm_adc_h:
.a462						xt_asm_adc_x:
.a462		a9 7d		lda #$7d	                lda #$7D
.a464		4c b8 a7	jmp $a7b8	                jmp asm_common
.a467						z_asm_adc_x:
.a467						xt_asm_adc_y:
.a467		a9 79		lda #$79	                lda #$79
.a469		4c b8 a7	jmp $a7b8	                jmp asm_common
.a46c						z_asm_adc_y:
.a46c						xt_asm_adc_z:
.a46c		a9 65		lda #$65	                lda #$65
.a46e		4c b8 a7	jmp $a7b8	                jmp asm_common
.a471						z_asm_adc_z:
.a471						xt_asm_adc_zi:
.a471		a9 72		lda #$72	                lda #$72
.a473		4c b8 a7	jmp $a7b8	                jmp asm_common
.a476						z_asm_adc_zi:
.a476						xt_asm_adc_ziy:
.a476		a9 71		lda #$71	                lda #$71
.a478		4c b8 a7	jmp $a7b8	                jmp asm_common
.a47b						z_asm_adc_ziy:
.a47b						xt_asm_adc_zx:
.a47b		a9 75		lda #$75	                lda #$75
.a47d		4c b8 a7	jmp $a7b8	                jmp asm_common
.a480						z_asm_adc_zx:
.a480						xt_asm_adc_zxi:
.a480		a9 61		lda #$61	                lda #$61
.a482		4c b8 a7	jmp $a7b8	                jmp asm_common
.a485						z_asm_adc_zxi:
.a485						xt_asm_and:
.a485		a9 2d		lda #$2d	                lda #$2D
.a487		4c b8 a7	jmp $a7b8	                jmp asm_common
.a48a						z_asm_and:
.a48a						xt_asm_and_h:
.a48a		a9 29		lda #$29	                lda #$29
.a48c		4c b8 a7	jmp $a7b8	                jmp asm_common
.a48f						z_asm_and_h:
.a48f						xt_asm_and_x:
.a48f		a9 3d		lda #$3d	                lda #$3D
.a491		4c b8 a7	jmp $a7b8	                jmp asm_common
.a494						z_asm_and_x:
.a494						xt_asm_and_y:
.a494		a9 39		lda #$39	                lda #$39
.a496		4c b8 a7	jmp $a7b8	                jmp asm_common
.a499						z_asm_and_y:
.a499						xt_asm_and_z:
.a499		a9 25		lda #$25	                lda #$25
.a49b		4c b8 a7	jmp $a7b8	                jmp asm_common
.a49e						z_asm_and_z:
.a49e						xt_asm_and_zi:
.a49e		a9 32		lda #$32	                lda #$32
.a4a0		4c b8 a7	jmp $a7b8	                jmp asm_common
.a4a3						z_asm_and_zi:
.a4a3						xt_asm_and_ziy:
.a4a3		a9 31		lda #$31	                lda #$31
.a4a5		4c b8 a7	jmp $a7b8	                jmp asm_common
.a4a8						z_asm_and_ziy:
.a4a8						xt_asm_and_zx:
.a4a8		a9 35		lda #$35	                lda #$35
.a4aa		4c b8 a7	jmp $a7b8	                jmp asm_common
.a4ad						z_asm_and_zx:
.a4ad						xt_asm_and_zxi:
.a4ad		a9 21		lda #$21	                lda #$21
.a4af		4c b8 a7	jmp $a7b8	                jmp asm_common
.a4b2						z_asm_and_zxi:
.a4b2						xt_asm_asl:
.a4b2		a9 0e		lda #$0e	                lda #$0E
.a4b4		4c b8 a7	jmp $a7b8	                jmp asm_common
.a4b7						z_asm_asl:
.a4b7						xt_asm_asl_a:
.a4b7		a9 0a		lda #$0a	                lda #$0A
.a4b9		4c b8 a7	jmp $a7b8	                jmp asm_common
.a4bc						z_asm_asl_a:
.a4bc						xt_asm_asl_x:
.a4bc		a9 1e		lda #$1e	                lda #$1E
.a4be		4c b8 a7	jmp $a7b8	                jmp asm_common
.a4c1						z_asm_asl_x:
.a4c1						xt_asm_asl_z:
.a4c1		a9 06		lda #$06	                lda #$06
.a4c3		4c b8 a7	jmp $a7b8	                jmp asm_common
.a4c6						z_asm_asl_z:
.a4c6						xt_asm_asl_zx:
.a4c6		a9 16		lda #$16	                lda #$16
.a4c8		4c b8 a7	jmp $a7b8	                jmp asm_common
.a4cb						z_asm_asl_zx:
.a4cb						xt_asm_bcc:
.a4cb		a9 90		lda #$90	                lda #$90
.a4cd		4c b8 a7	jmp $a7b8	                jmp asm_common
.a4d0						z_asm_bcc:
.a4d0						xt_asm_bcs:
.a4d0		a9 b0		lda #$b0	                lda #$B0
.a4d2		a0 02		ldy #$02	                ldy #2
.a4d4		4c b8 a7	jmp $a7b8	                jmp asm_common
.a4d7						z_asm_bcs:
.a4d7						xt_asm_beq:
.a4d7		a9 f0		lda #$f0	                lda #$F0
.a4d9		4c b8 a7	jmp $a7b8	                jmp asm_common
.a4dc						z_asm_beq:
.a4dc						xt_asm_bit:
.a4dc		a9 2c		lda #$2c	                lda #$2C
.a4de		4c b8 a7	jmp $a7b8	                jmp asm_common
.a4e1						z_asm_bit:
.a4e1						xt_asm_bit_h:
.a4e1		a9 89		lda #$89	                lda #$89
.a4e3		4c b8 a7	jmp $a7b8	                jmp asm_common
.a4e6						z_asm_bit_h:
.a4e6						xt_asm_bit_x:
.a4e6		a9 3c		lda #$3c	                lda #$3C
.a4e8		4c b8 a7	jmp $a7b8	                jmp asm_common
.a4eb						z_asm_bit_x:
.a4eb						xt_asm_bit_z:
.a4eb		a9 24		lda #$24	                lda #$24
.a4ed		4c b8 a7	jmp $a7b8	                jmp asm_common
.a4f0						z_asm_bit_z:
.a4f0						xt_asm_bit_zx:
.a4f0		a9 34		lda #$34	                lda #$34
.a4f2		4c b8 a7	jmp $a7b8	                jmp asm_common
.a4f5						z_asm_bit_zx:
.a4f5						xt_asm_bmi:
.a4f5		a9 30		lda #$30	                lda #$30
.a4f7		4c b8 a7	jmp $a7b8	                jmp asm_common
.a4fa						z_asm_bmi:
.a4fa						xt_asm_bne:
.a4fa		a9 d0		lda #$d0	                lda #$D0
.a4fc		4c b8 a7	jmp $a7b8	                jmp asm_common
.a4ff						z_asm_bne:
.a4ff						xt_asm_bpl:
.a4ff		a9 10		lda #$10	                lda #$10
.a501		4c b8 a7	jmp $a7b8	                jmp asm_common
.a504						z_asm_bpl:
.a504						xt_asm_bra:
.a504		a9 80		lda #$80	                lda #$80
.a506		4c b8 a7	jmp $a7b8	                jmp asm_common
.a509						z_asm_bra:
.a509						xt_asm_brk:
.a509		a9 00		lda #$00	                lda #$00
.a50b		4c b8 a7	jmp $a7b8	                jmp asm_common
.a50e						z_asm_brk:
.a50e						xt_asm_bvc:
.a50e		a9 50		lda #$50	                lda #$50
.a510		4c b8 a7	jmp $a7b8	                jmp asm_common
.a513						z_asm_bvc:
.a513						xt_asm_bvs:
.a513		a9 70		lda #$70	                lda #$70
.a515		4c b8 a7	jmp $a7b8	                jmp asm_common
.a518						z_asm_bvs:
.a518						xt_asm_clc:
.a518		a9 18		lda #$18	                lda #$18
.a51a		4c b8 a7	jmp $a7b8	                jmp asm_common
.a51d						z_asm_clc:
.a51d						xt_asm_cld:
.a51d		a9 d8		lda #$d8	                lda #$D8
.a51f		4c b8 a7	jmp $a7b8	                jmp asm_common
.a522						z_asm_cld:
.a522						xt_asm_cli:
.a522		a9 58		lda #$58	                lda #$58
.a524		4c b8 a7	jmp $a7b8	                jmp asm_common
.a527						z_asm_cli:
.a527						xt_asm_clv:
.a527		a9 b8		lda #$b8	                lda #$B8
.a529		4c b8 a7	jmp $a7b8	                jmp asm_common
.a52c						z_asm_clv:
.a52c						xt_asm_cmp:
.a52c		a9 cd		lda #$cd	                lda #$CD
.a52e		4c b8 a7	jmp $a7b8	                jmp asm_common
.a531						z_asm_cmp:
.a531						xt_asm_cmp_h:
.a531		a9 c9		lda #$c9	                lda #$C9
.a533		4c b8 a7	jmp $a7b8	                jmp asm_common
.a536						z_asm_cmp_h:
.a536						xt_asm_cmp_x:
.a536		a9 dd		lda #$dd	                lda #$DD
.a538		4c b8 a7	jmp $a7b8	                jmp asm_common
.a53b						z_asm_cmp_x:
.a53b						xt_asm_cmp_y:
.a53b		a9 d9		lda #$d9	                lda #$D9
.a53d		4c b8 a7	jmp $a7b8	                jmp asm_common
.a540						z_asm_cmp_y:
.a540						xt_asm_cmp_z:
.a540		a9 c5		lda #$c5	                lda #$C5
.a542		4c b8 a7	jmp $a7b8	                jmp asm_common
.a545						z_asm_cmp_z:
.a545						xt_asm_cmp_zi:
.a545		a9 d2		lda #$d2	                lda #$D2
.a547		4c b8 a7	jmp $a7b8	                jmp asm_common
.a54a						z_asm_cmp_zi:
.a54a						xt_asm_cmp_ziy:
.a54a		a9 d1		lda #$d1	                lda #$D1
.a54c		4c b8 a7	jmp $a7b8	                jmp asm_common
.a54f						z_asm_cmp_ziy:
.a54f						xt_asm_cmp_zx:
.a54f		a9 d5		lda #$d5	                lda #$D5
.a551		4c b8 a7	jmp $a7b8	                jmp asm_common
.a554						z_asm_cmp_zx:
.a554						xt_asm_cmp_zxi:
.a554		a9 c1		lda #$c1	                lda #$C1
.a556		4c b8 a7	jmp $a7b8	                jmp asm_common
.a559						z_asm_cmp_zxi:
.a559						xt_asm_cpx:
.a559		a9 ec		lda #$ec	                lda #$EC
.a55b		4c b8 a7	jmp $a7b8	                jmp asm_common
.a55e						z_asm_cpx:
.a55e						xt_asm_cpx_h:
.a55e		a9 e0		lda #$e0	                lda #$E0
.a560		4c b8 a7	jmp $a7b8	                jmp asm_common
.a563						z_asm_cpx_h:
.a563						xt_asm_cpx_z:
.a563		a9 e4		lda #$e4	                lda #$E4
.a565		4c b8 a7	jmp $a7b8	                jmp asm_common
.a568						z_asm_cpx_z:
.a568						xt_asm_cpy:
.a568		a9 cc		lda #$cc	                lda #$CC
.a56a		a0 03		ldy #$03	                ldy #3
.a56c		4c b8 a7	jmp $a7b8	                jmp asm_common
.a56f						z_asm_cpy:
.a56f						xt_asm_cpy_h:
.a56f		a9 c0		lda #$c0	                lda #$C0
.a571		4c b8 a7	jmp $a7b8	                jmp asm_common
.a574						z_asm_cpy_h:
.a574						xt_asm_cpy_z:
.a574		a9 c4		lda #$c4	                lda #$C4
.a576		4c b8 a7	jmp $a7b8	                jmp asm_common
.a579						z_asm_cpy_z:
.a579						xt_asm_dec:
.a579		a9 ce		lda #$ce	                lda #$CE
.a57b		4c b8 a7	jmp $a7b8	                jmp asm_common
.a57e						z_asm_dec:
.a57e						xt_asm_dec_a:
.a57e		a9 3a		lda #$3a	                lda #$3A
.a580		4c b8 a7	jmp $a7b8	                jmp asm_common
.a583						z_asm_dec_a:
.a583						xt_asm_dec_x:
.a583		a9 de		lda #$de	                lda #$DE
.a585		4c b8 a7	jmp $a7b8	                jmp asm_common
.a588						z_asm_dec_x:
.a588						xt_asm_dec_z:
.a588		a9 c6		lda #$c6	                lda #$C6
.a58a		4c b8 a7	jmp $a7b8	                jmp asm_common
.a58d						z_asm_dec_z:
.a58d						xt_asm_dec_zx:
.a58d		a9 d6		lda #$d6	                lda #$D6
.a58f		4c b8 a7	jmp $a7b8	                jmp asm_common
.a592						z_asm_dec_zx:
.a592						xt_asm_dex:
.a592		a9 ca		lda #$ca	                lda #$CA
.a594		4c b8 a7	jmp $a7b8	                jmp asm_common
.a597						z_asm_dex:
.a597						xt_asm_dey:
.a597		a9 88		lda #$88	                lda #$88
.a599		4c b8 a7	jmp $a7b8	                jmp asm_common
.a59c						z_asm_dey:
.a59c						xt_asm_eor:
.a59c		a9 4d		lda #$4d	                lda #$4D
.a59e		4c b8 a7	jmp $a7b8	                jmp asm_common
.a5a1						z_asm_eor:
.a5a1						xt_asm_eor_h:
.a5a1		a9 49		lda #$49	                lda #$49
.a5a3		4c b8 a7	jmp $a7b8	                jmp asm_common
.a5a6						z_asm_eor_h:
.a5a6						xt_asm_eor_x:
.a5a6		a9 5d		lda #$5d	                lda #$5D
.a5a8		4c b8 a7	jmp $a7b8	                jmp asm_common
.a5ab						z_asm_eor_x:
.a5ab						xt_asm_eor_y:
.a5ab		a9 59		lda #$59	                lda #$59
.a5ad		4c b8 a7	jmp $a7b8	                jmp asm_common
.a5b0						z_asm_eor_y:
.a5b0						xt_asm_eor_z:
.a5b0		a9 45		lda #$45	                lda #$45
.a5b2		4c b8 a7	jmp $a7b8	                jmp asm_common
.a5b5						z_asm_eor_z:
.a5b5						xt_asm_eor_zi:
.a5b5		a9 52		lda #$52	                lda #$52
.a5b7		4c b8 a7	jmp $a7b8	                jmp asm_common
.a5ba						z_asm_eor_zi:
.a5ba						xt_asm_eor_ziy:
.a5ba		a9 51		lda #$51	                lda #$51
.a5bc		4c b8 a7	jmp $a7b8	                jmp asm_common
.a5bf						z_asm_eor_ziy:
.a5bf						xt_asm_eor_zx:
.a5bf		a9 55		lda #$55	                lda #$55
.a5c1		4c b8 a7	jmp $a7b8	                jmp asm_common
.a5c4						z_asm_eor_zx:
.a5c4						xt_asm_eor_zxi:
.a5c4		a9 41		lda #$41	                lda #$41
.a5c6		4c b8 a7	jmp $a7b8	                jmp asm_common
.a5c9						z_asm_eor_zxi:
.a5c9						xt_asm_inc:
.a5c9		a9 ee		lda #$ee	                lda #$EE
.a5cb		4c b8 a7	jmp $a7b8	                jmp asm_common
.a5ce						z_asm_inc:
.a5ce						xt_asm_inc_a:
.a5ce		a9 1a		lda #$1a	                lda #$1A
.a5d0		4c b8 a7	jmp $a7b8	                jmp asm_common
.a5d3						z_asm_inc_a:
.a5d3						xt_asm_inc_x:
.a5d3		a9 fe		lda #$fe	                lda #$FE
.a5d5		4c b8 a7	jmp $a7b8	                jmp asm_common
.a5d8						z_asm_inc_x:
.a5d8						xt_asm_inc_z:
.a5d8		a9 e6		lda #$e6	                lda #$E6
.a5da		4c b8 a7	jmp $a7b8	                jmp asm_common
.a5dd						z_asm_inc_z:
.a5dd						xt_asm_inc_zx:
.a5dd		a9 f6		lda #$f6	                lda #$F6
.a5df		4c b8 a7	jmp $a7b8	                jmp asm_common
.a5e2						z_asm_inc_zx:
.a5e2						xt_asm_inx:
.a5e2		a9 e8		lda #$e8	                lda #$E8
.a5e4		4c b8 a7	jmp $a7b8	                jmp asm_common
.a5e7						z_asm_inx:
.a5e7						xt_asm_iny:
.a5e7		a9 c8		lda #$c8	                lda #$C8
.a5e9		4c b8 a7	jmp $a7b8	                jmp asm_common
.a5ec						z_asm_iny:
.a5ec						xt_asm_jmp:
.a5ec		a9 4c		lda #$4c	                lda #$4C
.a5ee		4c b8 a7	jmp $a7b8	                jmp asm_common
.a5f1						z_asm_jmp:
.a5f1						xt_asm_jmp_i:
.a5f1		a9 6c		lda #$6c	                lda #$6C
.a5f3		4c b8 a7	jmp $a7b8	                jmp asm_common
.a5f6						z_asm_jmp_i:
.a5f6						xt_asm_jmp_xi:
.a5f6		a9 7c		lda #$7c	                lda #$7C
.a5f8		4c b8 a7	jmp $a7b8	                jmp asm_common
.a5fb						z_asm_jmp_xi:
.a5fb						xt_asm_jsr:
.a5fb		a9 20		lda #$20	                lda #$20
.a5fd		4c b8 a7	jmp $a7b8	                jmp asm_common
.a600						z_asm_jsr:
.a600						xt_asm_lda:
.a600		a9 ad		lda #$ad	                lda #$AD
.a602		4c b8 a7	jmp $a7b8	                jmp asm_common
.a605						z_asm_lda:
.a605						xt_asm_lda_h:
.a605		a9 a9		lda #$a9	                lda #$A9
.a607		4c b8 a7	jmp $a7b8	                jmp asm_common
.a60a						z_asm_lda_h:
.a60a						xt_asm_lda_x:
.a60a		a9 bd		lda #$bd	                lda #$BD
.a60c		4c b8 a7	jmp $a7b8	                jmp asm_common
.a60f						z_asm_lda_x:
.a60f						xt_asm_lda_y:
.a60f		a9 b9		lda #$b9	                lda #$B9
.a611		4c b8 a7	jmp $a7b8	                jmp asm_common
.a614						z_asm_lda_y:
.a614						xt_asm_lda_z:
.a614		a9 a5		lda #$a5	                lda #$A5
.a616		4c b8 a7	jmp $a7b8	                jmp asm_common
.a619						z_asm_lda_z:
.a619						xt_asm_lda_zi:
.a619		a9 b2		lda #$b2	                lda #$B2
.a61b		4c b8 a7	jmp $a7b8	                jmp asm_common
.a61e						z_asm_lda_zi:
.a61e						xt_asm_lda_ziy:
.a61e		a9 b1		lda #$b1	                lda #$B1
.a620		4c b8 a7	jmp $a7b8	                jmp asm_common
.a623						z_asm_lda_ziy:
.a623						xt_asm_lda_zx:
.a623		a9 b5		lda #$b5	                lda #$B5
.a625		4c b8 a7	jmp $a7b8	                jmp asm_common
.a628						z_asm_lda_zx:
.a628						xt_asm_lda_zxi:
.a628		a9 a1		lda #$a1	                lda #$A1
.a62a		4c b8 a7	jmp $a7b8	                jmp asm_common
.a62d						z_asm_lda_zxi:
.a62d						xt_asm_ldx:
.a62d		a9 ae		lda #$ae	                lda #$AE
.a62f		4c b8 a7	jmp $a7b8	                jmp asm_common
.a632						z_asm_ldx:
.a632						xt_asm_ldx_h:
.a632		a9 a2		lda #$a2	                lda #$A2
.a634		4c b8 a7	jmp $a7b8	                jmp asm_common
.a637						z_asm_ldx_h:
.a637						xt_asm_ldx_y:
.a637		a9 be		lda #$be	                lda #$BE
.a639		4c b8 a7	jmp $a7b8	                jmp asm_common
.a63c						z_asm_ldx_y:
.a63c						xt_asm_ldx_z:
.a63c		a9 a6		lda #$a6	                lda #$A6
.a63e		4c b8 a7	jmp $a7b8	                jmp asm_common
.a641						z_asm_ldx_z:
.a641						xt_asm_ldx_zy:
.a641		a9 b6		lda #$b6	                lda #$B6
.a643		4c b8 a7	jmp $a7b8	                jmp asm_common
.a646						z_asm_ldx_zy:
.a646						xt_asm_ldy:
.a646		a9 ac		lda #$ac	                lda #$AC
.a648		4c b8 a7	jmp $a7b8	                jmp asm_common
.a64b						z_asm_ldy:
.a64b						xt_asm_ldy_h:
.a64b		a9 a0		lda #$a0	                lda #$A0
.a64d		4c b8 a7	jmp $a7b8	                jmp asm_common
.a650						z_asm_ldy_h:
.a650						xt_asm_ldy_x:
.a650		a9 bc		lda #$bc	                lda #$BC
.a652		4c b8 a7	jmp $a7b8	                jmp asm_common
.a655						z_asm_ldy_x:
.a655						xt_asm_ldy_z:
.a655		a9 a4		lda #$a4	                lda #$A4
.a657		4c b8 a7	jmp $a7b8	                jmp asm_common
.a65a						z_asm_ldy_z:
.a65a						xt_asm_ldy_zx:
.a65a		a9 b4		lda #$b4	                lda #$B4
.a65c		4c b8 a7	jmp $a7b8	                jmp asm_common
.a65f						z_asm_ldy_zx:
.a65f						xt_asm_lsr:
.a65f		a9 4e		lda #$4e	                lda #$4E
.a661		4c b8 a7	jmp $a7b8	                jmp asm_common
.a664						z_asm_lsr:
.a664						xt_asm_lsr_a:
.a664		a9 4a		lda #$4a	                lda #$4A
.a666		4c b8 a7	jmp $a7b8	                jmp asm_common
.a669						z_asm_lsr_a:
.a669						xt_asm_lsr_x:
.a669		a9 5e		lda #$5e	                lda #$5E
.a66b		4c b8 a7	jmp $a7b8	                jmp asm_common
.a66e						z_asm_lsr_x:
.a66e						xt_asm_lsr_z:
.a66e		a9 46		lda #$46	                lda #$46
.a670		4c b8 a7	jmp $a7b8	                jmp asm_common
.a673						z_asm_lsr_z:
.a673						xt_asm_lsr_zx:
.a673		a9 56		lda #$56	                lda #$56
.a675		4c b8 a7	jmp $a7b8	                jmp asm_common
.a678						z_asm_lsr_zx:
.a678						xt_asm_nop:
.a678		a9 ea		lda #$ea	                lda #$EA
.a67a		4c b8 a7	jmp $a7b8	                jmp asm_common
.a67d						z_asm_nop:
.a67d						xt_asm_ora:
.a67d		a9 0d		lda #$0d	                lda #$0D
.a67f		4c b8 a7	jmp $a7b8	                jmp asm_common
.a682						z_asm_ora:
.a682						xt_asm_ora_h:
.a682		a9 09		lda #$09	                lda #$09
.a684		4c b8 a7	jmp $a7b8	                jmp asm_common
.a687						z_asm_ora_h:
.a687						xt_asm_ora_x:
.a687		a9 1d		lda #$1d	                lda #$1D
.a689		4c b8 a7	jmp $a7b8	                jmp asm_common
.a68c						z_asm_ora_x:
.a68c						xt_asm_ora_y:
.a68c		a9 19		lda #$19	                lda #$19
.a68e		4c b8 a7	jmp $a7b8	                jmp asm_common
.a691						z_asm_ora_y:
.a691						xt_asm_ora_z:
.a691		a9 05		lda #$05	                lda #$05
.a693		4c b8 a7	jmp $a7b8	                jmp asm_common
.a696						z_asm_ora_z:
.a696						xt_asm_ora_zi:
.a696		a9 12		lda #$12	                lda #$12
.a698		a0 02		ldy #$02	                ldy #2
.a69a		4c b8 a7	jmp $a7b8	                jmp asm_common
.a69d						z_asm_ora_zi:
.a69d						xt_asm_ora_ziy:
.a69d		a9 11		lda #$11	                lda #$11
.a69f		4c b8 a7	jmp $a7b8	                jmp asm_common
.a6a2						z_asm_ora_ziy:
.a6a2						xt_asm_ora_zx:
.a6a2		a9 15		lda #$15	                lda #$15
.a6a4		4c b8 a7	jmp $a7b8	                jmp asm_common
.a6a7						z_asm_ora_zx:
.a6a7						xt_asm_ora_zxi:
.a6a7		a9 01		lda #$01	                lda #$01
.a6a9		4c b8 a7	jmp $a7b8	                jmp asm_common
.a6ac						z_asm_ora_zxi:
.a6ac						xt_asm_pha:
.a6ac		a9 48		lda #$48	                lda #$48
.a6ae		4c b8 a7	jmp $a7b8	                jmp asm_common
.a6b1						z_asm_pha:
.a6b1						xt_asm_php:
.a6b1		a9 08		lda #$08	                lda #$08
.a6b3		4c b8 a7	jmp $a7b8	                jmp asm_common
.a6b6						z_asm_php:
.a6b6						xt_asm_phx:
.a6b6		a9 da		lda #$da	                lda #$DA
.a6b8		4c b8 a7	jmp $a7b8	                jmp asm_common
.a6bb						z_asm_phx:
.a6bb						xt_asm_phy:
.a6bb		a9 5a		lda #$5a	                lda #$5A
.a6bd		4c b8 a7	jmp $a7b8	                jmp asm_common
.a6c0						z_asm_phy:
.a6c0						xt_asm_pla:
.a6c0		a9 68		lda #$68	                lda #$68
.a6c2		4c b8 a7	jmp $a7b8	                jmp asm_common
.a6c5						z_asm_pla:
.a6c5						xt_asm_plp:
.a6c5		a9 28		lda #$28	                lda #$28
.a6c7		4c b8 a7	jmp $a7b8	                jmp asm_common
.a6ca						z_asm_plp:
.a6ca						xt_asm_plx:
.a6ca		a9 fa		lda #$fa	                lda #$FA
.a6cc		4c b8 a7	jmp $a7b8	                jmp asm_common
.a6cf						z_asm_plx:
.a6cf						xt_asm_ply:
.a6cf		a9 7a		lda #$7a	                lda #$7A
.a6d1		4c b8 a7	jmp $a7b8	                jmp asm_common
.a6d4						z_asm_ply:
.a6d4						xt_asm_rol:
.a6d4		a9 2e		lda #$2e	                lda #$2E
.a6d6		4c b8 a7	jmp $a7b8	                jmp asm_common
.a6d9						z_asm_rol:
.a6d9						xt_asm_rol_a:
.a6d9		a9 2a		lda #$2a	                lda #$2A
.a6db		4c b8 a7	jmp $a7b8	                jmp asm_common
.a6de						z_asm_rol_a:
.a6de						xt_asm_rol_x:
.a6de		a9 3e		lda #$3e	                lda #$3E
.a6e0		4c b8 a7	jmp $a7b8	                jmp asm_common
.a6e3						z_asm_rol_x:
.a6e3						xt_asm_rol_z:
.a6e3		a9 26		lda #$26	                lda #$26
.a6e5		4c b8 a7	jmp $a7b8	                jmp asm_common
.a6e8						z_asm_rol_z:
.a6e8						xt_asm_rol_zx:
.a6e8		a9 36		lda #$36	                lda #$36
.a6ea		4c b8 a7	jmp $a7b8	                jmp asm_common
.a6ed						z_asm_rol_zx:
.a6ed						xt_asm_ror:
.a6ed		a9 6e		lda #$6e	                lda #$6E
.a6ef		4c b8 a7	jmp $a7b8	                jmp asm_common
.a6f2						z_asm_ror:
.a6f2						xt_asm_ror_a:
.a6f2		a9 6a		lda #$6a	                lda #$6A
.a6f4		4c b8 a7	jmp $a7b8	                jmp asm_common
.a6f7						z_asm_ror_a:
.a6f7						xt_asm_ror_x:
.a6f7		a9 7e		lda #$7e	                lda #$7E
.a6f9		4c b8 a7	jmp $a7b8	                jmp asm_common
.a6fc						z_asm_ror_x:
.a6fc						xt_asm_ror_z:
.a6fc		a9 66		lda #$66	                lda #$66
.a6fe		4c b8 a7	jmp $a7b8	                jmp asm_common
.a701						z_asm_ror_z:
.a701						xt_asm_ror_zx:
.a701		a9 76		lda #$76	                lda #$76
.a703		4c b8 a7	jmp $a7b8	                jmp asm_common
.a706						z_asm_ror_zx:
.a706						xt_asm_rti:
.a706		a9 40		lda #$40	                lda #$40
.a708		4c b8 a7	jmp $a7b8	                jmp asm_common
.a70b						z_asm_rti:
.a70b						xt_asm_rts:
.a70b		a9 60		lda #$60	                lda #$60
.a70d		4c b8 a7	jmp $a7b8	                jmp asm_common
.a710						z_asm_rts:
.a710						xt_asm_sbc:
.a710		a9 ed		lda #$ed	                lda #$ED
.a712		4c b8 a7	jmp $a7b8	                jmp asm_common
.a715						z_asm_sbc:
.a715						xt_asm_sbc_h:
.a715		a9 e9		lda #$e9	                lda #$E9
.a717		4c b8 a7	jmp $a7b8	                jmp asm_common
.a71a						z_asm_sbc_h:
.a71a						xt_asm_sbc_x:
.a71a		a9 fd		lda #$fd	                lda #$FD
.a71c		4c b8 a7	jmp $a7b8	                jmp asm_common
.a71f						z_asm_sbc_x:
.a71f						xt_asm_sbc_y:
.a71f		a9 f9		lda #$f9	                lda #$F9
.a721		4c b8 a7	jmp $a7b8	                jmp asm_common
.a724						z_asm_sbc_y:
.a724						xt_asm_sbc_z:
.a724		a9 e5		lda #$e5	                lda #$E5
.a726		4c b8 a7	jmp $a7b8	                jmp asm_common
.a729						z_asm_sbc_z:
.a729						xt_asm_sbc_zi:
.a729		a9 f2		lda #$f2	                lda #$F2
.a72b		4c b8 a7	jmp $a7b8	                jmp asm_common
.a72e						z_asm_sbc_zi:
.a72e						xt_asm_sbc_ziy:
.a72e		a9 f1		lda #$f1	                lda #$F1
.a730		4c b8 a7	jmp $a7b8	                jmp asm_common
.a733						z_asm_sbc_ziy:
.a733						xt_asm_sbc_zx:
.a733		a9 f5		lda #$f5	                lda #$F5
.a735		4c b8 a7	jmp $a7b8	                jmp asm_common
.a738						z_asm_sbc_zx:
.a738						xt_asm_sbc_zxi:
.a738		a9 e1		lda #$e1	                lda #$E1
.a73a		80 7c		bra $a7b8	                bra asm_common  ; <-- limit for BRA instead of JMP
.a73c						z_asm_sbc_zxi:
.a73c						xt_asm_sec:
.a73c		a9 38		lda #$38	                lda #$38
.a73e		80 78		bra $a7b8	                bra asm_common
.a740						z_asm_sec:
.a740						xt_asm_sed:
.a740		a9 f8		lda #$f8	                lda #$F8
.a742		80 74		bra $a7b8	                bra asm_common
.a744						z_asm_sed:
.a744						xt_asm_sei:
.a744		a9 78		lda #$78	                lda #$78
.a746		80 70		bra $a7b8	                bra asm_common
.a748						z_asm_sei:
.a748						xt_asm_sta:
.a748		a9 8d		lda #$8d	                lda #$8D
.a74a		80 6c		bra $a7b8	                bra asm_common
.a74c						z_asm_sta:
.a74c						xt_asm_sta_x:
.a74c		a9 9d		lda #$9d	                lda #$9D
.a74e		80 68		bra $a7b8	                bra asm_common
.a750						z_asm_sta_x:
.a750						xt_asm_sta_y:
.a750		a9 99		lda #$99	                lda #$99
.a752		80 64		bra $a7b8	                bra asm_common
.a754						z_asm_sta_y:
.a754						xt_asm_sta_z:
.a754		a9 85		lda #$85	                lda #$85
.a756		80 60		bra $a7b8	                bra asm_common
.a758						z_asm_sta_z:
.a758						xt_asm_sta_zi:
.a758		a9 92		lda #$92	                lda #$92
.a75a		80 5c		bra $a7b8	                bra asm_common
.a75c						z_asm_sta_zi:
.a75c						xt_asm_sta_ziy:
.a75c		a9 91		lda #$91	                lda #$91
.a75e		80 58		bra $a7b8	                bra asm_common
.a760						z_asm_sta_ziy:
.a760						xt_asm_sta_zx:
.a760		a9 95		lda #$95	                lda #$95
.a762		80 54		bra $a7b8	                bra asm_common
.a764						z_asm_sta_zx:
.a764						xt_asm_sta_zxi:
.a764		a9 81		lda #$81	                lda #$81
.a766		80 50		bra $a7b8	                bra asm_common
.a768						z_asm_sta_zxi:
.a768						xt_asm_stx:
.a768		a9 8e		lda #$8e	                lda #$8E
.a76a		80 4c		bra $a7b8	                bra asm_common
.a76c						z_asm_stx:
.a76c						xt_asm_stx_z:
.a76c		a9 86		lda #$86	                lda #$86
.a76e		80 48		bra $a7b8	                bra asm_common
.a770						z_asm_stx_z:
.a770						xt_asm_stx_zy:
.a770		a9 96		lda #$96	                lda #$96
.a772		80 44		bra $a7b8	                bra asm_common
.a774						z_asm_stx_zy:
.a774						xt_asm_sty:
.a774		a9 8c		lda #$8c	                lda #$8C
.a776		80 40		bra $a7b8	                bra asm_common
.a778						z_asm_sty:
.a778						xt_asm_sty_z:
.a778		a9 84		lda #$84	                lda #$84
.a77a		80 3c		bra $a7b8	                bra asm_common
.a77c						z_asm_sty_z:
.a77c						xt_asm_sty_zx:
.a77c		a9 94		lda #$94	                lda #$94
.a77e		80 38		bra $a7b8	                bra asm_common
.a780						z_asm_sty_zx:
.a780						xt_asm_stz:
.a780		a9 9c		lda #$9c	                lda #$9C
.a782		80 34		bra $a7b8	                bra asm_common
.a784						z_asm_stz:
.a784						xt_asm_stz_x:
.a784		a9 9e		lda #$9e	                lda #$9E
.a786		80 30		bra $a7b8	                bra asm_common
.a788						z_asm_stz_x:
.a788						xt_asm_stz_z:
.a788		a9 64		lda #$64	                lda #$64
.a78a		80 2c		bra $a7b8	                bra asm_common
.a78c						z_asm_stz_z:
.a78c						xt_asm_stz_zx:
.a78c		a9 74		lda #$74	                lda #$74
.a78e		80 28		bra $a7b8	                bra asm_common
.a790						z_asm_stz_zx:
.a790						xt_asm_tax:
.a790		a9 aa		lda #$aa	                lda #$AA
.a792		80 24		bra $a7b8	                bra asm_common
.a794						z_asm_tax:
.a794						xt_asm_tay:
.a794		a9 a8		lda #$a8	                lda #$A8
.a796		80 20		bra $a7b8	                bra asm_common
.a798						z_asm_tay:
.a798						xt_asm_trb:
.a798		a9 1c		lda #$1c	                lda #$1C
.a79a		80 1c		bra $a7b8	                bra asm_common
.a79c						z_asm_trb:
.a79c						xt_asm_trb_z:
.a79c		a9 14		lda #$14	                lda #$14
.a79e		80 18		bra $a7b8	                bra asm_common
.a7a0						z_asm_trb_z:
.a7a0						xt_asm_tsb:
.a7a0		a9 0c		lda #$0c	                lda #$0C
.a7a2		80 14		bra $a7b8	                bra asm_common
.a7a4						z_asm_tsb:
.a7a4						xt_asm_tsb_z:
.a7a4		a9 04		lda #$04	                lda #$04
.a7a6		80 10		bra $a7b8	                bra asm_common
.a7a8						z_asm_tsb_z:
.a7a8						xt_asm_tsx:
.a7a8		a9 ba		lda #$ba	                lda #$BA
.a7aa		80 0c		bra $a7b8	                bra asm_common
.a7ac						z_asm_tsx:
.a7ac						xt_asm_txa:
.a7ac		a9 8a		lda #$8a	                lda #$8A
.a7ae		80 08		bra $a7b8	                bra asm_common
.a7b0						z_asm_txa:
.a7b0						xt_asm_txs:
.a7b0		a9 9a		lda #$9a	                lda #$9A
.a7b2		80 04		bra $a7b8	                bra asm_common
.a7b4						z_asm_txs:
.a7b4						xt_asm_tya:
.a7b4		a9 98		lda #$98	                lda #$98
.a7b6		80 00		bra $a7b8	                bra asm_common
.a7b8						z_asm_tya:
.a7b8						asm_common:
.a7b8		a8		tay		                tay
.a7b9		20 96 97	jsr $9796	                jsr cmpl_a
.a7bc		a9 2b		lda #$2b	                lda #<oc_index_table
.a7be		85 27		sta $27		                sta tmp2
.a7c0		a9 b4		lda #$b4	                lda #>oc_index_table
.a7c2		85 28		sta $28		                sta tmp2+1
.a7c4		98		tya		                tya             ; retrieve opcode
.a7c5		0a		asl a		                asl             ; times two for offset
.a7c6		90 02		bcc $a7ca	                bcc +
.a7c8		e6 28		inc $28		                inc tmp2+1
.a7ca						+
.a7ca		a8		tay		                tay             ; use Y as the index
.a7cb		b1 27		lda ($27),y	                lda (tmp2),y    ; LSB
.a7cd		85 29		sta $29		                sta tmp3
.a7cf		c8		iny		                iny
.a7d0		b1 27		lda ($27),y	                lda (tmp2),y    ; MSB
.a7d2		85 2a		sta $2a		                sta tmp3+1
.a7d4		b2 29		lda ($29)	                lda (tmp3)      ; get "lengths byte"
.a7d6		2a		rol a		                rol
.a7d7		2a		rol a		                rol
.a7d8		2a		rol a		                rol             ; Three times because we go through Carry
.a7d9		29 03		and #$03	                and #%00000011
.a7db		a8		tay		                tay
.a7dc		88		dey		                dey
.a7dd		f0 12		beq $a7f1	                beq _done
.a7df		20 2e d8	jsr $d82e	                jsr underflow_1
.a7e2		b5 00		lda $00,x	                lda 0,x
.a7e4		20 96 97	jsr $9796	                jsr cmpl_a      ; does not use Y
.a7e7		88		dey		                dey
.a7e8		f0 05		beq $a7ef	                beq _done_drop
.a7ea		b5 01		lda $01,x	                lda 1,x
.a7ec		20 96 97	jsr $9796	                jsr cmpl_a      ; Fall through to _done_drop
.a7ef						_done_drop:
.a7ef		e8		inx		                inx
.a7f0		e8		inx		                inx             ; Fall through to _done
.a7f1						_done:
.a7f1		60		rts		                rts             ; Returns to original caller
.a7f2						xt_asm_push_a:
.a7f2		a0 00		ldy #$00	                ldy #0
.a7f4						_loop:
.a7f4		b9 02 a8	lda $a802,y	                lda asm_push_a_data,y
.a7f7		c9 ff		cmp #$ff	                cmp #$FF
.a7f9		f0 06		beq $a801	                beq _done
.a7fb		20 96 97	jsr $9796	                jsr cmpl_a      ; does not change Y
.a7fe		c8		iny		                iny
.a7ff		80 f3		bra $a7f4	                bra _loop
.a801						_done:
.a801						z_asm_push_a:
.a801		60		rts		                rts
.a802						asm_push_a_data:
>a802		ca ca 95 00 74 01		        .byte $CA, $CA, $95, 00, $74, $01
>a808		ff				        .byte $FF               ; terminator
.a809						xt_asm_back_jump:
.a809						z_asm_back_jump:
.a809		60		rts		                rts
.a80a						xt_asm_back_branch:
.a80a		20 1b 89	jsr $891b	                jsr xt_here             ; ( addr-l addr-h )
.a80d		20 f6 8b	jsr $8bf6	                jsr xt_minus            ; ( offset )
.a810		3a		dec a		                dea
.a811		3a		dec a		                dea
.a812						z_asm_back_branch:
.a812		60		rts		                rts
.a813						assembler_end:

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/ed.asm

.a813						xt_ed:
.a813		20 17 a8	jsr $a817	                jsr ed6502      ; kept in separate file
.a816		60		rts		z_ed:           rts
=$0035						ed_head  = tmped    ; pointer to first list element (addr) (2 bytes)
=$0037						ed_cur   = tmped+2  ; current line number (1 is first line) (2 bytes)
=$0039						ed_flags = tmped+4  ; Flags used by ed, where
=$003a						ed_base  = tmped+5  ; used to hold BASE and put it back at the end.
.a817						ed6502:
.a817		a5 18		lda $18		                lda base
.a819		85 3a		sta $3a		                sta ed_base
.a81b		a9 0a		lda #$0a	                lda #10
.a81d		85 18		sta $18		                sta base
.a81f		64 35		stz $35		                stz ed_head
.a821		64 36		stz $36		                stz ed_head+1
.a823		64 37		stz $37		                stz ed_cur
.a825		64 38		stz $38		                stz ed_cur+1
.a827		64 39		stz $39		                stz ed_flags
.a829		20 08 9e	jsr $9e08	                jsr xt_zero
.a82c		20 08 9e	jsr $9e08	                jsr xt_zero             ; ( addr-t u-t )
.a82f		20 3a 84	jsr $843a	                jsr xt_cr
.a832						ed_input_loop:
.a832		a9 81		lda #$81	                lda #%10000001
.a834		14 39		trb $39		                trb ed_flags
.a836		20 11 ad	jsr $ad11	                jsr ed_get_input
.a839		a5 0e		lda $0e		                lda ciblen
.a83b		d0 1f		bne $a85c	                bne _command_mode
.a83d		ca		dex		                dex
.a83e		ca		dex		                dex                     ; ( addr-t u-t ? )
.a83f		a5 37		lda $37		                lda ed_cur
.a841		95 00		sta $00,x	                sta 0,x
.a843		a5 38		lda $38		                lda ed_cur+1
.a845		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t u )
.a847		a9 80		lda #$80	                lda #%10000000
.a849		04 39		tsb $39		                tsb ed_flags
.a84b		20 f5 8c	jsr $8cf5	                jsr xt_one_plus         ; ( addr-t u-t u+1 )
.a84e		20 2d ad	jsr $ad2d	                jsr ed_is_valid_line
.a851		b0 03		bcs $a856	                bcs +
.a853		4c 01 ad	jmp $ad01	                jmp ed_error_1drop
.a856						+
.a856		20 08 9e	jsr $9e08	                jsr xt_zero             ; ( addr-t u-t u+1 0 )
.a859		4c 27 a9	jmp $a927	                jmp _line_number_only_from_external
.a85c						_command_mode:
.a85c		20 08 9e	jsr $9e08	                jsr xt_zero             ; parameter 1 is NOS ( addr-t u-t 0 )
.a85f		20 08 9e	jsr $9e08	                jsr xt_zero             ; parameter 2 is TOS ( addr-t u-t 0 0 )
.a862		b2 0c		lda ($0c)	                lda (cib)
.a864		c9 2e		cmp #$2e	                cmp #'.'                ; ASCII '.'
.a866		d0 3a		bne $a8a2	                bne _prefix_dollar
.a868		20 22 ad	jsr $ad22	                jsr ed_have_text
.a86b		a5 37		lda $37		                lda ed_cur
.a86d		95 02		sta $02,x	                sta 2,x
.a86f		a5 38		lda $38		                lda ed_cur+1
.a871		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.a873		a9 80		lda #$80	                lda #%10000000
.a875		04 39		tsb $39		                tsb ed_flags
.a877		a5 0e		lda $0e		                lda ciblen
.a879		3a		dec a		                dea                     ; sets Z if A was 1
.a87a		d0 03		bne $a87f	                bne +
.a87c		4c 27 a9	jmp $a927	                jmp _line_number_only_from_external
.a87f						+
.a87f		ca		dex		                dex
.a880		ca		dex		                dex
.a881		ca		dex		                dex
.a882		ca		dex		                dex
.a883		a5 0c		lda $0c		                lda cib
.a885		95 02		sta $02,x	                sta 2,x
.a887		a5 0d		lda $0d		                lda cib+1
.a889		95 03		sta $03,x	                sta 3,x
.a88b		a5 0e		lda $0e		                lda ciblen
.a88d		95 00		sta $00,x	                sta 0,x
.a88f		a5 0f		lda $0f		                lda ciblen+1
.a891		95 01		sta $01,x	                sta 1,x
.a893		20 e9 8c	jsr $8ce9	                jsr xt_one_minus        ; ( addr-t u-t para1 0 addr u-1 )
.a896		20 34 92	jsr $9234	                jsr xt_swap             ; ( addr-t u-t para1 0 u-1 addr )
.a899		20 f5 8c	jsr $8cf5	                jsr xt_one_plus         ; ( addr-t u-t para1 0 u-1 addr+1 )
.a89c		20 34 92	jsr $9234	                jsr xt_swap             ; ( addr-t u-t para1 0 addr+1 u-1 )
.a89f		4c 7f a9	jmp $a97f	                jmp _check_for_para2
.a8a2						_prefix_dollar:
.a8a2		b2 0c		lda ($0c)	                lda (cib)
.a8a4		c9 24		cmp #$24	                cmp #'$'
.a8a6		d0 1c		bne $a8c4	                bne _prefix_percent
.a8a8		20 22 ad	jsr $ad22	                jsr ed_have_text
.a8ab		e8		inx		                inx
.a8ac		e8		inx		                inx                     ; ( addr-t u-t 0 )
.a8ad		20 4f ad	jsr $ad4f	                jsr ed_last_line          ; ( addr-t u-t 0 para1 )
.a8b0		20 34 92	jsr $9234	                jsr xt_swap             ; SWAP ( addr-t u-t para1 0 )
.a8b3		a9 80		lda #$80	                lda #%10000000
.a8b5		04 39		tsb $39		                tsb ed_flags
.a8b7		a5 0e		lda $0e		                lda ciblen
.a8b9		3a		dec a		                dea                     ; sets Z if A was 1
.a8ba		d0 03		bne $a8bf	                bne +
.a8bc		4c 27 a9	jmp $a927	                jmp _line_number_only_from_external
.a8bf						+
.a8bf		a0 01		ldy #$01	                ldy #01
.a8c1		4c fb a9	jmp $a9fb	                jmp _check_command
.a8c4						_prefix_percent:
.a8c4		b2 0c		lda ($0c)	                lda (cib)
.a8c6		c9 25		cmp #$25	                cmp #'%'                ; ASCII '%'
.a8c8		f0 04		beq $a8ce	                beq _whole_text
.a8ca		c9 2c		cmp #$2c	                cmp #','                ; ASCII ','
.a8cc		d0 17		bne $a8e5	                bne _prefix_semicolon
.a8ce						_whole_text:
.a8ce		20 22 ad	jsr $ad22	                jsr ed_have_text
.a8d1		a9 01		lda #$01	                lda #01
.a8d3		95 02		sta $02,x	                sta 2,x                 ; LSB of NOS is para 1
.a8d5		74 03		stz $03,x	                stz 3,x                 ; ( addr-t u-t para1 0 )
.a8d7						_semicolon_entry:
.a8d7		e8		inx		                inx
.a8d8		e8		inx		                inx                     ; DROP ( addr-t u-t para1 )
.a8d9		20 4f ad	jsr $ad4f	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.a8dc		a9 80		lda #$80	                lda #%10000000
.a8de		04 39		tsb $39		                tsb ed_flags
.a8e0		a0 01		ldy #$01	                ldy #01
.a8e2		4c fb a9	jmp $a9fb	                jmp _check_command
.a8e5						_prefix_semicolon:
.a8e5		b2 0c		lda ($0c)	                lda (cib)
.a8e7		c9 3b		cmp #$3b	                cmp #';'                ; ASCII ';'
.a8e9		d0 0d		bne $a8f8	                bne _prefix_number
.a8eb		20 22 ad	jsr $ad22	                jsr ed_have_text
.a8ee		a5 37		lda $37		                lda ed_cur
.a8f0		95 02		sta $02,x	                sta 2,x
.a8f2		a5 38		lda $38		                lda ed_cur+1
.a8f4		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.a8f6		80 df		bra $a8d7	                bra _semicolon_entry
.a8f8						_prefix_number:
.a8f8		20 08 9e	jsr $9e08	                jsr xt_zero
.a8fb		20 08 9e	jsr $9e08	                jsr xt_zero             ; ( addr-t u-t 0 0 0 0 )
.a8fe		ca		dex		                dex
.a8ff		ca		dex		                dex
.a900		ca		dex		                dex
.a901		ca		dex		                dex                     ; ( addr-t u-t 0 0 0 0 ? ? )
.a902		a5 0c		lda $0c		                lda cib
.a904		95 02		sta $02,x	                sta 2,x
.a906		a5 0d		lda $0d		                lda cib+1
.a908		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t 0 0 0 0 cib ? )
.a90a		a5 0e		lda $0e		                lda ciblen
.a90c		95 00		sta $00,x	                sta 0,x
.a90e		a5 0f		lda $0f		                lda ciblen+1
.a910		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 0 0 cib ciblen )
.a912		20 d2 92	jsr $92d2	                jsr xt_to_number        ; ( addr-t u-t 0 0 ud addr2 u2 )
.a915		b5 00		lda $00,x	                lda 0,x
.a917		15 01		ora $01,x	                ora 1,x
.a919		d0 24		bne $a93f	                bne _have_unconverted_chars
.a91b		e8		inx		                inx
.a91c		e8		inx		                inx
.a91d		e8		inx		                inx
.a91e		e8		inx		                inx                     ; 2DROP ( addr-t u-t 0 0 ud )
.a91f		20 51 9e	jsr $9e51	                jsr xt_d_to_s           ; D>S ( addr-t u-t 0 0 u )
.a922		20 8c 9c	jsr $9c8c	                jsr xt_not_rote         ; -ROT ( addr-t u-t u 0 0 )
.a925		e8		inx		                inx
.a926		e8		inx		                inx                     ; ( addr-t u-t u 0 ) drop through
.a927						_line_number_only_from_external:
.a927		20 34 92	jsr $9234	                jsr xt_swap             ; ( addr-t u-t 0 u )
.a92a		20 2d ad	jsr $ad2d	                jsr ed_is_valid_line
.a92d		b0 03		bcs $a932	                bcs +
.a92f		4c ff ac	jmp $acff	                jmp ed_error_2drop
.a932						+
.a932		20 34 92	jsr $9234	                jsr xt_swap             ; ( addr-t u-t u 0 )
.a935		20 bc ad	jsr $adbc	                jsr ed_para1_to_cur
.a938		a9 80		lda #$80	                lda #%10000000
.a93a		04 39		tsb $39		                tsb ed_flags
.a93c		4c da ab	jmp $abda	                jmp ed_cmd_p_from_external
.a93f						_have_unconverted_chars:
.a93f		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( addr-t u-t 0 0 ud addr2 u2 u2 )
.a942		ca		dex		                dex
.a943		ca		dex		                dex                     ; ( addr-t u-t 0 0 ud addr2 u2 u2 ? )
.a944		a5 0e		lda $0e		                lda ciblen
.a946		95 00		sta $00,x	                sta 0,x
.a948		a5 0f		lda $0f		                lda ciblen+1
.a94a		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 ud addr2 u2 u2 ciblen )
.a94c		20 96 87	jsr $8796	                jsr xt_equal            ; ( addr-t u-t 0 0 ud addr2 u2 f )
.a94f		b5 00		lda $00,x	                lda 0,x
.a951		15 01		ora $01,x	                ora 1,x
.a953		f0 0e		beq $a963	                beq _no_command_yet
.a955		8a		txa		                txa
.a956		18		clc		                clc
.a957		69 0a		adc #$0a	                adc #10
.a959		aa		tax		                tax                     ; ( addr-t u-t 0 0 )
.a95a		a9 80		lda #$80	                lda #%10000000
.a95c		14 39		trb $39		                trb ed_flags
.a95e		a0 00		ldy #$00	                ldy #00
.a960		4c fb a9	jmp $a9fb	                jmp _check_command
.a963						_no_command_yet:
.a963		e8		inx		                inx
.a964		e8		inx		                inx                     ; ( ... 0 0 ud addr2 u2 )
.a965		20 72 93	jsr $9372	                jsr xt_to_r             ; >R ( ... 0 0 ud addr2 ) (R: u2)
.a968		20 8c 9c	jsr $9c8c	                jsr xt_not_rote         ; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.a96b		20 51 9e	jsr $9e51	                jsr xt_d_to_s           ; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.a96e		b5 00		lda $00,x	                lda 0,x                 ; LSB
.a970		95 06		sta $06,x	                sta 6,x
.a972		b5 01		lda $01,x	                lda 1,x                 ; MSB
.a974		95 07		sta $07,x	                sta 7,x                 ; ( ... para1 0 addr2 para1 ) (R: u2)
.a976		e8		inx		                inx
.a977		e8		inx		                inx                     ; ( addr-t u-t para1 0 addr2 ) (R: u2)
.a978		20 fa 8e	jsr $8efa	                jsr xt_r_from           ; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.a97b		a9 80		lda #$80	                lda #%10000000
.a97d		04 39		tsb $39		                tsb ed_flags
.a97f						_check_for_para2:
.a97f		a1 02		lda ($02,x)	                lda (2,x)
.a981		c9 2c		cmp #$2c	                cmp #','                ; ASCII code for ',' (comma)
.a983		f0 0d		beq $a992	                beq _got_comma
.a985		38		sec		                sec
.a986		a5 0e		lda $0e		                lda ciblen
.a988		f5 00		sbc $00,x	                sbc 0,x
.a98a		a8		tay		                tay
.a98b		e8		inx		                inx
.a98c		e8		inx		                inx
.a98d		e8		inx		                inx
.a98e		e8		inx		                inx                     ; 2DROP ( addr-t u-t para1 0 )
.a98f		4c fb a9	jmp $a9fb	                jmp _check_command
.a992						_got_comma:
.a992		f6 02		inc $02,x	                inc 2,x
.a994		d0 02		bne $a998	                bne +
.a996		f6 03		inc $03,x	                inc 3,x                 ; ( addr-t u-t para1 0 addr2+1 u2 )
.a998						+
.a998		b5 01		lda $01,x	                lda 1,x
.a99a		f0 02		beq $a99e	                beq +
.a99c		d6 01		dec $01,x	                dec 1,x
.a99e						+
.a99e		d6 00		dec $00,x	                dec 0,x                 ; ( addr-t u-t para1 0 addr2+1 u2-1 )
.a9a0		a1 02		lda ($02,x)	                lda (2,x)
.a9a2		c9 24		cmp #$24	                cmp #$24                ; ASCII for '$'
.a9a4		d0 14		bne $a9ba	                bne _para2_not_dollar
.a9a6		38		sec		                sec
.a9a7		a5 0e		lda $0e		                lda ciblen
.a9a9		f5 02		sbc $02,x	                sbc 2,x
.a9ab		a8		tay		                tay
.a9ac		c8		iny		                iny
.a9ad		5a		phy		                phy
.a9ae		8a		txa		                txa
.a9af		18		clc		                clc
.a9b0		69 06		adc #$06	                adc #06
.a9b2		aa		tax		                tax                     ; ( addr-t u-t para1 )
.a9b3		20 4f ad	jsr $ad4f	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.a9b6		7a		ply		                ply
.a9b7		4c fb a9	jmp $a9fb	                jmp _check_command
.a9ba						_para2_not_dollar:
.a9ba		20 72 93	jsr $9372	                jsr xt_to_r             ; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.a9bd		20 08 9e	jsr $9e08	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.a9c0		20 08 9e	jsr $9e08	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.a9c3		20 97 8f	jsr $8f97	                jsr xt_rot              ; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.a9c6		20 fa 8e	jsr $8efa	                jsr xt_r_from           ; R> ( ... para1 0 0 0 addr2+1 u2-1)
.a9c9		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.a9cc		20 72 93	jsr $9372	                jsr xt_to_r             ; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.a9cf		20 d2 92	jsr $92d2	                jsr xt_to_number        ; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.a9d2		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.a9d5		20 fa 8e	jsr $8efa	                jsr xt_r_from           ; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.a9d8		20 96 87	jsr $8796	                jsr xt_equal            ; = ( ... para1 0 ud addr3 u3 f )
.a9db		b5 00		lda $00,x	                lda 0,x
.a9dd		15 01		ora $01,x	                ora 1,x
.a9df		f0 08		beq $a9e9	                beq _second_number
.a9e1		8a		txa		                txa
.a9e2		18		clc		                clc
.a9e3		69 0c		adc #$0c	                adc #12
.a9e5		aa		tax		                tax                     ; back to ( addr-t u-t )
.a9e6		4c 03 ad	jmp $ad03	                jmp ed_error
.a9e9						_second_number:
.a9e9		e8		inx		                inx
.a9ea		e8		inx		                inx                     ; ( addr-t u-t para1 0 ud addr3 u3 )
.a9eb		38		sec		                sec
.a9ec		a5 0e		lda $0e		                lda ciblen
.a9ee		f5 00		sbc $00,x	                sbc 0,x
.a9f0		48		pha		                pha
.a9f1		20 a9 93	jsr $93a9	                jsr xt_two_drop         ; 2DROP ( addr-t u-t para1 0 ud )
.a9f4		20 51 9e	jsr $9e51	                jsr xt_d_to_s           ; D>S  ( addr-t u-t para1 0 para2 )
.a9f7		20 42 8c	jsr $8c42	                jsr xt_nip              ; NIP ( addr-t u-t para1 para2 )
.a9fa		7a		ply		                ply
.a9fb						_check_command:
.a9fb		24 39		bit $39		                bit ed_flags
.a9fd		30 08		bmi $aa07	                bmi _check_command_have_arg
.a9ff		a5 37		lda $37		                lda ed_cur
.aa01		95 02		sta $02,x	                sta 2,x
.aa03		a5 38		lda $38		                lda ed_cur+1
.aa05		95 03		sta $03,x	                sta 3,x
.aa07						_check_command_have_arg:
.aa07		b1 0c		lda ($0c),y	                lda (cib),y             ; get mystery char from input
.aa09		85 25		sta $25		                sta tmp1
.aa0b		da		phx		                phx
.aa0c		a2 00		ldx #$00	                ldx #00
.aa0e						_cmd_loop:
.aa0e		bd e7 ad	lda $ade7,x	                lda ed_cmd_list,x
.aa11		f0 07		beq $aa1a	                beq _illegal_command    ; zero marks end of list
.aa13		c5 25		cmp $25		                cmp tmp1
.aa15		f0 07		beq $aa1e	                beq _found_cmd
.aa17		e8		inx		                inx
.aa18		80 f4		bra $aa0e	                bra _cmd_loop
.aa1a						_illegal_command:
.aa1a		fa		plx		                plx
.aa1b		4c ff ac	jmp $acff	                jmp ed_error_2drop
.aa1e						_found_cmd:
.aa1e		8a		txa		                txa
.aa1f		0a		asl a		                asl
.aa20		aa		tax		                tax                     ; X * 2 for table
.aa21		7c f2 ad	jmp ($adf2,x)	                jmp (ed_cmd_table,x)
.aa24						ed_next_command:
.aa24		e8		inx		                inx
.aa25		e8		inx		                inx
.aa26		e8		inx		                inx
.aa27		e8		inx		                inx                     ; ( addr-t u-t ) Fall through
.aa28		4c 32 a8	jmp $a832	                jmp ed_input_loop
.aa2b						ed_all_done:
.aa2b		64 0e		stz $0e		                stz ciblen
.aa2d		64 0f		stz $0f		                stz ciblen+1
.aa2f		20 a9 93	jsr $93a9	                jsr xt_two_drop                 ; 2DROP ( addr-t u-t )
.aa32		a5 3a		lda $3a		                lda ed_base
.aa34		85 18		sta $18		                sta base
.aa36		60		rts		                rts
.aa37						ed_cmd_a:
.aa37		fa		plx		                plx
.aa38		e8		inx		                inx
.aa39		e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.aa3a						ed_entry_cmd_i:
.aa3a		20 85 ad	jsr $ad85	                jsr ed_num_to_addr        ;  ( addr-t u-t addr1 )
.aa3d		20 3a 84	jsr $843a	                jsr xt_cr
.aa40						_next_string_loop:
.aa40		20 11 ad	jsr $ad11	                jsr ed_get_input
.aa43		b2 0c		lda ($0c)	                lda (cib)
.aa45		c9 2e		cmp #$2e	                cmp #'.'                ; ASCII for '.'
.aa47		d0 16		bne $aa5f	                bne _add_line
.aa49		a4 0e		ldy $0e		                ldy ciblen
.aa4b		c0 01		cpy #$01	                cpy #01
.aa4d		d0 10		bne $aa5f	                bne _add_line
.aa4f		a4 0f		ldy $0f		                ldy ciblen+1
.aa51		d0 0c		bne $aa5f	                bne _add_line
.aa53		e8		inx		                inx
.aa54		e8		inx		                inx
.aa55		a9 40		lda #$40	                lda #%01000000
.aa57		04 39		tsb $39		                tsb ed_flags
.aa59		20 3a 84	jsr $843a	                jsr xt_cr
.aa5c		4c 32 a8	jmp $a832	                jmp ed_input_loop
.aa5f						_add_line:
.aa5f		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( addr-t u-t addr1 addr1 )
.aa62		20 1b 89	jsr $891b	                jsr xt_here             ; HERE ( addr-t u-t addr1 addr1 here )
.aa65		20 34 92	jsr $9234	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 here addr1 )
.aa68		20 1a 88	jsr $881a	                jsr xt_fetch            ; @  ( addr-t u-t addr1 here addr2 )
.aa6b		20 cd 83	jsr $83cd	                jsr xt_comma            ; ,  ( addr-t u-t addr1 here )
.aa6e		20 8f 93	jsr $938f	                jsr xt_tuck             ; TUCK ( addr-t u-t here addr1 here )
.aa71		20 34 92	jsr $9234	                jsr xt_swap             ; SWAP ( addr-t u-t here here addr1 )
.aa74		20 1e 92	jsr $921e	                jsr xt_store            ; ! ( addr-t u-t here )
.aa77		20 1b 89	jsr $891b	                jsr xt_here             ; HERE ( addr-t u-t here here2)
.aa7a		a5 00		lda $00		                lda cp
.aa7c		18		clc		                clc
.aa7d		69 04		adc #$04	                adc #04
.aa7f		85 00		sta $00		                sta cp
.aa81		90 02		bcc $aa85	                bcc +
.aa83		e6 01		inc $01		                inc cp+1
.aa85						+
.aa85		e6 37		inc $37		                inc ed_cur
.aa87		d0 02		bne $aa8b	                bne +
.aa89		e6 38		inc $38		                inc ed_cur+1
.aa8b						+
.aa8b		20 1b 89	jsr $891b	                jsr xt_here     ; HERE ( addr-t u-t here here2 here3 )
.aa8e		20 a0 86	jsr $86a0	                jsr xt_dup      ; DUP ( addr-t u-t here here2 here3 here3 )
.aa91		ca		dex		                dex
.aa92		ca		dex		                dex             ; ( addr-t u-t here here2 here3 here3 ? )
.aa93		a5 0c		lda $0c		                lda cib
.aa95		95 00		sta $00,x	                sta 0,x
.aa97		a5 0d		lda $0d		                lda cib+1
.aa99		95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 here3 cib )
.aa9b		20 34 92	jsr $9234	                jsr xt_swap     ; SWAP ( addr-t u-t here here2 here3 cib here3 )
.aa9e		ca		dex		                dex
.aa9f		ca		dex		                dex             ; ( addr-t u-t here here2 here3 cib here3 ? )
.aaa0		a5 0e		lda $0e		                lda ciblen
.aaa2		95 00		sta $00,x	                sta 0,x
.aaa4		a5 0f		lda $0f		                lda ciblen+1
.aaa6		95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 cib here3 ciblen )
.aaa8		20 12 8c	jsr $8c12	                jsr xt_move     ; ( addr-t u-t here here2 here3 )
.aaab		18		clc		                clc
.aaac		a5 00		lda $00		                lda cp
.aaae		65 0e		adc $0e		                adc ciblen
.aab0		85 00		sta $00		                sta cp
.aab2		90 06		bcc $aaba	                bcc +
.aab4		a5 01		lda $01		                lda cp+1
.aab6		65 0f		adc $0f		                adc ciblen+1
.aab8		85 01		sta $01		                sta cp+1
.aaba						+
.aaba		20 11 8d	jsr $8d11	                jsr xt_over             ; OVER ( addr-t u-t here here2 here3 here2 )
.aabd		20 1e 92	jsr $921e	                jsr xt_store            ; ! ( addr-t u-t here here2 )
.aac0		20 f5 8c	jsr $8cf5	                jsr xt_one_plus         ; 1+
.aac3		20 f5 8c	jsr $8cf5	                jsr xt_one_plus         ; 1+ ( addr-t u-t here here2+2 )
.aac6		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( addr-t u-t here here2+2 here2+2 )
.aac9		a5 0e		lda $0e		                lda ciblen
.aacb		95 02		sta $02,x	                sta 2,x
.aacd		a5 0f		lda $0f		                lda ciblen+1
.aacf		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t here ciblen here2+2 )
.aad1		20 1e 92	jsr $921e	                jsr xt_store            ; ! ( addr-t u-t here )
.aad4		20 3a 84	jsr $843a	                jsr xt_cr
.aad7		4c 40 aa	jmp $aa40	                jmp _next_string_loop
.aada						ed_cmd_d:
.aada		fa		plx		                plx
.aadb		20 22 ad	jsr $ad22	                jsr ed_have_text
.aade		20 77 ad	jsr $ad77	                jsr ed_no_line_zero
.aae1		b5 00		lda $00,x	                lda 0,x
.aae3		15 01		ora $01,x	                ora 1,x
.aae5		d0 08		bne $aaef	                bne +
.aae7		20 11 8d	jsr $8d11	                jsr xt_over             ; ( addr-t u-t para1 0 para1 )
.aaea		20 2c ab	jsr $ab2c	                jsr _cmd_d_common       ; ( addr-t u-t para1 0 )
.aaed		80 33		bra $ab22	                bra _cmd_d_done
.aaef						+
.aaef		20 2d ad	jsr $ad2d	                jsr ed_is_valid_line      ; result is in C flag
.aaf2		b0 03		bcs $aaf7	                bcs _cmd_d_loop
.aaf4		4c ff ac	jmp $acff	                jmp ed_error_2drop
.aaf7						_cmd_d_loop:
.aaf7		20 b1 93	jsr $93b1	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.aafa		20 06 89	jsr $8906	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.aafd		b5 00		lda $00,x	                lda 0,x
.aaff		15 01		ora $01,x	                ora 1,x
.ab01		d0 0d		bne $ab10	                bne _cmd_d_done_with_flag
.ab03		e8		inx		                inx
.ab04		e8		inx		                inx                     ; Get rid of the flag from >
.ab05		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( addr-t u-t para1 para2 para2 )
.ab08		20 2c ab	jsr $ab2c	                jsr _cmd_d_common       ; ( addr-t u-t para1 para2 )
.ab0b		20 e9 8c	jsr $8ce9	                jsr xt_one_minus        ; 1- ( addr-t u-t para1 para2-1 )
.ab0e		80 e7		bra $aaf7	                bra _cmd_d_loop
.ab10						_cmd_d_done_with_flag:
.ab10		e8		inx		                inx                     ; ( addr-t u-t para1 para2 )
.ab11		e8		inx		                inx
.ab12		b5 02		lda $02,x	                lda 2,x
.ab14		d0 02		bne $ab18	                bne +
.ab16		d6 03		dec $03,x	                dec 3,x
.ab18						+
.ab18		d6 02		dec $02,x	                dec 2,x
.ab1a		b5 02		lda $02,x	                lda 2,x
.ab1c		85 37		sta $37		                sta ed_cur
.ab1e		b5 03		lda $03,x	                lda 3,x
.ab20		85 38		sta $38		                sta ed_cur+1            ; drop through to _cmd_d_done
.ab22						_cmd_d_done:
.ab22		a9 40		lda #$40	                lda #%01000000
.ab24		04 39		tsb $39		                tsb ed_flags
.ab26		20 3a 84	jsr $843a	                jsr xt_cr
.ab29		4c 24 aa	jmp $aa24	                jmp ed_next_command
.ab2c						_cmd_d_common:
.ab2c		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( addr-t u-t u u )
.ab2f		20 85 ad	jsr $ad85	                jsr ed_num_to_addr        ; ( addr-t u-t u addr )
.ab32		20 1a 88	jsr $881a	                jsr xt_fetch            ; @ ( addr-t u-t u addr1 )
.ab35		20 34 92	jsr $9234	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 u )
.ab38		20 e9 8c	jsr $8ce9	                jsr xt_one_minus        ; 1- ( addr-t u-t addr1 u-1 )
.ab3b		20 85 ad	jsr $ad85	                jsr ed_num_to_addr        ; ( addr-t u-t addr1 addr-1 )
.ab3e		20 1e 92	jsr $921e	                jsr xt_store            ; ! ( addr-t u-t )
.ab41		60		rts		                rts
.ab42						ed_cmd_equ:
.ab42		fa		plx		                plx
.ab43		a5 35		lda $35		                lda ed_head
.ab45		05 36		ora $36		                ora ed_head+1
.ab47		d0 08		bne $ab51	                bne _cmd_equ_have_text
.ab49		ca		dex		                dex
.ab4a		ca		dex		                dex
.ab4b		74 00		stz $00,x	                stz 0,x
.ab4d		74 01		stz $01,x	                stz 1,x                 ; ( addr-t u-t para1 para2 0 )
.ab4f		80 21		bra $ab72	                bra _cmd_equ_done
.ab51						_cmd_equ_have_text:
.ab51		20 77 ad	jsr $ad77	                jsr ed_no_line_zero
.ab54		24 39		bit $39		                bit ed_flags
.ab56		30 0c		bmi $ab64	                bmi _cmd_equ_have_para
.ab58		ca		dex		                dex
.ab59		ca		dex		                dex                     ; ( addr-t u-t para1 para2 ? )
.ab5a		a5 37		lda $37		                lda ed_cur
.ab5c		95 00		sta $00,x	                sta 0,x
.ab5e		a5 38		lda $38		                lda ed_cur+1
.ab60		95 01		sta $01,x	                sta 1,x
.ab62		80 0e		bra $ab72	                bra _cmd_equ_done       ; ( addr-t u-t para1 para2 cur )
.ab64						_cmd_equ_have_para:
.ab64		b5 00		lda $00,x	                lda 0,x
.ab66		15 01		ora $01,x	                ora 1,x
.ab68		d0 05		bne $ab6f	                bne _cmd_equ_two_paras
.ab6a		20 11 8d	jsr $8d11	                jsr xt_over             ; ( addr-t u-t para1 para2 para1)
.ab6d		80 03		bra $ab72	                bra _cmd_equ_done
.ab6f						_cmd_equ_two_paras:
.ab6f		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( addr-t u-t para1 para2 para2) drop through
.ab72						_cmd_equ_done:
.ab72		20 3a 84	jsr $843a	                jsr xt_cr               ; number goes on new line
.ab75		20 e6 94	jsr $94e6	                jsr xt_u_dot            ; ( addr-t u-t para1 para2 )
.ab78		20 3a 84	jsr $843a	                jsr xt_cr
.ab7b		4c 24 aa	jmp $aa24	                jmp ed_next_command
.ab7e						ed_cmd_f:
.ab7e		fa		plx		                plx
.ab7f		24 39		bit $39		                bit ed_flags
.ab81		30 17		bmi $ab9a	                bmi _cmd_f_have_para
.ab83		20 3a 84	jsr $843a	                jsr xt_cr
.ab86		20 72 93	jsr $9372	                jsr xt_to_r             ; >R   ( addr-t u-t 0 ) ( R: 0 )
.ab89		20 97 8f	jsr $8f97	                jsr xt_rot              ; ROT  ( u-t 0 addr-t ) ( R: 0 )
.ab8c		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP  ( u-t 0 addr-t addr-t ) ( R: 0 )
.ab8f		20 e6 94	jsr $94e6	                jsr xt_u_dot            ; U.   ( u-t 0 addr-t ) ( R: 0 )
.ab92		20 8c 9c	jsr $9c8c	                jsr xt_not_rote         ; -ROT ( addr-t u-t 0 ) ( R: 0 )
.ab95		20 fa 8e	jsr $8efa	                jsr xt_r_from           ; R>   ( addr-t u-t 0 0 )
.ab98		80 11		bra $abab	                bra _cmd_f_done
.ab9a						_cmd_f_have_para:
.ab9a		20 11 8d	jsr $8d11	                jsr xt_over
.ab9d		20 3a 84	jsr $843a	                jsr xt_cr
.aba0		20 e6 94	jsr $94e6	                jsr xt_u_dot
.aba3		b5 02		lda $02,x	                lda 2,x
.aba5		95 06		sta $06,x	                sta 6,x
.aba7		b5 03		lda $03,x	                lda 3,x
.aba9		95 07		sta $07,x	                sta 7,x                 ; fall through to _cmd_f_done
.abab						_cmd_f_done:
.abab		20 3a 84	jsr $843a	                jsr xt_cr
.abae		4c 24 aa	jmp $aa24	                jmp ed_next_command
.abb1						ed_cmd_i:
.abb1		fa		plx		                plx
.abb2		e8		inx		                inx
.abb3		e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.abb4		24 39		bit $39		                bit ed_flags
.abb6		30 08		bmi $abc0	                bmi _cmd_i_have_para
.abb8		a5 37		lda $37		                lda ed_cur
.abba		95 00		sta $00,x	                sta 0,x
.abbc		a5 38		lda $38		                lda ed_cur+1
.abbe		95 01		sta $01,x	                sta 1,x                 ;  ( addr-t u-t cur ) drop through
.abc0						_cmd_i_have_para:
.abc0		b5 00		lda $00,x	                lda 0,x
.abc2		15 01		ora $01,x	                ora 1,x
.abc4		f0 09		beq $abcf	                beq _cmd_i_done
.abc6		20 e9 8c	jsr $8ce9	                jsr xt_one_minus        ; 1-  ( addr-t u-t para1-1 )
.abc9		20 08 9e	jsr $9e08	                jsr xt_zero             ; 0   ( addr-t u-t para1-1 0 )
.abcc		20 be 8b	jsr $8bbe	                jsr xt_max              ; MAX ( addr-t u-t para1-1 | 0 )
.abcf						_cmd_i_done:
.abcf		4c 3a aa	jmp $aa3a	                jmp ed_entry_cmd_i
.abd2						ed_cmd_n:
.abd2		fa		plx		                plx
.abd3		a9 01		lda #$01	                lda #%00000001
.abd5		04 39		tsb $39		                tsb ed_flags
.abd7		80 05		bra $abde	                bra ed_cmd_p_entry_for_cmd_n
.abd9						ed_cmd_p:
.abd9		fa		plx		                plx
.abda						ed_cmd_p_from_external:
.abda		a9 01		lda #$01	                lda #%00000001
.abdc		14 39		trb $39		                trb ed_flags
.abde						ed_cmd_p_entry_for_cmd_n:
.abde		20 22 ad	jsr $ad22	                jsr ed_have_text
.abe1		20 77 ad	jsr $ad77	                jsr ed_no_line_zero
.abe4		20 3a 84	jsr $843a	                jsr xt_cr
.abe7		b5 00		lda $00,x	                lda 0,x
.abe9		15 01		ora $01,x	                ora 1,x
.abeb		d0 10		bne $abfd	                bne _cmd_p_loop
.abed		b5 02		lda $02,x	                lda 2,x
.abef		85 37		sta $37		                sta ed_cur
.abf1		b5 03		lda $03,x	                lda 3,x
.abf3		85 38		sta $38		                sta ed_cur+1
.abf5		20 11 8d	jsr $8d11	                jsr xt_over             ; OVER ( addr-t u-t para1 para2 para1 )
.abf8		20 26 ac	jsr $ac26	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.abfb		80 26		bra $ac23	                bra _cmd_p_all_done
.abfd						_cmd_p_loop:
.abfd		20 b1 93	jsr $93b1	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.ac00		20 06 89	jsr $8906	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.ac03		b5 00		lda $00,x	                lda 0,x
.ac05		15 01		ora $01,x	                ora 1,x
.ac07		d0 10		bne $ac19	                bne _cmd_p_done
.ac09		e8		inx		                inx
.ac0a		e8		inx		                inx                     ; Get rid of the flag from >
.ac0b		20 11 8d	jsr $8d11	                jsr xt_over             ; ( addr-t u-t para1 para2 para1 )
.ac0e		20 26 ac	jsr $ac26	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.ac11		f6 02		inc $02,x	                inc 2,x
.ac13		d0 02		bne $ac17	                bne +
.ac15		f6 03		inc $03,x	                inc 3,x
.ac17						+
.ac17		80 e4		bra $abfd	                bra _cmd_p_loop
.ac19						_cmd_p_done:
.ac19		e8		inx		                inx
.ac1a		e8		inx		                inx                     ; fall through to _cmp_p_all_done
.ac1b		b5 00		lda $00,x	                lda 0,x
.ac1d		85 37		sta $37		                sta ed_cur
.ac1f		b5 01		lda $01,x	                lda 1,x
.ac21		85 38		sta $38		                sta ed_cur+1
.ac23						_cmd_p_all_done:
.ac23		4c 24 aa	jmp $aa24	                jmp ed_next_command
.ac26						_cmd_p_common:
.ac26		a5 39		lda $39		                lda ed_flags
.ac28		4a		lsr a		                lsr                     ; bit 0 now in carry
.ac29		90 0b		bcc $ac36	                bcc _cmd_p_common_no_num
.ac2b		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( addr-t u-t para1 para1 )
.ac2e		20 e6 94	jsr $94e6	                jsr xt_u_dot            ; U. ( addr-t u-t para1 )
.ac31		a9 09		lda #$09	                lda #$09                 ; ASCII for Tab
.ac33		20 c5 86	jsr $86c5	                jsr emit_a
.ac36						_cmd_p_common_no_num:
.ac36		20 85 ad	jsr $ad85	                jsr ed_num_to_addr        ; ( addr-t u-t addr )
.ac39		20 c5 ad	jsr $adc5	                jsr ed_print_addr
.ac3c		60		rts		                rts
.ac3d						ed_cmd_q:
.ac3d		fa		plx		                plx
.ac3e		24 39		bit $39		                bit ed_flags            ; bit 6 is change flag
.ac40		50 03		bvc $ac45	                bvc +
.ac42		4c ff ac	jmp $acff	                jmp ed_error_2drop
.ac45						+
.ac45		4c 2b aa	jmp $aa2b	                jmp ed_all_done            ; can't fall thru because of PLX
.ac48						ed_cmd_qq:
.ac48		fa		plx		                plx
.ac49		4c 2b aa	jmp $aa2b	                jmp ed_all_done
.ac4c						ed_cmd_w:
.ac4c		fa		plx		                plx
.ac4d		20 22 ad	jsr $ad22	                jsr ed_have_text
.ac50		24 39		bit $39		                bit ed_flags
.ac52		30 13		bmi $ac67	                bmi _cmd_w_have_para
.ac54		b5 06		lda $06,x	                lda 6,x
.ac56		15 07		ora $07,x	                ora 7,x
.ac58		d0 03		bne $ac5d	                bne +
.ac5a		4c ff ac	jmp $acff	                jmp ed_error_2drop
.ac5d						+
.ac5d		b5 06		lda $06,x	                lda 6,x
.ac5f		95 02		sta $02,x	                sta 2,x
.ac61		b5 07		lda $07,x	                lda 7,x
.ac63		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t addr-t ? )
.ac65		80 08		bra $ac6f	                bra _cmd_w_para_ready
.ac67						_cmd_w_have_para:
.ac67		b5 02		lda $02,x	                lda 2,x
.ac69		95 06		sta $06,x	                sta 6,x
.ac6b		b5 03		lda $03,x	                lda 3,x
.ac6d		95 07		sta $07,x	                sta 7,x                 ; drop through to _cmd_w_para_ready
.ac6f						_cmd_w_para_ready:
.ac6f		a9 35		lda #$35	                lda #<ed_head
.ac71		95 00		sta $00,x	                sta 0,x
.ac73		a9 00		lda #$00	                lda #>ed_head
.ac75		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t addr-t addr-h )
.ac77		20 11 8d	jsr $8d11	                jsr xt_over             ; OVER ( addr-t u-t addr-t addr-h addr-t )
.ac7a		20 72 93	jsr $9372	                jsr xt_to_r             ; >R ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.ac7d						_cmd_w_loop:
.ac7d		20 1a 88	jsr $881a	                jsr xt_fetch            ; @ ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.ac80		b5 00		lda $00,x	                lda 0,x
.ac82		15 01		ora $01,x	                ora 1,x
.ac84		f0 55		beq $acdb	                beq _cmd_w_eol
.ac86		20 b1 93	jsr $93b1	                jsr xt_two_dup          ; 2DUP ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.ac89		20 9b 94	jsr $949b	                jsr xt_two_to_r         ; 2>R  ( addr-t addr-1 ) (R: ... )
.ac8c		20 f5 8c	jsr $8cf5	                jsr xt_one_plus         ; 1+ ( addr-t addr1+1 ) (R: ... )
.ac8f		20 f5 8c	jsr $8cf5	                jsr xt_one_plus         ; 1+ ( addr-t addr1+2 ) (R: ... )
.ac92		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( addr-t addr1+2 addr1+2 ) ( R: ... )
.ac95		20 1a 88	jsr $881a	                jsr xt_fetch            ; @ ( addr-t addr1+2 addr-s ) ( R: ... )
.ac98		20 34 92	jsr $9234	                jsr xt_swap             ; SWAP ( addr-t addr-s addr1+2 ) ( R: ... )
.ac9b		20 f5 8c	jsr $8cf5	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+1 ) (R: ... )
.ac9e		20 f5 8c	jsr $8cf5	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+2 ) (R: ... )
.aca1		20 1a 88	jsr $881a	                jsr xt_fetch            ; @ ( addr-t addr-s u-s ) ( R: ... )
.aca4		20 8c 9c	jsr $9c8c	                jsr xt_not_rote         ; -ROT ( u-s addr-t addr-s ) ( R: ... )
.aca7		20 34 92	jsr $9234	                jsr xt_swap             ; SWAP ( u-s addr-s addr-t ) ( R: ... )
.acaa		20 97 8f	jsr $8f97	                jsr xt_rot              ; ROT (addr-s addr-t u-s ) ( R: ... )
.acad		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP (addr-s addr-t u-s u-s ) ( R: ... )
.acb0		20 72 93	jsr $9372	                jsr xt_to_r             ; >R (addr-s addr-t u-s ) ( R: ... u-s )
.acb3		20 12 8c	jsr $8c12	                jsr xt_move             ; MOVE ( )( R: addr-t addr-1 addr-t )
.acb6		20 fa 8e	jsr $8efa	                jsr xt_r_from           ; R> ( u-s )  ( R: addr-t addr-h addr-t )
.acb9		20 21 94	jsr $9421	                jsr xt_two_r_from       ; 2R> ( u-s addr-t addr-h ) ( R: addr-t )
.acbc		20 8c 9c	jsr $9c8c	                jsr xt_not_rote         ; -ROT ( addr-h u-s addr-t ) ( R: addr-t )
.acbf		20 5f 8e	jsr $8e5f	                jsr xt_plus             ; + ( addr-h addr-t1 ) ( R: addr-t )
.acc2		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.acc5		ca		dex		                dex
.acc6		ca		dex		                dex                     ; ( addr-h addr-t1 addr-t1 ? ) ( R: addr-t )
.acc7		a9 0a		lda #$0a	                lda #AscLF              ; ASCII for LF
.acc9		95 00		sta $00,x	                sta 0,x
.accb		74 01		stz $01,x	                stz 1,x                 ; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.accd		20 34 92	jsr $9234	                jsr xt_swap             ; SWAP ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.acd0		20 1e 92	jsr $921e	                jsr xt_store            ; ! ( addr-h addr-t1 ) ( R: addr-t )
.acd3		20 f5 8c	jsr $8cf5	                jsr xt_one_plus         ; 1+ ( addr-h addr-t1+1 ) ( R: addr-t )
.acd6		20 34 92	jsr $9234	                jsr xt_swap             ; SWAP ( addr-t1+1 addr-h ) ( R: addr-t )
.acd9		80 a2		bra $ac7d	                bra _cmd_w_loop
.acdb						_cmd_w_eol:
.acdb		20 34 92	jsr $9234	                jsr xt_swap             ; SWAP ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.acde		20 fa 8e	jsr $8efa	                jsr xt_r_from           ; R> ( addr-t u-t addr-n addr-tn addr-t )
.ace1		20 f6 8b	jsr $8bf6	                jsr xt_minus            ; - ( addr-t u-t addr-n u )
.ace4		b5 00		lda $00,x	                lda 0,x
.ace6		95 04		sta $04,x	                sta 4,x
.ace8		b5 01		lda $01,x	                lda 1,x
.acea		95 05		sta $05,x	                sta 5,x                 ; ( addr-t u addr-n u )
.acec		20 3a 84	jsr $843a	                jsr xt_cr
.acef		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( addr-t u addr-n u u )
.acf2		20 e6 94	jsr $94e6	                jsr xt_u_dot            ; U. ( addr-t u addr-n u )
.acf5		20 3a 84	jsr $843a	                jsr xt_cr
.acf8		a9 40		lda #$40	                lda #%01000000
.acfa		14 39		trb $39		                trb ed_flags
.acfc		4c 24 aa	jmp $aa24	                jmp ed_next_command
.acff						ed_error_2drop:
.acff		e8		inx		                inx
.ad00		e8		inx		                inx                     ; drop through to _error_1drop
.ad01						ed_error_1drop:
.ad01		e8		inx		                inx
.ad02		e8		inx		                inx                     ; drop through to _error
.ad03						ed_error:
.ad03		20 3a 84	jsr $843a	                jsr xt_cr
.ad06		a9 3f		lda #$3f	                lda #'?'
.ad08		20 c5 86	jsr $86c5	                jsr emit_a
.ad0b		20 3a 84	jsr $843a	                jsr xt_cr
.ad0e		4c 32 a8	jmp $a832	                jmp ed_input_loop
.ad11						ed_get_input:
.ad11		20 48 8f	jsr $8f48	                jsr xt_refill           ;  ( addr-t u-t f )
.ad14		b5 00		lda $00,x	                lda 0,x
.ad16		15 01		ora $01,x	                ora 1,x
.ad18		d0 05		bne $ad1f	                bne +
.ad1a		7a		ply		                ply
.ad1b		7a		ply		                ply
.ad1c		4c 01 ad	jmp $ad01	                jmp ed_error_1drop
.ad1f						+
.ad1f		e8		inx		                inx
.ad20		e8		inx		                inx
.ad21		60		rts		                rts
.ad22						ed_have_text:
.ad22		a5 35		lda $35		                lda ed_head
.ad24		05 36		ora $36		                ora ed_head+1
.ad26		d0 04		bne $ad2c	                bne +
.ad28		7a		ply		                ply
.ad29		7a		ply		                ply
.ad2a		80 d7		bra $ad03	                bra ed_error
.ad2c						+
.ad2c		60		rts		                rts
.ad2d						ed_is_valid_line:
.ad2d		38		sec		                sec                             ; default is legal line number
.ad2e		b5 00		lda $00,x	                lda 0,x
.ad30		15 01		ora $01,x	                ora 1,x
.ad32		f0 19		beq $ad4d	                beq _is_valid_line_nope_zero    ; ( n )
.ad34		20 a0 86	jsr $86a0	                jsr xt_dup                      ; DUP ( n n )
.ad37		20 4f ad	jsr $ad4f	                jsr ed_last_line                  ; ( n n last )
.ad3a		20 34 92	jsr $9234	                jsr xt_swap                     ; SWAP ( n last n )
.ad3d		20 ef 89	jsr $89ef	                jsr xt_less_than                ; < ( n f )
.ad40		b5 00		lda $00,x	                lda 0,x                         ; 0 flag is good
.ad42		15 01		ora $01,x	                ora 1,x
.ad44		d0 05		bne $ad4b	                bne _is_valid_line_too_small
.ad46		e8		inx		                inx
.ad47		e8		inx		                inx                     ; DROP flag ( n )
.ad48		38		sec		                sec                     ; Who knows what's happened to C by now
.ad49		80 03		bra $ad4e	                bra _is_valid_line_done ; only one exit from this routine
.ad4b						_is_valid_line_too_small:
.ad4b		e8		inx		                inx
.ad4c		e8		inx		                inx                     ; drop through to _is_valid_line_zero
.ad4d						_is_valid_line_nope_zero:
.ad4d		18		clc		                clc                     ; drop through to _is_valid_line_done
.ad4e						_is_valid_line_done:
.ad4e		60		rts		                rts
.ad4f						ed_last_line:
.ad4f		64 25		stz $25		                stz tmp1
.ad51		64 26		stz $26		                stz tmp1+1
.ad53		ca		dex		                dex
.ad54		ca		dex		                dex                     ; ( ? )
.ad55		a9 35		lda #$35	                lda #<ed_head
.ad57		95 00		sta $00,x	                sta 0,x
.ad59		a9 00		lda #$00	                lda #>ed_head
.ad5b		95 01		sta $01,x	                sta 1,x                 ; ( addr )
.ad5d						_last_line_loop:
.ad5d		20 1a 88	jsr $881a	                jsr xt_fetch            ; ( addr | 0 )
.ad60		b5 00		lda $00,x	                lda 0,x
.ad62		15 01		ora $01,x	                ora 1,x
.ad64		f0 08		beq $ad6e	                beq _last_line_done
.ad66		e6 25		inc $25		                inc tmp1
.ad68		d0 02		bne $ad6c	                bne +
.ad6a		e6 26		inc $26		                inc tmp1+1
.ad6c						+
.ad6c		80 ef		bra $ad5d	                bra _last_line_loop
.ad6e						_last_line_done:
.ad6e		a5 25		lda $25		                lda tmp1
.ad70		95 00		sta $00,x	                sta 0,x
.ad72		a5 26		lda $26		                lda tmp1+1
.ad74		95 01		sta $01,x	                sta 1,x                 ; ( u )
.ad76		60		rts		                rts
.ad77						ed_no_line_zero:
.ad77		b5 02		lda $02,x	                lda 2,x
.ad79		15 03		ora $03,x	                ora 3,x
.ad7b		d0 07		bne $ad84	                bne _no_line_zero_done
.ad7d		24 39		bit $39		                bit ed_flags
.ad7f		10 03		bpl $ad84	                bpl _no_line_zero_done
.ad81		4c ff ac	jmp $acff	                jmp ed_error_2drop
.ad84						_no_line_zero_done:
.ad84		60		rts		                rts
.ad85						ed_num_to_addr:
.ad85		ca		dex		                dex
.ad86		ca		dex		                dex                     ; ( u ? )
.ad87		a9 35		lda #$35	                lda #<ed_head
.ad89		95 00		sta $00,x	                sta 0,x
.ad8b		a9 00		lda #$00	                lda #>ed_head
.ad8d		95 01		sta $01,x	                sta 1,x                 ; ( u addr-h )
.ad8f		b5 02		lda $02,x	                lda 2,x
.ad91		15 03		ora $03,x	                ora 3,x
.ad93		d0 05		bne $ad9a	                bne _num_to_addr_loop
.ad95		20 42 8c	jsr $8c42	                jsr xt_nip              ; ( addr-h )
.ad98		80 21		bra $adbb	                bra _num_to_addr_done
.ad9a						_num_to_addr_loop:
.ad9a		20 1a 88	jsr $881a	                jsr xt_fetch            ; @ ( u addr1 )
.ad9d		b5 00		lda $00,x	                lda 0,x
.ad9f		15 01		ora $01,x	                ora 1,x
.ada1		d0 05		bne $ada8	                bne +
.ada3		20 42 8c	jsr $8c42	                jsr xt_nip              ; NIP ( addr1 )
.ada6		80 13		bra $adbb	                bra _num_to_addr_done
.ada8						+
.ada8		20 34 92	jsr $9234	                jsr xt_swap             ; SWAP ( addr1 u )
.adab		20 e9 8c	jsr $8ce9	                jsr xt_one_minus        ; 1- ( addr1 u-1 )
.adae		b5 00		lda $00,x	                lda 0,x
.adb0		15 01		ora $01,x	                ora 1,x
.adb2		f0 05		beq $adb9	                beq _num_to_addr_finished
.adb4		20 34 92	jsr $9234	                jsr xt_swap             ; SWAP ( u-1 addr1 )
.adb7		80 e1		bra $ad9a	                bra _num_to_addr_loop
.adb9						_num_to_addr_finished:
.adb9		e8		inx		                inx
.adba		e8		inx		                inx                     ; ( addr )
.adbb						_num_to_addr_done:
.adbb		60		rts		                rts
.adbc						ed_para1_to_cur:
.adbc		b5 02		lda $02,x	                lda 2,x
.adbe		85 37		sta $37		                sta ed_cur
.adc0		b5 03		lda $03,x	                lda 3,x
.adc2		85 38		sta $38		                sta ed_cur+1
.adc4		60		rts		                rts
.adc5						ed_print_addr:
.adc5		20 f5 8c	jsr $8cf5	                jsr xt_one_plus
.adc8		20 f5 8c	jsr $8cf5	                jsr xt_one_plus         ; ( addr+2 )
.adcb		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( addr+2 addr+2 )
.adce		20 f5 8c	jsr $8cf5	                jsr xt_one_plus
.add1		20 f5 8c	jsr $8cf5	                jsr xt_one_plus         ; ( addr+2 addr+4 )
.add4		20 1a 88	jsr $881a	                jsr xt_fetch            ; ( addr+2 u-s )
.add7		20 34 92	jsr $9234	                jsr xt_swap             ; ( u-s addr+2 )
.adda		20 1a 88	jsr $881a	                jsr xt_fetch            ; ( u-s addr-s )
.addd		20 34 92	jsr $9234	                jsr xt_swap             ; ( addr-s u-s )
.ade0		20 bb 94	jsr $94bb	                jsr xt_type
.ade3		20 3a 84	jsr $843a	                jsr xt_cr
.ade6		60		rts		                rts
>ade7		61 66 69 64 70 6e 3d 77		ed_cmd_list:    .text "afidpn=wqQ", 0
>adef		71 51 00
.adf2						ed_cmd_table:
>adf2		37 aa 7e ab b1 ab da aa		                .word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>adfa		d9 ab d2 ab
>adfe		42 ab 4c ac 3d ac 48 ac		                .word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.ae06						ed6502_end:

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/block.asm

.ae06						xt_blk:
.ae06		a9 04		lda #$04	                lda #blk_offset
.ae08		4c ea d6	jmp $d6ea	                jmp push_upvar_tos
.ae0b						z_blk:
.ae0b						xt_blkbuffer:
.ae0b		ca		dex		                dex
.ae0c		ca		dex		                dex
.ae0d		a0 2c		ldy #$2c	                ldy #blkbuffer_offset
.ae0f		b1 08		lda ($08),y	                lda (up),y
.ae11		95 00		sta $00,x	                sta 0,x
.ae13		c8		iny		                iny             ; Move along to the next byte
.ae14		b1 08		lda ($08),y	                lda (up),y
.ae16		95 01		sta $01,x	                sta 1,x
.ae18		60		rts		z_blkbuffer:    rts
.ae19						xt_block:
.ae19		a0 2e		ldy #$2e	                ldy #buffblocknum_offset
.ae1b		b1 08		lda ($08),y	                lda (up),y
.ae1d		d5 00		cmp $00,x	                cmp 0,x
.ae1f		d0 0f		bne $ae30	                bne _not_in_buffer
.ae21		c8		iny		                iny
.ae22		b1 08		lda ($08),y	                lda (up),y
.ae24		d5 01		cmp $01,x	                cmp 1,x
.ae26		d0 08		bne $ae30	                bne _not_in_buffer
.ae28		a0 30		ldy #$30	                ldy #buffstatus_offset
.ae2a		b1 08		lda ($08),y	                lda (up),y
.ae2c		29 01		and #$01	                and #1          ; Check the in-use flag (bit 0)
.ae2e		d0 30		bne $ae60	                bne _done       ; It's already in the buffer and in use.
.ae30						_not_in_buffer:
.ae30		a0 30		ldy #$30	                ldy #buffstatus_offset
.ae32		b1 08		lda ($08),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.ae34		c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.ae36		d0 0c		bne $ae44	                bne _buffer_available ; Unused or not dirty = available
.ae38		20 0b ae	jsr $ae0b	                jsr xt_blkbuffer
.ae3b		20 15 b0	jsr $b015	                jsr xt_buffblocknum
.ae3e		20 1a 88	jsr $881a	                jsr xt_fetch
.ae41		20 02 b0	jsr $b002	                jsr xt_block_write
.ae44						_buffer_available:
.ae44		a0 2e		ldy #$2e	                ldy #buffblocknum_offset
.ae46		b5 00		lda $00,x	                lda 0,x
.ae48		91 08		sta ($08),y	                sta (up),y
.ae4a		c8		iny		                iny
.ae4b		b5 01		lda $01,x	                lda 1,x
.ae4d		91 08		sta ($08),y	                sta (up),y
.ae4f		20 0b ae	jsr $ae0b	                jsr xt_blkbuffer
.ae52		20 34 92	jsr $9234	                jsr xt_swap
.ae55		20 ea af	jsr $afea	                jsr xt_block_read
.ae58		a9 01		lda #$01	                lda #1
.ae5a		a0 30		ldy #$30	                ldy #buffstatus_offset
.ae5c		91 08		sta ($08),y	                sta (up),y
.ae5e		ca		dex		                dex
.ae5f		ca		dex		                dex
.ae60						_done:
.ae60		a0 2c		ldy #$2c	                ldy #blkbuffer_offset
.ae62		b1 08		lda ($08),y	                lda (up),y
.ae64		95 00		sta $00,x	                sta 0,x
.ae66		c8		iny		                iny
.ae67		b1 08		lda ($08),y	                lda (up),y
.ae69		95 01		sta $01,x	                sta 1,x
.ae6b		60		rts		z_block:        rts
.ae6c						xt_block_c65_init:
=0						io_blk_status = 0
=0						io_blk_action = 0
=0						io_blk_number = 0
=0						io_blk_buffer = 0
.ae6c		a9 ff		lda #$ff	                lda #$ff
.ae6e		8d 10 f0	sta $f010	                sta io_blk_status
.ae71		a9 00		lda #$00	                lda #$0
.ae73		8d 0f f0	sta $f00f	                sta io_blk_action
.ae76		ad 10 f0	lda $f010	                lda io_blk_status      ; $0 if OK, $ff otherwise
.ae79		49 ff		eor #$ff	                eor #$ff            ; invert to forth true/false
.ae7b		ca		dex		                dex
.ae7c		ca		dex		                dex
.ae7d		95 00		sta $00,x	                sta 0,x             ; true ($ff) if OK, false (0) otherwise
.ae7f		95 01		sta $01,x	                sta 1,x
.ae81		ca		dex		                dex
.ae82		ca		dex		                dex
.ae83		a9 a6		lda #$a6	                lda #<c65_blk_read
.ae85		95 00		sta $00,x	                sta 0,x
.ae87		a9 ae		lda #$ae	                lda #>c65_blk_read
.ae89		95 01		sta $01,x	                sta 1,x
.ae8b		20 f8 af	jsr $aff8	                jsr xt_block_read_vector
.ae8e		20 1e 92	jsr $921e	                jsr xt_store
.ae91		ca		dex		                dex
.ae92		ca		dex		                dex
.ae93		a9 a2		lda #$a2	                lda #<c65_blk_write
.ae95		95 00		sta $00,x	                sta 0,x
.ae97		a9 ae		lda #$ae	                lda #>c65_blk_write
.ae99		95 01		sta $01,x	                sta 1,x
.ae9b		20 10 b0	jsr $b010	                jsr xt_block_write_vector
.ae9e		20 1e 92	jsr $921e	                jsr xt_store
.aea1						z_block_c65_init:
.aea1		60		rts		                rts
.aea2		a0 02		ldy #$02	c65_blk_write:  ldy #2
.aea4		80 02		bra $aea8	                bra c65_blk_rw
.aea6		a0 01		ldy #$01	c65_blk_read:   ldy #1
.aea8		b5 00		lda $00,x	c65_blk_rw:     lda 0,x                 ; ( addr blk# )
.aeaa		8d 11 f0	sta $f011	                sta io_blk_number
.aead		b5 01		lda $01,x	                lda 1,x
.aeaf		8d 12 f0	sta $f012	                sta io_blk_number+1
.aeb2		b5 02		lda $02,x	                lda 2,x
.aeb4		8d 13 f0	sta $f013	                sta io_blk_buffer
.aeb7		b5 03		lda $03,x	                lda 3,x
.aeb9		8d 14 f0	sta $f014	                sta io_blk_buffer+1
.aebc		8c 0f f0	sty $f00f	                sty io_blk_action       ; trigger the r/w
.aebf		e8		inx		                inx                     ; clean up stack
.aec0		e8		inx		                inx
.aec1		e8		inx		                inx
.aec2		e8		inx		                inx
.aec3		60		rts		                rts
.aec4						xt_block_ramdrive_init:
.aec4		20 2e d8	jsr $d82e	                jsr underflow_1
.aec7		20 f4 a1	jsr $a1f4	                jsr sliteral_runtime
>aeca		d2 ae 18 01			                .word ramdrive_code, ramdrive_code_end-ramdrive_code
.aece		20 b2 88	jsr $88b2	                jsr xt_evaluate
.aed1						z_block_ramdrive_init:
.aed1		60		rts		                rts
.aed2						ramdrive_code:
>aed2		62 61 73 65 20 40 20 73		        .text "base @ swap decimal"
>aeda		77 61 70 20 64 65 63 69 6d 61 6c
>aee5		20 31 30 32 34 20 2a		        .text " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
>aeec		20 64 75 70			        .text " dup"    ; ( Save a copy for formatting it at the end )
>aef0		20 62 75 66 66 65 72 3a		        .text " buffer: ramdrive" ; ( Create ramdrive )
>aef8		20 72 61 6d 64 72 69 76 65
>af01		20 3a 20 62 6c 6f 63 6b		        .text " : block-read-ramdrive"  ; ( addr u -- )
>af09		2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65
>af17		20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + swap 1024 move ;"
>af1f		65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>af2f		73 77 61 70 20 31 30 32 34 20 6d 6f 76 65 20 3b
>af3f		20 3a 20 62 6c 6f 63 6b		        .text " : block-write-ramdrive" ; ( addr u -- )
>af47		2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65
>af56		20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + 1024 move ;"
>af5e		65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>af6e		31 30 32 34 20 6d 6f 76 65 20 3b
>af79		20 27 20 62 6c 6f 63 6b		        .text " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
>af81		2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65 20 62
>af91		6c 6f 63 6b 2d 72 65 61 64 2d 76 65 63 74 6f 72
>afa1		20 21
>afa3		20 27 20 62 6c 6f 63 6b		        .text " ' block-write-ramdrive block-write-vector !"
>afab		2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65 20
>afbb		62 6c 6f 63 6b 2d 77 72 69 74 65 2d 76 65 63 74
>afcb		6f 72 20 21
>afcf		20 72 61 6d 64 72 69 76		        .text " ramdrive swap blank base !"
>afd7		65 20 73 77 61 70 20 62 6c 61 6e 6b 20 62 61 73
>afe7		65 20 21
.afea						ramdrive_code_end:
.afea						xt_block_read:
.afea		a0 32		ldy #$32	                ldy #blockread_offset
.afec		b1 08		lda ($08),y	                lda (up),y
.afee		85 25		sta $25		                sta tmp1
.aff0		c8		iny		                iny
.aff1		b1 08		lda ($08),y	                lda (up),y
.aff3		85 26		sta $26		                sta tmp1+1
.aff5		6c 25 00	jmp ($0025)	                jmp (tmp1)
.aff8						z_block_read:
.aff8						xt_block_read_vector:
.aff8		a9 32		lda #$32	                lda #blockread_offset
.affa		4c ea d6	jmp $d6ea	                jmp push_upvar_tos
.affd						z_block_read_vector:
.affd						xt_block_word_error:
.affd		a9 0c		lda #$0c	                lda #err_blockwords
.afff		4c 44 d8	jmp $d844	                jmp error       ; no RTS needed
.b002						xt_block_write:
.b002		a0 34		ldy #$34	                ldy #blockwrite_offset
.b004		b1 08		lda ($08),y	                lda (up),y
.b006		85 25		sta $25		                sta tmp1
.b008		c8		iny		                iny
.b009		b1 08		lda ($08),y	                lda (up),y
.b00b		85 26		sta $26		                sta tmp1+1
.b00d		6c 25 00	jmp ($0025)	                jmp (tmp1)
.b010						z_block_write:
.b010						xt_block_write_vector:
.b010		a9 34		lda #$34	                lda #blockwrite_offset
.b012		4c ea d6	jmp $d6ea	                jmp push_upvar_tos
.b015						z_block_write_vector:
.b015						xt_buffblocknum:
.b015		a9 2e		lda #$2e	                lda #buffblocknum_offset
.b017		4c ea d6	jmp $d6ea	                jmp push_upvar_tos
.b01a						z_buffblocknum:
.b01a						xt_buffer:
.b01a		a0 30		ldy #$30	                ldy #buffstatus_offset
.b01c		b1 08		lda ($08),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.b01e		c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.b020		d0 0c		bne $b02e	                bne _buffer_available ; Unused or not dirty = available
.b022		20 0b ae	jsr $ae0b	                jsr xt_blkbuffer
.b025		20 15 b0	jsr $b015	                jsr xt_buffblocknum
.b028		20 1a 88	jsr $881a	                jsr xt_fetch
.b02b		20 02 b0	jsr $b002	                jsr xt_block_write
.b02e						_buffer_available:
.b02e		a0 2e		ldy #$2e	                ldy #buffblocknum_offset
.b030		b5 00		lda $00,x	                lda 0,x
.b032		91 08		sta ($08),y	                sta (up),y
.b034		c8		iny		                iny
.b035		b5 01		lda $01,x	                lda 1,x
.b037		91 08		sta ($08),y	                sta (up),y
.b039		a9 01		lda #$01	                lda #1
.b03b		a0 30		ldy #$30	                ldy #buffstatus_offset
.b03d		91 08		sta ($08),y	                sta (up),y
.b03f		a0 2c		ldy #$2c	                ldy #blkbuffer_offset
.b041		b1 08		lda ($08),y	                lda (up),y
.b043		95 00		sta $00,x	                sta 0,x
.b045		c8		iny		                iny
.b046		b1 08		lda ($08),y	                lda (up),y
.b048		95 01		sta $01,x	                sta 1,x
.b04a		60		rts		z_buffer:       rts
.b04b						xt_buffstatus:
.b04b		a9 30		lda #$30	                lda #buffstatus_offset
.b04d		4c ea d6	jmp $d6ea	                jmp push_upvar_tos
.b050						z_buffstatus:
.b050						xt_empty_buffers:
.b050		a0 30		ldy #$30	                ldy #buffstatus_offset
.b052		a9 00		lda #$00	                lda #0
.b054		91 08		sta ($08),y	                sta (up),y      ; Only LSB is used.
.b056						z_empty_buffers:
.b056		60		rts		                rts
.b057						xt_flush:
.b057		20 b2 b0	jsr $b0b2	                jsr xt_save_buffers
.b05a		a0 30		ldy #$30	                ldy #buffstatus_offset
.b05c		a9 00		lda #$00	                lda #0
.b05e		91 08		sta ($08),y	                sta (up),y      ; Only LSB is used.
.b060						z_flush:
.b060		60		rts		                rts
.b061						xt_list:
.b061		20 2e d8	jsr $d82e	                jsr underflow_1
.b064		20 cd b0	jsr $b0cd	                jsr xt_scr
.b067		20 1e 92	jsr $921e	                jsr xt_store
.b06a		20 6c b1	jsr $b16c	                jsr xt_editor_l
.b06d		60		rts		z_list:         rts
.b06e						xt_load:
.b06e		20 2e d8	jsr $d82e	                jsr underflow_1
.b071		a0 05		ldy #$05	                ldy #blk_offset+1
.b073		b1 08		lda ($08),y	                lda (up),y
.b075		48		pha		                pha
.b076		88		dey		                dey
.b077		b1 08		lda ($08),y	                lda (up),y
.b079		48		pha		                pha
.b07a		b5 00		lda $00,x	                lda 0,x
.b07c		91 08		sta ($08),y	                sta (up),y
.b07e		c8		iny		                iny
.b07f		b5 01		lda $01,x	                lda 1,x
.b081		91 08		sta ($08),y	                sta (up),y
.b083		20 19 ae	jsr $ae19	                jsr xt_block
.b086		ca		dex		                dex
.b087		ca		dex		                dex
.b088		a9 04		lda #$04	                lda #4
.b08a		95 01		sta $01,x	                sta 1,x
.b08c		74 00		stz $00,x	                stz 0,x
.b08e		20 ac 88	jsr $88ac	                jsr load_evaluate
.b091		a0 04		ldy #$04	                ldy #blk_offset
.b093		68		pla		                pla
.b094		91 08		sta ($08),y	                sta (up),y
.b096		c8		iny		                iny
.b097		68		pla		                pla
.b098		91 08		sta ($08),y	                sta (up),y
.b09a		88		dey		                dey
.b09b		11 08		ora ($08),y	                ora (up),y
.b09d		f0 12		beq $b0b1	                beq _done
.b09f		ca		dex		                dex
.b0a0		ca		dex		                dex
.b0a1		a0 04		ldy #$04	                ldy #blk_offset
.b0a3		b1 08		lda ($08),y	                lda (up),y
.b0a5		95 00		sta $00,x	                sta 0,x
.b0a7		c8		iny		                iny
.b0a8		b1 08		lda ($08),y	                lda (up),y
.b0aa		95 01		sta $01,x	                sta 1,x
.b0ac		20 19 ae	jsr $ae19	                jsr xt_block
.b0af		e8		inx		                inx
.b0b0		e8		inx		                inx
.b0b1						_done:
.b0b1		60		rts		z_load:         rts
.b0b2						xt_save_buffers:
.b0b2		a0 30		ldy #$30	                ldy #buffstatus_offset
.b0b4		b1 08		lda ($08),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.b0b6		c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.b0b8		d0 12		bne $b0cc	                bne _done       ; Either not used or not dirty = done!
.b0ba		20 0b ae	jsr $ae0b	                jsr xt_blkbuffer
.b0bd		20 15 b0	jsr $b015	                jsr xt_buffblocknum
.b0c0		20 1a 88	jsr $881a	                jsr xt_fetch
.b0c3		20 02 b0	jsr $b002	                jsr xt_block_write
.b0c6		a9 01		lda #$01	                lda #1
.b0c8		a0 30		ldy #$30	                ldy #buffstatus_offset
.b0ca		91 08		sta ($08),y	                sta (up),y
.b0cc						_done:
.b0cc		60		rts		z_save_buffers: rts
.b0cd						xt_scr:
.b0cd		a9 06		lda #$06	                lda #scr_offset
.b0cf		4c ea d6	jmp $d6ea	                jmp push_upvar_tos
.b0d2						z_scr:
.b0d2						xt_thru:
.b0d2		20 33 d8	jsr $d833	                jsr underflow_2
.b0d5		b5 01		lda $01,x	                lda 1,x
.b0d7		48		pha		                pha
.b0d8		b5 00		lda $00,x	                lda 0,x
.b0da		48		pha		                pha
.b0db		e8		inx		                inx
.b0dc		e8		inx		                inx
.b0dd						_thru_loop:
.b0dd		b5 01		lda $01,x	                lda 1,x
.b0df		48		pha		                pha
.b0e0		b5 00		lda $00,x	                lda 0,x
.b0e2		48		pha		                pha
.b0e3		20 6e b0	jsr $b06e	                jsr xt_load
.b0e6		68		pla		                pla
.b0e7		85 25		sta $25		                sta tmp1
.b0e9		68		pla		                pla
.b0ea		85 26		sta $26		                sta tmp1+1
.b0ec		68		pla		                pla
.b0ed		85 27		sta $27		                sta tmp2
.b0ef		68		pla		                pla
.b0f0		85 28		sta $28		                sta tmp2+1
.b0f2		c5 26		cmp $26		                cmp tmp1+1
.b0f4		d0 08		bne $b0fe	                bne _next_screen
.b0f6		a5 27		lda $27		                lda tmp2        ; Compare the LSB
.b0f8		c5 25		cmp $25		                cmp tmp1
.b0fa		d0 02		bne $b0fe	                bne _next_screen
.b0fc		80 18		bra $b116	                bra _done       ; We just did the last screen.
.b0fe						_next_screen:
.b0fe		a5 28		lda $28		                lda tmp2+1
.b100		48		pha		                pha
.b101		a5 27		lda $27		                lda tmp2
.b103		48		pha		                pha
.b104		e6 25		inc $25		                inc tmp1
.b106		d0 02		bne $b10a	                bne +
.b108		e6 26		inc $26		                inc tmp1+1
.b10a						+
.b10a		ca		dex		                dex
.b10b		ca		dex		                dex
.b10c		a5 25		lda $25		                lda tmp1
.b10e		95 00		sta $00,x	                sta 0,x
.b110		a5 26		lda $26		                lda tmp1+1
.b112		95 01		sta $01,x	                sta 1,x
.b114		80 c7		bra $b0dd	                bra _thru_loop
.b116						_done:
.b116		60		rts		z_thru:         rts
.b117						xt_update:
.b117		a0 30		ldy #$30	                ldy #buffstatus_offset
.b119		b1 08		lda ($08),y	                lda (up),y
.b11b		09 02		ora #$02	                ora #2          ; Turn on dirty flag (bit 2)
.b11d		91 08		sta ($08),y	                sta (up),y
.b11f		60		rts		z_update:       rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/editor.asm

.b120						xt_editor_screen_helper:
.b120		20 a0 86	jsr $86a0	                jsr xt_dup
.b123		20 cd b0	jsr $b0cd	                jsr xt_scr
.b126		20 1e 92	jsr $921e	                jsr xt_store
.b129		4c 1a b0	jmp $b01a	                jmp xt_buffer
.b12c						xt_editor_enter_screen:
.b12c		20 20 b1	jsr $b120	                jsr xt_editor_screen_helper
.b12f		20 9a 86	jsr $869a	                jsr xt_drop
.b132		64 35		stz $35		                stz ed_head
.b134						_prompt_loop:
.b134		ca		dex		                dex
.b135		ca		dex		                dex
.b136		a5 35		lda $35		                lda ed_head
.b138		95 00		sta $00,x	                sta 0,x
.b13a		74 01		stz $01,x	                stz 1,x
.b13c		20 ff b1	jsr $b1ff	                jsr xt_editor_o
.b13f		e6 35		inc $35		                inc ed_head
.b141		a9 10		lda #$10	                lda #16
.b143		c5 35		cmp $35		                cmp ed_head
.b145		d0 ed		bne $b134	                bne _prompt_loop
.b147						z_editor_enter_screen:
.b147		60		rts		                rts
.b148						xt_editor_erase_screen:
.b148		20 20 b1	jsr $b120	                jsr xt_editor_screen_helper
.b14b		ca		dex		                dex
.b14c		ca		dex		                dex
.b14d		74 00		stz $00,x	                stz 0,x
.b14f		a9 04		lda #$04	                lda #4          ; 4 in MSB makes 1024 ($400).
.b151		95 01		sta $01,x	                sta 1,x
.b153		20 b2 87	jsr $87b2	                jsr xt_blank
.b156		20 17 b1	jsr $b117	                jsr xt_update
.b159						z_editor_erase_screen:
.b159		60		rts		                rts
.b15a						xt_editor_el:
.b15a		20 e6 b1	jsr $b1e6	                jsr xt_editor_line
.b15d		ca		dex		                dex
.b15e		ca		dex		                dex
.b15f		a9 40		lda #$40	                lda #64
.b161		95 00		sta $00,x	                sta 0,x
.b163		74 01		stz $01,x	                stz 1,x
.b165		20 b2 87	jsr $87b2	                jsr xt_blank
.b168		20 17 b1	jsr $b117	                jsr xt_update
.b16b		60		rts		z_editor_el:    rts
.b16c						xt_editor_l:
.b16c		ca		dex		                dex             ; Put SCR on the stack.
.b16d		ca		dex		                dex
.b16e		a0 06		ldy #$06	                ldy #scr_offset
.b170		b1 08		lda ($08),y	                lda (up),y
.b172		95 00		sta $00,x	                sta 0,x
.b174		c8		iny		                iny
.b175		b1 08		lda ($08),y	                lda (up),y
.b177		95 01		sta $01,x	                sta 1,x
.b179		20 19 ae	jsr $ae19	                jsr xt_block    ; Get the current screen.
.b17c		20 3a 84	jsr $843a	                jsr xt_cr
.b17f		80 08		bra $b189	                bra _after_screen_msg
.b181						_screen_msg:
>b181		53 63 72 65 65 6e 20 23		                .text "Screen #"
.b189						_after_screen_msg:
.b189		20 f4 a1	jsr $a1f4	                jsr sliteral_runtime
>b18c		81 b1 08 00			                .word _screen_msg, _after_screen_msg-_screen_msg
.b190		20 bb 94	jsr $94bb	                jsr xt_type
.b193		20 cd b0	jsr $b0cd	                jsr xt_scr
.b196		20 1a 88	jsr $881a	                jsr xt_fetch
.b199		ca		dex		                dex
.b19a		ca		dex		                dex
.b19b		a9 04		lda #$04	                lda #4          ; four spaces
.b19d		95 00		sta $00,x	                sta 0,x
.b19f		74 01		stz $01,x	                stz 1,x
.b1a1		20 f2 94	jsr $94f2	                jsr xt_u_dot_r
.b1a4		64 29		stz $29		                stz tmp3
.b1a6						_line_loop:
.b1a6		20 3a 84	jsr $843a	                jsr xt_cr
.b1a9		ca		dex		                dex
.b1aa		ca		dex		                dex
.b1ab		ca		dex		                dex
.b1ac		ca		dex		                dex
.b1ad		74 03		stz $03,x	                stz 3,x
.b1af		a5 29		lda $29		                lda tmp3
.b1b1		95 02		sta $02,x	                sta 2,x
.b1b3		74 01		stz $01,x	                stz 1,x
.b1b5		a9 02		lda #$02	                lda #2
.b1b7		95 00		sta $00,x	                sta 0,x
.b1b9		20 f2 94	jsr $94f2	                jsr xt_u_dot_r
.b1bc		20 d1 91	jsr $91d1	                jsr xt_space
.b1bf		20 a0 86	jsr $86a0	                jsr xt_dup
.b1c2		ca		dex		                dex
.b1c3		ca		dex		                dex
.b1c4		a9 40		lda #$40	                lda #64
.b1c6		95 00		sta $00,x	                sta 0,x
.b1c8		74 01		stz $01,x	                stz 1,x
.b1ca		20 bb 94	jsr $94bb	                jsr xt_type
.b1cd		18		clc		                clc
.b1ce		a9 40		lda #$40	                lda #64
.b1d0		75 00		adc $00,x	                adc 0,x
.b1d2		95 00		sta $00,x	                sta 0,x
.b1d4		90 02		bcc $b1d8	                bcc +
.b1d6		f6 01		inc $01,x	                inc 1,x
.b1d8						+
.b1d8		e6 29		inc $29		                inc tmp3
.b1da		a5 29		lda $29		                lda tmp3
.b1dc		c9 10		cmp #$10	                cmp #16
.b1de		d0 c6		bne $b1a6	                bne _line_loop
.b1e0		20 3a 84	jsr $843a	                jsr xt_cr
.b1e3		e8		inx		                inx
.b1e4		e8		inx		                inx
.b1e5		60		rts		z_editor_l:            rts
.b1e6						xt_editor_line:
.b1e6		20 2e d8	jsr $d82e	                jsr underflow_1
.b1e9		a0 06		ldy #$06	                ldy #6          ; *64 is same as left shift 6 times.
.b1eb						_shift_tos_left:
.b1eb		16 00		asl $00,x	                asl 0,x         ; Shift TOS to the left
.b1ed		36 01		rol $01,x	                rol 1,x         ; ROL brings MSb from lower byte.
.b1ef		88		dey		                dey
.b1f0		d0 f9		bne $b1eb	                bne _shift_tos_left
.b1f2		20 cd b0	jsr $b0cd	                jsr xt_scr
.b1f5		20 1a 88	jsr $881a	                jsr xt_fetch
.b1f8		20 19 ae	jsr $ae19	                jsr xt_block
.b1fb		20 5f 8e	jsr $8e5f	                jsr xt_plus
.b1fe		60		rts		z_editor_line:  rts
.b1ff						xt_editor_o:
.b1ff		20 3a 84	jsr $843a	                jsr xt_cr
.b202		20 a0 86	jsr $86a0	                jsr xt_dup
.b205		20 d3 9d	jsr $9dd3	                jsr xt_two
.b208		20 f2 94	jsr $94f2	                jsr xt_u_dot_r
.b20b		20 d1 91	jsr $91d1	                jsr xt_space
.b20e		a9 2a		lda #$2a	                lda #'*'
.b210		20 c5 86	jsr $86c5	                jsr emit_a
.b213		20 d1 91	jsr $91d1	                jsr xt_space
.b216		20 e6 b1	jsr $b1e6	                jsr xt_editor_line
.b219		20 a0 86	jsr $86a0	                jsr xt_dup      ; Save a copy of the line address for later.
.b21c		ca		dex		                dex
.b21d		ca		dex		                dex
.b21e		a9 40		lda #$40	                lda #64         ; chars/line
.b220		95 00		sta $00,x	                sta 0,x
.b222		74 01		stz $01,x	                stz 1,x
.b224		20 e4 80	jsr $80e4	                jsr xt_accept
.b227		20 a0 86	jsr $86a0	                jsr xt_dup
.b22a		20 8c 9c	jsr $9c8c	                jsr xt_not_rote ; -rot
.b22d		20 5f 8e	jsr $8e5f	                jsr xt_plus
.b230		ca		dex		                dex
.b231		ca		dex		                dex
.b232		a9 40		lda #$40	                lda #64         ; chars/line
.b234		95 00		sta $00,x	                sta 0,x
.b236		74 01		stz $01,x	                stz 1,x
.b238		20 97 8f	jsr $8f97	                jsr xt_rot
.b23b		20 f6 8b	jsr $8bf6	                jsr xt_minus
.b23e		20 b2 87	jsr $87b2	                jsr xt_blank
.b241		20 17 b1	jsr $b117	                jsr xt_update
.b244		60		rts		z_editor_o:     rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/wordlist.asm

.b245						xt_also:
.b245		20 70 b2	jsr $b270	                jsr xt_get_order
.b248		20 11 8d	jsr $8d11	                jsr xt_over
.b24b		20 34 92	jsr $9234	                jsr xt_swap
.b24e		20 f5 8c	jsr $8cf5	                jsr xt_one_plus
.b251		20 79 b3	jsr $b379	                jsr xt_set_order
.b254		60		rts		z_also:         rts
.b255						xt_definitions:
.b255		a0 23		ldy #$23	                ldy #search_order_offset    ; Transfer byte variable
.b257		b1 08		lda ($08),y	                lda (up),y                  ; SEARCH_ORDER[0] to
.b259		a0 08		ldy #$08	                ldy #current_offset         ; byte variable CURRENT.
.b25b		91 08		sta ($08),y	                sta (up),y
.b25d		60		rts		z_definitions:  rts
.b25e						xt_forth:
.b25e		a0 23		ldy #$23	                ldy #search_order_offset
.b260		a9 00		lda #$00	                lda #0          ; The WID for Forth is 0.
.b262		91 08		sta ($08),y	                sta (up),y
.b264						z_forth:
.b264		60		rts		                rts
.b265						xt_get_current:
.b265		ca		dex		                dex
.b266		ca		dex		                dex
.b267		a0 08		ldy #$08	                ldy #current_offset
.b269		b1 08		lda ($08),y	                lda (up),y
.b26b		95 00		sta $00,x	                sta 0,x         ; CURRENT is a byte variable
.b26d		74 01		stz $01,x	                stz 1,x         ; so the MSB is zero.
.b26f		60		rts		z_get_current:  rts
.b270						xt_get_order:
.b270		a0 22		ldy #$22	                ldy #num_order_offset
.b272		b1 08		lda ($08),y	                lda (up),y
.b274		85 25		sta $25		                sta tmp1
.b276		f0 16		beq $b28e	                beq _done       ; If zero, there are no wordlists.
.b278						_loop:
.b278		c6 25		dec $25		                dec tmp1        ; Count down by bytes.
.b27a		a9 23		lda #$23	                lda #search_order_offset
.b27c		18		clc		                clc
.b27d		65 25		adc $25		                adc tmp1
.b27f		a8		tay		                tay
.b280		ca		dex		                dex
.b281		ca		dex		                dex
.b282		b1 08		lda ($08),y	                lda (up),y
.b284		95 00		sta $00,x	                sta 0,x         ; Search order array is bytes, so
.b286		74 01		stz $01,x	                stz 1,x         ; put a zero in the high byte.
.b288		a9 00		lda #$00	                lda #0
.b28a		c5 25		cmp $25		                cmp tmp1
.b28c		d0 ea		bne $b278	                bne _loop
.b28e						_done:
.b28e		ca		dex		                dex
.b28f		ca		dex		                dex
.b290		a0 22		ldy #$22	                ldy #num_order_offset
.b292		b1 08		lda ($08),y	                lda (up),y
.b294		95 00		sta $00,x	                sta 0,x
.b296		74 01		stz $01,x	                stz 1,x         ; We only support 8 wordlists.
.b298		60		rts		z_get_order:    rts
.b299						xt_only:
.b299		20 86 93	jsr $9386	                jsr xt_true
.b29c		20 79 b3	jsr $b379	                jsr xt_set_order
.b29f		60		rts		z_only:         rts
.b2a0						xt_order:
.b2a0		20 3a 84	jsr $843a	                jsr xt_cr
.b2a3		20 70 b2	jsr $b270	                jsr xt_get_order        ; ( wid_n ... wid_1 n )
.b2a6		b5 00		lda $00,x	                lda 0,x                 ; assumes no more than 255 wordlists
.b2a8		f0 1e		beq $b2c8	                beq _drop_done
.b2aa		a8		tay		                tay
.b2ab						_loop:
.b2ab		e8		inx		                inx
.b2ac		e8		inx		                inx                     ; DROP, now ( wid_n ... wid_1 )
.b2ad		b5 00		lda $00,x	                lda 0,x
.b2af		5a		phy		                phy
.b2b0		20 cb b2	jsr $b2cb	                jsr order_print_wid_string   ; internal helper function
.b2b3		7a		ply		                ply
.b2b4		88		dey		                dey
.b2b5		d0 f4		bne $b2ab	                bne _loop
.b2b7		20 d1 91	jsr $91d1	                jsr xt_space
.b2ba		20 d1 91	jsr $91d1	                jsr xt_space
.b2bd		20 65 b2	jsr $b265	                jsr xt_get_current      ; ( wid )
.b2c0		b5 00		lda $00,x	                lda 0,x
.b2c2		20 cb b2	jsr $b2cb	                jsr order_print_wid_string
.b2c5		20 3a 84	jsr $843a	                jsr xt_cr
.b2c8						_drop_done:
.b2c8		e8		inx		                inx
.b2c9		e8		inx		                inx
.b2ca						z_order:
.b2ca		60		rts		                rts
.b2cb						order_print_wid_string:
.b2cb		c9 04		cmp #$04	                cmp #4
.b2cd		90 09		bcc $b2d8	                bcc _output_string      ; less than 4, print a real string
.b2cf		ca		dex		                dex
.b2d0		ca		dex		                dex
.b2d1		95 00		sta $00,x	                sta 0,x
.b2d3		74 01		stz $01,x	                stz 1,x
.b2d5		4c e6 94	jmp $94e6	                jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
.b2d8						_output_string:
.b2d8		a8		tay		                tay
.b2d9		b9 df b2	lda $b2df,y	                lda _wid_data,y
.b2dc		4c 6a d8	jmp $d86a	                jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
.b2df						_wid_data:
>b2df		04				        .byte str_wid_forth            ; WID 0: "Forth"
>b2e0		05				        .byte str_wid_editor           ; WID 1: "Editor"
>b2e1		06				        .byte str_wid_assembler        ; WID 2: "Assembler"
>b2e2		07				        .byte str_wid_root             ; WID 3: "Root"
.b2e3						xt_previous:
.b2e3		20 70 b2	jsr $b270	                jsr xt_get_order
.b2e6		20 42 8c	jsr $8c42	                jsr xt_nip
.b2e9		20 e9 8c	jsr $8ce9	                jsr xt_one_minus
.b2ec		20 79 b3	jsr $b379	                jsr xt_set_order
.b2ef		60		rts		z_previous:     rts
.b2f0						xt_root_wordlist:
.b2f0		ca		dex		                dex             ; The WID for the Root wordlist is 3.
.b2f1		ca		dex		                dex
.b2f2		a9 03		lda #$03	                lda #3
.b2f4		95 00		sta $00,x	                sta 0,x
.b2f6		74 01		stz $01,x	                stz 1,x
.b2f8						z_root_wordlist:
.b2f8		60		rts		                rts
.b2f9						xt_search_wordlist:
.b2f9		20 38 d8	jsr $d838	                jsr underflow_3
.b2fc		a5 08		lda $08		                lda up
.b2fe		18		clc		                clc
.b2ff		69 0a		adc #$0a	                adc #wordlists_offset
.b301		85 27		sta $27		                sta tmp2
.b303		a5 09		lda $09		                lda up+1
.b305		69 00		adc #$00	                adc #0          ; Adding carry
.b307		85 28		sta $28		                sta tmp2+1
.b309		b5 00		lda $00,x	                lda 0,x
.b30b		0a		asl a		                asl             ; Convert wid to offset in cells (x2)
.b30c		65 27		adc $27		                adc tmp2
.b30e		85 27		sta $27		                sta tmp2
.b310		90 02		bcc $b314	                bcc +
.b312		e6 28		inc $28		                inc tmp2+1      ; Propagate carry if needed.
.b314						+
.b314		e8		inx		                inx
.b315		e8		inx		                inx
.b316		b5 00		lda $00,x	                lda 0,x
.b318		15 01		ora $01,x	                ora 1,x
.b31a		f0 4e		beq $b36a	                beq _done
.b31c		a5 27		lda $27		                lda tmp2
.b31e		05 28		ora $28		                ora tmp2+1
.b320		f0 48		beq $b36a	                beq _done
.b322		b2 27		lda ($27)	                lda (tmp2)              ; nt of first word in Dictionary
.b324		85 25		sta $25		                sta tmp1
.b326		e6 27		inc $27		                inc tmp2                ; Move to the upper byte
.b328		d0 02		bne $b32c	                bne +
.b32a		e6 28		inc $28		                inc tmp2+1
.b32c						+
.b32c		b2 27		lda ($27)	                lda (tmp2)
.b32e		85 26		sta $26		                sta tmp1+1
.b330		20 10 d7	jsr $d710	                jsr find_header_name
.b333		f0 31		beq $b366	                beq _fail_done
.b335		e8		inx		                inx
.b336		e8		inx		                inx
.b337		a5 25		lda $25		                lda tmp1
.b339		95 00		sta $00,x	                sta 0,x
.b33b		a5 26		lda $26		                lda tmp1+1
.b33d		95 01		sta $01,x	                sta 1,x
.b33f		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( nt nt )
.b342		20 45 9c	jsr $9c45	                jsr xt_name_to_int      ; ( nt xt )
.b345		20 34 92	jsr $9234	                jsr xt_swap             ; ( xt nt )
.b348		a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.b34a		f6 00		inc $00,x	                inc 0,x
.b34c		d0 02		bne $b350	                bne +
.b34e		f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.b350						+
.b350		a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.b352		29 04		and #$04	                and #IM
.b354		d0 08		bne $b35e	                bne _immediate          ; bit set, we're immediate
.b356		a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.b358		95 00		sta $00,x	                sta 0,x
.b35a		95 01		sta $01,x	                sta 1,x
.b35c		80 0e		bra $b36c	                bra _done_nodrop
.b35e						_immediate:
.b35e		a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.b360		95 00		sta $00,x	                sta 0,x
.b362		74 01		stz $01,x	                stz 1,x
.b364		80 06		bra $b36c	                bra _done_nodrop
.b366						_fail_done:
.b366		74 02		stz $02,x	                stz 2,x         ; failure flag
.b368		74 03		stz $03,x	                stz 3,x
.b36a						_done:
.b36a		e8		inx		                inx
.b36b		e8		inx		                inx
.b36c						_done_nodrop:
.b36c						z_search_wordlist:
.b36c		60		rts		                rts
.b36d						xt_set_current:
.b36d		20 2e d8	jsr $d82e	                jsr underflow_1
.b370		a0 08		ldy #$08	                ldy #current_offset
.b372		b5 00		lda $00,x	                lda 0,x         ; CURRENT is byte variable
.b374		91 08		sta ($08),y	                sta (up),y      ; so only the LSB is used.
.b376		e8		inx		                inx
.b377		e8		inx		                inx
.b378		60		rts		z_set_current:  rts
.b379						xt_set_order:
.b379		a9 ff		lda #$ff	                lda #$FF
.b37b		d5 01		cmp $01,x	                cmp 1,x
.b37d		d0 12		bne $b391	                bne _start
.b37f		d5 00		cmp $00,x	                cmp 0,x
.b381		d0 0e		bne $b391	                bne _start
.b383		ca		dex		                dex             ; Make room for the count.
.b384		ca		dex		                dex
.b385		74 03		stz $03,x	                stz 3,x         ; ROOT-WORDLIST is 3
.b387		a9 03		lda #$03	                lda #3
.b389		95 02		sta $02,x	                sta 2,x
.b38b		74 01		stz $01,x	                stz 1,x         ; Count is 1.
.b38d		a9 01		lda #$01	                lda #1
.b38f		95 00		sta $00,x	                sta 0,x
.b391						_start:
.b391		a0 22		ldy #$22	                ldy #num_order_offset
.b393		b5 00		lda $00,x	                lda 0,x
.b395		91 08		sta ($08),y	                sta (up),y      ; #ORDER is a byte variable.
.b397		85 25		sta $25		                sta tmp1        ; Save a copy for zero check and looping.
.b399		e8		inx		                inx             ; Drop the count off the data stack.
.b39a		e8		inx		                inx
.b39b		a5 25		lda $25		                lda tmp1
.b39d		f0 0d		beq $b3ac	                beq _done       ; If zero, there are no wordlists.
.b39f		a0 23		ldy #$23	                ldy #search_order_offset
.b3a1						_loop:
.b3a1		b5 00		lda $00,x	                lda 0,x         ; The search order is a byte array
.b3a3		91 08		sta ($08),y	                sta (up),y      ; so only save the LSB
.b3a5		c8		iny		                iny
.b3a6		e8		inx		                inx
.b3a7		e8		inx		                inx
.b3a8		c6 25		dec $25		                dec tmp1
.b3aa		d0 f5		bne $b3a1	                bne _loop
.b3ac						_done:
.b3ac		60		rts		z_set_order:    rts
.b3ad						xt_to_order:
.b3ad		20 72 93	jsr $9372	                jsr xt_to_r
.b3b0		20 70 b2	jsr $b270	                jsr xt_get_order
.b3b3		20 fa 8e	jsr $8efa	                jsr xt_r_from
.b3b6		20 34 92	jsr $9234	                jsr xt_swap
.b3b9		20 f5 8c	jsr $8cf5	                jsr xt_one_plus
.b3bc		20 79 b3	jsr $b379	                jsr xt_set_order
.b3bf		60		rts		z_to_order:     rts
.b3c0						xt_wordlist:
.b3c0		a0 09		ldy #$09	                ldy #num_wordlists_offset
.b3c2		b1 08		lda ($08),y	                lda (up),y      ; This is a byte variable, so only
.b3c4		c9 0c		cmp #$0c	                cmp #max_wordlists
.b3c6		d0 05		bne $b3cd	                bne _ok
.b3c8		a9 0b		lda #$0b	                lda #err_wordlist
.b3ca		4c 44 d8	jmp $d844	                jmp error
.b3cd						_ok:
.b3cd		1a		inc a		                ina             ; Increment the wordlist#
.b3ce		91 08		sta ($08),y	                sta (up),y      ; Save it into byte variable #wordlists
.b3d0		ca		dex		                dex             ; and put it on the stack.
.b3d1		ca		dex		                dex
.b3d2		95 00		sta $00,x	                sta 0,x
.b3d4		74 01		stz $01,x	                stz 1,x         ; 12 is the max, so upper byte is always zero.
.b3d6		60		rts		z_wordlist:     rts

;******  Return to file: platform/../words/all.asm


;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../definitions.asm

=$0000						ram_start = $0000          ; start of installed RAM, must include zpage
=$0000						zpage     = ram_start      ; begin of Zero Page ($0000-$00ff)
=$0100						stack0    = $0100          ; begin of Return Stack ($0100-$01ff)
=$7f						zpage_end = $7F            ; end of Zero Page used ($0000-$007f)
=32767						ram_end   = $8000-1        ; end of installed RAM
=31744						hist_buff = ram_end-$03ff  ; begin of history buffers
=$ff						rsp0      = $ff              ; initial Return Stack Pointer (65c02 stack)
=$ff						bsize     = $ff              ; size of input/output buffers
=$0000						user0     = zpage            ; TaliForth2 system variables
=512						buffer0   = stack0+$100      ; input buffer ($0200-$02ff)
=768						cp0       = buffer0+bsize+1  ; Dictionary starts after last buffer
=31744						cp_end    = hist_buff        ; Last RAM byte available for code
=$ff						padoffset = $ff              ; offset from CP to PAD (holds number strings)
=120						dsp0      = zpage_end-7    ; initial Data Stack Pointer
.b3d7						cold_zp_table:
>b3d7	0000	00 08				cp:         .word cp0+256+1024      ; Compiler Pointer
>b3d9	0002	ba bb				dp:         .word dictionary_start  ; Dictionary Pointer
>b3db	0004	00 00				ip:         .word 0                 ; Instruction Pointer (current xt)
>b3dd	0006	00 00				workword:   .word 0                 ; nt (not xt!) of word being compiled, except in
>b3df	0008	00 03				up:         .word cp0               ; Forth user vars at start of available RAM
>b3e1	000a	00 00				insrc:      .word 0                 ; input source for SOURCE-ID (0 for keyboard)
>b3e3	000c	00 02				cib:        .word buffer0           ; address of current input buffer
>b3e5	000e	00 00				ciblen:     .word 0                 ; length of current input buffer
>b3e7	0010	00 00				toin:       .word 0                 ; pointer to CIB (>IN in Forth)
>b3e9	0012	27 f0				output:     .word kernel_putc       ; vector for EMIT
>b3eb	0014	2b f0				input:      .word kernel_getc       ; vector for KEY
>b3ed	0016	39 f0				havekey:    .word kernel_kbhit      ; vector for KEY?
>b3ef	0018	0a 00				base:       .word 10                ; number radix, default decimal
>b3f1	001a	00 00				state:      .word 0                 ; STATE: -1 compile, 0 interpret
>b3f3	001c	00 00				status:     .word 0                 ; internal status used by : :NONAME ; ACCEPT
>b3f5	001e					tmpdsp:     .byte ?         ; temporary DSP (X) storage (single byte)
>b3f6	001f					loopctrl:   .byte ?         ; Offset from lcbstack0 to current loop control block for DO/LOOP/+LOOP
>b3f7	0020					loopidx0    .byte ?         ; cached LSB of current loop index for LOOP (not +LOOP)
=$0100						lcbstack0 = stack0
=256						loopindex = lcbstack0+0     ; loop control block index for adjusted loopindex
=258						loopfufa  = lcbstack0+2     ; loop control block offset for limit fudge factor
>b3f8	0021					loopleave:  .word ?         ; tmp for LEAVE chaining ;TODO could it use existing tmp?
>b3fa	0023					tmptos:     .word ?         ; temporary TOS storage
>b3fc	0025					tmp1:       .word ?         ; temporary storage
>b3fe	0027					tmp2:       .word ?         ; temporary storage
>b400	0029					tmp3:       .word ?         ; temporary storage (especially for print)
>b402	002b					tohold:     .word ?         ; pointer for formatted output
>b404	002d					scratch:    .word ?,?,?,?   ; 8 byte scratchpad (see UM/MOD)
>b40c	0035					tmped:      .word ?,?,?     ; temporary for editors
.b3f5						cold_zp_table_end:
.b3f5						cold_user_table:
>b3f5	0000	14 00				nc_limit_offset:        .word 20        ; byte limit for Native Compile size
>b3f7	0002	00 00				uf_strip_offset:        .word 0         ; flag to strip underflow detection (0 off)
>b3f9	0004	00 00				blk_offset:             .word 0         ; BLK
>b3fb	0006	00 00				scr_offset:             .word 0         ; SCR
=12						max_wordlists = 12    ; Maximum number of wordlists supported (4 built-in, 8 user wordlists)
.b3fd	0008					marker_start_offset:
>b3fd	0008	00				current_offset:         .byte 0         ; CURRENT = FORTH-WORDLIST (compilation wordlist)
>b3fe	0009	04				num_wordlists_offset:   .byte 4         ; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
.b3ff	000a					wordlists_offset:
>b3ff	000a	ba bb				    .word dictionary_start              ; FORTH-WORDLIST
>b401	000c	3f ca				    .word editor_dictionary_start       ; EDITOR-WORDLIST
>b403	000e	8f ca				    .word assembler_dictionary_start    ; ASSEMBLER-WORDLIST
>b405	0010	fe c9				    .word root_dictionary_start         ; ROOT-WORDLIST
>b407	0012	00 00 00 00 00 00 00 00		    .word 0,0,0,0,0,0,0,0               ; Space for 8 User wordlists
>b40f	001a	00 00 00 00 00 00 00 00
>b417	0022	01				num_order_offset:       .byte 1         ; #ORDER (Number of wordlists in search order)
.b418	0023					search_order_offset:
>b418	0023	00 00 00 00 00 00 00 00		    .byte 0,0,0,0,0,0,0,0,0             ; SEARCH-ORDER (9 bytes to keep offsets even)
>b420	002b	00
.b421	002c					marker_end_offset:
>b421	002c	00 04				blkbuffer_offset:       .word cp0+256   ; Address of buffer (right after USER vars)
>b423	002e	00 00				buffblocknum_offset:    .word 0         ; Block number current in buffer
>b425	0030	00 00				buffstatus_offset:      .word 0         ; Buffer status (bit 0 = used, bit 1 = dirty) (not in use)
>b427	0032	fd af				blockread_offset:       .word xt_block_word_error   ; Vector to block reading routine
>b429	0034	fd af				blockwrite_offset:      .word xt_block_word_error   ; Vector to block writing routine
.b42b						cold_user_table_end:
=$03						AscCC   = $03  ; break (CTRL-c)
=$07						AscBELL = $07  ; bell sound
=$08						AscBS   = $08  ; backspace
=$0a						AscLF   = $0A  ; line feed
=$0d						AscCR   = $0D  ; carriage return
=$1b						AscESC  = $1B  ; escape
=$20						AscSP   = $20  ; space
=$7f						AscDEL  = $7F  ; delete (CTRL-h)
=$10						AscCP   = $10  ; CTRL-p (used to recall previous input history)
=$0e						AscCN   = $0E  ; CTRL-n (used to recall next input history)
=$20						OpJSR   = $20
=$4c						OpJMP   = $4C
=$d0						OpBNE   = $D0
=$f0						OpBEQ   = $F0
=$60						OpRTS   = $60
=$80						OpBRA   = $80
=1						CO = 1  ; Compile Only
=2						AN = 2  ; Always Native Compile
=4						IM = 4  ; Immediate Word
=8						NN = 8  ; Never Native Compile
=16						UF = 16 ; Includes Underflow Check (RESERVED)
=32						HC = 32 ; Word has Code Field Area (CFA)
=79						MAX_LINE_LENGTH  = 79      ; assumes 80 character lines

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../opcodes.asm

.b42b						oc_index_table:
>b42b		2b b6 2f b6 d6 ba d6 ba		        .word oc00, oc01, oc__, oc__, oc04, oc05, oc06, oc07
>b433		37 b6 3d b6 43 b6 49 b6
>b43b		50 b6 54 b6 5a b6 d6 ba		        .word oc08, oc09, oc0A, oc__, oc0C, oc0D, oc0E, oc0F
>b443		60 b6 64 b6 68 b6 6c b6
>b44b		71 b6 75 b6 7d b6 d6 ba		        .word oc10, oc11, oc12, oc__, oc14, oc15, oc16, oc17
>b453		84 b6 8a b6 91 b6 98 b6
>b45b		9f b6 a3 b6 a9 b6 d6 ba		        .word oc18, oc19, oc1A, oc__, oc1C, oc1D, oc1E, oc1F
>b463		af b6 b3 b6 b9 b6 bf b6
>b46b		c4 b6 c8 b6 d6 ba d6 ba		        .word oc20, oc21, oc__, oc__, oc24, oc25, oc26, oc27
>b473		d0 b6 d6 b6 dc b6 e2 b6
>b47b		e9 b6 ed b6 f3 b6 d6 ba		        .word oc28, oc29, oc2A, oc__, oc2C, oc2D, oc2E, oc2F
>b483		f9 b6 fd b6 02 b7 06 b7
>b48b		0b b7 0f b7 17 b7 d6 ba		        .word oc30, oc31, oc32, oc__, oc34, oc35, oc36, oc37
>b493		1e b7 26 b7 2d b7 34 b7
>b49b		3b b7 3f b7 45 b7 d6 ba		        .word oc38, oc39, oc3A, oc__, oc3C, oc3D, oc3E, oc3F
>b4a3		4b b7 51 b7 57 b7 5d b7
>b4ab		62 b7 66 b7 d6 ba d6 ba		        .word oc40, oc41, oc__, oc__, oc__, oc45, oc46, oc47
>b4b3		d6 ba 6e b7 74 b7 7a b7
>b4bb		81 b7 85 b7 8b b7 d6 ba		        .word oc48, oc49, oc4A, oc__, oc4C, oc4D, oc4E, oc4F
>b4c3		91 b7 95 b7 99 b7 9d b7
>b4cb		a2 b7 a6 b7 ae b7 d6 ba		        .word oc50, oc51, oc52, oc__, oc__, oc55, oc56, oc57
>b4d3		d6 ba b5 b7 bc b7 c3 b7
>b4db		ca b7 ce b7 d4 b7 d6 ba		        .word oc58, oc59, oc5A, oc__, oc__, oc5D, oc5E, oc5F
>b4e3		d6 ba d8 b7 de b7 e4 b7
>b4eb		e9 b7 ed b7 d6 ba d6 ba		        .word oc60, oc61, oc__, oc__, oc64, oc65, oc66, oc67
>b4f3		f5 b7 fb b7 01 b8 07 b8
>b4fb		0e b8 12 b8 18 b8 d6 ba		        .word oc68, oc69, oc6A, oc__, oc6C, oc6D, oc6E, oc6F
>b503		1e b8 24 b8 28 b8 2c b8
>b50b		31 b8 35 b8 3d b8 d6 ba		        .word oc70, oc71, oc72, oc__, oc74, oc75, oc76, oc77
>b513		44 b8 4b b8 52 b8 59 b8
>b51b		60 b8 64 b8 6a b8 d6 ba		        .word oc78, oc79, oc7A, oc__, oc7C, oc7D, oc7E, oc7F
>b523		6e b8 75 b8 7b b8 81 b8
>b52b		86 b8 8a b8 d6 ba d6 ba		        .word oc80, oc81, oc__, oc__, oc84, oc85, oc86, oc87
>b533		92 b8 98 b8 9e b8 a4 b8
>b53b		ab b8 af b8 b5 b8 d6 ba		        .word oc88, oc89, oc8A, oc__, oc8C, oc8D, oc8E, oc8F
>b543		b9 b8 bd b8 c1 b8 c5 b8
>b54b		ca b8 ce b8 d6 b8 d6 ba		        .word oc90, oc91, oc92, oc__, oc94, oc95, oc96, oc97
>b553		dd b8 e4 b8 eb b8 f2 b8
>b55b		f9 b8 fd b8 03 b9 d6 ba		        .word oc98, oc99, oc9A, oc__, oc9C, oc9D, oc9E, oc9F
>b563		07 b9 0b b9 11 b9 17 b9
>b56b		1c b9 22 b9 2a b9 d6 ba		        .word ocA0, ocA1, ocA2, oc__, ocA4, ocA5, ocA6, ocA7
>b573		30 b9 36 b9 3c b9 42 b9
>b57b		49 b9 4d b9 53 b9 d6 ba		        .word ocA8, ocA9, ocAA, oc__, ocAC, ocAD, ocAE, ocAF
>b583		57 b9 5b b9 5f b9 63 b9
>b58b		68 b9 6c b9 74 b9 d6 ba		        .word ocB0, ocB1, ocB2, oc__, ocB4, ocB5, ocB6, ocB7
>b593		7b b9 82 b9 89 b9 90 b9
>b59b		97 b9 9b b9 a1 b9 d6 ba		        .word ocB8, ocB9, ocBA, oc__, ocBC, ocBD, ocBE, ocBF
>b5a3		a5 b9 ab b9 b1 b9 b7 b9
>b5ab		bc b9 c2 b9 d6 ba d6 ba		        .word ocC0, ocC1, oc__, oc__, ocC4, ocC5, ocC6, ocC7
>b5b3		ca b9 d0 b9 d6 b9 dc b9
>b5bb		e3 b9 e7 b9 ed b9 d6 ba		        .word ocC8, ocC9, ocCA, oc__, ocCC, ocCD, ocCE, ocCF
>b5c3		f1 b9 f5 b9 f9 b9 fd b9
>b5cb		02 ba 06 ba 0e ba d6 ba		        .word ocD0, ocD1, ocD2, oc__, oc__, ocD5, ocD6, ocD7
>b5d3		d6 ba 15 ba 1c ba 23 ba
>b5db		2a ba 2e ba 34 ba d6 ba		        .word ocD8, ocD9, ocDA, oc__, oc__, ocDD, ocDE, ocDF
>b5e3		d6 ba 38 ba 3e ba 44 ba
>b5eb		49 ba 4f ba d6 ba d6 ba		        .word ocE0, ocE1, oc__, oc__, ocE4, ocE5, ocE6, ocE7
>b5f3		57 ba 5d ba 63 ba 69 ba
>b5fb		70 ba 74 ba 7a ba d6 ba		        .word ocE8, ocE9, ocEA, oc__, ocEC, ocED, ocEE, ocEF
>b603		7e ba 82 ba 86 ba 8a ba
>b60b		8f ba 93 ba 9b ba d6 ba		        .word ocF0, ocF1, ocF2, oc__, oc__, ocF5, ocF6, ocF7
>b613		d6 ba a2 ba a9 ba b0 ba
>b61b		b7 ba bb ba c1 ba d6 ba		        .word ocF8, ocF9, ocFA, oc__, oc__, ocFD, ocFE, ocFF
>b623		d6 ba c5 ba cb ba d1 ba
>b62b		83 62 72 6b				oc00:	.text 2*64+3, "brk"              ; enforce the signature byte
>b62f		87 6f 72 61 2e 7a 78 69			oc01:	.text 2*64+7, "ora.zxi"
>b637		85 74 73 62 2e 7a		    oc04:   .text 2*64+5, "tsb.z"
>b63d		85 6f 72 61 2e 7a			oc05:	.text 2*64+5, "ora.z"
>b643		85 61 73 6c 2e 7a			oc06:	.text 2*64+5, "asl.z"
>b649		86 72 6d 62 30 2e 7a			oc07:	.text 2*64+6, "rmb0.z"
>b650		43 70 68 70				oc08:	.text 1*64+3, "php"
>b654		85 6f 72 61 2e 23			oc09:	.text 2*64+5, "ora.#"
>b65a		45 61 73 6c 2e 61			oc0A:	.text 1*64+5, "asl.a"
>b660		c3 74 73 62				oc0C:	.text 3*64+3, "tsb"
>b664		c3 6f 72 61				oc0D:	.text 3*64+3, "ora"
>b668		c3 61 73 6c				oc0E:	.text 3*64+3, "asl"
>b66c		c4 62 62 72 30				oc0F:	.text 3*64+4, "bbr0"
>b671		83 62 70 6c				oc10:	.text 2*64+3, "bpl"
>b675		87 6f 72 61 2e 7a 69 79			oc11:	.text 2*64+7, "ora.ziy"
>b67d		86 6f 72 61 2e 7a 69			oc12:	.text 2*64+6, "ora.zi"
>b684		85 74 72 62 2e 7a			oc14:	.text 2*64+5, "trb.z"
>b68a		86 6f 72 61 2e 7a 78			oc15:	.text 2*64+6, "ora.zx"
>b691		86 61 73 6c 2e 7a 78			oc16:	.text 2*64+6, "asl.zx"
>b698		86 72 6d 62 31 2e 7a			oc17:	.text 2*64+6, "rmb1.z"
>b69f		43 63 6c 63				oc18:	.text 1*64+3, "clc"
>b6a3		c5 6f 72 61 2e 79			oc19:	.text 3*64+5, "ora.y"
>b6a9		45 69 6e 63 2e 61			oc1A:	.text 1*64+5, "inc.a"
>b6af		c3 74 72 62				oc1C:	.text 3*64+3, "trb"
>b6b3		c5 6f 72 61 2e 78			oc1D:	.text 3*64+5, "ora.x"
>b6b9		c5 61 73 6c 2e 78			oc1E:	.text 3*64+5, "asl.x"
>b6bf		c4 62 62 72 31				oc1F:	.text 3*64+4, "bbr1"
>b6c4		c3 6a 73 72				oc20:	.text 3*64+3, "jsr"
>b6c8		87 61 6e 64 2e 7a 78 69			oc21:	.text 2*64+7, "and.zxi"
>b6d0		85 62 69 74 2e 7a			oc24:	.text 2*64+5, "bit.z"
>b6d6		85 61 6e 64 2e 7a			oc25:	.text 2*64+5, "and.z"
>b6dc		85 72 6f 6c 2e 7a			oc26:	.text 2*64+5, "rol.z"
>b6e2		86 72 6d 62 32 2e 7a			oc27:	.text 2*64+6, "rmb2.z"
>b6e9		43 70 6c 70				oc28:	.text 1*64+3, "plp"
>b6ed		85 61 6e 64 2e 23			oc29:	.text 2*64+5, "and.#"
>b6f3		45 72 6f 6c 2e 61			oc2A:	.text 1*64+5, "rol.a"
>b6f9		c3 62 69 74				oc2C:	.text 3*64+3, "bit"
>b6fd		c4 61 6e 64 2e				oc2D:	.text 3*64+4, "and."
>b702		c3 72 6f 6c				oc2E:	.text 3*64+3, "rol"
>b706		c4 62 62 72 32				oc2F:	.text 3*64+4, "bbr2"
>b70b		83 62 6d 69				oc30:	.text 2*64+3, "bmi"
>b70f		87 61 6e 64 2e 7a 69 79			oc31:	.text 2*64+7, "and.ziy"
>b717		86 61 6e 64 2e 7a 69			oc32:	.text 2*64+6, "and.zi"
>b71e		87 62 69 74 2e 7a 78 69			oc34:	.text 2*64+7, "bit.zxi"
>b726		86 61 6e 64 2e 7a 78			oc35:	.text 2*64+6, "and.zx"
>b72d		86 72 6f 6c 2e 7a 78			oc36:	.text 2*64+6, "rol.zx"
>b734		86 72 6d 62 33 2e 7a			oc37:	.text 2*64+6, "rmb3.z"
>b73b		43 73 65 63				oc38:	.text 1*64+3, "sec"
>b73f		c5 61 6e 64 2e 79			oc39:	.text 3*64+5, "and.y"
>b745		45 64 65 63 2e 61			oc3A:	.text 1*64+5, "dec.a"
>b74b		c5 62 69 74 2e 78			oc3C:	.text 3*64+5, "bit.x"
>b751		c5 61 6e 64 2e 78			oc3D:	.text 3*64+5, "and.x"
>b757		c5 72 6f 6c 2e 78			oc3E:	.text 3*64+5, "rol.x"
>b75d		c4 62 62 72 33				oc3F:	.text 3*64+4, "bbr3"
>b762		43 72 74 69				oc40:	.text 1*64+3, "rti"
>b766		87 65 6f 72 2e 7a 78 69			oc41:	.text 2*64+7, "eor.zxi"
>b76e		85 65 6f 72 2e 7a			oc45:	.text 2*64+5, "eor.z"
>b774		85 6c 73 72 2e 7a			oc46:	.text 2*64+5, "lsr.z"
>b77a		86 72 62 6d 34 2e 7a			oc47:	.text 2*64+6, "rbm4.z"
>b781		43 70 68 61				oc48:	.text 1*64+3, "pha"
>b785		85 65 6f 72 2e 23			oc49:	.text 2*64+5, "eor.#"
>b78b		45 6c 73 72 2e 61			oc4A:	.text 1*64+5, "lsr.a"
>b791		c3 6a 6d 70				oc4C:	.text 3*64+3, "jmp"
>b795		c3 65 6f 72				oc4D:	.text 3*64+3, "eor"
>b799		c3 6c 73 72				oc4E:	.text 3*64+3, "lsr"
>b79d		c4 62 62 72 34				oc4F:	.text 3*64+4, "bbr4"
>b7a2		83 62 76 63				oc50:	.text 2*64+3, "bvc"
>b7a6		87 65 6f 72 2e 7a 69 79			oc51:	.text 2*64+7, "eor.ziy"
>b7ae		86 65 6f 72 2e 7a 69			oc52:	.text 2*64+6, "eor.zi"
>b7b5		86 65 6f 72 2e 7a 78			oc55:	.text 2*64+6, "eor.zx"
>b7bc		86 6c 73 72 2e 7a 78			oc56:	.text 2*64+6, "lsr.zx"
>b7c3		86 72 62 6d 35 2e 7a			oc57:	.text 2*64+6, "rbm5.z"
>b7ca		43 63 6c 69				oc58:	.text 1*64+3, "cli"
>b7ce		c5 65 6f 72 2e 79			oc59:	.text 3*64+5, "eor.y"
>b7d4		43 70 68 79				oc5A:	.text 1*64+3, "phy"
>b7d8		c5 65 6f 72 2e 78			oc5D:	.text 3*64+5, "eor.x"
>b7de		c5 6c 73 72 2e 78			oc5E:	.text 3*64+5, "lsr.x"
>b7e4		c4 62 62 72 35				oc5F:	.text 3*64+4, "bbr5"
>b7e9		43 72 74 73				oc60:	.text 1*64+3, "rts"
>b7ed		87 61 64 63 2e 7a 78 69			oc61:	.text 2*64+7, "adc.zxi"
>b7f5		85 73 74 7a 2e 7a			oc64:	.text 2*64+5, "stz.z"
>b7fb		85 61 64 63 2e 7a			oc65:	.text 2*64+5, "adc.z"
>b801		85 72 6f 72 2e 7a			oc66:	.text 2*64+5, "ror.z"
>b807		86 72 6d 62 36 2e 7a			oc67:	.text 2*64+6, "rmb6.z"
>b80e		43 70 6c 61				oc68:	.text 1*64+3, "pla"
>b812		85 61 64 63 2e 23			oc69:	.text 2*64+5, "adc.#"
>b818		45 72 6f 72 2e 61			oc6A:	.text 1*64+5, "ror.a"
>b81e		c5 6a 6d 70 2e 69			oc6C:	.text 3*64+5, "jmp.i"
>b824		c3 61 64 63				oc6D:	.text 3*64+3, "adc"
>b828		c3 72 6f 72				oc6E:	.text 3*64+3, "ror"
>b82c		c4 62 62 72 36				oc6F:	.text 3*64+4, "bbr6"
>b831		83 62 76 73				oc70:	.text 2*64+3, "bvs"
>b835		87 61 64 63 2e 7a 69 79			oc71:	.text 2*64+7, "adc.ziy"
>b83d		86 61 64 63 2e 7a 69			oc72:	.text 2*64+6, "adc.zi"
>b844		86 73 74 7a 2e 7a 78			oc74:	.text 2*64+6, "stz.zx"
>b84b		86 61 64 63 2e 7a 78			oc75:	.text 2*64+6, "adc.zx"
>b852		86 72 6f 72 2e 7a 78			oc76:	.text 2*64+6, "ror.zx"
>b859		86 72 6d 62 37 2e 7a			oc77:	.text 2*64+6, "rmb7.z"
>b860		43 73 65 69				oc78:	.text 1*64+3, "sei"
>b864		c5 61 64 63 2e 79			oc79:	.text 3*64+5, "adc.y"
>b86a		43 70 6c 79				oc7A:	.text 1*64+3, "ply"
>b86e		c6 6a 6d 70 2e 78 69			oc7C:	.text 3*64+6, "jmp.xi"
>b875		c5 61 64 63 2e 78			oc7D:	.text 3*64+5, "adc.x"
>b87b		c5 72 6f 72 2e 78			oc7E:	.text 3*64+5, "ror.x"
>b881		c4 62 62 72 37				oc7F:	.text 3*64+4, "bbr7"
>b886		83 62 72 61				oc80:	.text 2*64+3, "bra"
>b88a		87 73 74 61 2e 7a 78 69			oc81:	.text 2*64+7, "sta.zxi"
>b892		85 73 74 79 2e 7a			oc84:	.text 2*64+5, "sty.z"
>b898		85 73 74 61 2e 7a			oc85:	.text 2*64+5, "sta.z"
>b89e		85 73 74 78 2e 7a			oc86:	.text 2*64+5, "stx.z"
>b8a4		86 73 6d 62 30 2e 7a			oc87:	.text 2*64+6, "smb0.z"
>b8ab		43 64 65 79				oc88:	.text 1*64+3, "dey"
>b8af		85 62 69 74 2e 23			oc89:	.text 2*64+5, "bit.#"
>b8b5		43 74 78 61				oc8A:	.text 1*64+3, "txa"
>b8b9		c3 73 74 79				oc8C:	.text 3*64+3, "sty"
>b8bd		c3 73 74 61				oc8D:	.text 3*64+3, "sta"
>b8c1		c3 73 74 78				oc8E:	.text 3*64+3, "stx"
>b8c5		c4 62 62 73 30				oc8F:	.text 3*64+4, "bbs0"
>b8ca		83 62 63 63				oc90:	.text 2*64+3, "bcc"
>b8ce		87 73 74 61 2e 7a 69 79			oc91:	.text 2*64+7, "sta.ziy"
>b8d6		86 73 74 61 2e 7a 69			oc92:	.text 2*64+6, "sta.zi"
>b8dd		86 73 74 79 2e 7a 78			oc94:	.text 2*64+6, "sty.zx"
>b8e4		86 73 74 61 2e 7a 78			oc95:	.text 2*64+6, "sta.zx"
>b8eb		86 73 74 78 2e 7a 79			oc96:	.text 2*64+6, "stx.zy"
>b8f2		86 73 6d 62 31 2e 7a			oc97:	.text 2*64+6, "smb1.z"
>b8f9		43 74 79 61				oc98:	.text 1*64+3, "tya"
>b8fd		c5 73 74 61 2e 79			oc99:	.text 3*64+5, "sta.y"
>b903		43 74 78 73				oc9A:	.text 1*64+3, "txs"
>b907		c3 73 74 7a				oc9C:	.text 3*64+3, "stz"
>b90b		c5 73 74 61 2e 78			oc9D:	.text 3*64+5, "sta.x"
>b911		c5 73 74 7a 2e 78			oc9E:	.text 3*64+5, "stz.x"
>b917		c4 62 62 73 31				oc9F:	.text 3*64+4, "bbs1"
>b91c		85 6c 64 79 2e 23			ocA0:	.text 2*64+5, "ldy.#"
>b922		87 6c 64 61 2e 7a 78 69			ocA1:	.text 2*64+7, "lda.zxi"
>b92a		85 6c 64 78 2e 23			ocA2:	.text 2*64+5, "ldx.#"
>b930		85 6c 64 79 2e 7a			ocA4:	.text 2*64+5, "ldy.z"
>b936		85 6c 64 61 2e 7a			ocA5:	.text 2*64+5, "lda.z"
>b93c		85 6c 64 78 2e 7a			ocA6:	.text 2*64+5, "ldx.z"
>b942		86 73 6d 62 32 2e 7a			ocA7:	.text 2*64+6, "smb2.z"
>b949		43 74 61 79				ocA8:	.text 1*64+3, "tay"
>b94d		85 6c 64 61 2e 23			ocA9:	.text 2*64+5, "lda.#"
>b953		43 74 61 78				ocAA:	.text 1*64+3, "tax"
>b957		c3 6c 64 79				ocAC:	.text 3*64+3, "ldy"
>b95b		c3 6c 64 61				ocAD:	.text 3*64+3, "lda"
>b95f		c3 6c 64 78				ocAE:	.text 3*64+3, "ldx"
>b963		c4 62 62 73 32				ocAF:	.text 3*64+4, "bbs2"
>b968		83 62 63 73				ocB0:	.text 2*64+3, "bcs"
>b96c		87 6c 64 61 2e 7a 69 79			ocB1:	.text 2*64+7, "lda.ziy"
>b974		86 6c 64 61 2e 7a 69			ocB2:	.text 2*64+6, "lda.zi"
>b97b		86 6c 64 79 2e 7a 78			ocB4:	.text 2*64+6, "ldy.zx"
>b982		86 6c 64 61 2e 7a 78			ocB5:	.text 2*64+6, "lda.zx"
>b989		86 6c 64 78 2e 7a 79			ocB6:	.text 2*64+6, "ldx.zy"
>b990		86 73 6d 62 33 2e 7a			ocB7:	.text 2*64+6, "smb3.z"
>b997		43 63 6c 76				ocB8:	.text 1*64+3, "clv"
>b99b		c5 6c 64 61 2e 79			ocB9:	.text 3*64+5, "lda.y"
>b9a1		43 74 73 78				ocBA:	.text 1*64+3, "tsx"
>b9a5		c5 6c 64 79 2e 78			ocBC:	.text 3*64+5, "ldy.x"
>b9ab		c5 6c 64 61 2e 78			ocBD:	.text 3*64+5, "lda.x"
>b9b1		c5 6c 64 78 2e 79			ocBE:	.text 3*64+5, "ldx.y"
>b9b7		c4 62 62 73 34				ocBF:	.text 3*64+4, "bbs4"
>b9bc		85 63 70 79 2e 23			ocC0:	.text 2*64+5, "cpy.#"
>b9c2		87 63 6d 70 2e 7a 78 69			ocC1:	.text 2*64+7, "cmp.zxi"
>b9ca		85 63 70 79 2e 7a			ocC4:	.text 2*64+5, "cpy.z"
>b9d0		85 63 6d 70 2e 7a			ocC5:	.text 2*64+5, "cmp.z"
>b9d6		85 64 65 63 2e 7a			ocC6:	.text 2*64+5, "dec.z"
>b9dc		86 73 6d 62 34 2e 7a			ocC7:	.text 2*64+6, "smb4.z"
>b9e3		43 69 6e 79				ocC8:	.text 1*64+3, "iny"
>b9e7		85 63 6d 70 2e 23			ocC9:	.text 2*64+5, "cmp.#"
>b9ed		43 64 65 78				ocCA:	.text 1*64+3, "dex"
>b9f1		c3 63 70 79				ocCC:	.text 3*64+3, "cpy"
>b9f5		c3 63 6d 70				ocCD:	.text 3*64+3, "cmp"
>b9f9		c3 64 65 63				ocCE:	.text 3*64+3, "dec"
>b9fd		c4 62 62 73 34				ocCF:	.text 3*64+4, "bbs4"
>ba02		83 62 6e 65				ocD0:	.text 2*64+3, "bne"
>ba06		87 63 6d 70 2e 7a 69 79			ocD1:	.text 2*64+7, "cmp.ziy"
>ba0e		86 63 6d 70 2e 7a 69			ocD2:	.text 2*64+6, "cmp.zi"
>ba15		86 63 6d 70 2e 7a 78			ocD5:	.text 2*64+6, "cmp.zx"
>ba1c		86 64 65 63 2e 7a 78			ocD6:	.text 2*64+6, "dec.zx"
>ba23		86 73 6d 62 35 2e 7a			ocD7:	.text 2*64+6, "smb5.z"
>ba2a		43 63 6c 64				ocD8:	.text 1*64+3, "cld"
>ba2e		c5 63 6d 70 2e 79			ocD9:	.text 3*64+5, "cmp.y"
>ba34		43 70 68 78				ocDA:	.text 1*64+3, "phx"
>ba38		c5 63 6d 70 2e 78			ocDD:	.text 3*64+5, "cmp.x"
>ba3e		c5 64 65 63 2e 78			ocDE:	.text 3*64+5, "dec.x"
>ba44		c4 62 62 73 35				ocDF:	.text 3*64+4, "bbs5"
>ba49		85 63 70 78 2e 23			ocE0:	.text 2*64+5, "cpx.#"
>ba4f		87 73 62 63 2e 7a 78 69			ocE1:	.text 2*64+7, "sbc.zxi"
>ba57		85 63 70 78 2e 7a			ocE4:	.text 2*64+5, "cpx.z"
>ba5d		85 73 62 63 2e 7a			ocE5:	.text 2*64+5, "sbc.z"
>ba63		85 69 6e 63 2e 7a			ocE6:	.text 2*64+5, "inc.z"
>ba69		86 73 6d 62 36 2e 7a			ocE7:	.text 2*64+6, "smb6.z"
>ba70		43 69 6e 78				ocE8:	.text 1*64+3, "inx"
>ba74		85 73 62 63 2e 23			ocE9:	.text 2*64+5, "sbc.#"
>ba7a		43 6e 6f 70				ocEA:	.text 1*64+3, "nop"
>ba7e		c3 63 70 78				ocEC:	.text 3*64+3, "cpx"
>ba82		c3 73 62 63				ocED:	.text 3*64+3, "sbc"
>ba86		c3 69 6e 63				ocEE:	.text 3*64+3, "inc"
>ba8a		c4 62 62 73 36				ocEF:	.text 3*64+4, "bbs6"
>ba8f		83 62 65 71				ocF0:	.text 2*64+3, "beq"
>ba93		87 73 62 63 2e 7a 69 79			ocF1:	.text 2*64+7, "sbc.ziy"
>ba9b		86 73 62 63 2e 7a 69			ocF2:	.text 2*64+6, "sbc.zi"
>baa2		86 73 62 63 2e 7a 78			ocF5:	.text 2*64+6, "sbc.zx"
>baa9		86 69 6e 63 2e 7a 78			ocF6:	.text 2*64+6, "inc.zx"
>bab0		86 73 6d 62 37 2e 7a			ocF7:	.text 2*64+6, "smb7.z"
>bab7		43 73 65 64				ocF8:	.text 1*64+3, "sed"
>babb		c5 73 62 63 2e 79			ocF9:	.text 3*64+5, "sbc.y"
>bac1		43 70 6c 78				ocFA:	.text 1*64+3, "plx"
>bac5		c5 73 62 63 2e 78			ocFD:	.text 3*64+5, "sbc.x"
>bacb		c5 69 6e 63 2e 78			ocFE:	.text 3*64+5, "inc.x"
>bad1		c4 62 62 73 37				ocFF:	.text 3*64+4, "bbs7"
>bad6		01 3f					oc__:	.text 1, "?"

;******  Return to file: platform/../taliforth.asm

.bad8						forth_words_start:
>bad8		20 63 72 20 2e 28 20 54		.binary "forth_words.asc"
>bae0		61 6c 69 20 46 6f 72 74 68 20 32 20 66 6f 72 20
>baf0		74 68 65 20 36 35 63 30 32 29 20 63 72 20 2e 28
>bb00		20 56 65 72 73 69 6f 6e 20 31 2e 31 20 30 36 2e
>bb10		20 41 70 72 20 32 30 32 34 20 29 20 63 72 20 2e
>bb20		28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31 34
>bb30		2d 32 30 32 34 20 53 63 6f 74 20 57 2e 20 53 74
>bb40		65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f 6c
>bb50		77 65 6c 6c 2c 20 50 61 74 72 69 63 6b 20 53 75
>bb60		72 72 79 29 20 63 72 20 2e 28 20 54 61 6c 69 20
>bb70		46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20 77 69
>bb80		74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20 4e 4f
>bb90		20 57 41 52 52 41 4e 54 59 29 20 63 72 20 2e 28
>bba0		20 54 79 70 65 20 27 62 79 65 27 20 74 6f 20 65
>bbb0		78 69 74 29 20 63 72 20
.bbb8						forth_words_end:
.bbb8						user_words_start:
>bbb8		20 20				.binary "user_words.asc"
.bbba						user_words_end:

;******  Processing file: platform/../words/headers.asm

.bbba						dictionary_start:
.bbba						nt_drop:
>bbba		04 10				        .byte 4, UF
>bbbc		c6 bb 9a 86 9f 86		        .word nt_dup, xt_drop, z_drop
>bbc2		64 72 6f 70			        .text "drop"
.bbc6						nt_dup:
>bbc6		03 10				        .byte 3, UF
>bbc8		d1 bb a0 86 ad 86		        .word nt_swap, xt_dup, z_dup
>bbce		64 75 70			        .text "dup"
.bbd1						nt_swap:
>bbd1		04 10				        .byte 4, UF
>bbd3		dd bb 34 92 47 92		        .word nt_store, xt_swap, z_swap
>bbd9		73 77 61 70			        .text "swap"
.bbdd						nt_store:
>bbdd		01 10				        .byte 1, UF
>bbdf		e6 bb 1e 92 33 92		        .word nt_fetch, xt_store, z_store
>bbe5		21				        .text "!"
.bbe6						nt_fetch:
>bbe6		01 10				        .byte 1, UF
>bbe8		ef bb 1a 88 2c 88		        .word nt_over, xt_fetch, z_fetch
>bbee		40				        .text "@"
.bbef						nt_over:
>bbef		04 10				        .byte 4, UF
>bbf1		fb bb 11 8d 1e 8d		        .word nt_to_r, xt_over, z_over
>bbf7		6f 76 65 72			        .text "over"
.bbfb						nt_to_r:
>bbfb		02 11				        .byte 2, CO+UF ; native is special case
>bbfd		05 bc 72 93 85 93		        .word nt_r_from, xt_to_r, z_to_r
>bc03		3e 72				        .text ">r"
.bc05						nt_r_from:
>bc05		02 01				        .byte 2, CO    ; native is special case
>bc07		0f bc fa 8e 0a 8f		        .word nt_r_fetch, xt_r_from, z_r_from
>bc0d		72 3e				        .text "r>"
.bc0f						nt_r_fetch:
>bc0f		02 01				        .byte 2, CO    ; native is special case
>bc11		19 bc e5 8e f9 8e		        .word nt_nip, xt_r_fetch, z_r_fetch
>bc17		72 40				        .text "r@"
.bc19						nt_nip:
>bc19		03 10				        .byte 3, UF
>bc1b		24 bc 42 8c 4f 8c		        .word nt_rot, xt_nip, z_nip
>bc21		6e 69 70			        .text "nip"
.bc24						nt_rot:
>bc24		03 10				        .byte 3, UF
>bc26		2f bc 97 8f b2 8f		        .word nt_not_rote, xt_rot, z_rot
>bc2c		72 6f 74			        .text "rot"
.bc2f						nt_not_rote:
>bc2f		04 10				        .byte 4, UF
>bc31		3b bc 8c 9c a7 9c		        .word nt_tuck, xt_not_rote, z_not_rote
>bc37		2d 72 6f 74			        .text "-rot"
.bc3b						nt_tuck:
>bc3b		04 10				        .byte 4, UF
>bc3d		47 bc 8f 93 a8 93		        .word nt_comma, xt_tuck, z_tuck
>bc43		74 75 63 6b			        .text "tuck"
.bc47						nt_comma:
>bc47		01 10				        .byte 1, UF
>bc49		50 bc cd 83 db 83		        .word nt_c_fetch, xt_comma, z_comma
>bc4f		2c				        .text ","
.bc50						nt_c_fetch:
>bc50		02 10				        .byte 2, UF
>bc52		5a bc 2d 83 36 83		        .word nt_c_store, xt_c_fetch, z_c_fetch
>bc58		63 40				        .text "c@"
.bc5a						nt_c_store:
>bc5a		02 10				        .byte 2, UF
>bc5c		64 bc 37 83 42 83		        .word nt_plus_store, xt_c_store, z_c_store
>bc62		63 21				        .text "c!"
.bc64						nt_plus_store:
>bc64		02 10				        .byte 2, UF
>bc66		6e bc 72 8e 91 8e		        .word nt_zero, xt_plus_store, z_plus_store
>bc6c		2b 21				        .text "+!"
.bc6e						nt_zero:
>bc6e		01 00				        .byte 1, 0
>bc70		77 bc 08 9e 0e 9e		        .word nt_one, xt_zero, z_zero
>bc76		30				        .text "0"
.bc77						nt_one:
>bc77		01 00				        .byte 1, 0
>bc79		80 bc a2 9d aa 9d		        .word nt_two, xt_one, z_one
>bc7f		31				        .text "1"
.bc80						nt_two:
>bc80		01 00				        .byte 1, 0
>bc82		89 bc d3 9d db 9d		        .word nt_execute, xt_two, z_two
>bc88		32				        .text "2"
.bc89						nt_execute:
>bc89		07 10				        .byte 7, UF
>bc8b		98 bc 05 88 0b 88		        .word nt_emit, xt_execute, z_execute
>bc91		65 78 65 63 75 74 65		        .text "execute"
.bc98						nt_emit:
>bc98		04 18				        .byte 4, NN+UF
>bc9a		a4 bc be 86 c8 86		        .word nt_type, xt_emit, z_emit
>bca0		65 6d 69 74			        .text "emit"
.bca4						nt_type:
>bca4		04 10				        .byte 4, UF
>bca6		b0 bc bb 94 e5 94		        .word nt_dot, xt_type, z_type
>bcac		74 79 70 65			        .text "type"
.bcb0						nt_dot:
>bcb0		01 10				        .byte 1, UF
>bcb2		b9 bc 30 86 51 86		        .word nt_u_dot, xt_dot, z_dot
>bcb8		2e				        .text "."
.bcb9						nt_u_dot:
>bcb9		02 10				        .byte 2, UF
>bcbb		c3 bc e6 94 f1 94		        .word nt_u_dot_r, xt_u_dot, z_u_dot
>bcc1		75 2e				        .text "u."
.bcc3						nt_u_dot_r:
>bcc3		03 10				        .byte 3, UF
>bcc5		ce bc f2 94 13 95		        .word nt_dot_r, xt_u_dot_r, z_u_dot_r
>bccb		75 2e 72			        .text "u.r"
.bcce						nt_dot_r:
>bcce		02 10				        .byte 2, UF
>bcd0		d8 bc 6c 86 99 86		        .word nt_d_dot, xt_dot_r, z_dot_r
>bcd6		2e 72				        .text ".r"
.bcd8						nt_d_dot:
>bcd8		02 10				        .byte 2, UF
>bcda		e2 bc 91 9e af 9e		        .word nt_d_dot_r, xt_d_dot, z_d_dot
>bce0		64 2e				        .text "d."
.bce2						nt_d_dot_r:
>bce2		03 10				        .byte 3, UF
>bce4		ed bc b0 9e da 9e		        .word nt_m_star_slash, xt_d_dot_r, z_d_dot_r
>bcea		64 2e 72			        .text "d.r"
.bced						nt_m_star_slash:
>bced		03 10				        .byte 3, UF
>bcef		f8 bc db 9e 41 9f		        .word nt_ud_dot, xt_m_star_slash, z_m_star_slash
>bcf5		6d 2a 2f			        .text "m*/"
.bcf8						nt_ud_dot:
>bcf8		03 10				        .byte 3, UF
>bcfa		03 bd 8e 9f a0 9f		        .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
>bd00		75 64 2e			        .text "ud."
.bd03						nt_ud_dot_r:
>bd03		04 10				        .byte 4, UF
>bd05		0f bd a1 9f bf 9f		        .word nt_question, xt_ud_dot_r, z_ud_dot_r
>bd0b		75 64 2e 72			        .text "ud.r"
.bd0f						nt_question:
>bd0f		01 00				        .byte 1, 0
>bd11		18 bd 28 99 2e 99		        .word nt_false, xt_question, z_question
>bd17		3f				        .text "?"
.bd18						nt_false:
>bd18		05 00				        .byte 5, 0
>bd1a		25 bd 08 9e 0e 9e		        .word nt_true, xt_false, z_false
>bd20		66 61 6c 73 65			        .text "false"
.bd25						nt_true:
>bd25		04 00				        .byte 4, 0
>bd27		31 bd 86 93 8e 93		        .word nt_space, xt_true, z_true
>bd2d		74 72 75 65			        .text "true"
.bd31						nt_space:
>bd31		05 00				        .byte 5, 0
>bd33		3e bd d1 91 d6 91		        .word nt_two_dup, xt_space, z_space
>bd39		73 70 61 63 65			        .text "space"
.bd3e						nt_two_dup:
>bd3e		04 10				        .byte 4, UF
>bd40		4a bd b1 93 c8 93		        .word nt_question_dup, xt_two_dup, z_two_dup
>bd46		32 64 75 70			        .text "2dup"
.bd4a						nt_question_dup:
>bd4a		04 10				        .byte 4, UF
>bd4c		56 bd d1 8e e4 8e		        .word nt_plus, xt_question_dup, z_question_dup
>bd52		3f 64 75 70			        .text "?dup"
.bd56						nt_plus:
>bd56		01 10				        .byte 1, UF
>bd58		5f bd 5f 8e 71 8e		        .word nt_minus, xt_plus, z_plus
>bd5e		2b				        .text "+"
.bd5f						nt_minus:
>bd5f		01 10				        .byte 1, UF
>bd61		68 bd f6 8b 08 8c		        .word nt_one_minus, xt_minus, z_minus
>bd67		2d				        .text "-"
.bd68						nt_one_minus:
>bd68		02 10				        .byte 2, UF
>bd6a		72 bd e9 8c f4 8c		        .word nt_one_plus, xt_one_minus, z_one_minus
>bd70		31 2d				        .text "1-"
.bd72						nt_one_plus:
>bd72		02 10				        .byte 2, UF
>bd74		7c bd f5 8c fe 8c		        .word nt_two_star, xt_one_plus, z_one_plus
>bd7a		31 2b				        .text "1+"
.bd7c						nt_two_star:
>bd7c		02 10				        .byte 2, UF
>bd7e		86 bd 49 94 50 94		        .word nt_two_slash, xt_two_star, z_two_star
>bd84		32 2a				        .text "2*"
.bd86						nt_two_slash:
>bd86		02 10				        .byte 2, UF
>bd88		90 bd 3e 94 48 94		        .word nt_abs, xt_two_slash, z_two_slash
>bd8e		32 2f				        .text "2/"
.bd90						nt_abs:
>bd90		03 10				        .byte 3, UF
>bd92		9b bd cf 80 e3 80		        .word nt_dabs, xt_abs, z_abs
>bd98		61 62 73			        .text "abs"
.bd9b						nt_dabs:
>bd9b		04 10				        .byte 4, UF
>bd9d		a7 bd 57 9e 75 9e		        .word nt_and, xt_dabs, z_dabs
>bda3		64 61 62 73			        .text "dabs"
.bda7						nt_and:
>bda7		03 10				        .byte 3, UF
>bda9		b2 bd 90 82 a1 82		        .word nt_or, xt_and, z_and
>bdaf		61 6e 64			        .text "and"
.bdb2						nt_or:
>bdb2		02 10				        .byte 2, UF
>bdb4		bc bd ff 8c 10 8d		        .word nt_xor, xt_or, z_or
>bdba		6f 72				        .text "or"
.bdbc						nt_xor:
>bdbc		03 10				        .byte 3, UF
>bdbe		c7 bd 66 96 77 96		        .word nt_rshift, xt_xor, z_xor
>bdc4		78 6f 72			        .text "xor"
.bdc7						nt_rshift:
>bdc7		06 10				        .byte 6, UF
>bdc9		d5 bd b3 8f c6 8f		        .word nt_lshift, xt_rshift, z_rshift
>bdcf		72 73 68 69 66 74		        .text "rshift"
.bdd5						nt_lshift:
>bdd5		06 10				        .byte 6, UF
>bdd7		e3 bd 1f 8b 32 8b		        .word nt_pick, xt_lshift, z_lshift
>bddd		6c 73 68 69 66 74		        .text "lshift"
.bde3						nt_pick:
>bde3		04 00				        .byte 4, 0    ; underflow check is complicated, leave off here
>bde5		ef bd 4e 8e 5e 8e		        .word nt_char, xt_pick, z_pick
>bdeb		70 69 63 6b			        .text "pick"
.bdef						nt_char:
>bdef		04 00				        .byte 4, 0
>bdf1		fb bd 53 83 69 83		        .word nt_bracket_char, xt_char, z_char
>bdf7		63 68 61 72			        .text "char"
.bdfb						nt_bracket_char:
>bdfb		06 05				        .byte 6, CO+IM
>bdfd		09 be 0d 83 13 83		        .word nt_char_plus, xt_bracket_char, z_bracket_char
>be03		5b 63 68 61 72 5d		        .text "[char]"
.be09						nt_char_plus:
>be09		05 00				        .byte 5, 0
>be0b		16 be f5 8c fe 8c		        .word nt_chars, xt_char_plus, z_char_plus ; same as 1+
>be11		63 68 61 72 2b			        .text "char+"
.be16						nt_chars:
>be16		05 10				        .byte 5, UF     ; deleted during compile
>be18		23 be 6a 83 6d 83		        .word nt_cells, xt_chars, z_chars
>be1e		63 68 61 72 73			        .text "chars"
.be23						nt_cells:
>be23		05 00				        .byte 5, 0
>be25		30 be 49 94 50 94		        .word nt_cell_plus, xt_cells, z_cells  ; same as 2*
>be2b		63 65 6c 6c 73			        .text "cells"
.be30						nt_cell_plus:
>be30		05 10				        .byte 5, UF
>be32		3d be 43 83 52 83		        .word nt_here, xt_cell_plus, z_cell_plus
>be38		63 65 6c 6c 2b			        .text "cell+"
.be3d						nt_here:
>be3d		04 00				        .byte 4, 0
>be3f		49 be 1b 89 25 89		        .word nt_equal, xt_here, z_here
>be45		68 65 72 65			        .text "here"
.be49						nt_equal:
>be49		01 10				        .byte 1, UF
>be4b		52 be 96 87 b1 87		        .word nt_not_equals, xt_equal, z_equal
>be51		3d				        .text "="
.be52						nt_not_equals:
>be52		02 10				        .byte 2, UF
>be54		5c be 50 8c 6d 8c		        .word nt_less_than, xt_not_equals, z_not_equals
>be5a		3c 3e				        .text "<>"
.be5c						nt_less_than:
>be5c		01 10				        .byte 1, UF
>be5e		65 be ef 89 03 8a		        .word nt_u_less_than, xt_less_than, z_less_than
>be64		3c				        .text "<"
.be65						nt_u_less_than:
>be65		02 10				        .byte 2, UF
>be67		6f be 2a 95 3f 95		        .word nt_u_greater_than, xt_u_less_than, z_u_less_than
>be6d		75 3c				        .text "u<"
.be6f						nt_u_greater_than:
>be6f		02 10				        .byte 2, UF
>be71		79 be 14 95 29 95		        .word nt_greater_than, xt_u_greater_than, z_u_greater_than
>be77		75 3e				        .text "u>"
.be79						nt_greater_than:
>be79		01 10				        .byte 1, UF
>be7b		82 be 06 89 1a 89		        .word nt_zero_equal, xt_greater_than, z_greater_than
>be81		3e				        .text ">"
.be82						nt_zero_equal:
>be82		02 10				        .byte 2, UF
>be84		8c be 78 96 89 96		        .word nt_zero_unequal, xt_zero_equal, z_zero_equal
>be8a		30 3d				        .text "0="
.be8c						nt_zero_unequal:
>be8c		03 10				        .byte 3, UF
>be8e		97 be ae 96 bd 96		        .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
>be94		30 3c 3e			        .text "0<>"
.be97						nt_zero_greater:
>be97		02 10				        .byte 2, UF
>be99		a1 be 8a 96 9d 96		        .word nt_zero_less, xt_zero_greater, z_zero_greater
>be9f		30 3e				        .text "0>"
.bea1						nt_zero_less:
>bea1		02 10				        .byte 2, UF
>bea3		ab be 9e 96 ad 96		        .word nt_min, xt_zero_less, z_zero_less
>bea9		30 3c				        .text "0<"
.beab						nt_min:
>beab		03 10				        .byte 3, UF
>bead		b6 be da 8b f5 8b		        .word nt_max, xt_min, z_min
>beb3		6d 69 6e			        .text "min"
.beb6						nt_max:
>beb6		03 10				        .byte 3, UF
>beb8		c1 be be 8b d9 8b		        .word nt_two_drop, xt_max, z_max
>bebe		6d 61 78			        .text "max"
.bec1						nt_two_drop:
>bec1		05 10				        .byte 5, UF
>bec3		ce be a9 93 b0 93		        .word nt_two_swap, xt_two_drop, z_two_drop
>bec9		32 64 72 6f 70			        .text "2drop"
.bece						nt_two_swap:
>bece		05 10				        .byte 5, UF
>bed0		db be 77 94 9a 94		        .word nt_two_over, xt_two_swap, z_two_swap
>bed6		32 73 77 61 70			        .text "2swap"
.bedb						nt_two_over:
>bedb		05 10				        .byte 5, UF
>bedd		e8 be eb 93 02 94		        .word nt_two_store, xt_two_over, z_two_over
>bee3		32 6f 76 65 72			        .text "2over"
.bee8						nt_two_store:
>bee8		02 10				        .byte 2, UF
>beea		f2 be 51 94 76 94		        .word nt_two_fetch, xt_two_store, z_two_store
>bef0		32 21				        .text "2!"
.bef2						nt_two_fetch:
>bef2		02 10				        .byte 2, UF
>bef4		fc be c9 93 ea 93		        .word nt_two_variable, xt_two_fetch, z_two_fetch
>befa		32 40				        .text "2@"
.befc						nt_two_variable:
>befc		09 00				        .byte 9, 0
>befe		0d bf 7f 9f 8d 9f		        .word nt_two_constant, xt_two_variable, z_two_variable
>bf04		32 76 61 72 69 61 62 6c		        .text "2variable"
>bf0c		65
.bf0d						nt_two_constant:
>bf0d		09 10				        .byte 9, UF
>bf0f		1e bf 42 9f 66 9f		        .word nt_two_literal, xt_two_constant, z_two_constant
>bf15		32 63 6f 6e 73 74 61 6e		        .text "2constant"
>bf1d		74
.bf1e						nt_two_literal:
>bf1e		08 14				        .byte 8, UF+IM
>bf20		2e bf 67 9f 7e 9f		        .word nt_two_r_fetch, xt_two_literal, z_two_literal
>bf26		32 6c 69 74 65 72 61 6c		        .text "2literal"
.bf2e						nt_two_r_fetch:
>bf2e		03 09				        .byte 3, CO+NN          ; native is special case, leave NN for now
>bf30		39 bf 03 94 20 94		        .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
>bf36		32 72 40			        .text "2r@"
.bf39						nt_two_r_from:
>bf39		03 01				        .byte 3, CO             ; native is special case
>bf3b		44 bf 21 94 3d 94		        .word nt_two_to_r, xt_two_r_from, z_two_r_from
>bf41		32 72 3e			        .text "2r>"
.bf44						nt_two_to_r:
>bf44		03 11				        .byte 3, CO+UF          ; native is special case
>bf46		4f bf 9b 94 ba 94		        .word nt_invert, xt_two_to_r, z_two_to_r
>bf4c		32 3e 72			        .text "2>r"
.bf4f						nt_invert:
>bf4f		06 10				        .byte 6, UF
>bf51		5d bf 64 89 73 89		        .word nt_negate, xt_invert, z_invert
>bf57		69 6e 76 65 72 74		        .text "invert"
.bf5d						nt_negate:
>bf5d		06 10				        .byte 6, UF
>bf5f		6b bf 31 8c 41 8c		        .word nt_dnegate, xt_negate, z_negate
>bf65		6e 65 67 61 74 65		        .text "negate"
.bf6b						nt_dnegate:
>bf6b		07 10				        .byte 7, UF
>bf6d		7a bf 76 9e 90 9e		        .word nt_c_comma, xt_dnegate, z_dnegate
>bf73		64 6e 65 67 61 74 65		        .text "dnegate"
.bf7a						nt_c_comma:
>bf7a		02 10				        .byte 2, UF
>bf7c		84 bf 22 83 2c 83		        .word nt_bounds, xt_c_comma, z_c_comma
>bf82		63 2c				        .text "c,"
.bf84						nt_bounds:
>bf84		06 10				        .byte 6, UF
>bf86		92 bf 3a 9a 52 9a		        .word nt_spaces, xt_bounds, z_bounds
>bf8c		62 6f 75 6e 64 73		        .text "bounds"
.bf92						nt_spaces:
>bf92		06 10				        .byte 6, UF
>bf94		a0 bf d7 91 f0 91		        .word nt_bl, xt_spaces, z_spaces
>bf9a		73 70 61 63 65 73		        .text "spaces"
.bfa0						nt_bl:
>bfa0		02 00				        .byte 2, 0
>bfa2		aa bf 04 83 0c 83		        .word nt_minus_trailing, xt_bl, z_bl
>bfa8		62 6c				        .text "bl"
.bfaa						nt_minus_trailing:
>bfaa		09 10				        .byte 9, UF
>bfac		bb bf b4 a0 f0 a0		        .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
>bfb2		2d 74 72 61 69 6c 69 6e		        .text "-trailing"
>bfba		67
.bfbb						nt_minus_leading:
>bfbb		08 10				        .byte 8, UF
>bfbd		cb bf 9b a0 b3 a0		        .word nt_slash_string, xt_minus_leading, z_minus_leading
>bfc3		2d 6c 65 61 64 69 6e 67		        .text "-leading"
.bfcb						nt_slash_string:
>bfcb		07 10				        .byte 7, UF
>bfcd		da bf 90 a1 af a1		        .word nt_refill, xt_slash_string, z_slash_string
>bfd3		2f 73 74 72 69 6e 67		        .text "/string"
.bfda						nt_refill:
>bfda		06 00				        .byte 6, 0
>bfdc		e8 bf 48 8f 89 8f		        .word nt_accept, xt_refill, z_refill
>bfe2		72 65 66 69 6c 6c		        .text "refill"
.bfe8						nt_accept:
>bfe8		06 18				        .byte 6, UF+NN
>bfea		f6 bf e4 80 dc 81		        .word nt_input_to_r, xt_accept, z_accept
>bff0		61 63 63 65 70 74		        .text "accept"
.bff6						nt_input_to_r:
>bff6		07 08				        .byte 7, NN
>bff8		05 c0 a9 9b be 9b		        .word nt_r_to_input, xt_input_to_r, z_input_to_r
>bffe		69 6e 70 75 74 3e 72		        .text "input>r"
.c005						nt_r_to_input:
>c005		07 08				        .byte 7, NN
>c007		14 c0 b6 9d cd 9d		        .word nt_unused, xt_r_to_input, z_r_to_input
>c00d		72 3e 69 6e 70 75 74		        .text "r>input"
.c014						nt_unused:
>c014		06 00				        .byte 6, 0
>c016		22 c0 dc 95 eb 95		        .word nt_depth, xt_unused, z_unused
>c01c		75 6e 75 73 65 64		        .text "unused"
.c022						nt_depth:
>c022		05 00				        .byte 5, 0
>c024		2f c0 52 85 60 85		        .word nt_key, xt_depth, z_depth
>c02a		64 65 70 74 68			        .text "depth"
.c02f						nt_key:
>c02f		03 00				        .byte 3, 0
>c031		3a c0 a7 89 b0 89		        .word nt_keyq, xt_key, z_key
>c037		6b 65 79			        .text "key"
.c03a						nt_keyq:
>c03a		04 00				        .byte 4, 0
>c03c		46 c0 b4 89 c2 89		        .word nt_allot, xt_keyq, z_keyq
>c042		6b 65 79 3f			        .text "key?"
.c046						nt_allot:
>c046		05 10				        .byte 5, UF
>c048		53 c0 27 82 8f 82		        .word nt_create, xt_allot, z_allot
>c04e		61 6c 6c 6f 74			        .text "allot"
.c053						nt_create:
>c053		06 00				        .byte 6, 0
>c055		61 c0 40 84 09 85		        .word nt_does, xt_create, z_create
>c05b		63 72 65 61 74 65		        .text "create"
.c061						nt_does:
>c061		05 05				        .byte 5, CO+IM
>c063		6e c0 ef 85 fd 85		        .word nt_variable, xt_does, z_does
>c069		64 6f 65 73 3e			        .text "does>"
.c06e						nt_variable:
>c06e		08 00				        .byte 8, 0
>c070		7e c0 ec 95 04 96		        .word nt_constant, xt_variable, z_variable
>c076		76 61 72 69 61 62 6c 65		        .text "variable"
.c07e						nt_constant:
>c07e		08 10				        .byte 8, UF
>c080		8e c0 e8 83 25 84		        .word nt_value, xt_constant, z_constant
>c086		63 6f 6e 73 74 61 6e 74		        .text "constant"
.c08e						nt_value:
>c08e		05 10				        .byte 5, UF
>c090		9b c0 e8 83 25 84		        .word nt_to, xt_value, z_value          ; same code as CONSTANT
>c096		76 61 6c 75 65			        .text "value"
.c09b						nt_to:
>c09b		02 0c				        .byte 2, NN+IM
>c09d		a5 c0 68 92 a3 92		        .word nt_s_to_d, xt_to, z_to
>c0a3		74 6f				        .text "to"
.c0a5						nt_s_to_d:
>c0a5		03 10				        .byte 3, UF
>c0a7		b0 c0 e5 90 f6 90		        .word nt_d_to_s, xt_s_to_d, z_s_to_d
>c0ad		73 3e 64			        .text "s>d"
.c0b0						nt_d_to_s:
>c0b0		03 10				        .byte 3, UF
>c0b2		bb c0 51 9e 56 9e		        .word nt_d_minus, xt_d_to_s, z_d_to_s
>c0b8		64 3e 73			        .text "d>s"
.c0bb						nt_d_minus:
>c0bb		02 10				        .byte 2, UF
>c0bd		c5 c0 0f 9e 2f 9e		        .word nt_d_plus, xt_d_minus, z_d_minus
>c0c3		64 2d				        .text "d-"
.c0c5						nt_d_plus:
>c0c5		02 10				        .byte 2, UF
>c0c7		cf c0 30 9e 50 9e		        .word nt_erase, xt_d_plus, z_d_plus
>c0cd		64 2b				        .text "d+"
.c0cf						nt_erase:
>c0cf		05 00				        .byte 5, 0      ; underflow checked by FILL
>c0d1		dc c0 bc 87 04 88		        .word nt_blank, xt_erase, z_erase
>c0d7		65 72 61 73 65			        .text "erase"
.c0dc						nt_blank:
>c0dc		05 00				        .byte 5, 0     ; underflow checked by FILL
>c0de		e9 c0 b2 87 04 88		        .word nt_fill, xt_blank, z_blank
>c0e4		62 6c 61 6e 6b			        .text "blank"
.c0e9						nt_fill:
>c0e9		04 10				        .byte 4, UF
>c0eb		f5 c0 c2 87 04 88		        .word nt_find_name, xt_fill, z_fill
>c0f1		66 69 6c 6c			        .text "fill"
.c0f5						nt_find_name:
>c0f5		09 10				        .byte 9, UF
>c0f7		06 c1 fc 9a 3f 9b		        .word nt_tick, xt_find_name, z_find_name
>c0fd		66 69 6e 64 2d 6e 61 6d		        .text "find-name"
>c105		65
.c106						nt_tick:
>c106		01 00				        .byte 1, 0
>c108		0f c1 48 92 67 92		        .word nt_bracket_tick, xt_tick, z_tick
>c10e		27				        .text "'"
.c10f						nt_bracket_tick:
>c10f		03 05				        .byte 3, CO+IM
>c111		1a c1 14 83 1a 83		        .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
>c117		5b 27 5d			        .text "[']"
.c11a						nt_name_to_int:
>c11a		08 10				        .byte 8, UF
>c11c		2a c1 45 9c 61 9c		        .word nt_int_to_name, xt_name_to_int, z_name_to_int
>c122		6e 61 6d 65 3e 69 6e 74		        .text "name>int"
.c12a						nt_int_to_name:
>c12a		08 10				        .byte 8, UF
>c12c		3a c1 bf 9b 2f 9c		        .word nt_name_to_string, xt_int_to_name, z_int_to_name
>c132		69 6e 74 3e 6e 61 6d 65		        .text "int>name"
.c13a						nt_name_to_string:
>c13a		0b 10				        .byte 11, UF
>c13c		4d c1 62 9c 78 9c		        .word nt_to_body, xt_name_to_string, z_name_to_string
>c142		6e 61 6d 65 3e 73 74 72		        .text "name>string"
>c14a		69 6e 67
.c14d						nt_to_body:
>c14d		05 10				        .byte 5, UF
>c14f		5a c1 a4 92 c6 92		        .word nt_defer, xt_to_body, z_to_body
>c155		3e 62 6f 64 79			        .text ">body"
.c15a						nt_defer:
>c15a		05 00				        .byte 5, 0
>c15c		67 c1 11 85 43 85		        .word nt_latestxt, xt_defer, z_defer
>c162		64 65 66 65 72			        .text "defer"
.c167						nt_latestxt:
>c167		08 00				        .byte 8, 0
>c169		77 c1 3e 9c 44 9c		        .word nt_latestnt, xt_latestxt, z_latestxt
>c16f		6c 61 74 65 73 74 78 74		        .text "latestxt"
.c177						nt_latestnt:
>c177		08 00				        .byte 8, 0
>c179		87 c1 30 9c 3d 9c		        .word nt_parse_name, xt_latestnt, z_latestnt
>c17f		6c 61 74 65 73 74 6e 74		        .text "latestnt"
.c187						nt_parse_name:
>c187		0a 08				        .byte 10, NN
>c189		99 c1 5d 8d 4d 8e		        .word nt_parse, xt_parse_name, z_parse_name
>c18f		70 61 72 73 65 2d 6e 61		        .text "parse-name"
>c197		6d 65
.c199						nt_parse:
>c199		05 10				        .byte 5, UF
>c19b		a6 c1 b8 8d 4d 8e		        .word nt_execute_parsing, xt_parse, z_parse
>c1a1		70 61 72 73 65			        .text "parse"
.c1a6						nt_execute_parsing:
>c1a6		0f 10				        .byte 15, UF
>c1a8		bd c1 d5 9a fb 9a		        .word nt_source, xt_execute_parsing, z_execute_parsing
>c1ae		65 78 65 63 75 74 65 2d		        .text "execute-parsing"
>c1b6		70 61 72 73 69 6e 67
.c1bd						nt_source:
>c1bd		06 00				        .byte 6, 0
>c1bf		cb c1 b1 91 c5 91		        .word nt_source_id, xt_source, z_source
>c1c5		73 6f 75 72 63 65		        .text "source"
.c1cb						nt_source_id:
>c1cb		09 00				        .byte 9, 0
>c1cd		dc c1 c6 91 d0 91		        .word nt_colon, xt_source_id, z_source_id
>c1d3		73 6f 75 72 63 65 2d 69		        .text "source-id"
>c1db		64
.c1dc						nt_colon:
>c1dc		01 00				        .byte 1, 0
>c1de		e5 c1 6e 83 b0 83		        .word nt_semicolon, xt_colon, z_colon
>c1e4		3a				        .text ":"
.c1e5						nt_semicolon:
>c1e5		01 05				        .byte 1, CO+IM
>c1e7		ee c1 f7 90 55 91		        .word nt_colon_noname, xt_semicolon, z_semicolon
>c1ed		3b				        .text ";"
.c1ee						nt_colon_noname:
>c1ee		07 00				        .byte 7, 0
>c1f0		fd c1 b1 83 cc 83		        .word nt_compile_comma, xt_colon_noname, z_colon_noname
>c1f6		3a 6e 6f 6e 61 6d 65		        .text ":noname"
.c1fd						nt_compile_comma:
>c1fd		08 18				        .byte 8, UF+NN
>c1ff		0d c2 be 96 86 97		        .word nt_left_bracket, xt_compile_comma, z_compile_comma
>c205		63 6f 6d 70 69 6c 65 2c		        .text "compile,"
.c20d						nt_left_bracket:
>c20d		01 05				        .byte 1, IM+CO
>c20f		16 c2 dc 89 e0 89		        .word nt_right_bracket, xt_left_bracket, z_left_bracket
>c215		5b				        .text "["
.c216						nt_right_bracket:
>c216		01 04				        .byte 1, IM
>c218		1f c2 90 8f 96 8f		        .word nt_literal, xt_right_bracket, z_right_bracket
>c21e		5d				        .text "]"
.c21f						nt_literal:
>c21f		07 15				        .byte 7, IM+CO+UF
>c221		2e c2 04 8a 41 8a		        .word nt_sliteral, xt_literal, z_literal
>c227		6c 69 74 65 72 61 6c		        .text "literal"
.c22e						nt_sliteral:
>c22e		08 15				        .byte 8, CO+IM+UF
>c230		3e c2 b0 a1 f3 a1		        .word nt_dot_quote, xt_sliteral, z_sliteral
>c236		73 6c 69 74 65 72 61 6c		        .text "sliteral"
.c23e						nt_dot_quote:
>c23e		02 05				        .byte 2, CO+IM
>c240		48 c2 61 86 6b 86		        .word nt_s_quote, xt_dot_quote, z_dot_quote
>c246		2e 22				        .text ".", $22
.c248						nt_s_quote:
>c248		02 0c				        .byte 2, IM+NN
>c24a		52 c2 e0 8f e4 90		        .word nt_s_backslash_quote, xt_s_quote, z_s_quote
>c250		73 22				        .text "s", $22
.c252						nt_s_backslash_quote:
>c252		03 04				        .byte 3, IM
>c254		5d c2 c7 8f d0 8f		        .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
>c25a		73 5c 22			        .text "s", $5C, $22
.c25d						nt_postpone:
>c25d		08 05				        .byte 8, IM+CO
>c25f		6d c2 92 8e d0 8e		        .word nt_immediate, xt_postpone, z_postpone
>c265		70 6f 73 74 70 6f 6e 65		        .text "postpone"
.c26d						nt_immediate:
>c26d		09 00				        .byte 9, 0
>c26f		7e c2 58 89 63 89		        .word nt_compile_only, xt_immediate, z_immediate
>c275		69 6d 6d 65 64 69 61 74		        .text "immediate"
>c27d		65
.c27e						nt_compile_only:
>c27e		0c 00				        .byte 12, 0
>c280		92 c2 dc 83 e7 83		        .word nt_never_native, xt_compile_only, z_compile_only
>c286		63 6f 6d 70 69 6c 65 2d		        .text "compile-only"
>c28e		6f 6e 6c 79
.c292						nt_never_native:
>c292		0c 00				        .byte 12, 0
>c294		a6 c2 7e 9c 8b 9c		        .word nt_always_native, xt_never_native, z_never_native
>c29a		6e 65 76 65 72 2d 6e 61		        .text "never-native"
>c2a2		74 69 76 65
.c2a6						nt_always_native:
>c2a6		0d 00				        .byte 13, 0
>c2a8		bb c2 26 9a 33 9a		        .word nt_allow_native, xt_always_native, z_always_native
>c2ae		61 6c 77 61 79 73 2d 6e		        .text "always-native"
>c2b6		61 74 69 76 65
.c2bb						nt_allow_native:
>c2bb		0c 00				        .byte 12, 0
>c2bd		cf c2 1a 9a 25 9a		        .word nt_nc_limit, xt_allow_native, z_allow_native
>c2c3		61 6c 6c 6f 77 2d 6e 61		        .text "allow-native"
>c2cb		74 69 76 65
.c2cf						nt_nc_limit:
>c2cf		08 08				        .byte 8, NN
>c2d1		df c2 79 9c 7e 9c		        .word nt_strip_underflow, xt_nc_limit, z_nc_limit
>c2d7		6e 63 2d 6c 69 6d 69 74		        .text "nc-limit"
.c2df						nt_strip_underflow:
>c2df		0f 08				        .byte 15, NN
>c2e1		f6 c2 ce 9d d3 9d		        .word nt_abort, xt_strip_underflow, z_strip_underflow
>c2e7		73 74 72 69 70 2d 75 6e		        .text "strip-underflow"
>c2ef		64 65 72 66 6c 6f 77
.c2f6						nt_abort:
>c2f6		05 00				        .byte 5, 0
>c2f8		03 c3 5e 80 af 80		        .word nt_abort_quote, xt_abort, z_abort
>c2fe		61 62 6f 72 74			        .text "abort"
.c303						nt_abort_quote:
>c303		06 0d				        .byte 6, CO+IM+NN
>c305		11 c3 af 80 b9 80		        .word nt_do, xt_abort_quote, z_abort_quote
>c30b		61 62 6f 72 74 22		        .text "abort", $22
.c311						nt_do:
>c311		02 0d				        .byte 2, CO+IM+NN
>c313		1b c3 8b 85 a4 85		        .word nt_question_do, xt_do, z_do
>c319		64 6f				        .text "do"
.c31b						nt_question_do:
>c31b		03 0d				        .byte 3, CO+IM+NN
>c31d		26 c3 61 85 a4 85		        .word nt_i, xt_question_do, z_question_do
>c323		3f 64 6f			        .text "?do"
.c326						nt_i:
>c326		01 01				        .byte 1, CO
>c328		2f c3 3f 89 53 89		        .word nt_j, xt_i, z_i
>c32e		69				        .text "i"
.c32f						nt_j:
>c32f		01 01				        .byte 1, CO
>c331		38 c3 8d 89 a6 89		        .word nt_loop, xt_j, z_j
>c337		6a				        .text "j"
.c338						nt_loop:
>c338		04 05				        .byte 4, CO+IM
>c33a		44 c3 6b 8a e3 8a		        .word nt_plus_loop, xt_loop, z_loop
>c340		6c 6f 6f 70			        .text "loop"
.c344						nt_plus_loop:
>c344		05 05				        .byte 5, CO+IM
>c346		51 c3 7f 8a e3 8a		        .word nt_exit, xt_plus_loop, z_plus_loop
>c34c		2b 6c 6f 6f 70			        .text "+loop"
.c351						nt_exit:
>c351		04 03				        .byte 4, AN+CO
>c353		5d c3 19 88 1a 88		        .word nt_unloop, xt_exit, z_exit
>c359		65 78 69 74			        .text "exit"
.c35d						nt_unloop:
>c35d		06 01				        .byte 6, CO
>c35f		6b c3 c8 95 d7 95		        .word nt_leave, xt_unloop, z_unloop
>c365		75 6e 6c 6f 6f 70		        .text "unloop"
.c36b						nt_leave:
>c36b		05 05				        .byte 5, CO+IM
>c36d		78 c3 c6 89 db 89		        .word nt_recurse, xt_leave, z_leave
>c373		6c 65 61 76 65			        .text "leave"
.c378						nt_recurse:
>c378		07 0d				        .byte 7, CO+IM+NN
>c37a		87 c3 0b 8f 47 8f		        .word nt_quit, xt_recurse, z_recurse
>c380		72 65 63 75 72 73 65		        .text "recurse"
.c387						nt_quit:
>c387		04 00				        .byte 4, 0
>c389		93 c3 60 80 af 80		        .word nt_begin, xt_quit, z_quit
>c38f		71 75 69 74			        .text "quit"
.c393						nt_begin:
>c393		05 05				        .byte 5, CO+IM
>c395		a0 c3 1b 89 25 89		        .word nt_again, xt_begin, z_begin
>c39b		62 65 67 69 6e			        .text "begin"
.c3a0						nt_again:
>c3a0		05 15				        .byte 5, CO+IM+UF
>c3a2		ad c3 1f 82 25 82		        .word nt_state, xt_again, z_again
>c3a8		61 67 61 69 6e			        .text "again"
.c3ad						nt_state:
>c3ad		05 00				        .byte 5, 0
>c3af		ba c3 13 92 1d 92		        .word nt_evaluate, xt_state, z_state
>c3b5		73 74 61 74 65			        .text "state"
.c3ba						nt_evaluate:
>c3ba		08 10				        .byte 8, UF
>c3bc		ca c3 b2 88 05 89		        .word nt_base, xt_evaluate, z_evaluate
>c3c2		65 76 61 6c 75 61 74 65		        .text "evaluate"
.c3ca						nt_base:
>c3ca		04 00				        .byte 4, 0
>c3cc		d6 c3 fb 82 03 83		        .word nt_digit_question, xt_base, z_base
>c3d2		62 61 73 65			        .text "base"
.c3d6						nt_digit_question:
>c3d6		06 10				        .byte 6, UF
>c3d8		e4 c3 a0 9a d4 9a		        .word nt_number, xt_digit_question, z_digit_question
>c3de		64 69 67 69 74 3f		        .text "digit?"
.c3e4						nt_number:
>c3e4		06 10				        .byte 6, UF
>c3e6		f2 c3 a8 9c a1 9d		        .word nt_to_number, xt_number, z_number
>c3ec		6e 75 6d 62 65 72		        .text "number"
.c3f2						nt_to_number:
>c3f2		07 10				        .byte 7, UF
>c3f4		01 c4 d2 92 71 93		        .word nt_hex, xt_to_number, z_to_number
>c3fa		3e 6e 75 6d 62 65 72		        .text ">number"
.c401						nt_hex:
>c401		03 00				        .byte 3, 0
>c403		0c c4 26 89 2c 89		        .word nt_decimal, xt_hex, z_hex
>c409		68 65 78			        .text "hex"
.c40c						nt_decimal:
>c40c		07 00				        .byte 7, 0
>c40e		1b c4 0a 85 10 85		        .word nt_count, xt_decimal, z_decimal
>c414		64 65 63 69 6d 61 6c		        .text "decimal"
.c41b						nt_count:
>c41b		05 10				        .byte 5, UF
>c41d		28 c4 26 84 39 84		        .word nt_m_star, xt_count, z_count
>c423		63 6f 75 6e 74			        .text "count"
.c428						nt_m_star:
>c428		02 10				        .byte 2, UF
>c42a		32 c4 33 8b 4d 8b		        .word nt_um_star, xt_m_star, z_m_star
>c430		6d 2a				        .text "m*"
.c432						nt_um_star:
>c432		03 10				        .byte 3, UF
>c434		3d c4 82 95 c7 95		        .word nt_star, xt_um_star, z_um_star
>c43a		75 6d 2a			        .text "um*"
.c43d						nt_star:
>c43d		01 10				        .byte 1, UF
>c43f		46 c4 f1 91 f9 91		        .word nt_um_slash_mod, xt_star, z_star
>c445		2a				        .text "*"
.c446						nt_um_slash_mod:
>c446		06 10				        .byte 6, UF
>c448		54 c4 40 95 81 95		        .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
>c44e		75 6d 2f 6d 6f 64		        .text "um/mod"
.c454						nt_sm_slash_rem:
>c454		06 10				        .byte 6, UF
>c456		62 c4 88 91 b0 91		        .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
>c45c		73 6d 2f 72 65 6d		        .text "sm/rem"
.c462						nt_fm_slash_mod:
>c462		06 10				        .byte 6, UF
>c464		70 c4 75 88 ab 88		        .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
>c46a		66 6d 2f 6d 6f 64		        .text "fm/mod"
.c470						nt_slash:
>c470		01 10				        .byte 1, UF
>c472		79 c4 6b 91 87 91		        .word nt_slash_mod, xt_slash, z_slash
>c478		2f				        .text "/"
.c479						nt_slash_mod:
>c479		04 10				        .byte 4, UF
>c47b		85 c4 70 91 87 91		        .word nt_mod, xt_slash_mod, z_slash_mod
>c481		2f 6d 6f 64			        .text "/mod"
.c485						nt_mod:
>c485		03 10				        .byte 3, UF
>c487		90 c4 09 8c 11 8c		        .word nt_star_slash_mod, xt_mod, z_mod
>c48d		6d 6f 64			        .text "mod"
.c490						nt_star_slash_mod:
>c490		05 10				        .byte 5, UF
>c492		9d c4 03 92 12 92		        .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
>c498		2a 2f 6d 6f 64			        .text "*/mod"
.c49d						nt_star_slash:
>c49d		02 10				        .byte 2, UF
>c49f		a7 c4 fa 91 02 92		        .word nt_backslash, xt_star_slash, z_star_slash
>c4a5		2a 2f				        .text "*/"
.c4a7						nt_backslash:
>c4a7		01 04				        .byte 1, IM
>c4a9		b0 c4 d0 82 fa 82		        .word nt_move, xt_backslash, z_backslash
>c4af		5c				        .byte '\'
.c4b0						nt_move:
>c4b0		04 18				        .byte 4, NN+UF
>c4b2		bc c4 12 8c 30 8c		        .word nt_cmove_up, xt_move, z_move
>c4b8		6d 6f 76 65			        .text "move"
.c4bc						nt_cmove_up:
>c4bc		06 10				        .byte 6, UF
>c4be		ca c4 fb 9f 35 a0		        .word nt_cmove, xt_cmove_up, z_cmove_up
>c4c4		63 6d 6f 76 65 3e		        .text "cmove>"
.c4ca						nt_cmove:
>c4ca		05 10				        .byte 5, UF
>c4cc		d7 c4 c0 9f fa 9f		        .word nt_pad, xt_cmove, z_cmove
>c4d2		63 6d 6f 76 65			        .text "cmove"
.c4d7						nt_pad:
>c4d7		03 00				        .byte 3, 0
>c4d9		e2 c4 1f 8d 2e 8d		        .word nt_cleave, xt_pad, z_pad
>c4df		70 61 64			        .text "pad"
.c4e2						nt_cleave:
>c4e2		06 10				        .byte 6, UF
>c4e4		f0 c4 53 9a 9f 9a		        .word nt_hexstore, xt_cleave, z_cleave
>c4ea		63 6c 65 61 76 65		        .text "cleave"
.c4f0						nt_hexstore:
>c4f0		08 10				        .byte 8, UF
>c4f2		00 c5 4b 9b 9d 9b		        .word nt_within, xt_hexstore, z_hexstore
>c4f8		68 65 78 73 74 6f 72 65		        .text "hexstore"
.c500						nt_within:
>c500		06 10				        .byte 6, UF
>c502		0e c5 0c 96 21 96		        .word nt_to_in, xt_within, z_within
>c508		77 69 74 68 69 6e		        .text "within"
.c50e						nt_to_in:
>c50e		03 00				        .byte 3, 0
>c510		19 c5 c7 92 d1 92		        .word nt_less_number_sign, xt_to_in, z_to_in
>c516		3e 69 6e			        .text ">in"
.c519						nt_less_number_sign:
>c519		02 00				        .byte 2, 0
>c51b		23 c5 e1 89 ee 89		        .word nt_number_sign, xt_less_number_sign, z_less_number_sign
>c521		3c 23				        .text "<#"
.c523						nt_number_sign:
>c523		01 10				        .byte 1, UF
>c525		2c c5 6e 8c 9c 8c		        .word nt_number_sign_s, xt_number_sign, z_number_sign
>c52b		23				        .text "#"
.c52c						nt_number_sign_s:
>c52c		02 10				        .byte 2, UF
>c52e		36 c5 bf 8c cf 8c		        .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
>c534		23 73				        .text "#s"
.c536						nt_number_sign_greater:
>c536		02 10				        .byte 2, UF
>c538		40 c5 9d 8c be 8c		        .word nt_hold, xt_number_sign_greater, z_number_sign_greater
>c53e		23 3e				        .text "#>"
.c540						nt_hold:
>c540		04 10				        .byte 4, UF
>c542		4c c5 2d 89 3e 89		        .word nt_sign, xt_hold, z_hold
>c548		68 6f 6c 64			        .text "hold"
.c54c						nt_sign:
>c54c		04 10				        .byte 4, UF
>c54e		58 c5 56 91 6a 91		        .word nt_output, xt_sign, z_sign
>c554		73 69 67 6e			        .text "sign"
.c558						nt_output:
>c558		06 00				        .byte 6, 0
>c55a		66 c5 ab 9d b5 9d		        .word nt_input, xt_output, z_output
>c560		6f 75 74 70 75 74		        .text "output"
.c566						nt_input:
>c566		05 00				        .byte 5, 0
>c568		73 c5 9e 9b a8 9b		        .word nt_havekey, xt_input, z_input
>c56e		69 6e 70 75 74			        .text "input"
.c573						nt_havekey:
>c573		07 00				        .byte 7, 0
>c575		82 c5 40 9b 4a 9b		        .word nt_cr, xt_havekey, z_havekey
>c57b		68 61 76 65 6b 65 79		        .text "havekey"
.c582						nt_cr:
>c582		02 00				        .byte 2, 0
>c584		8c c5 3a 84 3f 84		        .word nt_page, xt_cr, z_cr
>c58a		63 72				        .text "cr"
.c58c						nt_page:
>c58c		04 00				        .byte 4, 0
>c58e		98 c5 2f 8d 4c 8d		        .word nt_at_xy, xt_page, z_page
>c594		70 61 67 65			        .text "page"
.c598						nt_at_xy:
>c598		05 10				        .byte 5, UF
>c59a		a5 c5 a2 82 cf 82		        .word nt_marker, xt_at_xy, z_at_xy
>c5a0		61 74 2d 78 79			        .text "at-xy"
.c5a5						nt_marker:
>c5a5		06 04				        .byte 6, IM
>c5a7		b3 c5 4e 8b 88 8b		        .word nt_words, xt_marker, z_marker
>c5ad		6d 61 72 6b 65 72		        .text "marker"
.c5b3						nt_words:
>c5b3		05 00				        .byte 5, 0
>c5b5		c0 c5 bd 99 19 9a		        .word nt_wordsize, xt_words, z_words
>c5bb		77 6f 72 64 73			        .text "words"
.c5c0						nt_wordsize:
>c5c0		08 10				        .byte 8, UF
>c5c2		d0 c5 e7 9d 07 9e		        .word nt_aligned, xt_wordsize, z_wordsize
>c5c8		77 6f 72 64 73 69 7a 65		        .text "wordsize"
.c5d0						nt_aligned:
>c5d0		07 00				        .byte 7, 0
>c5d2		df c5 26 82 26 82		        .word nt_align, xt_aligned, z_aligned   ; same code as ALIGN
>c5d8		61 6c 69 67 6e 65 64		        .text "aligned"
.c5df						nt_align:
>c5df		05 00				        .byte 5, 0
>c5e1		ec c5 26 82 26 82		        .word nt_bell, xt_align, z_align
>c5e7		61 6c 69 67 6e			        .text "align"
.c5ec						nt_bell:
>c5ec		04 00				        .byte 4, 0
>c5ee		f8 c5 34 9a 39 9a		        .word nt_dump, xt_bell, z_bell
>c5f4		62 65 6c 6c			        .text "bell"
.c5f8						nt_dump:
>c5f8		04 10				        .byte 4, UF
>c5fa		04 c6 ad 98 13 99		        .word nt_dot_s, xt_dump, z_dump
>c600		64 75 6d 70			        .text "dump"
.c604						nt_dot_s:
>c604		02 00				        .byte 2, 0
>c606		0e c6 69 98 ac 98		        .word +, xt_dot_s, z_dot_s
>c60c		2e 73				        .text ".s"
.c60e						+
.c60e						nt_disasm:
>c60e		06 10				        .byte 6, UF
>c610		1c c6 1c a2 22 a2		        .word +, xt_disasm, z_disasm
>c616		64 69 73 61 73 6d		        .text "disasm"
.c61c						+
.c61c						nt_compare:
>c61c		07 10				        .byte 7, UF
>c61e		2b c6 36 a0 9a a0		        .word nt_search, xt_compare, z_compare
>c624		63 6f 6d 70 61 72 65		        .text "compare"
.c62b						nt_search:
>c62b		06 18				        .byte 6, UF+NN
>c62d		39 c6 f1 a0 8f a1		        .word +, xt_search, z_search
>c633		73 65 61 72 63 68		        .text "search"
.c639						+
.c639						nt_environment_q:
>c639		0c 10				        .byte 12, UF
>c63b		4d c6 dd 86 59 87		        .word +, xt_environment_q, z_environment_q
>c641		65 6e 76 69 72 6f 6e 6d		        .text "environment?"
>c649		65 6e 74 3f
.c64d						+
.c64d						nt_find:
>c64d		04 10				        .byte 4, UF
>c64f		59 c6 2d 88 74 88		        .word nt_word, xt_find, z_find
>c655		66 69 6e 64			        .text "find"
.c659						nt_word:
>c659		04 10				        .byte 4, UF
>c65b		65 c6 22 96 65 96		        .word nt_paren, xt_word, z_word
>c661		77 6f 72 64			        .text "word"
.c665						nt_paren:
>c665		01 04				        .byte 1, IM
>c667		6e c6 4d 8d 5c 8d		        .word nt_dot_paren, xt_paren, z_paren
>c66d		28				        .text "("
.c66e						nt_dot_paren:
>c66e		02 04				        .byte 2, IM
>c670		78 c6 52 86 60 86		        .word nt_if, xt_dot_paren, z_dot_paren
>c676		2e 28				        .text ".("
.c678						nt_if:
>c678		02 0d				        .byte 2, IM+CO+NN
>c67a		82 c6 54 89 57 89		        .word nt_then, xt_if, z_if
>c680		69 66				        .text "if"
.c682						nt_then:
>c682		04 0d				        .byte 4, IM+CO+NN
>c684		8e c6 b4 86 bd 86		        .word nt_else, xt_then, z_then
>c68a		74 68 65 6e			        .text "then"
.c68e						nt_else:
>c68e		04 0d				        .byte 4, IM+CO+NN
>c690		9a c6 ae 86 bd 86		        .word nt_repeat, xt_else, z_else
>c696		65 6c 73 65			        .text "else"
.c69a						nt_repeat:
>c69a		06 0d				        .byte 6, IM+CO+NN
>c69c		a8 c6 8a 8f 90 8f		        .word nt_until, xt_repeat, z_repeat
>c6a2		72 65 70 65 61 74		        .text "repeat"
.c6a8						nt_until:
>c6a8		05 0d				        .byte 5, IM+CO+NN
>c6aa		b5 c6 d8 95 db 95		        .word nt_while, xt_until, z_until
>c6b0		75 6e 74 69 6c			        .text "until"
.c6b5						nt_while:
>c6b5		05 0d				        .byte 5, IM+CO+NN
>c6b7		c2 c6 05 96 0b 96		        .word nt_case, xt_while, z_while
>c6bd		77 68 69 6c 65			        .text "while"
.c6c2						nt_case:
>c6c2		04 0d				        .byte 4, IM+CO+NN
>c6c4		ce c6 08 9e 0e 9e		        .word nt_of, xt_case, z_case    ; shares code with ZERO
>c6ca		63 61 73 65			        .text "case"
.c6ce						nt_of:
>c6ce		02 0d				        .byte 2, IM+CO+NN
>c6d0		d8 c6 d0 8c e8 8c		        .word nt_endof, xt_of, z_of
>c6d6		6f 66				        .text "of"
.c6d8						nt_endof:
>c6d8		05 0d				        .byte 5, IM+CO+NN
>c6da		e5 c6 ae 86 bd 86		        .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
>c6e0		65 6e 64 6f 66			        .text "endof"
.c6e5						nt_endcase:
>c6e5		07 0d				        .byte 7, IM+CO+NN
>c6e7		f4 c6 c8 86 dc 86		        .word nt_defer_fetch, xt_endcase, z_endcase
>c6ed		65 6e 64 63 61 73 65		        .text "endcase"
.c6f4						nt_defer_fetch:
>c6f4		06 00				        .byte 6, 0
>c6f6		02 c7 44 85 4a 85		        .word nt_defer_store, xt_defer_fetch, z_defer_fetch
>c6fc		64 65 66 65 72 40		        .text "defer@"
.c702						nt_defer_store:
>c702		06 00				        .byte 6, 0
>c704		10 c7 4b 85 51 85		        .word nt_is, xt_defer_store, z_defer_store
>c70a		64 65 66 65 72 21		        .text "defer!"
.c710						nt_is:
>c710		02 04				        .byte 2, IM
>c712		1a c7 74 89 8c 89		        .word nt_action_of, xt_is, z_is
>c718		69 73				        .text "is"
.c71a						nt_action_of:
>c71a		09 04				        .byte 9, IM
>c71c		2b c7 06 82 1e 82		        .word nt_useraddr, xt_action_of, z_action_of
>c722		61 63 74 69 6f 6e 2d 6f		        .text "action-of"
>c72a		66
.c72b						nt_useraddr:
>c72b		08 00				        .byte 8, 0
>c72d		3b c7 dc 9d e6 9d		        .word nt_buffer_colon, xt_useraddr, z_useraddr
>c733		75 73 65 72 61 64 64 72		        .text "useraddr"
.c73b						nt_buffer_colon:
>c73b		07 00				        .byte 7, 0
>c73d		4a c7 1b 83 21 83		        .word +, xt_buffer_colon, z_buffer_colon
>c743		62 75 66 66 65 72 3a		        .text "buffer:"
.c74a						+
.c74a						nt_buffstatus:
>c74a		0a 00				        .byte 10, 0
>c74c		5c c7 4b b0 50 b0		        .word nt_buffblocknum, xt_buffstatus, z_buffstatus
>c752		62 75 66 66 73 74 61 74		        .text "buffstatus"
>c75a		75 73
.c75c						nt_buffblocknum:
>c75c		0c 00				        .byte 12, 0
>c75e		70 c7 15 b0 1a b0		        .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
>c764		62 75 66 66 62 6c 6f 63		        .text "buffblocknum"
>c76c		6b 6e 75 6d
.c770						nt_blkbuffer:
>c770		09 00				        .byte 9, 0
>c772		81 c7 0b ae 18 ae		        .word nt_scr, xt_blkbuffer, z_blkbuffer
>c778		62 6c 6b 62 75 66 66 65		        .text "blkbuffer"
>c780		72
.c781						nt_scr:
>c781		03 08				        .byte 3, NN
>c783		8c c7 cd b0 d2 b0		        .word nt_blk, xt_scr, z_scr
>c789		73 63 72			        .text "scr"
.c78c						nt_blk:
>c78c		03 08				        .byte 3, NN
>c78e		97 c7 06 ae 0b ae		        .word nt_block_write, xt_blk, z_blk
>c794		62 6c 6b			        .text "blk"
.c797						nt_block_write:
>c797		0b 08				        .byte 11, NN ; Deferred words need the HC (Code Field) flag.
>c799		aa c7 02 b0 10 b0		        .word nt_block_write_vector, xt_block_write, z_block_write
>c79f		62 6c 6f 63 6b 2d 77 72		        .text "block-write"
>c7a7		69 74 65
.c7aa						nt_block_write_vector:
>c7aa		12 08				        .byte 18, NN ; Deferred words need the HC (Code Field) flag.
>c7ac		c4 c7 10 b0 15 b0		        .word nt_block_read, xt_block_write_vector, z_block_write_vector
>c7b2		62 6c 6f 63 6b 2d 77 72		        .text "block-write-vector"
>c7ba		69 74 65 2d 76 65 63 74 6f 72
.c7c4						nt_block_read:
>c7c4		0a 28				        .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
>c7c6		d6 c7 ea af f8 af		        .word nt_block_read_vector, xt_block_read, z_block_read
>c7cc		62 6c 6f 63 6b 2d 72 65		        .text "block-read"
>c7d4		61 64
.c7d6						nt_block_read_vector:
>c7d6		11 28				        .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
>c7d8		ef c7 f8 af fd af		        .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
>c7de		62 6c 6f 63 6b 2d 72 65		        .text "block-read-vector"
>c7e6		61 64 2d 76 65 63 74 6f 72
.c7ef						nt_save_buffers:
>c7ef		0c 00				        .byte 12, 0
>c7f1		03 c8 b2 b0 cc b0		        .word nt_block, xt_save_buffers, z_save_buffers
>c7f7		73 61 76 65 2d 62 75 66		        .text "save-buffers"
>c7ff		66 65 72 73
.c803						nt_block:
>c803		05 00				        .byte 5, 0
>c805		10 c8 19 ae 6b ae		        .word nt_update, xt_block, z_block
>c80b		62 6c 6f 63 6b			        .text "block"
.c810						nt_update:
>c810		06 00				        .byte 6, 0
>c812		1e c8 17 b1 1f b1		        .word nt_buffer, xt_update, z_update
>c818		75 70 64 61 74 65		        .text "update"
.c81e						nt_buffer:
>c81e		06 00				        .byte 6, 0
>c820		2c c8 1a b0 4a b0		        .word nt_empty_buffers, xt_buffer, z_buffer
>c826		62 75 66 66 65 72		        .text "buffer"
.c82c						nt_empty_buffers:
>c82c		0d 00				        .byte 13, 0
>c82e		41 c8 50 b0 56 b0		        .word nt_flush, xt_empty_buffers, z_empty_buffers
>c834		65 6d 70 74 79 2d 62 75		        .text "empty-buffers"
>c83c		66 66 65 72 73
.c841						nt_flush:
>c841		05 00				        .byte 5, 0
>c843		4e c8 57 b0 60 b0		        .word nt_load, xt_flush, z_flush
>c849		66 6c 75 73 68			        .text "flush"
.c84e						nt_load:
>c84e		04 10				        .byte 4, UF
>c850		5a c8 6e b0 b1 b0		        .word nt_thru, xt_load, z_load
>c856		6c 6f 61 64			        .text "load"
.c85a						nt_thru:
>c85a		04 10				        .byte 4, UF
>c85c		66 c8 d2 b0 16 b1		        .word +, xt_thru, z_thru
>c862		74 68 72 75			        .text "thru"
.c866						+
.c866						nt_list:
>c866		04 10				        .byte 4, UF
>c868		72 c8 61 b0 6d b0		        .word nt_block_c65_init, xt_list, z_list
>c86e		6c 69 73 74			        .text "list"
.c872						nt_block_c65_init:
>c872		0e 00				        .byte 14, 0
>c874		88 c8 6c ae a1 ae		        .word +, xt_block_c65_init, z_block_c65_init
>c87a		62 6c 6f 63 6b 2d 63 36		        .text "block-c65-init"
>c882		35 2d 69 6e 69 74
.c888						+
.c888						nt_block_ramdrive_init:
>c888		13 10				        .byte 19, UF
>c88a		a3 c8 c4 ae d1 ae		        .word +, xt_block_ramdrive_init, z_block_ramdrive_init
>c890		62 6c 6f 63 6b 2d 72 61		        .text "block-ramdrive-init"
>c898		6d 64 72 69 76 65 2d 69 6e 69 74
.c8a3						+
.c8a3						nt_definitions:
>c8a3		0b 00				        .byte 11, 0
>c8a5		b6 c8 55 b2 5d b2		        .word nt_wordlist, xt_definitions, z_definitions
>c8ab		64 65 66 69 6e 69 74 69		        .text "definitions"
>c8b3		6f 6e 73
.c8b6						nt_wordlist:
>c8b6		08 00				        .byte 8, 0
>c8b8		c6 c8 c0 b3 d6 b3		        .word nt_search_wordlist, xt_wordlist, z_wordlist
>c8be		77 6f 72 64 6c 69 73 74		        .text "wordlist"
.c8c6						nt_search_wordlist:
>c8c6		0f 10				        .byte 15, UF
>c8c8		dd c8 f9 b2 6c b3		        .word nt_set_current, xt_search_wordlist, z_search_wordlist
>c8ce		73 65 61 72 63 68 2d 77		        .text "search-wordlist"
>c8d6		6f 72 64 6c 69 73 74
.c8dd						nt_set_current:
>c8dd		0b 10				        .byte 11, UF
>c8df		f0 c8 6d b3 78 b3		        .word nt_get_current, xt_set_current, z_set_current
>c8e5		73 65 74 2d 63 75 72 72		        .text "set-current"
>c8ed		65 6e 74
.c8f0						nt_get_current:
>c8f0		0b 00				        .byte 11, 0
>c8f2		03 c9 65 b2 6f b2		        .word nt_set_order, xt_get_current, z_get_current
>c8f8		67 65 74 2d 63 75 72 72		        .text "get-current"
>c900		65 6e 74
.c903						nt_set_order:
>c903		09 00				        .byte 9, 0
>c905		14 c9 79 b3 ac b3		        .word nt_get_order, xt_set_order, z_set_order
>c90b		73 65 74 2d 6f 72 64 65		        .text "set-order"
>c913		72
.c914						nt_get_order:
>c914		09 00				        .byte 9, 0
>c916		25 c9 70 b2 98 b2		        .word nt_root_wordlist, xt_get_order, z_get_order
>c91c		67 65 74 2d 6f 72 64 65		        .text "get-order"
>c924		72
.c925						nt_root_wordlist:
>c925		0d 00				        .byte 13, 0
>c927		3a c9 f0 b2 f8 b2		        .word +, xt_root_wordlist, z_root_wordlist
>c92d		72 6f 6f 74 2d 77 6f 72		        .text "root-wordlist"
>c935		64 6c 69 73 74
.c93a						+
.c93a						nt_assembler_wordlist:
>c93a		12 00				        .byte 18, 0
>c93c		54 c9 d3 9d db 9d		        .word +, xt_assembler_wordlist, z_assembler_wordlist
>c942		61 73 73 65 6d 62 6c 65		        .text "assembler-wordlist"
>c94a		72 2d 77 6f 72 64 6c 69 73 74
.c954						+
.c954						nt_editor_wordlist:
>c954		0f 00				        .byte 15, 0
>c956		6b c9 a2 9d aa 9d		        .word +, xt_editor_wordlist, z_editor_wordlist
>c95c		65 64 69 74 6f 72 2d 77		        .text "editor-wordlist"
>c964		6f 72 64 6c 69 73 74
.c96b						+
.c96b						nt_forth_wordlist:
>c96b		0e 00				        .byte 14, 0
>c96d		81 c9 08 9e 0e 9e		        .word nt_only, xt_forth_wordlist, z_forth_wordlist
>c973		66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>c97b		72 64 6c 69 73 74
.c981						nt_only:
>c981		04 00				        .byte 4, 0
>c983		8d c9 99 b2 9f b2		        .word nt_also, xt_only, z_only
>c989		6f 6e 6c 79			        .text "only"
.c98d						nt_also:
>c98d		04 00				        .byte 4, 0
>c98f		99 c9 45 b2 54 b2		        .word nt_previous, xt_also, z_also
>c995		61 6c 73 6f			        .text "also"
.c999						nt_previous:
>c999		08 00				        .byte 8, 0
>c99b		a9 c9 e3 b2 ef b2		        .word nt_to_order, xt_previous, z_previous
>c9a1		70 72 65 76 69 6f 75 73		        .text "previous"
.c9a9						nt_to_order:
>c9a9		06 00				        .byte 6, 0
>c9ab		b7 c9 ad b3 bf b3		        .word nt_order, xt_to_order, z_to_order
>c9b1		3e 6f 72 64 65 72		        .text ">order"
.c9b7						nt_order:
>c9b7		05 00				        .byte 5, 0
>c9b9		c4 c9 a0 b2 ca b2		        .word nt_forth, xt_order, z_order
>c9bf		6f 72 64 65 72			        .text "order"
.c9c4						nt_forth:
>c9c4		05 00				        .byte 5, 0
>c9c6		d1 c9 5e b2 64 b2		        .word +, xt_forth, z_forth
>c9cc		66 6f 72 74 68			        .text "forth"
.c9d1						+
>c9d1		03 08				nt_see: .byte 3, NN
>c9d3		dc c9 2f 99 bc 99		        .word +, xt_see, z_see
>c9d9		73 65 65			        .text "see"
.c9dc						+
.c9dc						nt_ed:
>c9dc		03 08				        .byte 3, NN
>c9de		e7 c9 13 a8 16 a8		        .word +, xt_ed, z_ed
>c9e4		65 64 3a			        .text "ed:"
.c9e7						+
.c9e7						nt_cold:
>c9e7		04 00				        .byte 4, 0
>c9e9		f3 c9 00 80 af 80		        .word nt_bye, xt_cold, z_cold
>c9ef		63 6f 6c 64			        .text "cold"
.c9f3						nt_bye:
>c9f3		03				        .byte 3         ; length of word strings
>c9f4		00				        .byte 0         ; status byte
>c9f5		00 00				        .word 0000      ; next word in Dictionary, 0000 signals end
>c9f7		66 98				        .word xt_bye    ; start of code block (xt of this word)
>c9f9		69 98				        .word z_bye     ; end of code (RTS)
>c9fb		62 79 65			        .text "bye"     ; word name, always lower case, not zero-terminated
.c9fe						root_dictionary_start:
.c9fe						nt_root_set_order:
>c9fe		09 00				        .byte 9, 0
>ca00		0f ca 79 b3 ac b3		        .word nt_root_forth, xt_set_order, z_set_order
>ca06		73 65 74 2d 6f 72 64 65		        .text "set-order"
>ca0e		72
.ca0f						nt_root_forth:
>ca0f		05 00				        .byte 5, 0
>ca11		1c ca 5e b2 64 b2		        .word nt_root_forth_wordlist, xt_forth, z_forth
>ca17		66 6f 72 74 68			        .text "forth"
.ca1c						nt_root_forth_wordlist:
>ca1c		0e 00				        .byte 14, 0
>ca1e		32 ca 08 9e 0e 9e		        .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
>ca24		66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>ca2c		72 64 6c 69 73 74
.ca32						nt_root_words:
>ca32		05 00				        .byte 5, 0
>ca34		00 00 bd 99 19 9a		        .word 0000, xt_words, z_words
>ca3a		77 6f 72 64 73			        .text "words"
.ca3f						editor_dictionary_start:
.ca3f						nt_editor_o:
>ca3f		01 00				        .byte 1, 0
>ca41		48 ca ff b1 44 b2		        .word nt_editor_line, xt_editor_o, z_editor_o
>ca47		6f				        .text "o"
.ca48						nt_editor_line:
>ca48		04 10				        .byte 4, UF
>ca4a		54 ca e6 b1 fe b1		        .word nt_editor_l, xt_editor_line, z_editor_line
>ca50		6c 69 6e 65			        .text "line"
.ca54						nt_editor_l:
>ca54		01 00				        .byte 1, 0
>ca56		5d ca 6c b1 e5 b1		        .word nt_editor_el, xt_editor_l, z_editor_l
>ca5c		6c				        .text "l"
.ca5d						nt_editor_el:
>ca5d		02 00				        .byte 2, 0
>ca5f		67 ca 5a b1 6b b1		        .word nt_editor_erase_screen, xt_editor_el, z_editor_el
>ca65		65 6c				        .text "el"
.ca67						nt_editor_erase_screen:
>ca67		0c 00				        .byte 12, 0
>ca69		7b ca 48 b1 59 b1		        .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
>ca6f		65 72 61 73 65 2d 73 63		        .text "erase-screen"
>ca77		72 65 65 6e
.ca7b						nt_editor_enter_screen:
>ca7b		0c 00				        .byte 12, 0
>ca7d		00 00 2c b1 47 b1		        .word 0000, xt_editor_enter_screen, z_editor_enter_screen
>ca83		65 6e 74 65 72 2d 73 63		        .text "enter-screen"
>ca8b		72 65 65 6e
.ca8f						assembler_dictionary_start:
.ca8f						nt_asm_adc_h:
>ca8f		05 0c						.byte 5, IM+NN
>ca91		9c ca				                .word nt_asm_adc_x
>ca93		5d a4 62 a4					.word xt_asm_adc_h, z_asm_adc_h
>ca97		61 64 63 2e 23					.text "adc.#"
.ca9c						nt_asm_adc_x:
>ca9c		05 0c						.byte 5, IM+NN
>ca9e		a9 ca				                .word nt_asm_adc_y
>caa0		62 a4 67 a4					.word xt_asm_adc_x, z_asm_adc_x
>caa4		61 64 63 2e 78					.text "adc.x"
.caa9						nt_asm_adc_y:
>caa9		05 0c						.byte 5, IM+NN
>caab		b6 ca				                .word nt_asm_adc_z
>caad		67 a4 6c a4					.word xt_asm_adc_y, z_asm_adc_y
>cab1		61 64 63 2e 79					.text "adc.y"
.cab6						nt_asm_adc_z:
>cab6		05 0c						.byte 5, IM+NN
>cab8		c3 ca				                .word nt_asm_adc_zi
>caba		6c a4 71 a4					.word xt_asm_adc_z, z_asm_adc_z
>cabe		61 64 63 2e 7a					.text "adc.z"
.cac3						nt_asm_adc_zi:
>cac3		06 0c						.byte 6, IM+NN
>cac5		d1 ca				                .word nt_asm_adc_ziy
>cac7		71 a4 76 a4					.word xt_asm_adc_zi, z_asm_adc_zi
>cacb		61 64 63 2e 7a 69				.text "adc.zi"
.cad1						nt_asm_adc_ziy:
>cad1		07 0c						.byte 7, IM+NN
>cad3		e0 ca				                .word nt_asm_adc_zx
>cad5		76 a4 7b a4					.word xt_asm_adc_ziy, z_asm_adc_ziy
>cad9		61 64 63 2e 7a 69 79				.text "adc.ziy"
.cae0						nt_asm_adc_zx:
>cae0		06 0c						.byte 6, IM+NN
>cae2		ee ca				                .word nt_asm_adc_zxi
>cae4		7b a4 80 a4					.word xt_asm_adc_zx, z_asm_adc_zx
>cae8		61 64 63 2e 7a 78				.text "adc.zx"
.caee						nt_asm_adc_zxi:
>caee		07 0c						.byte 7, IM+NN
>caf0		fd ca				                .word nt_asm_and
>caf2		80 a4 85 a4					.word xt_asm_adc_zxi, z_asm_adc_zxi
>caf6		61 64 63 2e 7a 78 69				.text "adc.zxi"
.cafd						nt_asm_and:
>cafd		04 0c						.byte 4, IM+NN
>caff		09 cb				                .word nt_asm_and_h
>cb01		85 a4 8a a4					.word xt_asm_and, z_asm_and
>cb05		61 6e 64 2e					.text "and."
.cb09						nt_asm_and_h:
>cb09		05 0c						.byte 5, IM+NN
>cb0b		16 cb				                .word nt_asm_and_x
>cb0d		8a a4 8f a4					.word xt_asm_and_h, z_asm_and_h
>cb11		61 6e 64 2e 23					.text "and.#"
.cb16						nt_asm_and_x:
>cb16		05 0c						.byte 5, IM+NN
>cb18		23 cb				                .word nt_asm_and_y
>cb1a		8f a4 94 a4					.word xt_asm_and_x, z_asm_and_x
>cb1e		61 6e 64 2e 78					.text "and.x"
.cb23						nt_asm_and_y:
>cb23		05 0c						.byte 5, IM+NN
>cb25		30 cb				                .word nt_asm_and_z
>cb27		94 a4 99 a4					.word xt_asm_and_y, z_asm_and_y
>cb2b		61 6e 64 2e 79					.text "and.y"
.cb30						nt_asm_and_z:
>cb30		05 0c						.byte 5, IM+NN
>cb32		3d cb				                .word nt_asm_and_zi
>cb34		99 a4 9e a4					.word xt_asm_and_z, z_asm_and_z
>cb38		61 6e 64 2e 7a					.text "and.z"
.cb3d						nt_asm_and_zi:
>cb3d		06 0c						.byte 6, IM+NN
>cb3f		4b cb				                .word nt_asm_and_ziy
>cb41		9e a4 a3 a4					.word xt_asm_and_zi, z_asm_and_zi
>cb45		61 6e 64 2e 7a 69				.text "and.zi"
.cb4b						nt_asm_and_ziy:
>cb4b		07 0c						.byte 7, IM+NN
>cb4d		5a cb				                .word nt_asm_and_zx
>cb4f		a3 a4 a8 a4					.word xt_asm_and_ziy, z_asm_and_ziy
>cb53		61 6e 64 2e 7a 69 79				.text "and.ziy"
.cb5a						nt_asm_and_zx:
>cb5a		06 0c						.byte 6, IM+NN
>cb5c		68 cb				                .word nt_asm_and_zxi
>cb5e		a8 a4 ad a4					.word xt_asm_and_zx, z_asm_and_zx
>cb62		61 6e 64 2e 7a 78				.text "and.zx"
.cb68						nt_asm_and_zxi:
>cb68		07 0c						.byte 7, IM+NN
>cb6a		77 cb				                .word nt_asm_asl
>cb6c		ad a4 b2 a4					.word xt_asm_and_zxi, z_asm_and_zxi
>cb70		61 6e 64 2e 7a 78 69				.text "and.zxi"
.cb77						nt_asm_asl:
>cb77		03 0c						.byte 3, IM+NN
>cb79		82 cb				                .word nt_asm_asl_a
>cb7b		b2 a4 b7 a4					.word xt_asm_asl, z_asm_asl
>cb7f		61 73 6c					.text "asl"
.cb82						nt_asm_asl_a:
>cb82		05 0c						.byte 5, IM+NN
>cb84		8f cb				                .word nt_asm_asl_x
>cb86		b7 a4 bc a4					.word xt_asm_asl_a, z_asm_asl_a
>cb8a		61 73 6c 2e 61					.text "asl.a"
.cb8f						nt_asm_asl_x:
>cb8f		05 0c						.byte 5, IM+NN
>cb91		9c cb				                .word nt_asm_asl_z
>cb93		bc a4 c1 a4					.word xt_asm_asl_x, z_asm_asl_x
>cb97		61 73 6c 2e 78					.text "asl.x"
.cb9c						nt_asm_asl_z:
>cb9c		05 0c						.byte 5, IM+NN
>cb9e		a9 cb				                .word nt_asm_asl_zx
>cba0		c1 a4 c6 a4					.word xt_asm_asl_z, z_asm_asl_z
>cba4		61 73 6c 2e 7a					.text "asl.z"
.cba9						nt_asm_asl_zx:
>cba9		06 0c						.byte 6, IM+NN
>cbab		b7 cb				                .word nt_asm_bcc
>cbad		c6 a4 cb a4					.word xt_asm_asl_zx, z_asm_asl_zx
>cbb1		61 73 6c 2e 7a 78				.text "asl.zx"
.cbb7						nt_asm_bcc:
>cbb7		03 0c						.byte 3, IM+NN
>cbb9		c2 cb				                .word nt_asm_bcs
>cbbb		cb a4 d0 a4					.word xt_asm_bcc, z_asm_bcc
>cbbf		62 63 63					.text "bcc"
.cbc2						nt_asm_bcs:
>cbc2		03 0c						.byte 3, IM+NN
>cbc4		cd cb				                .word nt_asm_beq
>cbc6		d0 a4 d7 a4					.word xt_asm_bcs, z_asm_bcs
>cbca		62 63 73					.text "bcs"
.cbcd						nt_asm_beq:
>cbcd		03 0c						.byte 3, IM+NN
>cbcf		d8 cb				                .word nt_asm_bit
>cbd1		d7 a4 dc a4					.word xt_asm_beq, z_asm_beq
>cbd5		62 65 71					.text "beq"
.cbd8						nt_asm_bit:
>cbd8		03 0c						.byte 3, IM+NN
>cbda		e3 cb				                .word nt_asm_bit_h
>cbdc		dc a4 e1 a4					.word xt_asm_bit, z_asm_bit
>cbe0		62 69 74					.text "bit"
.cbe3						nt_asm_bit_h:
>cbe3		05 0c						.byte 5, IM+NN
>cbe5		f0 cb				                .word nt_asm_bit_x
>cbe7		e1 a4 e6 a4					.word xt_asm_bit_h, z_asm_bit_h
>cbeb		62 69 74 2e 23					.text "bit.#"
.cbf0						nt_asm_bit_x:
>cbf0		05 0c						.byte 5, IM+NN
>cbf2		fd cb				                .word nt_asm_bit_z
>cbf4		e6 a4 eb a4					.word xt_asm_bit_x, z_asm_bit_x
>cbf8		62 69 74 2e 78					.text "bit.x"
.cbfd						nt_asm_bit_z:
>cbfd		05 0c						.byte 5, IM+NN
>cbff		0a cc				                .word nt_asm_bit_zx
>cc01		eb a4 f0 a4					.word xt_asm_bit_z, z_asm_bit_z
>cc05		62 69 74 2e 7a					.text "bit.z"
.cc0a						nt_asm_bit_zx:
>cc0a		06 0c						.byte 6, IM+NN
>cc0c		18 cc				                .word nt_asm_bmi
>cc0e		f0 a4 f5 a4					.word xt_asm_bit_zx, z_asm_bit_zx
>cc12		62 69 74 2e 7a 78				.text "bit.zx"
.cc18						nt_asm_bmi:
>cc18		03 0c						.byte 3, IM+NN
>cc1a		23 cc				                .word nt_asm_bne
>cc1c		f5 a4 fa a4					.word xt_asm_bmi, z_asm_bmi
>cc20		62 6d 69					.text "bmi"
.cc23						nt_asm_bne:
>cc23		03 0c						.byte 3, IM+NN
>cc25		2e cc				                .word nt_asm_bpl
>cc27		fa a4 ff a4					.word xt_asm_bne, z_asm_bne
>cc2b		62 6e 65					.text "bne"
.cc2e						nt_asm_bpl:
>cc2e		03 0c						.byte 3, IM+NN
>cc30		39 cc				                .word nt_asm_bra
>cc32		ff a4 04 a5					.word xt_asm_bpl, z_asm_bpl
>cc36		62 70 6c					.text "bpl"
.cc39						nt_asm_bra:
>cc39		03 0c						.byte 3, IM+NN
>cc3b		44 cc				                .word nt_asm_brk
>cc3d		04 a5 09 a5					.word xt_asm_bra, z_asm_bra
>cc41		62 72 61					.text "bra"
.cc44						nt_asm_brk:
>cc44		03 0c						.byte 3, IM+NN
>cc46		4f cc				                .word nt_asm_bvc
>cc48		09 a5 0e a5					.word xt_asm_brk, z_asm_brk
>cc4c		62 72 6b					.text "brk"
.cc4f						nt_asm_bvc:
>cc4f		03 0c						.byte 3, IM+NN
>cc51		5a cc				                .word nt_asm_bvs
>cc53		0e a5 13 a5					.word xt_asm_bvc, z_asm_bvc
>cc57		62 76 63					.text "bvc"
.cc5a						nt_asm_bvs:
>cc5a		03 0c						.byte 3, IM+NN
>cc5c		65 cc				                .word nt_asm_clc
>cc5e		13 a5 18 a5					.word xt_asm_bvs, z_asm_bvs
>cc62		62 76 73					.text "bvs"
.cc65						nt_asm_clc:
>cc65		03 0c						.byte 3, IM+NN
>cc67		70 cc				                .word nt_asm_cld
>cc69		18 a5 1d a5					.word xt_asm_clc, z_asm_clc
>cc6d		63 6c 63					.text "clc"
.cc70						nt_asm_cld:
>cc70		03 0c						.byte 3, IM+NN
>cc72		7b cc				                .word nt_asm_cli
>cc74		1d a5 22 a5					.word xt_asm_cld, z_asm_cld
>cc78		63 6c 64					.text "cld"
.cc7b						nt_asm_cli:
>cc7b		03 0c						.byte 3, IM+NN
>cc7d		86 cc				                .word nt_asm_clv
>cc7f		22 a5 27 a5					.word xt_asm_cli, z_asm_cli
>cc83		63 6c 69					.text "cli"
.cc86						nt_asm_clv:
>cc86		03 0c						.byte 3, IM+NN
>cc88		91 cc				                .word nt_asm_cmp
>cc8a		27 a5 2c a5					.word xt_asm_clv, z_asm_clv
>cc8e		63 6c 76					.text "clv"
.cc91						nt_asm_cmp:
>cc91		03 0c						.byte 3, IM+NN
>cc93		9c cc				                .word nt_asm_cmp_h
>cc95		2c a5 31 a5					.word xt_asm_cmp, z_asm_cmp
>cc99		63 6d 70					.text "cmp"
.cc9c						nt_asm_cmp_h:
>cc9c		05 0c						.byte 5, IM+NN
>cc9e		a9 cc				                .word nt_asm_cmp_x
>cca0		31 a5 36 a5					.word xt_asm_cmp_h, z_asm_cmp_h
>cca4		63 6d 70 2e 23					.text "cmp.#"
.cca9						nt_asm_cmp_x:
>cca9		05 0c						.byte 5, IM+NN
>ccab		b6 cc				                .word nt_asm_cmp_y
>ccad		36 a5 3b a5					.word xt_asm_cmp_x, z_asm_cmp_x
>ccb1		63 6d 70 2e 78					.text "cmp.x"
.ccb6						nt_asm_cmp_y:
>ccb6		05 0c						.byte 5, IM+NN
>ccb8		c3 cc				                .word nt_asm_cmp_z
>ccba		3b a5 40 a5					.word xt_asm_cmp_y, z_asm_cmp_y
>ccbe		63 6d 70 2e 79					.text "cmp.y"
.ccc3						nt_asm_cmp_z:
>ccc3		05 0c						.byte 5, IM+NN
>ccc5		d0 cc				                .word nt_asm_cmp_zi
>ccc7		40 a5 45 a5					.word xt_asm_cmp_z, z_asm_cmp_z
>cccb		63 6d 70 2e 7a					.text "cmp.z"
.ccd0						nt_asm_cmp_zi:
>ccd0		06 0c						.byte 6, IM+NN
>ccd2		de cc				                .word nt_asm_cmp_ziy
>ccd4		45 a5 4a a5					.word xt_asm_cmp_zi, z_asm_cmp_zi
>ccd8		63 6d 70 2e 7a 69				.text "cmp.zi"
.ccde						nt_asm_cmp_ziy:
>ccde		07 0c						.byte 7, IM+NN
>cce0		ed cc				                .word nt_asm_cmp_zx
>cce2		4a a5 4f a5					.word xt_asm_cmp_ziy, z_asm_cmp_ziy
>cce6		63 6d 70 2e 7a 69 79				.text "cmp.ziy"
.cced						nt_asm_cmp_zx:
>cced		06 0c						.byte 6, IM+NN
>ccef		fb cc				                .word nt_asm_cmp_zxi
>ccf1		4f a5 54 a5					.word xt_asm_cmp_zx, z_asm_cmp_zx
>ccf5		63 6d 70 2e 7a 78				.text "cmp.zx"
.ccfb						nt_asm_cmp_zxi:
>ccfb		07 0c						.byte 7, IM+NN
>ccfd		0a cd				                .word nt_asm_cpx
>ccff		54 a5 59 a5					.word xt_asm_cmp_zxi, z_asm_cmp_zxi
>cd03		63 6d 70 2e 7a 78 69				.text "cmp.zxi"
.cd0a						nt_asm_cpx:
>cd0a		03 0c						.byte 3, IM+NN
>cd0c		15 cd				                .word nt_asm_cpx_h
>cd0e		59 a5 5e a5					.word xt_asm_cpx, z_asm_cpx
>cd12		63 70 78					.text "cpx"
.cd15						nt_asm_cpx_h:
>cd15		05 0c						.byte 5, IM+NN
>cd17		22 cd				                .word nt_asm_cpx_z
>cd19		5e a5 63 a5					.word xt_asm_cpx_h, z_asm_cpx_h
>cd1d		63 70 78 2e 23					.text "cpx.#"
.cd22						nt_asm_cpx_z:
>cd22		05 0c						.byte 5, IM+NN
>cd24		2f cd				                .word nt_asm_cpy
>cd26		63 a5 68 a5					.word xt_asm_cpx_z, z_asm_cpx_z
>cd2a		63 70 78 2e 7a					.text "cpx.z"
.cd2f						nt_asm_cpy:
>cd2f		03 0c						.byte 3, IM+NN
>cd31		3a cd				                .word nt_asm_cpy_h
>cd33		68 a5 6f a5					.word xt_asm_cpy, z_asm_cpy
>cd37		63 70 79					.text "cpy"
.cd3a						nt_asm_cpy_h:
>cd3a		05 0c						.byte 5, IM+NN
>cd3c		47 cd				                .word nt_asm_cpy_z
>cd3e		6f a5 74 a5					.word xt_asm_cpy_h, z_asm_cpy_h
>cd42		63 70 79 2e 23					.text "cpy.#"
.cd47						nt_asm_cpy_z:
>cd47		05 0c						.byte 5, IM+NN
>cd49		54 cd				                .word nt_asm_dec
>cd4b		74 a5 79 a5					.word xt_asm_cpy_z, z_asm_cpy_z
>cd4f		63 70 79 2e 7a					.text "cpy.z"
.cd54						nt_asm_dec:
>cd54		03 0c						.byte 3, IM+NN
>cd56		5f cd				                .word nt_asm_dec_a
>cd58		79 a5 7e a5					.word xt_asm_dec, z_asm_dec
>cd5c		64 65 63					.text "dec"
.cd5f						nt_asm_dec_a:
>cd5f		05 0c						.byte 5, IM+NN
>cd61		6c cd				                .word nt_asm_dec_x
>cd63		7e a5 83 a5					.word xt_asm_dec_a, z_asm_dec_a
>cd67		64 65 63 2e 61					.text "dec.a"
.cd6c						nt_asm_dec_x:
>cd6c		05 0c						.byte 5, IM+NN
>cd6e		79 cd				                .word nt_asm_dec_z
>cd70		83 a5 88 a5					.word xt_asm_dec_x, z_asm_dec_x
>cd74		64 65 63 2e 78					.text "dec.x"
.cd79						nt_asm_dec_z:
>cd79		05 0c						.byte 5, IM+NN
>cd7b		86 cd				                .word nt_asm_dec_zx
>cd7d		88 a5 8d a5					.word xt_asm_dec_z, z_asm_dec_z
>cd81		64 65 63 2e 7a					.text "dec.z"
.cd86						nt_asm_dec_zx:
>cd86		06 0c						.byte 6, IM+NN
>cd88		94 cd				                .word nt_asm_dex
>cd8a		8d a5 92 a5					.word xt_asm_dec_zx, z_asm_dec_zx
>cd8e		64 65 63 2e 7a 78				.text "dec.zx"
.cd94						nt_asm_dex:
>cd94		03 0c						.byte 3, IM+NN
>cd96		9f cd				                .word nt_asm_dey
>cd98		92 a5 97 a5					.word xt_asm_dex, z_asm_dex
>cd9c		64 65 78					.text "dex"
.cd9f						nt_asm_dey:
>cd9f		03 0c						.byte 3, IM+NN
>cda1		aa cd				                .word nt_asm_eor
>cda3		97 a5 9c a5					.word xt_asm_dey, z_asm_dey
>cda7		64 65 79					.text "dey"
.cdaa						nt_asm_eor:
>cdaa		03 0c						.byte 3, IM+NN
>cdac		b5 cd				                .word nt_asm_eor_h
>cdae		9c a5 a1 a5					.word xt_asm_eor, z_asm_eor
>cdb2		65 6f 72					.text "eor"
.cdb5						nt_asm_eor_h:
>cdb5		05 0c						.byte 5, IM+NN
>cdb7		c2 cd				                .word nt_asm_eor_x
>cdb9		a1 a5 a6 a5					.word xt_asm_eor_h, z_asm_eor_h
>cdbd		65 6f 72 2e 23					.text "eor.#"
.cdc2						nt_asm_eor_x:
>cdc2		05 0c						.byte 5, IM+NN
>cdc4		cf cd				                .word nt_asm_eor_y
>cdc6		a6 a5 ab a5					.word xt_asm_eor_x, z_asm_eor_x
>cdca		65 6f 72 2e 78					.text "eor.x"
.cdcf						nt_asm_eor_y:
>cdcf		05 0c						.byte 5, IM+NN
>cdd1		dc cd				                .word nt_asm_eor_z
>cdd3		ab a5 b0 a5					.word xt_asm_eor_y, z_asm_eor_y
>cdd7		65 6f 72 2e 79					.text "eor.y"
.cddc						nt_asm_eor_z:
>cddc		05 0c						.byte 5, IM+NN
>cdde		e9 cd				                .word nt_asm_eor_zi
>cde0		b0 a5 b5 a5					.word xt_asm_eor_z, z_asm_eor_z
>cde4		65 6f 72 2e 7a					.text "eor.z"
.cde9						nt_asm_eor_zi:
>cde9		06 0c						.byte 6, IM+NN
>cdeb		f7 cd				                .word nt_asm_eor_ziy
>cded		b5 a5 ba a5					.word xt_asm_eor_zi, z_asm_eor_zi
>cdf1		65 6f 72 2e 7a 69				.text "eor.zi"
.cdf7						nt_asm_eor_ziy:
>cdf7		07 0c						.byte 7, IM+NN
>cdf9		06 ce				                .word nt_asm_eor_zx
>cdfb		ba a5 bf a5					.word xt_asm_eor_ziy, z_asm_eor_ziy
>cdff		65 6f 72 2e 7a 69 79				.text "eor.ziy"
.ce06						nt_asm_eor_zx:
>ce06		06 0c						.byte 6, IM+NN
>ce08		14 ce				                .word nt_asm_eor_zxi
>ce0a		bf a5 c4 a5					.word xt_asm_eor_zx, z_asm_eor_zx
>ce0e		65 6f 72 2e 7a 78				.text "eor.zx"
.ce14						nt_asm_eor_zxi:
>ce14		07 0c						.byte 7, IM+NN
>ce16		23 ce				                .word nt_asm_inc
>ce18		c4 a5 c9 a5					.word xt_asm_eor_zxi, z_asm_eor_zxi
>ce1c		65 6f 72 2e 7a 78 69				.text "eor.zxi"
.ce23						nt_asm_inc:
>ce23		03 0c						.byte 3, IM+NN
>ce25		2e ce				                .word nt_asm_inc_a
>ce27		c9 a5 ce a5					.word xt_asm_inc, z_asm_inc
>ce2b		69 6e 63					.text "inc"
.ce2e						nt_asm_inc_a:
>ce2e		05 0c						.byte 5, IM+NN
>ce30		3b ce				                .word nt_asm_inc_x
>ce32		ce a5 d3 a5					.word xt_asm_inc_a, z_asm_inc_a
>ce36		69 6e 63 2e 61					.text "inc.a"
.ce3b						nt_asm_inc_x:
>ce3b		05 0c						.byte 5, IM+NN
>ce3d		48 ce				                .word nt_asm_inc_z
>ce3f		d3 a5 d8 a5					.word xt_asm_inc_x, z_asm_inc_x
>ce43		69 6e 63 2e 78					.text "inc.x"
.ce48						nt_asm_inc_z:
>ce48		05 0c						.byte 5, IM+NN
>ce4a		55 ce				                .word nt_asm_inc_zx
>ce4c		d8 a5 dd a5					.word xt_asm_inc_z, z_asm_inc_z
>ce50		69 6e 63 2e 7a					.text "inc.z"
.ce55						nt_asm_inc_zx:
>ce55		06 0c						.byte 6, IM+NN
>ce57		63 ce				                .word nt_asm_inx
>ce59		dd a5 e2 a5					.word xt_asm_inc_zx, z_asm_inc_zx
>ce5d		69 6e 63 2e 7a 78				.text "inc.zx"
.ce63						nt_asm_inx:
>ce63		03 0c						.byte 3, IM+NN
>ce65		6e ce				                .word nt_asm_iny
>ce67		e2 a5 e7 a5					.word xt_asm_inx, z_asm_inx
>ce6b		69 6e 78					.text "inx"
.ce6e						nt_asm_iny:
>ce6e		03 0c						.byte 3, IM+NN
>ce70		79 ce				                .word nt_asm_jmp
>ce72		e7 a5 ec a5					.word xt_asm_iny, z_asm_iny
>ce76		69 6e 79					.text "iny"
.ce79						nt_asm_jmp:
>ce79		03 0c						.byte 3, IM+NN
>ce7b		84 ce				                .word nt_asm_jmp_i
>ce7d		ec a5 f1 a5					.word xt_asm_jmp, z_asm_jmp
>ce81		6a 6d 70					.text "jmp"
.ce84						nt_asm_jmp_i:
>ce84		05 0c						.byte 5, IM+NN
>ce86		91 ce				                .word nt_asm_jmp_xi
>ce88		f1 a5 f6 a5					.word xt_asm_jmp_i, z_asm_jmp_i
>ce8c		6a 6d 70 2e 69					.text "jmp.i"
.ce91						nt_asm_jmp_xi:
>ce91		06 0c						.byte 6, IM+NN
>ce93		9f ce				                .word nt_asm_jsr
>ce95		f6 a5 fb a5					.word xt_asm_jmp_xi, z_asm_jmp_xi
>ce99		6a 6d 70 2e 78 69				.text "jmp.xi"
.ce9f						nt_asm_jsr:
>ce9f		03 0c						.byte 3, IM+NN
>cea1		aa ce				                .word nt_asm_lda
>cea3		fb a5 00 a6					.word xt_asm_jsr, z_asm_jsr
>cea7		6a 73 72					.text "jsr"
.ceaa						nt_asm_lda:
>ceaa		03 0c						.byte 3, IM+NN
>ceac		b5 ce				                .word nt_asm_lda_h
>ceae		00 a6 05 a6					.word xt_asm_lda, z_asm_lda
>ceb2		6c 64 61					.text "lda"
.ceb5						nt_asm_lda_h:
>ceb5		05 0c						.byte 5, IM+NN
>ceb7		c2 ce				                .word nt_asm_lda_x
>ceb9		05 a6 0a a6					.word xt_asm_lda_h, z_asm_lda_h
>cebd		6c 64 61 2e 23					.text "lda.#"
.cec2						nt_asm_lda_x:
>cec2		05 0c						.byte 5, IM+NN
>cec4		cf ce				                .word nt_asm_lda_y
>cec6		0a a6 0f a6					.word xt_asm_lda_x, z_asm_lda_x
>ceca		6c 64 61 2e 78					.text "lda.x"
.cecf						nt_asm_lda_y:
>cecf		05 0c						.byte 5, IM+NN
>ced1		dc ce				                .word nt_asm_lda_z
>ced3		0f a6 14 a6					.word xt_asm_lda_y, z_asm_lda_y
>ced7		6c 64 61 2e 79					.text "lda.y"
.cedc						nt_asm_lda_z:
>cedc		05 0c						.byte 5, IM+NN
>cede		e9 ce				                .word nt_asm_lda_zi
>cee0		14 a6 19 a6					.word xt_asm_lda_z, z_asm_lda_z
>cee4		6c 64 61 2e 7a					.text "lda.z"
.cee9						nt_asm_lda_zi:
>cee9		06 0c						.byte 6, IM+NN
>ceeb		f7 ce				                .word nt_asm_lda_ziy
>ceed		19 a6 1e a6					.word xt_asm_lda_zi, z_asm_lda_zi
>cef1		6c 64 61 2e 7a 69				.text "lda.zi"
.cef7						nt_asm_lda_ziy:
>cef7		07 0c						.byte 7, IM+NN
>cef9		06 cf				                .word nt_asm_lda_zx
>cefb		1e a6 23 a6					.word xt_asm_lda_ziy, z_asm_lda_ziy
>ceff		6c 64 61 2e 7a 69 79				.text "lda.ziy"
.cf06						nt_asm_lda_zx:
>cf06		06 0c						.byte 6, IM+NN
>cf08		14 cf				                .word nt_asm_lda_zxi
>cf0a		23 a6 28 a6					.word xt_asm_lda_zx, z_asm_lda_zx
>cf0e		6c 64 61 2e 7a 78				.text "lda.zx"
.cf14						nt_asm_lda_zxi:
>cf14		07 0c						.byte 7, IM+NN
>cf16		23 cf				                .word nt_asm_ldx
>cf18		28 a6 2d a6					.word xt_asm_lda_zxi, z_asm_lda_zxi
>cf1c		6c 64 61 2e 7a 78 69				.text "lda.zxi"
.cf23						nt_asm_ldx:
>cf23		03 0c						.byte 3, IM+NN
>cf25		2e cf				                .word nt_asm_ldx_h
>cf27		2d a6 32 a6					.word xt_asm_ldx, z_asm_ldx
>cf2b		6c 64 78					.text "ldx"
.cf2e						nt_asm_ldx_h:
>cf2e		05 0c						.byte 5, IM+NN
>cf30		3b cf				                .word nt_asm_ldx_y
>cf32		32 a6 37 a6					.word xt_asm_ldx_h, z_asm_ldx_h
>cf36		6c 64 78 2e 23					.text "ldx.#"
.cf3b						nt_asm_ldx_y:
>cf3b		05 0c						.byte 5, IM+NN
>cf3d		48 cf				                .word nt_asm_ldx_z
>cf3f		37 a6 3c a6					.word xt_asm_ldx_y, z_asm_ldx_y
>cf43		6c 64 78 2e 79					.text "ldx.y"
.cf48						nt_asm_ldx_z:
>cf48		05 0c						.byte 5, IM+NN
>cf4a		55 cf				                .word nt_asm_ldx_zy
>cf4c		3c a6 41 a6					.word xt_asm_ldx_z, z_asm_ldx_z
>cf50		6c 64 78 2e 7a					.text "ldx.z"
.cf55						nt_asm_ldx_zy:
>cf55		06 0c						.byte 6, IM+NN
>cf57		63 cf				                .word nt_asm_ldy
>cf59		41 a6 46 a6					.word xt_asm_ldx_zy, z_asm_ldx_zy
>cf5d		6c 64 78 2e 7a 79				.text "ldx.zy"
.cf63						nt_asm_ldy:
>cf63		03 0c						.byte 3, IM+NN
>cf65		6e cf				                .word nt_asm_ldy_h
>cf67		46 a6 4b a6					.word xt_asm_ldy, z_asm_ldy
>cf6b		6c 64 79					.text "ldy"
.cf6e						nt_asm_ldy_h:
>cf6e		05 0c						.byte 5, IM+NN
>cf70		7b cf				                .word nt_asm_ldy_x
>cf72		4b a6 50 a6					.word xt_asm_ldy_h, z_asm_ldy_h
>cf76		6c 64 79 2e 23					.text "ldy.#"
.cf7b						nt_asm_ldy_x:
>cf7b		05 0c						.byte 5, IM+NN
>cf7d		88 cf				                .word nt_asm_ldy_z
>cf7f		50 a6 55 a6					.word xt_asm_ldy_x, z_asm_ldy_x
>cf83		6c 64 79 2e 78					.text "ldy.x"
.cf88						nt_asm_ldy_z:
>cf88		05 0c						.byte 5, IM+NN
>cf8a		95 cf				                .word nt_asm_ldy_zx
>cf8c		55 a6 5a a6					.word xt_asm_ldy_z, z_asm_ldy_z
>cf90		6c 64 79 2e 7a					.text "ldy.z"
.cf95						nt_asm_ldy_zx:
>cf95		06 0c						.byte 6, IM+NN
>cf97		a3 cf				                .word nt_asm_lsr
>cf99		5a a6 5f a6					.word xt_asm_ldy_zx, z_asm_ldy_zx
>cf9d		6c 64 79 2e 7a 78				.text "ldy.zx"
.cfa3						nt_asm_lsr:
>cfa3		03 0c						.byte 3, IM+NN
>cfa5		ae cf				                .word nt_asm_lsr_a
>cfa7		5f a6 64 a6					.word xt_asm_lsr, z_asm_lsr
>cfab		6c 73 72					.text "lsr"
.cfae						nt_asm_lsr_a:
>cfae		05 0c						.byte 5, IM+NN
>cfb0		bb cf				                .word nt_asm_lsr_x
>cfb2		64 a6 69 a6					.word xt_asm_lsr_a, z_asm_lsr_a
>cfb6		6c 73 72 2e 61					.text "lsr.a"
.cfbb						nt_asm_lsr_x:
>cfbb		05 0c						.byte 5, IM+NN
>cfbd		c8 cf				                .word nt_asm_lsr_z
>cfbf		69 a6 6e a6					.word xt_asm_lsr_x, z_asm_lsr_x
>cfc3		6c 73 72 2e 78					.text "lsr.x"
.cfc8						nt_asm_lsr_z:
>cfc8		05 0c						.byte 5, IM+NN
>cfca		d5 cf				                .word nt_asm_lsr_zx
>cfcc		6e a6 73 a6					.word xt_asm_lsr_z, z_asm_lsr_z
>cfd0		6c 73 72 2e 7a					.text "lsr.z"
.cfd5						nt_asm_lsr_zx:
>cfd5		06 0c						.byte 6, IM+NN
>cfd7		e3 cf				                .word nt_asm_nop
>cfd9		73 a6 78 a6					.word xt_asm_lsr_zx, z_asm_lsr_zx
>cfdd		6c 73 72 2e 7a 78				.text "lsr.zx"
.cfe3						nt_asm_nop:
>cfe3		03 0c						.byte 3, IM+NN
>cfe5		ee cf				                .word nt_asm_ora
>cfe7		78 a6 7d a6					.word xt_asm_nop, z_asm_nop
>cfeb		6e 6f 70					.text "nop"
.cfee						nt_asm_ora:
>cfee		03 0c						.byte 3, IM+NN
>cff0		f9 cf				                .word nt_asm_ora_h
>cff2		7d a6 82 a6					.word xt_asm_ora, z_asm_ora
>cff6		6f 72 61					.text "ora"
.cff9						nt_asm_ora_h:
>cff9		05 0c						.byte 5, IM+NN
>cffb		06 d0				                .word nt_asm_ora_x
>cffd		82 a6 87 a6					.word xt_asm_ora_h, z_asm_ora_h
>d001		6f 72 61 2e 23					.text "ora.#"
.d006						nt_asm_ora_x:
>d006		05 0c						.byte 5, IM+NN
>d008		13 d0				                .word nt_asm_ora_y
>d00a		87 a6 8c a6					.word xt_asm_ora_x, z_asm_ora_x
>d00e		6f 72 61 2e 78					.text "ora.x"
.d013						nt_asm_ora_y:
>d013		05 0c						.byte 5, IM+NN
>d015		20 d0				                .word nt_asm_ora_z
>d017		8c a6 91 a6					.word xt_asm_ora_y, z_asm_ora_y
>d01b		6f 72 61 2e 79					.text "ora.y"
.d020						nt_asm_ora_z:
>d020		05 0c						.byte 5, IM+NN
>d022		2d d0				                .word nt_asm_ora_zi
>d024		91 a6 96 a6					.word xt_asm_ora_z, z_asm_ora_z
>d028		6f 72 61 2e 7a					.text "ora.z"
.d02d						nt_asm_ora_zi:
>d02d		06 0c						.byte 6, IM+NN
>d02f		3b d0				                .word nt_asm_ora_ziy
>d031		96 a6 9d a6					.word xt_asm_ora_zi, z_asm_ora_zi
>d035		6f 72 61 2e 7a 69				.text "ora.zi"
.d03b						nt_asm_ora_ziy:
>d03b		07 0c						.byte 7, IM+NN
>d03d		4a d0				                .word nt_asm_ora_zx
>d03f		9d a6 a2 a6					.word xt_asm_ora_ziy, z_asm_ora_ziy
>d043		6f 72 61 2e 7a 69 79				.text "ora.ziy"
.d04a						nt_asm_ora_zx:
>d04a		06 0c						.byte 6, IM+NN
>d04c		58 d0				                .word nt_asm_ora_zxi
>d04e		a2 a6 a7 a6					.word xt_asm_ora_zx, z_asm_ora_zx
>d052		6f 72 61 2e 7a 78				.text "ora.zx"
.d058						nt_asm_ora_zxi:
>d058		07 0c						.byte 7, IM+NN
>d05a		67 d0				                .word nt_asm_pha
>d05c		a7 a6 ac a6					.word xt_asm_ora_zxi, z_asm_ora_zxi
>d060		6f 72 61 2e 7a 78 69				.text "ora.zxi"
.d067						nt_asm_pha:
>d067		03 0c						.byte 3, IM+NN
>d069		72 d0				                .word nt_asm_php
>d06b		ac a6 b1 a6					.word xt_asm_pha, z_asm_pha
>d06f		70 68 61					.text "pha"
.d072						nt_asm_php:
>d072		03 0c						.byte 3, IM+NN
>d074		7d d0				                .word nt_asm_phx
>d076		b1 a6 b6 a6					.word xt_asm_php, z_asm_php
>d07a		70 68 70					.text "php"
.d07d						nt_asm_phx:
>d07d		03 0c						.byte 3, IM+NN
>d07f		88 d0				                .word nt_asm_phy
>d081		b6 a6 bb a6					.word xt_asm_phx, z_asm_phx
>d085		70 68 78					.text "phx"
.d088						nt_asm_phy:
>d088		03 0c						.byte 3, IM+NN
>d08a		93 d0				                .word nt_asm_pla
>d08c		bb a6 c0 a6					.word xt_asm_phy, z_asm_phy
>d090		70 68 79					.text "phy"
.d093						nt_asm_pla:
>d093		03 0c						.byte 3, IM+NN
>d095		9e d0				                .word nt_asm_plp
>d097		c0 a6 c5 a6					.word xt_asm_pla, z_asm_pla
>d09b		70 6c 61					.text "pla"
.d09e						nt_asm_plp:
>d09e		03 0c						.byte 3, IM+NN
>d0a0		a9 d0				                .word nt_asm_plx
>d0a2		c5 a6 ca a6					.word xt_asm_plp, z_asm_plp
>d0a6		70 6c 70					.text "plp"
.d0a9						nt_asm_plx:
>d0a9		03 0c						.byte 3, IM+NN
>d0ab		b4 d0				                .word nt_asm_ply
>d0ad		ca a6 cf a6					.word xt_asm_plx, z_asm_plx
>d0b1		70 6c 78					.text "plx"
.d0b4						nt_asm_ply:
>d0b4		03 0c						.byte 3, IM+NN
>d0b6		bf d0				                .word nt_asm_rol
>d0b8		cf a6 d4 a6					.word xt_asm_ply, z_asm_ply
>d0bc		70 6c 79					.text "ply"
.d0bf						nt_asm_rol:
>d0bf		03 0c						.byte 3, IM+NN
>d0c1		ca d0				                .word nt_asm_rol_a
>d0c3		d4 a6 d9 a6					.word xt_asm_rol, z_asm_rol
>d0c7		72 6f 6c					.text "rol"
.d0ca						nt_asm_rol_a:
>d0ca		05 0c						.byte 5, IM+NN
>d0cc		d7 d0				                .word nt_asm_rol_x
>d0ce		d9 a6 de a6					.word xt_asm_rol_a, z_asm_rol_a
>d0d2		72 6f 6c 2e 61					.text "rol.a"
.d0d7						nt_asm_rol_x:
>d0d7		05 0c						.byte 5, IM+NN
>d0d9		e4 d0				                .word nt_asm_rol_z
>d0db		de a6 e3 a6					.word xt_asm_rol_x, z_asm_rol_x
>d0df		72 6f 6c 2e 78					.text "rol.x"
.d0e4						nt_asm_rol_z:
>d0e4		05 0c						.byte 5, IM+NN
>d0e6		f1 d0				                .word nt_asm_rol_zx
>d0e8		e3 a6 e8 a6					.word xt_asm_rol_z, z_asm_rol_z
>d0ec		72 6f 6c 2e 7a					.text "rol.z"
.d0f1						nt_asm_rol_zx:
>d0f1		06 0c						.byte 6, IM+NN
>d0f3		ff d0				                .word nt_asm_ror
>d0f5		e8 a6 ed a6					.word xt_asm_rol_zx, z_asm_rol_zx
>d0f9		72 6f 6c 2e 7a 78				.text "rol.zx"
.d0ff						nt_asm_ror:
>d0ff		03 0c						.byte 3, IM+NN
>d101		0a d1				                .word nt_asm_ror_a
>d103		ed a6 f2 a6					.word xt_asm_ror, z_asm_ror
>d107		72 6f 72					.text "ror"
.d10a						nt_asm_ror_a:
>d10a		05 0c						.byte 5, IM+NN
>d10c		17 d1				                .word nt_asm_ror_x
>d10e		f2 a6 f7 a6					.word xt_asm_ror_a, z_asm_ror_a
>d112		72 6f 72 2e 61					.text "ror.a"
.d117						nt_asm_ror_x:
>d117		05 0c						.byte 5, IM+NN
>d119		24 d1				                .word nt_asm_ror_z
>d11b		f7 a6 fc a6					.word xt_asm_ror_x, z_asm_ror_x
>d11f		72 6f 72 2e 78					.text "ror.x"
.d124						nt_asm_ror_z:
>d124		05 0c						.byte 5, IM+NN
>d126		31 d1				                .word nt_asm_ror_zx
>d128		fc a6 01 a7					.word xt_asm_ror_z, z_asm_ror_z
>d12c		72 6f 72 2e 7a					.text "ror.z"
.d131						nt_asm_ror_zx:
>d131		06 0c						.byte 6, IM+NN
>d133		3f d1				                .word nt_asm_rti
>d135		01 a7 06 a7					.word xt_asm_ror_zx, z_asm_ror_zx
>d139		72 6f 72 2e 7a 78				.text "ror.zx"
.d13f						nt_asm_rti:
>d13f		03 0c						.byte 3, IM+NN
>d141		4a d1				                .word nt_asm_rts
>d143		06 a7 0b a7					.word xt_asm_rti, z_asm_rti
>d147		72 74 69					.text "rti"
.d14a						nt_asm_rts:
>d14a		03 0c						.byte 3, IM+NN
>d14c		55 d1				                .word nt_asm_sbc
>d14e		0b a7 10 a7					.word xt_asm_rts, z_asm_rts
>d152		72 74 73					.text "rts"
.d155						nt_asm_sbc:
>d155		03 0c						.byte 3, IM+NN
>d157		60 d1				                .word nt_asm_sbc_h
>d159		10 a7 15 a7					.word xt_asm_sbc, z_asm_sbc
>d15d		73 62 63					.text "sbc"
.d160						nt_asm_sbc_h:
>d160		05 0c						.byte 5, IM+NN
>d162		6d d1				                .word nt_asm_sbc_x
>d164		15 a7 1a a7					.word xt_asm_sbc_h, z_asm_sbc_h
>d168		73 62 63 2e 23					.text "sbc.#"
.d16d						nt_asm_sbc_x:
>d16d		05 0c						.byte 5, IM+NN
>d16f		7a d1				                .word nt_asm_sbc_y
>d171		1a a7 1f a7					.word xt_asm_sbc_x, z_asm_sbc_x
>d175		73 62 63 2e 78					.text "sbc.x"
.d17a						nt_asm_sbc_y:
>d17a		05 0c						.byte 5, IM+NN
>d17c		87 d1				                .word nt_asm_sbc_z
>d17e		1f a7 24 a7					.word xt_asm_sbc_y, z_asm_sbc_y
>d182		73 62 63 2e 79					.text "sbc.y"
.d187						nt_asm_sbc_z:
>d187		05 0c						.byte 5, IM+NN
>d189		94 d1				                .word nt_asm_sbc_zi
>d18b		24 a7 29 a7					.word xt_asm_sbc_z, z_asm_sbc_z
>d18f		73 62 63 2e 7a					.text "sbc.z"
.d194						nt_asm_sbc_zi:
>d194		06 0c						.byte 6, IM+NN
>d196		a2 d1				                .word nt_asm_sbc_ziy
>d198		29 a7 2e a7					.word xt_asm_sbc_zi, z_asm_sbc_zi
>d19c		73 62 63 2e 7a 69				.text "sbc.zi"
.d1a2						nt_asm_sbc_ziy:
>d1a2		07 0c						.byte 7, IM+NN
>d1a4		b1 d1				                .word nt_asm_sbc_zx
>d1a6		2e a7 33 a7					.word xt_asm_sbc_ziy, z_asm_sbc_ziy
>d1aa		73 62 63 2e 7a 69 79				.text "sbc.ziy"
.d1b1						nt_asm_sbc_zx:
>d1b1		06 0c						.byte 6, IM+NN
>d1b3		bf d1				                .word nt_asm_sbc_zxi
>d1b5		33 a7 38 a7					.word xt_asm_sbc_zx, z_asm_sbc_zx
>d1b9		73 62 63 2e 7a 78				.text "sbc.zx"
.d1bf						nt_asm_sbc_zxi:
>d1bf		07 0c						.byte 7, IM+NN
>d1c1		ce d1				                .word nt_asm_sec
>d1c3		38 a7 3c a7					.word xt_asm_sbc_zxi, z_asm_sbc_zxi
>d1c7		73 62 63 2e 7a 78 69				.text "sbc.zxi"
.d1ce						nt_asm_sec:
>d1ce		03 0c						.byte 3, IM+NN
>d1d0		d9 d1				                .word nt_asm_sed
>d1d2		3c a7 40 a7					.word xt_asm_sec, z_asm_sec
>d1d6		73 65 63					.text "sec"
.d1d9						nt_asm_sed:
>d1d9		03 0c						.byte 3, IM+NN
>d1db		e4 d1				                .word nt_asm_sei
>d1dd		40 a7 44 a7					.word xt_asm_sed, z_asm_sed
>d1e1		73 65 64					.text "sed"
.d1e4						nt_asm_sei:
>d1e4		03 0c						.byte 3, IM+NN
>d1e6		ef d1				                .word nt_asm_sta
>d1e8		44 a7 48 a7					.word xt_asm_sei, z_asm_sei
>d1ec		73 65 69					.text "sei"
.d1ef						nt_asm_sta:
>d1ef		03 0c						.byte 3, IM+NN
>d1f1		fa d1				                .word nt_asm_sta_x
>d1f3		48 a7 4c a7					.word xt_asm_sta, z_asm_sta
>d1f7		73 74 61					.text "sta"
.d1fa						nt_asm_sta_x:
>d1fa		05 0c						.byte 5, IM+NN
>d1fc		07 d2				                .word nt_asm_sta_y
>d1fe		4c a7 50 a7					.word xt_asm_sta_x, z_asm_sta_x
>d202		73 74 61 2e 78					.text "sta.x"
.d207						nt_asm_sta_y:
>d207		05 0c						.byte 5, IM+NN
>d209		14 d2				                .word nt_asm_sta_z
>d20b		50 a7 54 a7					.word xt_asm_sta_y, z_asm_sta_y
>d20f		73 74 61 2e 79					.text "sta.y"
.d214						nt_asm_sta_z:
>d214		05 0c						.byte 5, IM+NN
>d216		21 d2				                .word nt_asm_sta_zi
>d218		54 a7 58 a7					.word xt_asm_sta_z, z_asm_sta_z
>d21c		73 74 61 2e 7a					.text "sta.z"
.d221						nt_asm_sta_zi:
>d221		06 0c						.byte 6, IM+NN
>d223		2f d2				                .word nt_asm_sta_ziy
>d225		58 a7 5c a7					.word xt_asm_sta_zi, z_asm_sta_zi
>d229		73 74 61 2e 7a 69				.text "sta.zi"
.d22f						nt_asm_sta_ziy:
>d22f		07 0c						.byte 7, IM+NN
>d231		3e d2				                .word nt_asm_sta_zx
>d233		5c a7 60 a7					.word xt_asm_sta_ziy, z_asm_sta_ziy
>d237		73 74 61 2e 7a 69 79				.text "sta.ziy"
.d23e						nt_asm_sta_zx:
>d23e		06 0c						.byte 6, IM+NN
>d240		4c d2				                .word nt_asm_sta_zxi
>d242		60 a7 64 a7					.word xt_asm_sta_zx, z_asm_sta_zx
>d246		73 74 61 2e 7a 78				.text "sta.zx"
.d24c						nt_asm_sta_zxi:
>d24c		07 0c						.byte 7, IM+NN
>d24e		5b d2				                .word nt_asm_stx
>d250		64 a7 68 a7					.word xt_asm_sta_zxi, z_asm_sta_zxi
>d254		73 74 61 2e 7a 78 69				.text "sta.zxi"
.d25b						nt_asm_stx:
>d25b		03 0c						.byte 3, IM+NN
>d25d		66 d2				                .word nt_asm_stx_z
>d25f		68 a7 6c a7					.word xt_asm_stx, z_asm_stx
>d263		73 74 78					.text "stx"
.d266						nt_asm_stx_z:
>d266		05 0c						.byte 5, IM+NN
>d268		73 d2				                .word nt_asm_stx_zy
>d26a		6c a7 70 a7					.word xt_asm_stx_z, z_asm_stx_z
>d26e		73 74 78 2e 7a					.text "stx.z"
.d273						nt_asm_stx_zy:
>d273		06 0c						.byte 6, IM+NN
>d275		81 d2				                .word nt_asm_sty
>d277		70 a7 74 a7					.word xt_asm_stx_zy, z_asm_stx_zy
>d27b		73 74 78 2e 7a 79				.text "stx.zy"
.d281						nt_asm_sty:
>d281		03 0c						.byte 3, IM+NN
>d283		8c d2				                .word nt_asm_sty_z
>d285		74 a7 78 a7					.word xt_asm_sty, z_asm_sty
>d289		73 74 79					.text "sty"
.d28c						nt_asm_sty_z:
>d28c		05 0c						.byte 5, IM+NN
>d28e		99 d2				                .word nt_asm_sty_zx
>d290		78 a7 7c a7					.word xt_asm_sty_z, z_asm_sty_z
>d294		73 74 79 2e 7a					.text "sty.z"
.d299						nt_asm_sty_zx:
>d299		06 0c						.byte 6, IM+NN
>d29b		a7 d2				                .word nt_asm_stz
>d29d		7c a7 80 a7					.word xt_asm_sty_zx, z_asm_sty_zx
>d2a1		73 74 79 2e 7a 78				.text "sty.zx"
.d2a7						nt_asm_stz:
>d2a7		03 0c						.byte 3, IM+NN
>d2a9		b2 d2				                .word nt_asm_stz_x
>d2ab		80 a7 84 a7					.word xt_asm_stz, z_asm_stz
>d2af		73 74 7a					.text "stz"
.d2b2						nt_asm_stz_x:
>d2b2		05 0c						.byte 5, IM+NN
>d2b4		bf d2				                .word nt_asm_stz_z
>d2b6		84 a7 88 a7					.word xt_asm_stz_x, z_asm_stz_x
>d2ba		73 74 7a 2e 78					.text "stz.x"
.d2bf						nt_asm_stz_z:
>d2bf		05 0c						.byte 5, IM+NN
>d2c1		cc d2				                .word nt_asm_stz_zx
>d2c3		88 a7 8c a7					.word xt_asm_stz_z, z_asm_stz_z
>d2c7		73 74 7a 2e 7a					.text "stz.z"
.d2cc						nt_asm_stz_zx:
>d2cc		06 0c						.byte 6, IM+NN
>d2ce		da d2				                .word nt_asm_tax
>d2d0		8c a7 90 a7					.word xt_asm_stz_zx, z_asm_stz_zx
>d2d4		73 74 7a 2e 7a 78				.text "stz.zx"
.d2da						nt_asm_tax:
>d2da		03 0c						.byte 3, IM+NN
>d2dc		e5 d2				                .word nt_asm_tay
>d2de		90 a7 94 a7					.word xt_asm_tax, z_asm_tax
>d2e2		74 61 78					.text "tax"
.d2e5						nt_asm_tay:
>d2e5		03 0c						.byte 3, IM+NN
>d2e7		f0 d2				                .word nt_asm_trb
>d2e9		94 a7 98 a7					.word xt_asm_tay, z_asm_tay
>d2ed		74 61 79					.text "tay"
.d2f0						nt_asm_trb:
>d2f0		03 0c						.byte 3, IM+NN
>d2f2		fb d2				                .word nt_asm_trb_z
>d2f4		98 a7 9c a7					.word xt_asm_trb, z_asm_trb
>d2f8		74 72 62					.text "trb"
.d2fb						nt_asm_trb_z:
>d2fb		05 0c						.byte 5, IM+NN
>d2fd		08 d3				                .word nt_asm_tsb
>d2ff		9c a7 a0 a7					.word xt_asm_trb_z, z_asm_trb_z
>d303		74 72 62 2e 7a					.text "trb.z"
.d308						nt_asm_tsb:
>d308		03 0c						.byte 3, IM+NN
>d30a		13 d3				                .word nt_asm_tsb_z
>d30c		a0 a7 a4 a7					.word xt_asm_tsb, z_asm_tsb
>d310		74 73 62					.text "tsb"
.d313						nt_asm_tsb_z:
>d313		05 0c						.byte 5, IM+NN
>d315		20 d3				                .word nt_asm_tsx
>d317		a4 a7 a8 a7					.word xt_asm_tsb_z, z_asm_tsb_z
>d31b		74 73 62 2e 7a					.text "tsb.z"
.d320						nt_asm_tsx:
>d320		03 0c						.byte 3, IM+NN
>d322		2b d3				                .word nt_asm_txa
>d324		a8 a7 ac a7					.word xt_asm_tsx, z_asm_tsx
>d328		74 73 78					.text "tsx"
.d32b						nt_asm_txa:
>d32b		03 0c						.byte 3, IM+NN
>d32d		36 d3				                .word nt_asm_txs
>d32f		ac a7 b0 a7					.word xt_asm_txa, z_asm_txa
>d333		74 78 61					.text "txa"
.d336						nt_asm_txs:
>d336		03 0c						.byte 3, IM+NN
>d338		41 d3				                .word nt_asm_tya
>d33a		b0 a7 b4 a7					.word xt_asm_txs, z_asm_txs
>d33e		74 78 73					.text "txs"
.d341						nt_asm_tya:
>d341		03 0c						.byte 3, IM+NN
>d343		4c d3				                .word nt_asm_arrow
>d345		b4 a7 b8 a7					.word xt_asm_tya, z_asm_tya
>d349		74 79 61					.text "tya"
.d34c						nt_asm_arrow:
>d34c		03 04				                .byte 3, IM
>d34e		57 d3				                .word nt_asm_back_jump
>d350		1b 89 25 89			                .word xt_asm_arrow, z_asm_arrow
>d354		2d 2d 3e			                .text "-->"
.d357						nt_asm_back_jump:
>d357		02 04				                .byte 2, IM
>d359		61 d3				                .word nt_asm_back_branch
>d35b		09 a8 09 a8			                .word xt_asm_back_jump, z_asm_back_jump
>d35f		3c 6a				                .text "<j"
.d361						nt_asm_back_branch:
>d361		02 04				                .byte 2, IM
>d363		6b d3				                .word nt_asm_push_a
>d365		0a a8 12 a8			                .word xt_asm_back_branch, z_asm_back_branch
>d369		3c 62				                .text "<b"
.d36b						nt_asm_push_a:
>d36b		06 0c				                .byte 6, IM+NN
>d36d		00 00				                .word 0000
>d36f		f2 a7 01 a8			                .word xt_asm_push_a, z_asm_push_a
>d373		70 75 73 68 2d 61		                .text "push-a"

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../strings.asm

=0						ix := 0
=0						str_ok             = ix         ; unused?
=1						ix += 1
=1						str_compile        = ix         ; unused?
=2						ix += 1
=2						str_redefined      = ix
=3						ix += 1
=3						str_abc_upper      = ix         ; unused?
=4						ix += 1
=4						str_wid_forth      = ix
=5						ix += 1
=5						str_wid_editor     = ix
=6						ix += 1
=6						str_wid_assembler  = ix
=7						ix += 1
=7						str_wid_root       = ix
=8						ix += 1
=8						str_see_flags      = ix
=9						ix += 1
=9						str_see_nt         = ix
=10						ix += 1
=10						str_see_xt         = ix
=11						ix += 1
=11						str_see_size       = ix
=12						ix += 1
=12						str_disasm_sdc     = ix
=13						ix += 1
=13						str_disasm_lit     = ix
=14						ix += 1
=14						str_disasm_0bra    = ix
=15						ix += 1
=15						str_disasm_loop    = ix
=16						ix += 1
=16						str_disasm_do      = ix
=17						ix += 1
.d379						string_table:
>d379		9b d3 9f d3 a9 d3 b4 d3		        .word s_ok, s_compiled, s_redefined, s_abc_upper              ; 0-3
>d381		eb d3 e3 d3 d8 d3 f2 d3		        .word s_wid_forth, s_wid_editor, s_wid_asm, s_wid_root        ; 4-7
>d389		f8 d3 14 d4 19 d4 1e d4		        .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 8-11
>d391		2f d4 42 d4 4b d4 54 d4		        .word s_disasm_sdc, s_disasm_lit, s_disasm_0bra, s_disasm_loop, s_disasm_do ; 12-16
>d399		5a d4
>d39b		20 6f 6b 00			s_ok:         .text " ok", 0         ; note space at beginning
>d39f		20 63 6f 6d 70 69 6c 65		s_compiled:   .text " compiled", 0   ; note space at beginning
>d3a7		64 00
>d3a9		72 65 64 65 66 69 6e 65		s_redefined:  .text "redefined ", 0  ; note space at end
>d3b1		64 20 00
>d3b4		30 31 32 33 34 35 36 37		s_abc_upper:  .text "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
>d3bc		38 39 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e
>d3cc		4f 50 51 52 53 54 55 56 57 58 59 5a
>d3d8		41 73 73 65 6d 62 6c 65		s_wid_asm:    .text "Assembler ", 0  ; Wordlist ID 2, note space at end
>d3e0		72 20 00
>d3e3		45 64 69 74 6f 72 20 00		s_wid_editor: .text "Editor ", 0     ; Wordlist ID 1, note space at end
>d3eb		46 6f 72 74 68 20 00		s_wid_forth:  .text "Forth ", 0      ; Wordlist ID 0, note space at end
>d3f2		52 6f 6f 74 20 00		s_wid_root:   .text "Root ", 0       ; Wordlist ID 3, note space at end
>d3f8		66 6c 61 67 73 20 28 43		s_see_flags:  .text "flags (CO AN IM NN UF HC): ", 0
>d400		4f 20 41 4e 20 49 4d 20 4e 4e 20 55 46 20 48 43
>d410		29 3a 20 00
>d414		6e 74 3a 20 00			s_see_nt:     .text "nt: ", 0
>d419		78 74 3a 20 00			s_see_xt:     .text "xt: ", 0
>d41e		73 69 7a 65 20 28 64 65		s_see_size:   .text "size (decimal): ", 0
>d426		63 69 6d 61 6c 29 3a 20 00
>d42f		20 53 54 41 43 4b 20 44		s_disasm_sdc: .text " STACK DEPTH CHECK", 0
>d437		45 50 54 48 20 43 48 45 43 4b 00
>d442		4c 49 54 45 52 41 4c 20		s_disasm_lit: .text "LITERAL ", 0
>d44a		00
>d44b		30 42 52 41 4e 43 48 20		s_disasm_0bra: .text "0BRANCH ",0
>d453		00
>d454		4c 4f 4f 50 20 00		s_disasm_loop: .text "LOOP ",0
>d45a		44 4f 20 00			s_disasm_do: .text "DO ",0
=0						err_allot        = 0
=1						err_badsource    = 1
=2						err_compileonly  = 2
=3						err_defer        = 3
=4						err_divzero      = 4
=5						err_noname       = 5
=6						err_refill       = 6
=7						err_state        = 7
=8						err_syntax       = 8
=9						err_underflow    = 9
=10						err_negallot     = 10
=11						err_wordlist     = 11
=12						err_blockwords   = 12
=13						err_returnstack  = 13
.d45e						error_table:
>d45e		7a d4 9b d4 bb d4 dc d4		        .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
>d466		f9 d4 0a d5 1a d5 48 d5		        .word es_divzero, es_noname, es_refill, es_state        ;  4-7
>d46e		60 d5 81 d5 96 d5 b2 d5		        .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
>d476		c9 d5 08 d6			        .word es_blockwords, es_returnstack                     ; 12-13
>d47a		41 4c 4c 4f 54 20 75 73		es_allot:       .text "ALLOT using all available memory", 0
>d482		69 6e 67 20 61 6c 6c 20 61 76 61 69 6c 61 62 6c
>d492		65 20 6d 65 6d 6f 72 79 00
>d49b		49 6c 6c 65 67 61 6c 20		es_badsource:   .text "Illegal SOURCE-ID during REFILL", 0
>d4a3		53 4f 55 52 43 45 2d 49 44 20 64 75 72 69 6e 67
>d4b3		20 52 45 46 49 4c 4c 00
>d4bb		49 6e 74 65 72 70 72 65		es_compileonly: .text "Interpreting a compile-only word", 0
>d4c3		74 69 6e 67 20 61 20 63 6f 6d 70 69 6c 65 2d 6f
>d4d3		6e 6c 79 20 77 6f 72 64 00
>d4dc		44 45 46 45 52 65 64 20		es_defer:       .text "DEFERed word not defined yet", 0
>d4e4		77 6f 72 64 20 6e 6f 74 20 64 65 66 69 6e 65 64
>d4f4		20 79 65 74 00
>d4f9		44 69 76 69 73 69 6f 6e		es_divzero:     .text "Division by zero", 0
>d501		20 62 79 20 7a 65 72 6f 00
>d50a		50 61 72 73 69 6e 67 20		es_noname:      .text "Parsing failure", 0
>d512		66 61 69 6c 75 72 65 00
>d51a		51 55 49 54 20 63 6f 75		es_refill:      .text "QUIT could not get input (REFILL returned -1)", 0
>d522		6c 64 20 6e 6f 74 20 67 65 74 20 69 6e 70 75 74
>d532		20 28 52 45 46 49 4c 4c 20 72 65 74 75 72 6e 65
>d542		64 20 2d 31 29 00
>d548		41 6c 72 65 61 64 79 20		es_state:       .text "Already in compile mode", 0
>d550		69 6e 20 63 6f 6d 70 69 6c 65 20 6d 6f 64 65 00
>d560		55 6e 64 65 66 69 6e 65		es_syntax:      .text "Undefined word or invalid number", 0
>d568		64 20 77 6f 72 64 20 6f 72 20 69 6e 76 61 6c 69
>d578		64 20 6e 75 6d 62 65 72 00
>d581		44 61 74 61 20 73 74 61		es_underflow:   .text "Data stack underflow", 0
>d589		63 6b 20 75 6e 64 65 72 66 6c 6f 77 00
>d596		4d 61 78 20 6d 65 6d 6f		es_negallot:    .text "Max memory freed with ALLOT", 0
>d59e		72 79 20 66 72 65 65 64 20 77 69 74 68 20 41 4c
>d5ae		4c 4f 54 00
>d5b2		4e 6f 20 77 6f 72 64 6c		es_wordlist:    .text "No wordlists available", 0
>d5ba		69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>d5c9		50 6c 65 61 73 65 20 61		es_blockwords:  .text "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
>d5d1		73 73 69 67 6e 20 76 65 63 74 6f 72 73 20 42 4c
>d5e1		4f 43 4b 2d 52 45 41 44 2d 56 45 43 54 4f 52 20
>d5f1		61 6e 64 20 42 4c 4f 43 4b 2d 57 52 49 54 45 2d
>d601		56 45 43 54 4f 52 00
>d608		52 65 74 75 72 6e 20 73		es_returnstack: .text "Return stack:", 0
>d610		74 61 63 6b 3a 00
>d616		0f 2f 43 4f 55 4e 54 45		envs_cs:        .text 15, "/COUNTED-STRING"
>d61e		44 2d 53 54 52 49 4e 47
>d626		05 2f 48 4f 4c 44		envs_hold:      .text 5, "/HOLD"
>d62c		04 2f 50 41 44			envs_pad:       .text 4, "/PAD"
>d631		11 41 44 44 52 45 53 53		envs_aub:       .text 17, "ADDRESS-UNIT-BITS"
>d639		2d 55 4e 49 54 2d 42 49 54 53
>d643		07 46 4c 4f 4f 52 45 44		envs_floored:   .text 7, "FLOORED"
>d64b		08 4d 41 58 2d 43 48 41		envs_max_char:  .text 8, "MAX-CHAR"
>d653		52
>d654		05 4d 41 58 2d 4e		envs_max_n:     .text 5, "MAX-N"
>d65a		05 4d 41 58 2d 55		envs_max_u:     .text 5, "MAX-U"
>d660		12 52 45 54 55 52 4e 2d		envs_rsc:       .text 18, "RETURN-STACK-CELLS"
>d668		53 54 41 43 4b 2d 43 45 4c 4c 53
>d673		0b 53 54 41 43 4b 2d 43		envs_sc:        .text 11, "STACK-CELLS"
>d67b		45 4c 4c 53
>d67f		09 57 4f 52 44 4c 49 53		envs_wl:        .text 9, "WORDLISTS"
>d687		54 53
>d689		05 4d 41 58 2d 44		envs_max_d:     .text 5, "MAX-D"
>d68f		06 4d 41 58 2d 55 44		envs_max_ud:    .text 6, "MAX-UD"

;******  Return to file: platform/../taliforth.asm

.d696						doconst:
.d696		ca		dex		                dex             ; make room for constant
.d697		ca		dex		                dex
.d698		68		pla		                pla             ; LSB of return address
.d699		85 25		sta $25		                sta tmp1
.d69b		68		pla		                pla             ; MSB of return address
.d69c		85 26		sta $26		                sta tmp1+1
.d69e		a0 01		ldy #$01	                ldy #1
.d6a0		b1 25		lda ($25),y	                lda (tmp1),y
.d6a2		95 00		sta $00,x	                sta 0,x
.d6a4		c8		iny		                iny
.d6a5		b1 25		lda ($25),y	                lda (tmp1),y
.d6a7		95 01		sta $01,x	                sta 1,x
.d6a9		60		rts		                rts
.d6aa						dodefer:
.d6aa		68		pla		                pla             ; LSB
.d6ab		85 25		sta $25		                sta tmp1
.d6ad		68		pla		                pla             ; MSB
.d6ae		85 26		sta $26		                sta tmp1+1
.d6b0		a0 01		ldy #$01	                ldy #1
.d6b2		b1 25		lda ($25),y	                lda (tmp1),y
.d6b4		85 27		sta $27		                sta tmp2
.d6b6		c8		iny		                iny
.d6b7		b1 25		lda ($25),y	                lda (tmp1),y
.d6b9		85 28		sta $28		                sta tmp2+1
.d6bb		6c 27 00	jmp ($0027)	                jmp (tmp2)      ; This is actually a jump to the new target
.d6be						defer_error:
.d6be		a9 03		lda #$03	                lda #err_defer
.d6c0		4c 44 d8	jmp $d844	                jmp error
.d6c3						dodoes:
.d6c3		7a		ply		                ply             ; LSB
.d6c4		68		pla		                pla             ; MSB
.d6c5		c8		iny		                iny
.d6c6		d0 01		bne $d6c9	                bne +
.d6c8		1a		inc a		                ina
.d6c9						+
.d6c9		84 27		sty $27		                sty tmp2
.d6cb		85 28		sta $28		                sta tmp2+1
.d6cd		ca		dex		                dex
.d6ce		ca		dex		                dex
.d6cf		7a		ply		                ply
.d6d0		68		pla		                pla
.d6d1		c8		iny		                iny
.d6d2		d0 01		bne $d6d5	                bne +
.d6d4		1a		inc a		                ina
.d6d5						+
.d6d5		94 00		sty $00,x	                sty 0,x         ; LSB
.d6d7		95 01		sta $01,x	                sta 1,x         ; MSB
.d6d9		6c 27 00	jmp ($0027)	                jmp (tmp2)
.d6dc						dovar:
.d6dc		7a		ply		                ply             ; LSB
.d6dd		68		pla		                pla             ; MSB
.d6de		c8		iny		                iny
.d6df		d0 01		bne $d6e2	                bne +
.d6e1		1a		inc a		                ina
.d6e2						+
.d6e2		ca		dex		                dex
.d6e3		ca		dex		                dex
.d6e4		95 01		sta $01,x	                sta 1,x
.d6e6		98		tya		                tya
.d6e7		95 00		sta $00,x	                sta 0,x
.d6e9		60		rts		                rts
.d6ea						push_upvar_tos:
.d6ea		ca		dex		                dex
.d6eb		ca		dex		                dex
.d6ec		18		clc		                clc
.d6ed		65 08		adc $08		                adc up
.d6ef		95 00		sta $00,x	                sta 0,x
.d6f1		a5 09		lda $09		                lda up+1
.d6f3		90 01		bcc $d6f6	                bcc +
.d6f5		1a		inc a		                ina
.d6f6						+
.d6f6		95 01		sta $01,x	                sta 1,x
.d6f8		60		rts		                rts
.d6f9						byte_to_ascii:
.d6f9		48		pha		                pha
.d6fa		4a		lsr a		                lsr             ; convert high nibble first
.d6fb		4a		lsr a		                lsr
.d6fc		4a		lsr a		                lsr
.d6fd		4a		lsr a		                lsr
.d6fe		20 02 d7	jsr $d702	                jsr _nibble_to_ascii
.d701		68		pla		                pla
.d702						_nibble_to_ascii:
.d702		29 0f		and #$0f	                and #$F
.d704		09 30		ora #$30	                ora #'0'
.d706		c9 3a		cmp #$3a	                cmp #'9'+1
.d708		90 02		bcc $d70c	                bcc +
.d70a		69 06		adc #$06	                adc #6
.d70c		4c c5 86	jmp $86c5	+               jmp emit_a
.d70f		60		rts		                rts
.d710						find_header_name:
.d710		b5 02		lda $02,x	                lda 2,x                 ; Copy mystery string to tmp2
.d712		85 27		sta $27		                sta tmp2
.d714		b5 03		lda $03,x	                lda 3,x
.d716		85 28		sta $28		                sta tmp2+1
.d718						_loop:
.d718		b2 25		lda ($25)	                lda (tmp1)
.d71a		d5 00		cmp $00,x	                cmp 0,x
.d71c		d0 3a		bne $d758	                bne _next_entry
.d71e		b2 27		lda ($27)	                lda (tmp2)      ; first character of mystery string
.d720		a0 08		ldy #$08	                ldy #8
.d722		51 25		eor ($25),y	                eor (tmp1),y    ; flag any mismatched bits
.d724		29 df		and #$df	                and #%11011111  ; but ignore upper/lower case bit
.d726		d0 30		bne $d758	                bne _next_entry ; definitely not equal if any bits differ
.d728		a5 25		lda $25		                lda tmp1
.d72a		48		pha		                pha             ; Save original address on the stack
.d72b		18		clc		                clc
.d72c		69 08		adc #$08	                adc #8
.d72e		85 25		sta $25		                sta tmp1
.d730		a5 26		lda $26		                lda tmp1+1
.d732		48		pha		                pha
.d733		90 03		bcc $d738	                bcc +
.d735		1a		inc a		                ina
.d736		85 26		sta $26		                sta tmp1+1
.d738						+
.d738		b4 00		ldy $00,x	                ldy 0,x         ; index is length of string minus 1
.d73a		88		dey		                dey
.d73b						_next_char:
.d73b		b1 27		lda ($27),y	                lda (tmp2),y    ; last char of mystery string
.d73d		c9 5b		cmp #$5b	                cmp #'Z'+1
.d73f		b0 06		bcs $d747	                bcs _check_char
.d741		c9 41		cmp #$41	                cmp #'A'
.d743		90 02		bcc $d747	                bcc _check_char
.d745		09 20		ora #$20	                ora #$20
.d747						_check_char:
.d747		d1 25		cmp ($25),y	                cmp (tmp1),y    ; last char of word we're testing against
.d749		d0 03		bne $d74e	                bne _reset_tmp1
.d74b		88		dey		                dey
.d74c		10 ed		bpl $d73b	                bpl _next_char
.d74e						_reset_tmp1:
.d74e		68		pla		                pla
.d74f		85 26		sta $26		                sta tmp1+1
.d751		68		pla		                pla
.d752		85 25		sta $25		                sta tmp1
.d754		98		tya		                tya             ; leave A = $FF on success
.d755		c8		iny		                iny             ; if Y was $FF, we succeeded
.d756		f0 11		beq $d769	                beq _done
.d758						_next_entry:
.d758		a0 02		ldy #$02	                ldy #2
.d75a		b1 25		lda ($25),y	                lda (tmp1),y
.d75c		48		pha		                pha
.d75d		c8		iny		                iny
.d75e		b1 25		lda ($25),y	                lda (tmp1),y
.d760		85 26		sta $26		                sta tmp1+1
.d762		68		pla		                pla
.d763		85 25		sta $25		                sta tmp1
.d765		05 26		ora $26		                ora tmp1+1
.d767		d0 af		bne $d718	                bne _loop
.d769		c9 00		cmp #$00	_done:          cmp #0      ; A is 0 on failure and $FF on success
.d76b		60		rts		                rts         ; so cmp #0 sets Z on failure and clears on success
.d76c						compare_16bit:
.d76c		b5 00		lda $00,x	                lda 0,x                 ; LSB of TOS
.d76e		d5 02		cmp $02,x	                cmp 2,x                 ; LSB of NOS
.d770		f0 08		beq $d77a	                beq _equal
.d772		b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d774		f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d776		70 08		bvs $d780	                bvs _overflow
.d778		80 08		bra $d782	                bra _not_equal
.d77a						_equal:
.d77a		b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d77c		f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d77e		50 04		bvc $d784	                bvc _done
.d780						_overflow:
.d780		49 80		eor #$80	                eor #$80                ; complement negative flag
.d782						_not_equal:
.d782		09 01		ora #$01	                ora #1                  ; set Z=0 since we're not equal
.d784						_done:
.d784		60		rts		                rts
.d785						current_to_dp:
.d785		a0 08		ldy #$08	                ldy #current_offset
.d787		b1 08		lda ($08),y	                lda (up),y      ; current is a byte variable
.d789		0a		asl a		                asl             ; turn it into an offset (in cells)
.d78a		18		clc		                clc
.d78b		69 0a		adc #$0a	                adc #wordlists_offset   ; add offset to wordlists base.
.d78d		a8		tay		                tay
.d78e		b1 08		lda ($08),y	                lda (up),y              ; get the dp for that wordlist.
.d790		85 02		sta $02		                sta dp
.d792		c8		iny		                iny
.d793		b1 08		lda ($08),y	                lda (up),y
.d795		85 03		sta $03		                sta dp+1
.d797		60		rts		                rts
.d798						dp_to_current:
.d798		a0 08		ldy #$08	                ldy #current_offset
.d79a		b1 08		lda ($08),y	                lda (up),y      ; current is a byte variable
.d79c		0a		asl a		                asl             ; turn it into an offset (in cells)
.d79d		18		clc		                clc
.d79e		69 0a		adc #$0a	                adc #wordlists_offset   ; add offset to wordlists base.
.d7a0		a8		tay		                tay
.d7a1		a5 02		lda $02		                lda dp
.d7a3		91 08		sta ($08),y	                sta (up),y              ; get the dp for that wordlist.
.d7a5		c8		iny		                iny
.d7a6		a5 03		lda $03		                lda dp+1
.d7a8		91 08		sta ($08),y	                sta (up),y
.d7aa		60		rts		                rts
.d7ab						interpret:
.d7ab						_loop:
.d7ab		20 5d 8d	jsr $8d5d	                jsr xt_parse_name       ; ( "string" -- addr u )
.d7ae		b5 00		lda $00,x	                lda 0,x
.d7b0		15 01		ora $01,x	                ora 1,x
.d7b2		f0 5b		beq $d80f	                beq _line_done
.d7b4		20 b1 93	jsr $93b1	                jsr xt_two_dup          ; ( addr u -- addr u addr u )
.d7b7		20 fc 9a	jsr $9afc	                jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
.d7ba		b5 00		lda $00,x	                lda 0,x
.d7bc		15 01		ora $01,x	                ora 1,x
.d7be		d0 19		bne $d7d9	                bne _got_name_token
.d7c0		e8		inx		                inx                     ; ( addr u 0 -- addr u )
.d7c1		e8		inx		                inx
.d7c2		20 a8 9c	jsr $9ca8	                jsr xt_number           ; ( addr u -- u|d )
.d7c5		a5 1a		lda $1a		                lda state
.d7c7		f0 e2		beq $d7ab	                beq _loop
.d7c9		a9 20		lda #$20	                lda #%00100000
.d7cb		24 1c		bit $1c		                bit status
.d7cd		d0 05		bne $d7d4	                bne _double_number
.d7cf		20 04 8a	jsr $8a04	                jsr xt_literal
.d7d2		80 d7		bra $d7ab	                bra _loop
.d7d4						_double_number:
.d7d4		20 67 9f	jsr $9f67	                jsr xt_two_literal
.d7d7		80 d2		bra $d7ab	                bra _loop
.d7d9						_got_name_token:
.d7d9		b5 00		lda $00,x	                lda 0,x
.d7db		95 04		sta $04,x	                sta 4,x
.d7dd		b5 01		lda $01,x	                lda 1,x
.d7df		95 05		sta $05,x	                sta 5,x
.d7e1		e8		inx		                inx
.d7e2		e8		inx		                inx
.d7e3		e8		inx		                inx
.d7e4		e8		inx		                inx                     ; ( nt )
.d7e5		20 f5 8c	jsr $8cf5	                jsr xt_one_plus
.d7e8		a1 00		lda ($00,x)	                lda (0,x)
.d7ea		48		pha		                pha
.d7eb		20 e9 8c	jsr $8ce9	                jsr xt_one_minus
.d7ee		20 45 9c	jsr $9c45	                jsr xt_name_to_int      ; ( nt - xt )
.d7f1		a5 1a		lda $1a		                lda state
.d7f3		d0 10		bne $d805	                bne _compile
.d7f5		68		pla		                pla
.d7f6		29 01		and #$01	                and #CO                 ; mask everything but Compile Only bit
.d7f8		f0 05		beq $d7ff	                beq _interpret
.d7fa		a9 02		lda #$02	                lda #err_compileonly
.d7fc		4c 44 d8	jmp $d844	                jmp error
.d7ff						_interpret:
.d7ff		20 05 88	jsr $8805	                jsr xt_execute
.d802		4c ab d7	jmp $d7ab	                jmp _loop
.d805						_compile:
.d805		68		pla		                pla
.d806		29 04		and #$04	                and #IM                 ; Mask all but IM bit
.d808		d0 f5		bne $d7ff	                bne _interpret          ; IMMEDIATE word, execute right now
.d80a		20 be 96	jsr $96be	                jsr xt_compile_comma
.d80d		80 9c		bra $d7ab	                bra _loop
.d80f						_line_done:
.d80f		e8		inx		                inx
.d810		e8		inx		                inx
.d811		e8		inx		                inx
.d812		e8		inx		                inx
.d813		60		rts		                rts
.d814						is_printable:
.d814		c9 20		cmp #$20	                cmp #AscSP              ; $20
.d816		90 08		bcc $d820	                bcc _done
.d818		c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.d81a		b0 03		bcs $d81f	                bcs _failed
.d81c		38		sec		                sec
.d81d		80 01		bra $d820	                bra _done
.d81f						_failed:
.d81f		18		clc		                clc
.d820						_done:
.d820		60		rts		                rts
.d821						is_whitespace:
.d821		c9 00		cmp #$00	                cmp #00         ; explicit comparison to leave Y untouched
.d823		90 08		bcc $d82d	                bcc _done
.d825		c9 21		cmp #$21	                cmp #AscSP+1
.d827		b0 03		bcs $d82c	                bcs _failed
.d829		38		sec		                sec
.d82a		80 01		bra $d82d	                bra _done
.d82c						_failed:
.d82c		18		clc		                clc
.d82d						_done:
.d82d		60		rts		                rts
.d82e						underflow_1:
.d82e		e0 77		cpx #$77	                cpx #dsp0-1
.d830		10 10		bpl $d842	                bpl underflow_error
.d832		60		rts		                rts
.d833						underflow_2:
.d833		e0 75		cpx #$75	                cpx #dsp0-3
.d835		10 0b		bpl $d842	                bpl underflow_error
.d837		60		rts		                rts
.d838						underflow_3:
.d838		e0 73		cpx #$73	                cpx #dsp0-5
.d83a		10 06		bpl $d842	                bpl underflow_error
.d83c		60		rts		                rts
.d83d						underflow_4:
.d83d		e0 71		cpx #$71	                cpx #dsp0-7
.d83f		10 01		bpl $d842	                bpl underflow_error
.d841		60		rts		                rts
.d842						underflow_error:
.d842		a9 09		lda #$09	                lda #err_underflow      ; fall through to error
.d844						error:
.d844		48		pha		                pha                     ; save error
.d845		20 84 d8	jsr $d884	                jsr print_error
.d848		20 3a 84	jsr $843a	                jsr xt_cr
.d84b		68		pla		                pla
.d84c		c9 09		cmp #$09	                cmp #err_underflow      ; should we display return stack?
.d84e		d0 17		bne $d867	                bne _no_underflow
.d850		a9 0d		lda #$0d	                lda #err_returnstack
.d852		20 84 d8	jsr $d884	                jsr print_error
.d855		ba		tsx		                tsx
.d856						-
.d856		e8		inx		                inx
.d857		f0 0b		beq $d864	                beq +
.d859		20 d1 91	jsr $91d1	                jsr xt_space
.d85c		bd 00 01	lda $0100,x	                lda $100,x
.d85f		20 f9 d6	jsr $d6f9	                jsr byte_to_ascii
.d862		80 f2		bra $d856	                bra -
.d864						+
.d864		20 3a 84	jsr $843a	                jsr xt_cr
.d867						_no_underflow:
.d867		4c 5e 80	jmp $805e	                jmp xt_abort            ; no jsr, as we clobber return stack
.d86a						print_string_no_lf:
.d86a		0a		asl a		                asl
.d86b		a8		tay		                tay
.d86c		b9 79 d3	lda $d379,y	                lda string_table,y
.d86f		85 29		sta $29		                sta tmp3                ; LSB
.d871		c8		iny		                iny
.d872		b9 79 d3	lda $d379,y	                lda string_table,y
.d875		85 2a		sta $2a		                sta tmp3+1              ; MSB
.d877						print_common:
.d877		a0 00		ldy #$00	                ldy #0
.d879						_loop:
.d879		b1 29		lda ($29),y	                lda (tmp3),y
.d87b		f0 06		beq $d883	                beq _done               ; strings are zero-terminated
.d87d		20 c5 86	jsr $86c5	                jsr emit_a              ; allows vectoring via output
.d880		c8		iny		                iny
.d881		80 f6		bra $d879	                bra _loop
.d883						_done:
.d883		60		rts		                rts
.d884						print_error:
.d884		0a		asl a		                asl
.d885		a8		tay		                tay
.d886		b9 5e d4	lda $d45e,y	                lda error_table,y
.d889		85 29		sta $29		                sta tmp3                ; LSB
.d88b		c8		iny		                iny
.d88c		b9 5e d4	lda $d45e,y	                lda error_table,y
.d88f		85 2a		sta $2a		                sta tmp3+1              ; MSB
.d891		20 77 d8	jsr $d877	                jsr print_common
.d894		60		rts		                rts
.d895						print_string:
.d895		20 6a d8	jsr $d86a	                jsr print_string_no_lf
.d898		4c 3a 84	jmp $843a	                jmp xt_cr               ; JSR/RTS because never compiled
.d89b						print_u:
.d89b		20 08 9e	jsr $9e08	                jsr xt_zero                     ; 0
.d89e		20 e1 89	jsr $89e1	                jsr xt_less_number_sign         ; <#
.d8a1		20 bf 8c	jsr $8cbf	                jsr xt_number_sign_s            ; #S
.d8a4		20 9d 8c	jsr $8c9d	                jsr xt_number_sign_greater      ; #>
.d8a7		4c bb 94	jmp $94bb	                jmp xt_type                     ; JSR/RTS because never compiled
.d8aa						code_end:

;******  Return to file: platform/simulator.asm

=$f000						io_start = $f000                ; virtual hardware addresses for the simulators
>f000						                .byte ?
>f001						io_putc:        .byte ?         ; $f001     write byte to stdout
>f002						                .byte ?
>f003						io_kbhit:       .byte ?         ; $f003     read non-zero on key ready (c65 only)
>f004						io_getc:        .byte ?         ; $f004     non-blocking read input character (0 if no key)
>f005						io_clk_start:   .byte ?         ; $f006     *read* to start cycle counter
>f006						io_clk_stop:    .byte ?         ; $f007     *read* to stop the cycle counter
>f007						io_clk_cycles:  .word ?,?       ; $f008-b   32-bit cycle count in NUXI order
>f00b						                .word ?,?
>f00f						io_blk_action:  .byte ?     ; $f010     Write to act (status=0 read=1 write=2)
>f010						io_blk_status:  .byte ?     ; $f011     Read action result (OK=0)
>f011						io_blk_number:  .word ?     ; $f012     Little endian block number 0-ffff
>f013						io_blk_buffer:  .word ?     ; $f014     Little endian memory address
.f015						io_end:
.f015						kernel_init:
.f015		78		sei		                sei             ; Disable interrupts
.f016		a2 00		ldx #$00	                ldx #0
.f018		bd 45 f0	lda $f045,x	-               lda s_kernel_id,x
.f01b		f0 06		beq $f023	                beq _done
.f01d		20 27 f0	jsr $f027	                jsr kernel_putc
.f020		e8		inx		                inx
.f021		80 f5		bra $f018	                bra -
.f023						_done:
.f023		4c 00 80	jmp $8000	                jmp forth
.f026						kernel_bye:
.f026		00		brk #		                brk
.f027						kernel_putc:
.f027		8d 01 f0	sta $f001	                sta io_putc
.f02a		60		rts		                rts

;******  Return to file: platform/platform-py65mon.asm

=$f003						io_bufc = io_kbhit
.f02b						kernel_getc:
.f02b		ad 03 f0	lda $f003	                lda io_bufc             ; first check the buffer
.f02e		9c 03 f0	stz $f003	                stz io_bufc
.f031		d0 05		bne $f038	                bne _done
.f033						_loop:
.f033		ad 04 f0	lda $f004	                lda io_getc
.f036		f0 fb		beq $f033	                beq _loop
.f038						_done:
.f038		60		rts		                rts
.f039						kernel_kbhit:
.f039		ad 03 f0	lda $f003	                lda io_bufc             ; do we already have a character?
.f03c		d0 06		bne $f044	                bne _done
.f03e		ad 04 f0	lda $f004	                lda io_getc             ; otherwise check and buffer the result
.f041		8d 03 f0	sta $f003	                sta io_bufc
.f044						_done:
.f044		60		rts		                rts
.f045						s_kernel_id:
>f045		54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 default kernel for py65mon (04. Dec 2022)", AscLF, 0
>f04d		74 68 20 32 20 64 65 66 61 75 6c 74 20 6b 65 72
>f05d		6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f 6e 20
>f06d		28 30 34 2e 20 44 65 63 20 32 30 32 32 29 0a 00
>fffa		15 f0				v_nmi   .word kernel_init
>fffc		15 f0				v_reset .word kernel_init
>fffe		15 f0				v_irq   .word kernel_init

;******  End of listing
