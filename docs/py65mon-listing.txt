
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output taliforth-py65mon.bin platform/platform-py65mon.asm
; Fri Aug 16 09:41:51 2024

;Offset	;PC	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-py65mon.asm

="py65mon"					TALI_ARCH := "py65mon"
=$7fff						ram_end = $7fff
=						TALI_OPTIONAL_WORDS := [ "ed", "editor", "ramdrive", "block", "environment?", "assembler", "disassembler", "wordlist" ]
=["lf"]						TALI_OPTION_CR_EOL := [ "lf" ]
=1						TALI_OPTION_HISTORY := 1
=0						TALI_OPTION_TERSE := 0
=0						TALI_OPTION_COLOR_INPUT := 0
="97;1"						input_color_code := "97;1" ; WHITE and BOLD
="0"						output_color_code := "0"   ; DEFAULT (light gray in many terminals)

;******  Processing file: platform/simulator.asm


;******  Processing file: platform/../taliforth.asm

.8000						code0:
.8000						forth:

;******  Processing file: platform/../words/all.asm

.8000						xt_cold:
.8000						w_cold:
.8000		d8		cld		                cld
.8001		a9 22		lda #$22	                lda #<kernel_putc
.8003		85 12		sta $12		                sta output
.8005		a9 f0		lda #$f0	                lda #>kernel_putc
.8007		85 13		sta $13		                sta output+1
.8009		a2 1d		ldx #$1d	                ldx #cold_zp_table_end-cold_zp_table-1
.800b						_load_zp_loop:
.800b		bd 97 b3	lda $b397,x	                lda cold_zp_table,x
.800e		95 00		sta $00,x	                sta zpage,x
.8010		ca		dex		                dex
.8011		d0 f8		bne $800b	                bne _load_zp_loop
.8013		ad 97 b3	lda $b397	                lda cold_zp_table
.8016		85 00		sta $00		                sta zpage
.8018		a2 ff		ldx #$ff	                ldx #rsp0
.801a		9a		txs		                txs
.801b		a2 78		ldx #$78	                ldx #dsp0
.801d		a0 35		ldy #$35	                ldy #cold_user_table_end-cold_user_table-1
.801f						_load_user_vars_loop:
.801f		b9 b5 b3	lda $b3b5,y	                lda cold_user_table,y
.8022		91 08		sta ($08),y	                sta (up),y
.8024		88		dey		                dey
.8025		d0 f8		bne $801f	                bne _load_user_vars_loop
.8027		ad b5 b3	lda $b3b5	                lda cold_user_table
.802a		92 08		sta ($08)	                sta (up)
.802c		20 ef 83	jsr $83ef	                jsr w_cr
.802f		ca		dex		                dex
.8030		ca		dex		                dex
.8031		ca		dex		                dex
.8032		ca		dex		                dex
.8033		a9 98		lda #$98	                lda #<forth_words_start
.8035		95 02		sta $02,x	                sta 2,x
.8037		a9 ba		lda #$ba	                lda #>forth_words_start
.8039		95 03		sta $03,x	                sta 3,x
.803b		a9 e2		lda #$e2	                lda #<(user_words_end-forth_words_start)
.803d		95 00		sta $00,x	                sta 0,x
.803f		a9 00		lda #$00	                lda #>(user_words_end-forth_words_start)
.8041		95 01		sta $01,x	                sta 1,x
.8043		20 81 88	jsr $8881	                jsr w_evaluate
.8046		9c 00 7c	stz $7c00	                stz hist_buff
.8049		9c 80 7c	stz $7c80	                stz hist_buff+$80
.804c		9c 00 7d	stz $7d00	                stz hist_buff+$100
.804f		9c 80 7d	stz $7d80	                stz hist_buff+$180
.8052		9c 00 7e	stz $7e00	                stz hist_buff+$200
.8055		9c 80 7e	stz $7e80	                stz hist_buff+$280
.8058		9c 00 7f	stz $7f00	                stz hist_buff+$300
.805b		9c 80 7f	stz $7f80	                stz hist_buff+$380
.805e						xt_abort:
.805e						w_abort:
.805e		a2 78		ldx #$78	                ldx #dsp0
.8060						xt_quit:
.8060						w_quit:
.8060		8a		txa		                txa             ; Save the DSP that we just defined
.8061		a2 ff		ldx #$ff	                ldx #rsp0
.8063		9a		txs		                txs
.8064		aa		tax		                tax             ; Restore the DSP. Dude, seriously.
.8065		64 04		stz $04		                stz ip
.8067		64 05		stz $05		                stz ip+1
.8069		64 0a		stz $0a		                stz insrc
.806b		64 0b		stz $0b		                stz insrc+1
.806d		a9 00		lda #$00	                lda #0
.806f		a0 04		ldy #$04	                ldy #blk_offset
.8071		91 08		sta ($08),y	                sta (up),y
.8073		c8		iny		                iny
.8074		91 08		sta ($08),y	                sta (up),y
.8076		a9 fc		lda #$fc	                lda #(256-4)
.8078		85 1f		sta $1f		                sta loopctrl
.807a		64 1a		stz $1a		                stz state
.807c		64 1b		stz $1b		                stz state+1
.807e						_get_line:
.807e		a9 00		lda #$00	                lda #<buffer0   ; input buffer, this is paranoid
.8080		85 0c		sta $0c		                sta cib
.8082		a9 02		lda #$02	                lda #>buffer0
.8084		85 0d		sta $0d		                sta cib+1
.8086		64 0e		stz $0e		                stz ciblen
.8088		64 0f		stz $0f		                stz ciblen+1
.808a		20 07 8f	jsr $8f07	                jsr w_refill           ; ( -- f )
.808d		b5 00		lda $00,x	                lda 0,x
.808f		d0 05		bne $8096	                bne _success
.8091		a9 06		lda #$06	                lda #err_refill
.8093		4c e0 d7	jmp $d7e0	                jmp error
.8096						_success:
.8096		e8		inx		                inx                     ; drop
.8097		e8		inx		                inx
.8098		20 49 d7	jsr $d749	                jsr interpret
.809b		e0 78		cpx #$78	                cpx #dsp0
.809d		f0 05		beq $80a4	                beq _stack_ok
.809f		90 03		bcc $80a4	                bcc _stack_ok           ; DSP must always be smaller than DSP0
.80a1		4c de d7	jmp $d7de	                jmp underflow_error
.80a4						_stack_ok:
.80a4		a5 1a		lda $1a		                lda state
.80a6		f0 02		beq $80aa	                beq _print
.80a8		a9 01		lda #$01	                lda #1                  ; number for "compile" string
.80aa						_print:
.80aa		20 06 d8	jsr $d806	                jsr print_string_no_lf
.80ad		20 ef 83	jsr $83ef	                jsr w_cr
.80b0		80 cc		bra $807e	                bra _get_line
.80b2						z_cold:
.80b2						z_abort:
.80b2						z_quit:

;******  Processing file: platform/../words/core.asm

.80b2						xt_abort_quote:
.80b2						w_abort_quote:
.80b2		20 a2 8f	jsr $8fa2	                jsr w_s_quote          ; S"
.80b5		a0 80		ldy #$80	                ldy #>abort_quote_runtime
.80b7		a9 bd		lda #$bd	                lda #<abort_quote_runtime
.80b9		20 b1 97	jsr $97b1	                jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
.80bc		60		rts		z_abort_quote:  rts
.80bd						abort_quote_runtime:
.80bd		b5 04		lda $04,x	                lda 4,x
.80bf		15 05		ora $05,x	                ora 5,x
.80c1		f0 09		beq $80cc	                beq _done       ; if FALSE, we're done
.80c3		20 b4 94	jsr $94b4	                jsr w_type
.80c6		20 ef 83	jsr $83ef	                jsr w_cr
.80c9		4c 5e 80	jmp $805e	                jmp w_abort    ; not JSR, so never come back
.80cc						_done:
.80cc		8a		txa		                txa
.80cd		18		clc		                clc
.80ce		69 06		adc #$06	                adc #6
.80d0		aa		tax		                tax
.80d1		60		rts		                rts
.80d2						xt_abs:
.80d2		20 ca d7	jsr $d7ca	                jsr underflow_1
.80d5						w_abs:
.80d5		b5 01		lda $01,x	                lda 1,x
.80d7		10 0d		bpl $80e6	                bpl _done       ; positive number, easy money!
.80d9		38		sec		                sec
.80da		a9 00		lda #$00	                lda #0
.80dc		f5 00		sbc $00,x	                sbc 0,x         ; LSB
.80de		95 00		sta $00,x	                sta 0,x
.80e0		a9 00		lda #$00	                lda #0          ; MSB
.80e2		f5 01		sbc $01,x	                sbc 1,x
.80e4		95 01		sta $01,x	                sta 1,x
.80e6						_done:
.80e6		60		rts		z_abs:          rts
.80e7						xt_accept:
.80e7		20 cf d7	jsr $d7cf	                jsr underflow_2
.80ea						w_accept:
.80ea		b5 00		lda $00,x	                lda 0,x
.80ec		15 01		ora $01,x	                ora 1,x
.80ee		d0 09		bne $80f9	                bne _not_zero
.80f0		e8		inx		                inx
.80f1		e8		inx		                inx
.80f2		74 00		stz $00,x	                stz 0,x
.80f4		74 01		stz $01,x	                stz 1,x
.80f6		4c c5 81	jmp $81c5	                jmp accept_done
.80f9						_not_zero:
.80f9		b5 00		lda $00,x	                lda 0,x         ; number of chars to get in tmp2 ...
.80fb		85 27		sta $27		                sta tmp2
.80fd		64 28		stz $28		                stz tmp2+1      ; ... but we only accept max 255 chars
.80ff		b5 02		lda $02,x	                lda 2,x         ; address of buffer is NOS, to tmp1
.8101		85 25		sta $25		                sta tmp1
.8103		b5 03		lda $03,x	                lda 3,x
.8105		85 26		sta $26		                sta tmp1+1
.8107		e8		inx		                inx
.8108		e8		inx		                inx
.8109		a0 00		ldy #$00	                ldy #0
.810b		a5 1c		lda $1c		                lda status
.810d		29 f7		and #$f7	                and #$F7
.810f		1a		inc a		                ina
.8110		09 08		ora #$08	                ora #%00001000
.8112		85 1c		sta $1c		                sta status
.8114						accept_loop:
.8114		20 7d 89	jsr $897d	                jsr key_a
.8117		c9 0a		cmp #$0a	                cmp #AscLF
.8119		f0 20		beq $813b	                beq _eol
.811b		c9 0d		cmp #$0d	                cmp #AscCR
.811d		f0 1c		beq $813b	                beq _eol
.811f		c9 08		cmp #$08	                cmp #AscBS
.8121		f0 22		beq $8145	                beq _backspace
.8123		c9 7f		cmp #$7f	                cmp #AscDEL     ; (CTRL-h)
.8125		f0 1e		beq $8145	                beq _backspace
.8127		c9 10		cmp #$10	                cmp #AscCP
.8129		f0 36		beq $8161	                beq _ctrl_p
.812b		c9 0e		cmp #$0e	                cmp #AscCN
.812d		f0 44		beq $8173	                beq _ctrl_n
.812f		91 25		sta ($25),y	                sta (tmp1),y
.8131		c8		iny		                iny
.8132		20 93 86	jsr $8693	                jsr emit_a
.8135		c4 27		cpy $27		                cpy tmp2        ; reached character limit?
.8137		d0 db		bne $8114	                bne accept_loop       ; fall through if buffer limit reached
.8139		80 03		bra $813e	                bra _buffer_full
.813b						_eol:
.813b		20 b5 91	jsr $91b5	                jsr w_space    ; print final space
.813e						_buffer_full:
.813e		94 00		sty $00,x	                sty 0,x         ; Y contains number of chars accepted already
.8140		74 01		stz $01,x	                stz 1,x         ; we only accept 256 chars
.8142		4c c5 81	jmp $81c5	                jmp accept_done
.8145						_backspace:
.8145		c0 00		cpy #$00	                cpy #0          ; buffer empty?
.8147		d0 06		bne $814f	                bne +
.8149		a9 07		lda #$07	                lda #AscBELL    ; complain and don't delete beyond the start of line
.814b		20 93 86	jsr $8693	                jsr emit_a
.814e		c8		iny		                iny
.814f						+
.814f		88		dey		                dey
.8150		a9 08		lda #$08	                lda #AscBS      ; move back one
.8152		20 93 86	jsr $8693	                jsr emit_a
.8155		a9 20		lda #$20	                lda #AscSP      ; print a space (rubout)
.8157		20 93 86	jsr $8693	                jsr emit_a
.815a		a9 08		lda #$08	                lda #AscBS      ; move back over space
.815c		20 93 86	jsr $8693	                jsr emit_a
.815f		80 b3		bra $8114	                bra accept_loop
.8161						_ctrl_p:
.8161		a5 1c		lda $1c		                lda status
.8163		29 07		and #$07	                and #7
.8165		d0 08		bne $816f	                bne _ctrl_p_dec
.8167		a5 1c		lda $1c		                lda status
.8169		09 07		ora #$07	                ora #7
.816b		85 1c		sta $1c		                sta status
.816d		80 11		bra $8180	                bra _recall_history
.816f						_ctrl_p_dec:
.816f		c6 1c		dec $1c		                dec status
.8171		80 0d		bra $8180	                bra _recall_history
.8173						_ctrl_n:
.8173		a9 08		lda #$08	                lda #$8
.8175		24 1c		bit $1c		                bit status
.8177		d0 07		bne $8180	                bne _recall_history
.8179		a5 1c		lda $1c		                lda status
.817b		29 f7		and #$f7	                and #$F7
.817d		1a		inc a		               ina
.817e		85 1c		sta $1c		                sta status
.8180						_recall_history:
.8180		a9 08		lda #$08	                lda #%00001000
.8182		14 1c		trb $1c		                trb status
.8184		20 e0 81	jsr $81e0	                jsr accept_total_recall
.8187		a9 0d		lda #$0d	                lda #AscCR
.8189		20 93 86	jsr $8693	                jsr emit_a
.818c						input_clear:
.818c		c0 00		cpy #$00	                cpy #0
.818e		f0 08		beq $8198	                beq input_cleared
.8190		a9 20		lda #$20	                lda #AscSP
.8192		20 93 86	jsr $8693	                jsr emit_a
.8195		88		dey		                dey
.8196		80 f4		bra $818c	                bra input_clear
.8198						input_cleared:
.8198		a9 0d		lda #$0d	                lda #AscCR
.819a		20 93 86	jsr $8693	                jsr emit_a
.819d		b1 29		lda ($29),y	                lda (tmp3),y
.819f		85 1d		sta $1d		                sta status+1
.81a1		e6 29		inc $29		                inc tmp3
.81a3		d0 02		bne $81a7	                bne +           ; Increment the upper byte on carry.
.81a5		e6 2a		inc $2a		                inc tmp3+1
.81a7						+
.81a7		a9 0d		lda #$0d	                lda #AscCR
.81a9		20 93 86	jsr $8693	                jsr emit_a
.81ac						_history_loop:
.81ac		c4 1d		cpy $1d		                cpy status+1
.81ae		d0 03		bne $81b3	                bne +
.81b0		4c 14 81	jmp $8114	                jmp accept_loop       ; Needs a long jump
.81b3						+
.81b3		c4 27		cpy $27		                cpy tmp2
.81b5		f0 0a		beq $81c1	                beq _hist_filled_buffer
.81b7		b1 29		lda ($29),y	                lda (tmp3),y
.81b9		91 25		sta ($25),y	                sta (tmp1),y
.81bb		20 93 86	jsr $8693	                jsr emit_a
.81be		c8		iny		                iny
.81bf		80 eb		bra $81ac	                bra _history_loop
.81c1						_hist_filled_buffer:
.81c1		88		dey		                dey
.81c2		4c 14 81	jmp $8114	                jmp accept_loop
.81c5						accept_done:
.81c5		20 e0 81	jsr $81e0	                jsr accept_total_recall
.81c8		85 1d		sta $1d		                sta status+1
.81ca		a0 00		ldy #$00	                ldy #0
.81cc		91 29		sta ($29),y	                sta (tmp3),y
.81ce		e6 29		inc $29		                inc tmp3
.81d0		d0 02		bne $81d4	                bne +           ; Increment the upper byte on carry.
.81d2		e6 2a		inc $2a		                inc tmp3+1
.81d4						+
.81d4						_save_history_loop:
.81d4		c4 1d		cpy $1d		                cpy status+1
.81d6		f0 07		beq $81df	                beq _save_history_done
.81d8		b1 25		lda ($25),y	                lda (tmp1),y
.81da		91 29		sta ($29),y	                sta (tmp3),y
.81dc		c8		iny		                iny
.81dd		80 f5		bra $81d4	                bra _save_history_loop
.81df						_save_history_done:
.81df						z_accept:
.81df		60		rts		                rts
.81e0						accept_total_recall:
.81e0		a9 00		lda #$00	                lda #<hist_buff
.81e2		85 29		sta $29		                sta tmp3
.81e4		a9 7c		lda #$7c	                lda #>hist_buff
.81e6		85 2a		sta $2a		                sta tmp3+1
.81e8		a5 1c		lda $1c		                lda status
.81ea		6a		ror a		                ror
.81eb		29 03		and #$03	                and #3
.81ed		18		clc		                clc
.81ee		65 2a		adc $2a		                adc tmp3+1
.81f0		85 2a		sta $2a		                sta tmp3+1
.81f2		a5 1c		lda $1c		                lda status
.81f4		6a		ror a		                ror             ; Rotate through carry into msb.
.81f5		6a		ror a		                ror
.81f6		29 80		and #$80	                and #$80
.81f8		18		clc		                clc
.81f9		65 29		adc $29		                adc tmp3
.81fb		85 29		sta $29		                sta tmp3
.81fd		90 02		bcc $8201	                bcc +           ; Increment the upper byte on carry.
.81ff		e6 2a		inc $2a		                inc tmp3+1
.8201						+
.8201		98		tya		                tya
.8202		c9 80		cmp #$80	                cmp #$80
.8204		90 02		bcc $8208	                bcc +
.8206		a9 7f		lda #$7f	                lda #$7F
.8208						+
.8208		60		rts		                rts
.8209						xt_action_of:
.8209						w_action_of:
.8209		a5 1a		lda $1a		                lda state
.820b		05 1b		ora $1b		                ora state+1
.820d		f0 0c		beq $821b	                beq _interpreting
.820f		20 17 83	jsr $8317	                jsr w_bracket_tick
.8212		a0 85		ldy #$85	                ldy #>w_defer_fetch
.8214		a9 07		lda #$07	                lda #<w_defer_fetch
.8216		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.8219		80 06		bra $8221	                bra _done
.821b						_interpreting:
.821b		20 2f 92	jsr $922f	                jsr w_tick
.821e		20 07 85	jsr $8507	                jsr w_defer_fetch
.8221						_done:
.8221		60		rts		z_action_of:           rts
.8222						xt_again:
.8222		20 ca d7	jsr $d7ca	                jsr underflow_1
.8225						w_again:
.8225		20 a2 97	jsr $97a2	                jsr cmpl_jump_tos
.8228		60		rts		z_again:        rts
.8229						xt_align:
.8229						xt_aligned:
.8229						w_align:
.8229						w_aligned:
.8229						z_align:
.8229						z_aligned:
.8229		60		rts		                rts             ; stripped out during native compile
.822a						xt_allot:
.822a		20 ca d7	jsr $d7ca	                jsr underflow_1
.822d						w_allot:
.822d		b5 01		lda $01,x	                lda 1,x
.822f		30 22		bmi $8253	                bmi _release
.8231		18		clc		                clc
.8232		a5 00		lda $00		                lda cp
.8234		75 00		adc $00,x	                adc 0,x
.8236		85 00		sta $00		                sta cp
.8238		a5 01		lda $01		                lda cp+1
.823a		75 01		adc $01,x	                adc 1,x
.823c		85 01		sta $01		                sta cp+1
.823e		a0 00		ldy #$00	                ldy #<cp_end
.8240		c4 00		cpy $00		                cpy cp
.8242		a9 7c		lda #$7c	                lda #>cp_end
.8244		e5 01		sbc $01		                sbc cp+1
.8246		b0 48		bcs $8290	                bcs _done               ; we're fine.
.8248		84 00		sty $00		                sty cp                  ; still #<cp_end
.824a		a9 7c		lda #$7c	                lda #>cp_end
.824c		85 01		sta $01		                sta cp+1
.824e		a9 00		lda #$00	                lda #err_allot
.8250		4c e0 d7	jmp $d7e0	                jmp error
.8253						_release:
.8253		ca		dex		                dex
.8254		ca		dex		                dex
.8255		a5 00		lda $00		                lda cp
.8257		95 00		sta $00,x	                sta 0,x
.8259		a5 01		lda $01		                lda cp+1
.825b		95 01		sta $01,x	                sta 1,x
.825d		20 29 8e	jsr $8e29	                jsr w_plus                     ; new CP is now TOS
.8260		ca		dex		                dex
.8261		ca		dex		                dex                             ; new CP now NOS
.8262		a9 00		lda #$00	                lda #<cp0
.8264		95 00		sta $00,x	                sta 0,x
.8266		a9 03		lda #$03	                lda #>cp0
.8268		95 01		sta $01,x	                sta 1,x                         ; CP0 is TOS
.826a		20 0a d7	jsr $d70a	                jsr compare_16bit               ; still ( CP CP0 )
.826d		f0 17		beq $8286	                beq _nega_done
.826f		30 15		bmi $8286	                bmi _nega_done
.8271		a9 00		lda #$00	                lda #<cp0
.8273		85 00		sta $00		                sta cp
.8275		a9 03		lda #$03	                lda #>cp0
.8277		85 01		sta $01		                sta cp+1
.8279		a9 7a		lda #$7a	                lda #<dictionary_start
.827b		85 02		sta $02		                sta dp
.827d		a9 bb		lda #$bb	                lda #>dictionary_start
.827f		85 03		sta $03		                sta dp+1
.8281		a9 0a		lda #$0a	                lda #err_negallot
.8283		4c e0 d7	jmp $d7e0	                jmp error
.8286						_nega_done:
.8286		b5 02		lda $02,x	                lda 2,x
.8288		85 00		sta $00		                sta cp
.828a		b5 03		lda $03,x	                lda 3,x
.828c		85 01		sta $01		                sta cp+1
.828e		e8		inx		                inx
.828f		e8		inx		                inx                     ; drop through to _done
.8290						_done:
.8290		e8		inx		                inx
.8291		e8		inx		                inx
.8292						z_allot:
.8292		60		rts		                rts
.8293						xt_and:
.8293		20 cf d7	jsr $d7cf	                jsr underflow_2
.8296						w_and:
.8296		b5 00		lda $00,x	                lda 0,x
.8298		35 02		and $02,x	                and 2,x
.829a		95 02		sta $02,x	                sta 2,x
.829c		b5 01		lda $01,x	                lda 1,x
.829e		35 03		and $03,x	                and 3,x
.82a0		95 03		sta $03,x	                sta 3,x
.82a2		e8		inx		                inx
.82a3		e8		inx		                inx
.82a4		60		rts		z_and:          rts
.82a5						xt_at_xy:
.82a5		20 cf d7	jsr $d7cf	                jsr underflow_2
.82a8						w_at_xy:
.82a8		a5 18		lda $18		                lda base
.82aa		48		pha		                pha
.82ab		a9 0a		lda #$0a	                lda #10
.82ad		85 18		sta $18		                sta base
.82af		a9 1b		lda #$1b	                lda #AscESC
.82b1		20 93 86	jsr $8693	                jsr emit_a
.82b4		a9 5b		lda #$5b	                lda #'['
.82b6		20 93 86	jsr $8693	                jsr emit_a
.82b9		20 bf 8c	jsr $8cbf	                jsr w_one_plus ; AT-XY is zero based, but ANSI is 1 based
.82bc		20 32 d8	jsr $d832	                jsr print_u
.82bf		a9 3b		lda #$3b	                lda #';'
.82c1		20 93 86	jsr $8693	                jsr emit_a
.82c4		20 bf 8c	jsr $8cbf	                jsr w_one_plus ; AT-XY is zero based, but ANSI is 1 based
.82c7		20 32 d8	jsr $d832	                jsr print_u
.82ca		a9 48		lda #$48	                lda #'H'
.82cc		20 93 86	jsr $8693	                jsr emit_a
.82cf		68		pla		                pla
.82d0		85 18		sta $18		                sta base
.82d2		60		rts		z_at_xy:        rts
.82d3						xt_backslash:
.82d3						w_backslash:
.82d3		a0 04		ldy #$04	                ldy #blk_offset
.82d5		b1 08		lda ($08),y	                lda (up),y
.82d7		c8		iny		                iny
.82d8		11 08		ora ($08),y	                ora (up),y
.82da		f0 19		beq $82f5	                beq backslash_not_block
.82dc		a5 10		lda $10		                lda toin
.82de		29 3f		and #$3f	                and #$3F
.82e0		f0 1b		beq $82fd	                beq z_backslash
.82e2		c9 01		cmp #$01	                cmp #$1
.82e4		f0 17		beq $82fd	                beq z_backslash
.82e6		a5 10		lda $10		                lda toin
.82e8		29 c0		and #$c0	                and #$C0        ; Clear lower bits to move to beginning of line.
.82ea		18		clc		                clc             ; Add $40 (64 decimal) to move to next line.
.82eb		69 40		adc #$40	                adc #$40
.82ed		85 10		sta $10		                sta toin
.82ef		90 0c		bcc $82fd	                bcc z_backslash
.82f1		e6 11		inc $11		                inc toin+1
.82f3		80 08		bra $82fd	                bra z_backslash
.82f5						backslash_not_block:
.82f5		a5 0e		lda $0e		                lda ciblen
.82f7		85 10		sta $10		                sta toin
.82f9		a5 0f		lda $0f		                lda ciblen+1
.82fb		85 11		sta $11		                sta toin+1
.82fd		60		rts		z_backslash:    rts
.82fe						xt_base:
.82fe						w_base:
.82fe		ca		dex		                dex
.82ff		ca		dex		                dex
.8300		a9 18		lda #$18	                lda #<base
.8302		95 00		sta $00,x	                sta 0,x         ; LSB
.8304		74 01		stz $01,x	                stz 1,x         ; MSB is always 0
.8306		60		rts		z_base:         rts
.8307						xt_bl:
.8307						w_bl:
.8307		ca		dex		                dex
.8308		ca		dex		                dex
.8309		a9 20		lda #$20	                lda #AscSP
.830b		95 00		sta $00,x	                sta 0,x
.830d		74 01		stz $01,x	                stz 1,x
.830f		60		rts		z_bl:           rts
.8310						xt_bracket_char:
.8310						w_bracket_char:
.8310		20 56 83	jsr $8356	                jsr w_char
.8313		20 d3 89	jsr $89d3	                jsr w_literal
.8316		60		rts		z_bracket_char: rts
.8317						xt_bracket_tick:
.8317						w_bracket_tick:
.8317		20 2f 92	jsr $922f	                jsr w_tick
.831a		20 d3 89	jsr $89d3	                jsr w_literal
.831d		60		rts		z_bracket_tick: rts
.831e						xt_buffer_colon:
.831e						w_buffer_colon:
.831e		20 f5 83	jsr $83f5	                jsr w_create            ; will report default PFA size of 2 in SEE
.8321		20 2d 82	jsr $822d	                jsr w_allot
.8324		60		rts		z_buffer_colon: rts
.8325						xt_c_comma:
.8325		20 ca d7	jsr $d7ca	                jsr underflow_1
.8328						w_c_comma:
.8328		b5 00		lda $00,x	                lda 0,x
.832a		20 bc 97	jsr $97bc	                jsr cmpl_a
.832d		e8		inx		                inx
.832e		e8		inx		                inx
.832f		60		rts		z_c_comma:      rts
.8330						xt_c_fetch:
.8330		20 ca d7	jsr $d7ca	                jsr underflow_1
.8333						w_c_fetch:
.8333		a1 00		lda ($00,x)	                lda (0,x)
.8335		95 00		sta $00,x	                sta 0,x
.8337		74 01		stz $01,x	                stz 1,x         ; Ignore LSB
.8339		60		rts		z_c_fetch:      rts
.833a						xt_c_store:
.833a		20 cf d7	jsr $d7cf	                jsr underflow_2
.833d						w_c_store:
.833d		b5 02		lda $02,x	                lda 2,x
.833f		81 00		sta ($00,x)	                sta (0,x)
.8341		e8		inx		                inx
.8342		e8		inx		                inx
.8343		e8		inx		                inx
.8344		e8		inx		                inx
.8345		60		rts		z_c_store:      rts
.8346						xt_cell_plus:
.8346		20 ca d7	jsr $d7ca	                jsr underflow_1
.8349						w_cell_plus:
.8349		f6 00		inc $00,x	                inc 0,x
.834b		d0 02		bne $834f	                bne +
.834d		f6 01		inc $01,x	                inc 1,x
.834f						+
.834f		f6 00		inc $00,x	                inc 0,x
.8351		d0 02		bne $8355	                bne _done
.8353		f6 01		inc $01,x	                inc 1,x
.8355						_done:
.8355		60		rts		z_cell_plus:    rts
.8356						xt_char:
.8356						w_char:
.8356		20 24 8d	jsr $8d24	                jsr w_parse_name
.8359		b5 00		lda $00,x	                lda 0,x
.835b		15 01		ora $01,x	                ora 1,x
.835d		d0 05		bne $8364	                bne _not_empty
.835f		a9 05		lda #$05	                lda #err_noname
.8361		4c e0 d7	jmp $d7e0	                jmp error
.8364						_not_empty:
.8364		e8		inx		                inx             ; drop number of characters, leave addr
.8365		e8		inx		                inx
.8366		a1 00		lda ($00,x)	                lda (0,x)       ; get character (equivalent to C@)
.8368		95 00		sta $00,x	                sta 0,x
.836a		74 01		stz $01,x	                stz 1,x         ; MSB is always zero
.836c		60		rts		z_char:         rts
.836d						xt_chars:
.836d		20 ca d7	jsr $d7ca	                jsr underflow_1
.8370						w_chars:
.8370		60		rts		z_chars:        rts
.8371						xt_colon:
.8371						w_colon:
.8371		a5 1a		lda $1a		                lda state
.8373		05 1b		ora $1b		                ora state+1
.8375		f0 05		beq $837c	                beq +
.8377		a9 07		lda #$07	                lda #err_state
.8379		4c e0 d7	jmp $d7e0	                jmp error
.837c						+
.837c		c6 1a		dec $1a		                dec state
.837e		c6 1b		dec $1b		                dec state+1
.8380		a9 d0		lda #$d0	                lda #%11010000
.8382		04 1c		tsb $1c		                tsb status
.8384		a5 00		lda $00		                lda cp
.8386		85 06		sta $06		                sta workword
.8388		a5 01		lda $01		                lda cp+1
.838a		85 07		sta $07		                sta workword+1
.838c		a0 00		ldy #$00	                ldy #0                  ; Tell CREATE we want neither CFA nor dictionary update
.838e		20 fd 83	jsr $83fd	                jsr create_common
.8391		60		rts		z_colon:        rts
.8392						xt_colon_noname:
.8392						w_colon_noname:
.8392		a5 1a		lda $1a		                lda state
.8394		05 1b		ora $1b		                ora state+1
.8396		f0 05		beq $839d	                beq +
.8398		a9 07		lda #$07	                lda #err_state
.839a		4c e0 d7	jmp $d7e0	                jmp error
.839d						+
.839d		c6 1a		dec $1a		                dec state
.839f		c6 1b		dec $1b		                dec state+1
.83a1		a9 40		lda #$40	                lda #%01000000
.83a3		14 1c		trb $1c		                trb status
.83a5		a5 00		lda $00		                lda cp
.83a7		85 06		sta $06		                sta workword
.83a9		a5 01		lda $01		                lda cp+1
.83ab		85 07		sta $07		                sta workword+1
.83ad		60		rts		z_colon_noname:        rts
.83ae						xt_comma:
.83ae		20 ca d7	jsr $d7ca	                jsr underflow_1
.83b1						w_comma:
.83b1		a0 02		ldy #$02	                ldy #2
.83b3		b5 00		lda $00,x	_twice:         lda 0,x
.83b5		20 bc 97	jsr $97bc	                jsr cmpl_a
.83b8		e8		inx		                inx
.83b9		88		dey		                dey
.83ba		d0 f7		bne $83b3	                bne _twice
.83bc		60		rts		z_comma:        rts
.83bd						xt_compile_only:
.83bd						w_compile_only:
.83bd		20 23 d7	jsr $d723	                jsr current_to_dp
.83c0		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.83c2		b1 02		lda ($02),y	                lda (dp),y
.83c4		09 01		ora #$01	                ora #CO        ; make sure bit 7 is set
.83c6		91 02		sta ($02),y	                sta (dp),y
.83c8		60		rts		z_compile_only: rts
.83c9						xt_value:
.83c9						xt_constant:
.83c9		20 ca d7	jsr $d7ca	                jsr underflow_1
.83cc						w_value:
.83cc						w_constant:
.83cc		a9 02		lda #$02	                lda #2
.83ce		85 1e		sta $1e		                sta tmpdsp              ; 2 byte PFA
.83d0		a9 39		lda #$39	                lda #<doconst           ; LSB of DOCONST
.83d2		a0 d6		ldy #$d6	                ldy #>doconst           ; MSB of DOCONST
.83d4		20 fd 83	jsr $83fd	                jsr create_common
.83d7		20 b1 83	jsr $83b1	                jsr w_comma
.83da						z_value:
.83da		60		rts		z_constant:     rts
.83db						xt_count:
.83db		20 ca d7	jsr $d7ca	                jsr underflow_1
.83de						w_count:
.83de		a1 00		lda ($00,x)	                lda (0,x)       ; Get number of characters (255 max)
.83e0		a8		tay		                tay
.83e1		f6 00		inc $00,x	                inc 0,x         ; LSB
.83e3		d0 02		bne $83e7	                bne +
.83e5		f6 01		inc $01,x	                inc 1,x         ; MSB
.83e7		98		tya		+               tya
.83e8		ca		dex		                dex
.83e9		ca		dex		                dex
.83ea		95 00		sta $00,x	                sta 0,x         ; LSB
.83ec		74 01		stz $01,x	                stz 1,x         ; MSB, always zero
.83ee		60		rts		z_count:        rts
.83ef						xt_cr:
.83ef						w_cr:
.83ef		a9 0a		lda #$0a	                lda #AscLF
.83f1		20 93 86	jsr $8693	                jsr emit_a
.83f4		60		rts		z_cr:           rts
.83f5						xt_create:
.83f5						w_create:
.83f5		a9 02		lda #$02	                lda #2                  ; 2 byte PFA for variable
.83f7		85 1e		sta $1e		                sta tmpdsp
.83f9						create_dovar:
.83f9		a0 d6		ldy #$d6	                ldy #>dovar
.83fb		a9 7a		lda #$7a	                lda #<dovar
.83fd						create_common:
.83fd		ca		dex		                dex
.83fe		ca		dex		                dex
.83ff		95 00		sta $00,x	                sta 0,x
.8401		94 01		sty $01,x	                sty 1,x
.8403		20 24 8d	jsr $8d24	                jsr w_parse_name        ; ( cfa addr u )
.8406		b5 01		lda $01,x	                lda 1,x
.8408		d0 0d		bne $8417	                bne _too_long
.840a		b5 00		lda $00,x	                lda 0,x
.840c		d0 05		bne $8413	                bne +
.840e		a9 05		lda #$05	                lda #err_noname
.8410		4c e0 d7	jmp $d7e0	                jmp error
.8413						+
.8413		c9 20		cmp #$20	                cmp #32
.8415		90 06		bcc $841d	                bcc +
.8417						_too_long:
.8417		a9 1f		lda #$1f	                lda #31
.8419		95 00		sta $00,x	                sta 0,x
.841b		74 01		stz $01,x	                stz 1,x
.841d						+
.841d		20 9f 93	jsr $939f	                jsr w_two_dup           ; ( cfa addr u addr u )
.8420		20 5d 9b	jsr $9b5d	                jsr w_find_name         ; ( cfa addr u flag ) (non-zero nt as flag)
.8423		e8		inx		                inx                     ; pre-drop flag (nt) from find-name.
.8424		e8		inx		                inx
.8425		b5 fe		lda $fe,x	                lda $fe,x
.8427		15 ff		ora $ff,x	                ora $ff,x
.8429		f0 1a		beq $8445	                beq _new_name           ; We haven't seen this one before.
.842b		24 1c		bit $1c		                bit status
.842d		10 06		bpl $8435	                bpl _redefined_name     ; Bit 7 is zero, so print the message.
.842f		a9 80		lda #$80	                lda #$80                ; Set bit 7 to indicate dup
.8431		04 1c		tsb $1c		                tsb status
.8433		80 14		bra $8449	                bra _process_name
.8435						_redefined_name:
.8435		a9 02		lda #$02	                lda #str_redefined
.8437		20 06 d8	jsr $d806	                jsr print_string_no_lf
.843a		20 9f 93	jsr $939f	                jsr w_two_dup           ; ( cfa addr u addr u )
.843d		20 b4 94	jsr $94b4	                jsr w_type
.8440		20 b5 91	jsr $91b5	                jsr w_space
.8443		80 04		bra $8449	                bra _process_name
.8445						_new_name:
.8445		a9 80		lda #$80	                lda #$80                ; Clear status bit 7 to indicate new word.
.8447		14 1c		trb $1c		                trb status
.8449						_process_name:
.8449		a5 00		lda $00		                lda cp
.844b		85 25		sta $25		                sta tmp1
.844d		a5 01		lda $01		                lda cp+1
.844f		85 26		sta $26		                sta tmp1+1
.8451		b5 00		lda $00,x	                lda 0,x
.8453		85 27		sta $27		                sta tmp2                ; store length of string in tmp2
.8455		18		clc		                clc
.8456		69 08		adc #$08	                adc #8
.8458		85 28		sta $28		                sta tmp2+1               ; total header length
.845a		95 00		sta $00,x	                sta 0,x
.845c		74 01		stz $01,x	                stz 1,x                 ; max header size is 255 chars
.845e		20 2d 82	jsr $822d	                jsr w_allot
.8461		20 23 d7	jsr $d723	                jsr current_to_dp
.8464		a0 00		ldy #$00	                ldy #0
.8466		a5 27		lda $27		                lda tmp2
.8468		91 25		sta ($25),y	                sta (tmp1),y
.846a		c8		iny		                iny
.846b		b5 03		lda $03,x	                lda 3,x                 ; check MSB of CFA
.846d		f0 02		beq $8471	                beq +                   ; 0 means no CFA, leave A=0
.846f		a9 10		lda #$10	                lda #HC                 ; otherwise set the HC bit
.8471						+
.8471		09 08		ora #$08	                ora #NN
.8473		91 25		sta ($25),y	                sta (tmp1),y
.8475		c8		iny		                iny
.8476		a5 02		lda $02		                lda dp
.8478		91 25		sta ($25),y	                sta (tmp1),y
.847a		c8		iny		                iny
.847b		a5 03		lda $03		                lda dp+1
.847d		91 25		sta ($25),y	                sta (tmp1),y
.847f		c8		iny		                iny
.8480		b5 03		lda $03,x	                lda 3,x
.8482		f0 08		beq $848c	                beq +
.8484		a5 26		lda $26		                lda tmp1+1
.8486		85 03		sta $03		                sta dp+1
.8488		a5 25		lda $25		                lda tmp1
.848a		85 02		sta $02		                sta dp
.848c						+
.848c		18		clc		                clc
.848d		a5 25		lda $25		                lda tmp1                ; redundant unless we skipped interlude
.848f		65 28		adc $28		                adc tmp2+1              ; add total header length
.8491		91 25		sta ($25),y	                sta (tmp1),y
.8493		85 23		sta $23		                sta tmptos              ; save result for next step
.8495		c8		iny		                iny
.8496		a5 26		lda $26		                lda tmp1+1
.8498		69 00		adc #$00	                adc #0                  ; only need the carry
.849a		91 25		sta ($25),y	                sta (tmp1),y
.849c		85 24		sta $24		                sta tmptos+1
.849e		c8		iny		                iny
.849f		18		clc		                clc
.84a0		b5 03		lda $03,x	                lda 3,x
.84a2		f0 04		beq $84a8	                beq +                   ; leave A=0
.84a4		a9 03		lda #$03	                lda #3
.84a6		65 1e		adc $1e		                adc tmpdsp              ; add PFA size, assume no carry
.84a8						+
.84a8		65 23		adc $23		                adc tmptos              ; add LSB of xt_
.84aa		91 25		sta ($25),y	                sta (tmp1),y
.84ac		c8		iny		                iny
.84ad		a5 24		lda $24		                lda tmptos+1            ; recall MSB of xt_
.84af		69 00		adc #$00	                adc #0                  ; only need the carry
.84b1		91 25		sta ($25),y	                sta (tmp1),y
.84b3		c8		iny		                iny
.84b4		b5 00		lda $00,x	                lda 0,x
.84b6		38		sec		                sec
.84b7		e9 08		sbc #$08	                sbc #8
.84b9		85 23		sta $23		                sta tmptos
.84bb		b5 01		lda $01,x	                lda 1,x
.84bd		e9 00		sbc #$00	                sbc #0          ; only need carry
.84bf		85 24		sta $24		                sta tmptos+1
.84c1						_name_loop:
.84c1		b1 23		lda ($23),y	                lda (tmptos),y
.84c3		c9 5b		cmp #$5b	                cmp #'Z'+1
.84c5		b0 06		bcs $84cd	                bcs _store_name
.84c7		c9 41		cmp #$41	                cmp #'A'
.84c9		90 02		bcc $84cd	                bcc _store_name
.84cb		09 20		ora #$20	                ora #$20
.84cd						_store_name:
.84cd		91 25		sta ($25),y	                sta (tmp1),y
.84cf		c8		iny		                iny
.84d0		c6 27		dec $27		                dec tmp2
.84d2		d0 ed		bne $84c1	                bne _name_loop
.84d4		b4 03		ldy $03,x	                ldy 3,x
.84d6		f0 08		beq $84e0	                beq +
.84d8		b5 02		lda $02,x	                lda 2,x
.84da		20 b1 97	jsr $97b1	                jsr cmpl_subroutine             ; Add the CFA jsr
.84dd		20 36 d7	jsr $d736	                jsr dp_to_current
.84e0						+
.84e0		e8		inx		                inx
.84e1		e8		inx		                inx
.84e2		e8		inx		                inx
.84e3		e8		inx		                inx
.84e4		60		rts		z_create:       rts
.84e5						xt_decimal:
.84e5						w_decimal:
.84e5		a9 0a		lda #$0a	                lda #10
.84e7		85 18		sta $18		                sta base
.84e9		64 19		stz $19		                stz base+1              ; paranoid
.84eb		60		rts		z_decimal:      rts
.84ec						xt_defer:
.84ec						w_defer:
.84ec		a9 02		lda #$02	                lda #2
.84ee		85 1e		sta $1e		                sta tmpdsp      ; 2 byte PFA
.84f0		a9 4d		lda #$4d	                lda #<dodefer   ; LSB
.84f2		a0 d6		ldy #$d6	                ldy #>dodefer   ; MSB
.84f4		20 fd 83	jsr $83fd	                jsr create_common
.84f7		a9 ff		lda #$ff	                lda #<defer_error
.84f9		a0 84		ldy #$84	                ldy #>defer_error
.84fb		20 b8 97	jsr $97b8	                jsr cmpl_word
.84fe		60		rts		z_defer:        rts
.84ff						defer_error:
.84ff		a9 03		lda #$03	                lda #err_defer
.8501		4c e0 d7	jmp $d7e0	                jmp error
.8504						xt_defer_fetch:
.8504		20 ca d7	jsr $d7ca	                jsr underflow_1
.8507						w_defer_fetch:
.8507		20 8e 92	jsr $928e	                jsr w_to_body
.850a		20 e9 87	jsr $87e9	                jsr w_fetch
.850d		60		rts		z_defer_fetch:  rts
.850e						xt_defer_store:
.850e		20 cf d7	jsr $d7cf	                jsr underflow_2
.8511						w_defer_store:
.8511		20 8e 92	jsr $928e	                jsr w_to_body
.8514		20 08 92	jsr $9208	                jsr w_store
.8517		60		rts		z_defer_store:  rts
.8518						xt_depth:
.8518						w_depth:
.8518		a9 78		lda #$78	                lda #dsp0
.851a		86 1e		stx $1e		                stx tmpdsp
.851c		38		sec		                sec
.851d		e5 1e		sbc $1e		                sbc tmpdsp
.851f		4a		lsr a		                lsr
.8520		ca		dex		                dex
.8521		ca		dex		                dex
.8522		95 00		sta $00,x	                sta 0,x
.8524		74 01		stz $01,x	                stz 1,x
.8526		60		rts		z_depth:        rts
.8527						xt_question_do:
.8527						w_question_do:
.8527		ca		dex		                dex
.8528		ca		dex		                dex
.8529		a9 6a		lda #$6a	                lda #<question_do_runtime
.852b		95 00		sta $00,x	                sta 0,x
.852d		a9 85		lda #$85	                lda #>question_do_runtime
.852f		95 01		sta $01,x	                sta 1,x
.8531		20 69 86	jsr $8669	                jsr w_dup              ; xt and xt' are the same
.8534		ca		dex		                dex
.8535		ca		dex		                dex
.8536		a9 10		lda #$10	                lda #question_do_runtime_size
.8538		95 00		sta $00,x	                sta 0,x
.853a		74 01		stz $01,x	                stz 1,x
.853c		20 2f 97	jsr $972f	                jsr cmpl_by_limit
.853f		90 0b		bcc $854c	                bcc _native
.8541		20 e7 88	jsr $88e7	                jsr w_here
.8544		20 71 9e	jsr $9e71	                jsr w_zero
.8547		20 b1 83	jsr $83b1	                jsr w_comma
.854a		80 08		bra $8554	                bra do_common
.854c						_native:
.854c		20 91 97	jsr $9791	                jsr cmpl_jump_later
.854f		80 03		bra $8554	                bra do_common
.8551						xt_do:
.8551						w_do:
.8551		20 71 9e	jsr $9e71	                jsr w_zero             ; push 0 TOS
.8554						do_common:
.8554		ca		dex		                dex
.8555		ca		dex		                dex
.8556		a5 21		lda $21		                lda loopleave
.8558		95 00		sta $00,x	                sta 0,x
.855a		a5 22		lda $22		                lda loopleave+1
.855c		95 01		sta $01,x	                sta 1,x
.855e		64 22		stz $22		                stz loopleave+1
.8560		a0 85		ldy #$85	                ldy #>do_runtime
.8562		a9 82		lda #$82	                lda #<do_runtime
.8564		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.8567		4c e7 88	jmp $88e7	                jmp w_here
.856a						z_question_do:
.856a						z_do:
.856a						question_do_runtime:
.856a		b5 00		lda $00,x	                lda 0,x
.856c		d5 02		cmp $02,x	                cmp 2,x
.856e		d0 0d		bne $857d	                bne _begin
.8570		b5 01		lda $01,x	                lda 1,x
.8572		d5 03		cmp $03,x	                cmp 3,x
.8574		d0 07		bne $857d	                bne _begin
.8576		e8		inx		                inx                     ; drop loop limits and skip
.8577		e8		inx		                inx
.8578		e8		inx		                inx
.8579		e8		inx		                inx
=16						question_do_runtime_size = * - question_do_runtime
.857a		a9 00		lda #$00	                lda #0
>857c		2c				                .byte $2c               ; BIT llhh to hide the lda #1
.857d		a9 01		lda #$01	_begin:         lda #1
.857f		4c 54 98	jmp $9854	                jmp zbranch_runtime
.8582						do_runtime:
.8582		a4 1f		ldy $1f		                ldy loopctrl
.8584		30 05		bmi $858b	                bmi +                   ; is this the first LCB?
.8586		a5 20		lda $20		                lda loopidx0            ; no, write cached LSB
.8588		99 00 01	sta $0100,y	                sta loopindex,y         ; back to loopindex in the LCB
.858b						+
.858b		c8		iny		                iny                     ; Reserve 4 bytes for next LCB
.858c		c8		iny		                iny
.858d		c8		iny		                iny
.858e		c8		iny		                iny
.858f		84 1f		sty $1f		                sty loopctrl            ; Udpate LCB stack pointer
.8591		38		sec		                sec
.8592		a9 00		lda #$00	                lda #0
.8594		f5 02		sbc $02,x	                sbc 2,x             ; LSB of limit
.8596		99 02 01	sta $0102,y	                sta loopfufa,y      ; write to loop control block
.8599		a9 80		lda #$80	                lda #$80
.859b		f5 03		sbc $03,x	                sbc 3,x             ; MSB of limit
.859d		99 03 01	sta $0103,y	                sta loopfufa+1,y
.85a0		18		clc		                clc
.85a1		b5 00		lda $00,x	                lda 0,x             ; LSB of original index
.85a3		79 02 01	adc $0102,y	                adc loopfufa,y
.85a6		85 20		sta $20		                sta loopidx0        ; write LSB to cache not LCB
.85a8		b5 01		lda $01,x	                lda 1,x             ; MSB of orginal index
.85aa		79 03 01	adc $0103,y	                adc loopfufa+1,y
.85ad		99 01 01	sta $0101,y	                sta loopindex+1,y
.85b0		e8		inx		                inx                 ; clean up the stack
.85b1		e8		inx		                inx
.85b2		e8		inx		                inx
.85b3		e8		inx		                inx
.85b4		60		rts		                rts
.85b5						xt_does:
.85b5						w_does:
.85b5		a0 85		ldy #$85	                ldy #>does_runtime
.85b7		a9 c4		lda #$c4	                lda #<does_runtime
.85b9		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.85bc		a0 d6		ldy #$d6	                ldy #>dodoes
.85be		a9 61		lda #$61	                lda #<dodoes
.85c0		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.85c3		60		rts		z_does:         rts
.85c4						does_runtime:
.85c4		7a		ply		                ply             ; LSB
.85c5		68		pla		                pla             ; MSB
.85c6		c8		iny		                iny
.85c7		d0 01		bne $85ca	                bne +
.85c9		1a		inc a		                ina
.85ca						+
.85ca		84 25		sty $25		                sty tmp1
.85cc		85 26		sta $26		                sta tmp1+1
.85ce		20 23 d7	jsr $d723	                jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
.85d1		a5 02		lda $02		                lda dp
.85d3		18		clc		                clc
.85d4		69 04		adc #$04	                adc #4
.85d6		85 27		sta $27		                sta tmp2
.85d8		a5 03		lda $03		                lda dp+1
.85da		69 00		adc #$00	                adc #0          ; we only care about the carry
.85dc		85 28		sta $28		                sta tmp2+1
.85de		b2 27		lda ($27)	                lda (tmp2)
.85e0		18		clc		                clc
.85e1		69 01		adc #$01	                adc #1
.85e3		85 29		sta $29		                sta tmp3
.85e5		a0 01		ldy #$01	                ldy #1
.85e7		b1 27		lda ($27),y	                lda (tmp2),y
.85e9		69 00		adc #$00	                adc #0          ; we only care about the carry
.85eb		85 2a		sta $2a		                sta tmp3+1
.85ed		a5 25		lda $25		                lda tmp1        ; LSB
.85ef		92 29		sta ($29)	                sta (tmp3)
.85f1		a5 26		lda $26		                lda tmp1+1
.85f3		91 29		sta ($29),y	                sta (tmp3),y    ; Y is still 1
.85f5		60		rts		                rts
.85f6						xt_dot:
.85f6		20 ca d7	jsr $d7ca	                jsr underflow_1
.85f9						w_dot:
.85f9		20 69 86	jsr $8669	                jsr w_dup                      ; ( n n )
.85fc		20 d5 80	jsr $80d5	                jsr w_abs                      ; ( n u )
.85ff		20 71 9e	jsr $9e71	                jsr w_zero                     ; ( n u 0 )
.8602		20 ad 89	jsr $89ad	                jsr w_less_number_sign         ; ( n u 0 )
.8605		20 89 8c	jsr $8c89	                jsr w_number_sign_s            ; ( n ud )
.8608		20 5c 8f	jsr $8f5c	                jsr w_rot                      ; ( ud n )
.860b		20 38 91	jsr $9138	                jsr w_sign                     ; ( ud )
.860e		20 67 8c	jsr $8c67	                jsr w_number_sign_greater      ; ( addr u )
.8611		20 b4 94	jsr $94b4	                jsr w_type
.8614		20 b5 91	jsr $91b5	                jsr w_space
.8617		60		rts		z_dot:          rts
.8618						xt_dot_paren:
.8618						w_dot_paren:
.8618		ca		dex		                dex
.8619		ca		dex		                dex
.861a		a9 29		lda #$29	                lda #41     ; Right parenthesis
.861c		95 00		sta $00,x	                sta 0,x
.861e		74 01		stz $01,x	                stz 1,x
.8620		20 82 8d	jsr $8d82	                jsr w_parse
.8623		20 b4 94	jsr $94b4	                jsr w_type
.8626		60		rts		z_dot_paren:    rts
.8627						xt_dot_quote:
.8627						w_dot_quote:
.8627		20 a2 8f	jsr $8fa2	                jsr w_s_quote
.862a		a0 94		ldy #$94	                ldy #>w_type
.862c		a9 b4		lda #$b4	                lda #<w_type
.862e		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.8631		60		rts		z_dot_quote:    rts
.8632						xt_dot_r:
.8632		20 cf d7	jsr $d7cf	                jsr underflow_2
.8635						w_dot_r:
.8635		20 59 93	jsr $9359	                jsr w_to_r
.8638		20 69 86	jsr $8669	                jsr w_dup
.863b		20 d5 80	jsr $80d5	                jsr w_abs
.863e		20 71 9e	jsr $9e71	                jsr w_zero
.8641		20 ad 89	jsr $89ad	                jsr w_less_number_sign
.8644		20 89 8c	jsr $8c89	                jsr w_number_sign_s
.8647		20 5c 8f	jsr $8f5c	                jsr w_rot
.864a		20 38 91	jsr $9138	                jsr w_sign
.864d		20 67 8c	jsr $8c67	                jsr w_number_sign_greater
.8650		20 b5 8e	jsr $8eb5	                jsr w_r_from
.8653		20 db 8c	jsr $8cdb	                jsr w_over
.8656		20 bb 8b	jsr $8bbb	                jsr w_minus
.8659		20 be 91	jsr $91be	                jsr w_spaces
.865c		20 b4 94	jsr $94b4	                jsr w_type
.865f		60		rts		z_dot_r:        rts
.8660						xt_drop:
.8660		20 ca d7	jsr $d7ca	                jsr underflow_1
.8663						w_drop:
.8663		e8		inx		                inx
.8664		e8		inx		                inx
.8665		60		rts		z_drop:         rts
.8666						xt_dup:
.8666		20 ca d7	jsr $d7ca	                jsr underflow_1
.8669						w_dup:
.8669		ca		dex		                dex
.866a		ca		dex		                dex
.866b		b5 02		lda $02,x	                lda 2,x         ; LSB
.866d		95 00		sta $00,x	                sta 0,x
.866f		b5 03		lda $03,x	                lda 3,x         ; MSB
.8671		95 01		sta $01,x	                sta 1,x
.8673		60		rts		z_dup:          rts
.8674						xt_else:
.8674						xt_endof:
.8674		20 ca d7	jsr $d7ca	                jsr underflow_1
.8677						w_else:
.8677						w_endof:
.8677		20 91 97	jsr $9791	                jsr cmpl_jump_later
.867a		20 1e 92	jsr $921e	                jsr w_swap              ; ( target orig )
.867d		80 03		bra $8682	                bra w_then              ; fall through to then
.867f						xt_then:
.867f		20 ca d7	jsr $d7ca	                jsr underflow_1
.8682						w_then:
.8682		20 e7 88	jsr $88e7	                jsr w_here
.8685		20 1e 92	jsr $921e	                jsr w_swap
.8688		20 08 92	jsr $9208	                jsr w_store
.868b						z_else:
.868b						z_endof:
.868b		60		rts		z_then:         rts
.868c						xt_emit:
.868c		20 ca d7	jsr $d7ca	                jsr underflow_1
.868f						w_emit:
.868f		b5 00		lda $00,x	                lda 0,x
.8691		e8		inx		                inx
.8692		e8		inx		                inx
.8693						emit_a:
.8693		6c 12 00	jmp ($0012)	                jmp (output)            ; JSR/RTS
.8696						z_emit:
.8696						xt_endcase:
.8696		20 ca d7	jsr $d7ca	                jsr underflow_1
.8699						w_endcase:
.8699		a0 86		ldy #$86	                ldy #>w_drop
.869b		a9 63		lda #$63	                lda #<w_drop
.869d		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.86a0						_endcase_loop:
.86a0		b5 00		lda $00,x	                lda 0,x
.86a2		15 01		ora $01,x	                ora 1,x
.86a4		f0 05		beq $86ab	                beq _done
.86a6		20 82 86	jsr $8682	                jsr w_then
.86a9		80 f5		bra $86a0	                bra _endcase_loop
.86ab						_done:
.86ab		e8		inx		                inx
.86ac		e8		inx		                inx
.86ad		60		rts		z_endcase:      rts
.86ae						xt_environment_q:
.86ae		20 ca d7	jsr $d7ca	                jsr underflow_1
.86b1						w_environment_q:
.86b1		a0 00		ldy #$00	                ldy #0                  ; index for table
.86b3						_table_loop:
.86b3		c0 1a		cpy #$1a	                cpy #env_table_end - env_table_single
.86b5		f0 60		beq $8717	                beq _table_done
.86b7		20 9f 93	jsr $939f	                jsr w_two_dup          ; ( addr u addr u ) 2DUP does not use Y
.86ba		ca		dex		                dex
.86bb		ca		dex		                dex                     ; ( addr u addr u ? )
.86bc		b9 20 87	lda $8720,y	                lda env_table_single,y
.86bf		95 00		sta $00,x	                sta 0,x
.86c1		c8		iny		                iny
.86c2		b9 20 87	lda $8720,y	                lda env_table_single,y
.86c5		95 01		sta $01,x	                sta 1,x                 ; ( addr u addr u addr-s )
.86c7		c8		iny		                iny
.86c8		ca		dex		                dex
.86c9		ca		dex		                dex
.86ca		b9 20 87	lda $8720,y	                lda env_table_single,y
.86cd		95 00		sta $00,x	                sta 0,x
.86cf		b9 21 87	lda $8721,y	                lda env_table_single+1,y
.86d2		95 01		sta $01,x	                sta 1,x
.86d4		20 d8 8c	jsr $8cd8	                jsr xt_over
.86d7		20 b8 8b	jsr $8bb8	                jsr xt_minus            ; ( addr u addr u addr-s u-s )
.86da		20 c0 a0	jsr $a0c0	                jsr w_compare           ; ( addr u f )
.86dd		e8		inx		                inx                     ; DROP, now ( addr u )
.86de		e8		inx		                inx
.86df		b5 fe		lda $fe,x	                lda $fe,x
.86e1		15 ff		ora $ff,x	                ora $ff,x
.86e3		d0 ce		bne $86b3	                bne _table_loop         ; Not a match, so try next string
.86e5		88		dey		                dey                     ; go back to index we had
.86e6		88		dey		                dey
.86e7		c0 16		cpy #$16	                cpy #env_table_double - env_table_single
.86e9		b0 0c		bcs $86f7	                bcs _double_result
.86eb		b9 3c 87	lda $873c,y	                lda env_results_single,y
.86ee		95 02		sta $02,x	                sta 2,x
.86f0		b9 3d 87	lda $873d,y	                lda env_results_single+1,y
.86f3		95 03		sta $03,x	                sta 3,x                 ; ( res u )
.86f5		80 1c		bra $8713	                bra _set_flag
.86f7						_double_result:
.86f7		ca		dex		                dex                     ; ( addr u ? )
.86f8		ca		dex		                dex
.86f9		98		tya		                tya
.86fa		38		sec		                sec
.86fb		e9 16		sbc #$16	                sbc #(env_table_double - env_table_single)
.86fd		0a		asl a		                asl
.86fe		a8		tay		                tay
.86ff		b9 52 87	lda $8752,y	                lda env_results_double,y
.8702		95 02		sta $02,x	                sta 2,x
.8704		b9 53 87	lda $8753,y	                lda env_results_double+1,y
.8707		95 03		sta $03,x	                sta 3,x                 ; ( res u ? )
.8709		b9 54 87	lda $8754,y	                lda env_results_double+2,y
.870c		95 04		sta $04,x	                sta 4,x
.870e		b9 55 87	lda $8755,y	                lda env_results_double+3,y
.8711		95 05		sta $05,x	                sta 5,x                 ; ( res res ? )
.8713						_set_flag:
.8713		a9 ff		lda #$ff	                lda #$ff
.8715		80 04		bra $871b	                bra _done
.8717						_table_done:
.8717		e8		inx		                inx
.8718		e8		inx		                inx
.8719		a9 00		lda #$00	                lda #0                  ; flag failure and fall through
.871b						_done:
.871b		95 00		sta $00,x	                sta 0,x
.871d		95 01		sta $01,x	                sta 1,x
.871f						z_environment_q:
.871f		60		rts		                rts
.8720						env_table_single:
>8720		c6 d5 d5 d5 da d5 de d5		        .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
>8728		ef d5
>872a		f6 d5 fe d5 03 d6 08 d6		        .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
>8732		1a d6 25 d6			        .word envs_sc, envs_wl
.8736						env_table_double:
>8736		2e d6 33 d6			        .word envs_max_d, envs_max_ud
.873a						env_table_end:
>873a		39 d6				        .word envs_eot                  ; pointer beyond last string
.873c						env_results_single:
>873c		ff 00				        .word $00FF     ; /COUNTED-STRING
>873e		ff 00				        .word $00FF     ; /HOLD
>8740		54 00				        .word $0054     ; /PAD (this is 84 decimal)
>8742		08 00				        .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
>8744		00 00				        .word 0000      ; FLOORED ("FALSE", we have symmetric)
>8746		ff 00				        .word $00FF     ; MAX-CHAR
>8748		ff 7f				        .word $7FFF     ; MAX-N
>874a		ff ff				        .word $FFFF     ; MAX-U
>874c		80 00				        .word $0080     ; RETURN-STACK-CELLS
>874e		20 00				        .word $0020     ; STACK-CELLS (from definitions.asm)
>8750		09 00				        .word $0009     ; WORDLISTS
.8752						env_results_double:
>8752		ff 7f ff ff			        .word $7FFF, $FFFF      ; MAX-D
>8756		ff ff ff ff			        .word $FFFF, $FFFF      ; MAX-UD
.875a						xt_equal:
.875a		20 cf d7	jsr $d7cf	                jsr underflow_2
.875d						w_equal:
.875d		b5 00		lda $00,x	                lda 0,x                 ; LSB
.875f		d5 02		cmp $02,x	                cmp 2,x
.8761		d0 0a		bne $876d	                bne _false
.8763		b5 01		lda $01,x	                lda 1,x                 ; MSB
.8765		d5 03		cmp $03,x	                cmp 3,x
.8767		d0 04		bne $876d	                bne _false
.8769		a9 ff		lda #$ff	                lda #$FF
.876b		80 02		bra $876f	                bra _done
.876d		a9 00		lda #$00	_false:         lda #0                  ; drop thru to done
.876f		95 02		sta $02,x	_done:          sta 2,x
.8771		95 03		sta $03,x	                sta 3,x
.8773		e8		inx		                inx
.8774		e8		inx		                inx
.8775		60		rts		z_equal:        rts
.8776						xt_blank:
.8776		20 cf d7	jsr $d7cf	                jsr underflow_2
.8779						w_blank:
.8779		ca		dex		                dex
.877a		ca		dex		                dex
.877b		a9 20		lda #$20	                lda #AscSP
.877d		95 00		sta $00,x	                sta 0,x
.877f		74 01		stz $01,x	                stz 1,x
.8781		80 0e		bra $8791	                bra w_fill     ; skip over code for ERASE
.8783						xt_erase:
.8783		20 cf d7	jsr $d7cf	                jsr underflow_2
.8786						w_erase:
.8786		ca		dex		                dex
.8787		ca		dex		                dex
.8788		74 00		stz $00,x	                stz 0,x
.878a		74 01		stz $01,x	                stz 1,x
.878c		80 03		bra $8791	                bra w_fill
.878e						xt_fill:
.878e		20 d4 d7	jsr $d7d4	                jsr underflow_3
.8791						w_fill:
.8791		b5 04		lda $04,x	                lda 4,x         ; LSB
.8793		85 25		sta $25		                sta tmp1
.8795		b5 05		lda $05,x	                lda 5,x
.8797		85 26		sta $26		                sta tmp1+1
.8799		b5 02		lda $02,x	                lda 2,x
.879b		85 27		sta $27		                sta tmp2
.879d		b5 03		lda $03,x	                lda 3,x
.879f		85 28		sta $28		                sta tmp2+1
.87a1		b5 00		lda $00,x	                lda 0,x
.87a3		a8		tay		                tay
.87a4						_loop:
.87a4		a9 7f		lda #$7f	                lda #>ram_end           ; MSB
.87a6		c5 26		cmp $26		                cmp tmp1+1
.87a8		90 21		bcc $87cb	                bcc _done               ; RAM_END < TMP1, so leave
.87aa		d0 06		bne $87b2	                bne _check_counter      ; RAM_END is not smaller and not equal
.87ac		a9 ff		lda #$ff	                lda #<ram_end           ; LSB, because MSBs were equal
.87ae		c5 25		cmp $25		                cmp tmp1
.87b0		90 19		bcc $87cb	                bcc _done               ; RAM_END < TMP1, so leave
.87b2						_check_counter:
.87b2		a5 27		lda $27		                lda tmp2
.87b4		05 28		ora $28		                ora tmp2+1
.87b6		f0 13		beq $87cb	                beq _done
.87b8		98		tya		                tya
.87b9		92 25		sta ($25)	                sta (tmp1)
.87bb		a5 27		lda $27		                lda tmp2
.87bd		d0 02		bne $87c1	                bne +
.87bf		c6 28		dec $28		                dec tmp2+1
.87c1		c6 27		dec $27		+               dec tmp2
.87c3		e6 25		inc $25		                inc tmp1
.87c5		d0 dd		bne $87a4	                bne _loop
.87c7		e6 26		inc $26		                inc tmp1+1
.87c9		80 d9		bra $87a4	                bra _loop
.87cb						_done:
.87cb		8a		txa		                txa
.87cc		18		clc		                clc
.87cd		69 06		adc #$06	                adc #6
.87cf		aa		tax		                tax
.87d0						z_blank:
.87d0						z_erase:
.87d0		60		rts		z_fill:         rts
.87d1						xt_execute:
.87d1		20 ca d7	jsr $d7ca	                jsr underflow_1
.87d4						w_execute:
.87d4		20 d8 87	jsr $87d8	                jsr doexecute   ; do not combine to JMP (native coding)
.87d7		60		rts		z_execute:      rts
.87d8						doexecute:
.87d8		b5 00		lda $00,x	                lda 0,x
.87da		85 04		sta $04		                sta ip
.87dc		b5 01		lda $01,x	                lda 1,x
.87de		85 05		sta $05		                sta ip+1
.87e0		e8		inx		                inx
.87e1		e8		inx		                inx
.87e2		6c 04 00	jmp ($0004)	                jmp (ip)
.87e5						xt_exit:
.87e5						w_exit:
.87e5		60		rts		                rts             ; keep before z_exit
.87e6						z_exit:
.87e6						xt_fetch:
.87e6		20 ca d7	jsr $d7ca	                jsr underflow_1
.87e9						w_fetch:
.87e9		a1 00		lda ($00,x)	                lda (0,x)               ; LSB
.87eb		a8		tay		                tay
.87ec		f6 00		inc $00,x	                inc 0,x
.87ee		d0 02		bne $87f2	                bne +
.87f0		f6 01		inc $01,x	                inc 1,x
.87f2						+
.87f2		a1 00		lda ($00,x)	                lda (0,x)               ; MSB
.87f4		95 01		sta $01,x	                sta 1,x
.87f6		94 00		sty $00,x	                sty 0,x
.87f8		60		rts		z_fetch:        rts
.87f9						xt_find:
.87f9		20 ca d7	jsr $d7ca	                jsr underflow_1
.87fc						w_find:
.87fc		b5 01		lda $01,x	                lda 1,x                 ; MSB
.87fe		48		pha		                pha
.87ff		b5 00		lda $00,x	                lda 0,x                 ; LSB
.8801		48		pha		                pha
.8802		20 de 83	jsr $83de	                jsr w_count            ; ( caddr -- addr u )
.8805		20 5d 9b	jsr $9b5d	                jsr w_find_name        ; ( addr u -- nt | 0 )
.8808		b5 00		lda $00,x	                lda 0,x
.880a		15 01		ora $01,x	                ora 1,x
.880c		d0 0b		bne $8819	                bne _found_word
.880e		20 71 9e	jsr $9e71	                jsr w_false            ; ( 0 0 )
.8811		68		pla		                pla                     ; LSB of address
.8812		95 02		sta $02,x	                sta 2,x
.8814		68		pla		                pla
.8815		95 03		sta $03,x	                sta 3,x                 ; MSB of address
.8817		80 27		bra $8840	                bra _done               ; ( addr 0 )
.8819						_found_word:
.8819		68		pla		                pla
.881a		68		pla		                pla
.881b		20 69 86	jsr $8669	                jsr w_dup              ; ( nt nt )
.881e		20 b1 9c	jsr $9cb1	                jsr w_name_to_int      ; ( nt xt )
.8821		20 1e 92	jsr $921e	                jsr w_swap             ; ( xt nt )
.8824		a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.8826		f6 00		inc $00,x	                inc 0,x
.8828		d0 02		bne $882c	                bne +
.882a		f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.882c						+
.882c		a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.882e		29 02		and #$02	                and #IM
.8830		d0 08		bne $883a	                bne _immediate          ; bit set, we're immediate
.8832		a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.8834		95 00		sta $00,x	                sta 0,x
.8836		95 01		sta $01,x	                sta 1,x
.8838		80 06		bra $8840	                bra _done
.883a						_immediate:
.883a		a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.883c		95 00		sta $00,x	                sta 0,x
.883e		74 01		stz $01,x	                stz 1,x
.8840						_done:
.8840		60		rts		z_find:         rts
.8841						xt_fm_slash_mod:
.8841		20 d4 d7	jsr $d7d4	                jsr underflow_3
.8844						w_fm_slash_mod:
.8844		64 27		stz $27		                stz tmp2        ; default: n is positive
.8846		b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.8848		10 0e		bpl $8858	                bpl _check_d
.884a		e6 27		inc $27		                inc tmp2        ; set flag to negative for n1
.884c		20 f9 8b	jsr $8bf9	                jsr w_negate   ; NEGATE
.884f		20 59 93	jsr $9359	                jsr w_to_r     ; >R
.8852		20 e2 9e	jsr $9ee2	                jsr w_dnegate  ; DNEGATE
.8855		20 b5 8e	jsr $8eb5	                jsr w_r_from   ; R>
.8858						_check_d:
.8858		b5 03		lda $03,x	                lda 3,x         ; MSB of high word of d
.885a		10 0d		bpl $8869	                bpl _multiply
.885c		18		clc		                clc
.885d		b5 00		lda $00,x	                lda 0,x         ; LSB of n1
.885f		75 02		adc $02,x	                adc 2,x         ; LSB of dh
.8861		95 02		sta $02,x	                sta 2,x
.8863		b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.8865		75 03		adc $03,x	                adc 3,x         ; MSB of dh
.8867		95 03		sta $03,x	                sta 3,x
.8869						_multiply:
.8869		20 39 95	jsr $9539	                jsr w_um_slash_mod     ; ( d n1 -- rem n2 )
.886c		a5 27		lda $27		                lda tmp2
.886e		f0 07		beq $8877	                beq _done
.8870		e8		inx		                inx             ; pretend that we SWAP
.8871		e8		inx		                inx
.8872		20 f9 8b	jsr $8bf9	                jsr w_negate
.8875		ca		dex		                dex
.8876		ca		dex		                dex
.8877						_done:
.8877		60		rts		z_fm_slash_mod: rts
.8878						load_evaluate:
.8878		a9 ff		lda #$ff	                lda #$FF
.887a		85 25		sta $25		                sta tmp1
.887c		80 11		bra $888f	                bra load_evaluate_start
.887e						xt_evaluate:
.887e		20 cf d7	jsr $d7cf	                jsr underflow_2
.8881						w_evaluate:
.8881		64 25		stz $25		                stz tmp1
.8883		b5 00		lda $00,x	                lda 0,x
.8885		15 01		ora $01,x	                ora 1,x
.8887		d0 06		bne $888f	                bne evaluate_got_work
.8889		e8		inx		                inx
.888a		e8		inx		                inx
.888b		e8		inx		                inx
.888c		e8		inx		                inx
.888d		80 42		bra $88d1	                bra evaluate_done
.888f						load_evaluate_start:
.888f						evaluate_got_work:
.888f		a0 05		ldy #$05	                ldy #blk_offset+1
.8891		b1 08		lda ($08),y	                lda (up),y
.8893		48		pha		                pha
.8894		88		dey		                dey
.8895		b1 08		lda ($08),y	                lda (up),y
.8897		48		pha		                pha
.8898		a5 25		lda $25		                lda tmp1
.889a		d0 05		bne $88a1	                bne _nozero
.889c		91 08		sta ($08),y	                sta (up),y
.889e		c8		iny		                iny
.889f		91 08		sta ($08),y	                sta (up),y
.88a1						_nozero:
.88a1		20 12 9c	jsr $9c12	                jsr w_input_to_r
.88a4		a9 ff		lda #$ff	                lda #$FF
.88a6		85 0a		sta $0a		                sta insrc
.88a8		85 0b		sta $0b		                sta insrc+1
.88aa		64 10		stz $10		                stz toin
.88ac		64 11		stz $11		                stz toin+1
.88ae		b5 00		lda $00,x	                lda 0,x
.88b0		85 0e		sta $0e		                sta ciblen
.88b2		b5 01		lda $01,x	                lda 1,x
.88b4		85 0f		sta $0f		                sta ciblen+1
.88b6		b5 02		lda $02,x	                lda 2,x
.88b8		85 0c		sta $0c		                sta cib
.88ba		b5 03		lda $03,x	                lda 3,x
.88bc		85 0d		sta $0d		                sta cib+1
.88be		e8		inx		                inx             ; A clean stack is a clean mind
.88bf		e8		inx		                inx
.88c0		e8		inx		                inx
.88c1		e8		inx		                inx
.88c2		20 49 d7	jsr $d749	                jsr interpret   ; ( -- )
.88c5		20 1f 9e	jsr $9e1f	                jsr w_r_to_input
.88c8		a0 04		ldy #$04	                ldy #blk_offset
.88ca		68		pla		                pla
.88cb		91 08		sta ($08),y	                sta (up),y
.88cd		c8		iny		                iny
.88ce		68		pla		                pla
.88cf		91 08		sta ($08),y	                sta (up),y
.88d1						evaluate_done:
.88d1		60		rts		z_evaluate:     rts
.88d2						xt_greater_than:
.88d2		20 cf d7	jsr $d7cf	                jsr underflow_2
.88d5						w_greater_than:
.88d5		a0 00		ldy #$00	                ldy #0          ; default false
.88d7		20 0a d7	jsr $d70a	                jsr compare_16bit
.88da		f0 03		beq $88df	                beq _false
.88dc		10 01		bpl $88df	                bpl _false
.88de		88		dey		                dey
.88df						_false:
.88df		98		tya		                tya
.88e0		e8		inx		                inx
.88e1		e8		inx		                inx
.88e2		95 00		sta $00,x	                sta 0,x
.88e4		95 01		sta $01,x	                sta 1,x
.88e6		60		rts		z_greater_than: rts
.88e7						xt_here:
.88e7						xt_begin:
.88e7						xt_asm_arrow:
.88e7						w_here:
.88e7						w_begin:
.88e7						w_asm_arrow:
.88e7		ca		dex		                dex
.88e8		ca		dex		                dex
.88e9		a5 00		lda $00		                lda cp
.88eb		95 00		sta $00,x	                sta 0,x
.88ed		a5 01		lda $01		                lda cp+1
.88ef		95 01		sta $01,x	                sta 1,x
.88f1						z_here:
.88f1						z_begin:
.88f1						z_asm_arrow:
.88f1		60		rts		                rts
.88f2						xt_hex:
.88f2						w_hex:
.88f2		a9 10		lda #$10	                lda #16
.88f4		85 18		sta $18		                sta base
.88f6		64 19		stz $19		                stz base+1              ; paranoid
.88f8		60		rts		z_hex:          rts
.88f9						xt_hold:
.88f9		20 ca d7	jsr $d7ca	                jsr underflow_1
.88fc						w_hold:
.88fc		a5 2b		lda $2b		                lda tohold
.88fe		d0 02		bne $8902	                bne +
.8900		c6 2c		dec $2c		                dec tohold+1
.8902						+
.8902		c6 2b		dec $2b		                dec tohold
.8904		b5 00		lda $00,x	                lda 0,x
.8906		92 2b		sta ($2b)	                sta (tohold)
.8908		e8		inx		                inx
.8909		e8		inx		                inx
.890a		60		rts		z_hold:         rts
.890b						xt_i:
.890b						w_i:
.890b		ca		dex		                dex
.890c		ca		dex		                dex
.890d		a4 1f		ldy $1f		                ldy loopctrl
.890f		38		sec		                sec
.8910		a5 20		lda $20		                lda loopidx0        ; cached LSB of loopindex
.8912		f9 02 01	sbc $0102,y	                sbc loopfufa,y
.8915		95 00		sta $00,x	                sta 0,x
.8917		b9 01 01	lda $0101,y	                lda loopindex+1,y
.891a		f9 03 01	sbc $0103,y	                sbc loopfufa+1,y
.891d		95 01		sta $01,x	                sta 1,x
.891f		60		rts		z_i:            rts
.8920						xt_if:
.8920						w_if:
.8920		20 d7 97	jsr $97d7	                jsr cmpl_0branch_later
.8923		60		rts		z_if:           rts
.8924						xt_immediate:
.8924						w_immediate:
.8924		20 23 d7	jsr $d723	                jsr current_to_dp
.8927		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.8929		b1 02		lda ($02),y	                lda (dp),y
.892b		09 02		ora #$02	                ora #IM        ; make sure bit 7 is set
.892d		91 02		sta ($02),y	                sta (dp),y
.892f		60		rts		z_immediate:    rts
.8930						xt_invert:
.8930		20 ca d7	jsr $d7ca	                jsr underflow_1
.8933						w_invert:
.8933		a9 ff		lda #$ff	                lda #$FF
.8935		55 00		eor $00,x	                eor 0,x         ; LSB
.8937		95 00		sta $00,x	                sta 0,x
.8939		a9 ff		lda #$ff	                lda #$FF
.893b		55 01		eor $01,x	                eor 1,x         ; MSB
.893d		95 01		sta $01,x	                sta 1,x
.893f		60		rts		z_invert:       rts
.8940						xt_is:
.8940						w_is:
.8940		a5 1a		lda $1a		                lda state
.8942		05 1b		ora $1b		                ora state+1
.8944		f0 0c		beq $8952	                beq _interpreting
.8946		20 17 83	jsr $8317	                jsr w_bracket_tick
.8949		a0 85		ldy #$85	                ldy #>w_defer_store
.894b		a9 11		lda #$11	                lda #<w_defer_store
.894d		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.8950		80 06		bra $8958	                bra _done
.8952						_interpreting:
.8952		20 2f 92	jsr $922f	                jsr w_tick
.8955		20 11 85	jsr $8511	                jsr w_defer_store
.8958						_done:
.8958		60		rts		z_is:           rts
.8959						xt_j:
.8959						w_j:
.8959		ca		dex		                dex                 ; make space on the stack
.895a		ca		dex		                dex
.895b		a5 1f		lda $1f		                lda loopctrl
.895d		38		sec		                sec
.895e		e9 04		sbc #$04	                sbc #4
.8960		a8		tay		                tay
.8961		38		sec		                sec
.8962		b9 00 01	lda $0100,y	                lda loopindex,y
.8965		f9 02 01	sbc $0102,y	                sbc loopfufa,y
.8968		95 00		sta $00,x	                sta 0,x
.896a		b9 01 01	lda $0101,y	                lda loopindex+1,y
.896d		f9 03 01	sbc $0103,y	                sbc loopfufa+1,y
.8970		95 01		sta $01,x	                sta 1,x
.8972		60		rts		z_j:            rts
.8973						xt_key:
.8973						w_key:
.8973		20 7d 89	jsr $897d	                jsr key_a               ; returns char in A
.8976		ca		dex		                dex
.8977		ca		dex		                dex
.8978		95 00		sta $00,x	                sta 0,x
.897a		74 01		stz $01,x	                stz 1,x
.897c		60		rts		z_key:          rts
.897d						key_a:
.897d		6c 14 00	jmp ($0014)	                jmp (input)             ; JSR/RTS
.8980						xt_keyq:
.8980						w_keyq:
.8980		a0 00		ldy #$00	                ldy #0
.8982		20 8f 89	jsr $898f	                jsr keyq_a
.8985		f0 01		beq $8988	                beq +           ; A=0 => Y=0
.8987		88		dey		                dey             ; A<>0 => Y=#$ff
.8988						+
.8988		ca		dex		                dex
.8989		ca		dex		                dex
.898a		94 00		sty $00,x	                sty 0,x         ; store either $0000 or $ffff
.898c		94 01		sty $01,x	                sty 1,x
.898e		60		rts		z_keyq:         rts
.898f		6c 16 00	jmp ($0016)	keyq_a:         jmp (havekey)
.8992						xt_leave:
.8992						w_leave:
.8992		a5 21		lda $21		                lda loopleave
.8994		a4 22		ldy $22		                ldy loopleave+1
.8996		20 a8 97	jsr $97a8	                jsr cmpl_jump   ; emit the JMP chaining prior leave address
.8999		38		sec		                sec
.899a		a5 00		lda $00		                lda cp
.899c		e9 02		sbc #$02	                sbc #2
.899e		85 21		sta $21		                sta loopleave
.89a0		a5 01		lda $01		                lda cp+1
.89a2		b0 01		bcs $89a5	                bcs +
.89a4		3a		dec a		                dea
.89a5		85 22		sta $22		+               sta loopleave+1
.89a7						z_leave:
.89a7		60		rts		                rts
.89a8						xt_left_bracket:
.89a8						w_left_bracket:
.89a8		64 1a		stz $1a		                stz state
.89aa		64 1b		stz $1b		                stz state+1
.89ac		60		rts		z_left_bracket: rts
.89ad						xt_less_number_sign:
.89ad						w_less_number_sign:
.89ad		20 e6 8c	jsr $8ce6	                jsr w_pad      ; ( addr )
.89b0		b5 00		lda $00,x	                lda 0,x
.89b2		85 2b		sta $2b		                sta tohold
.89b4		b5 01		lda $01,x	                lda 1,x
.89b6		85 2c		sta $2c		                sta tohold+1
.89b8		e8		inx		                inx
.89b9		e8		inx		                inx
.89ba						z_less_number_sign:
.89ba		60		rts		                rts
.89bb						xt_less_than:
.89bb		20 cf d7	jsr $d7cf	                jsr underflow_2
.89be						w_less_than:
.89be		a0 00		ldy #$00	                ldy #0          ; default false
.89c0		20 0a d7	jsr $d70a	                jsr compare_16bit
.89c3		f0 03		beq $89c8	                beq _false
.89c5		30 01		bmi $89c8	                bmi _false
.89c7		88		dey		                dey
.89c8						_false:
.89c8		98		tya		                tya
.89c9		e8		inx		                inx
.89ca		e8		inx		                inx
.89cb		95 00		sta $00,x	                sta 0,x
.89cd		95 01		sta $01,x	                sta 1,x
.89cf		60		rts		z_less_than:    rts
.89d0						xt_literal:
.89d0		20 ca d7	jsr $d7ca	                jsr underflow_1
.89d3						w_literal:
.89d3		a9 0a		lda #$0a	                lda #template_push_tos_size
.89d5		20 c5 97	jsr $97c5	                jsr check_nc_limit
.89d8		90 0c		bcc $89e6	                bcc _inline
.89da		a0 8a		ldy #$8a	                ldy #>literal_runtime
.89dc		a9 18		lda #$18	                lda #<literal_runtime
.89de		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.89e1		20 b1 83	jsr $83b1	                jsr w_comma
.89e4		80 27		bra $8a0d	                bra z_literal
.89e6						_inline:
.89e6		a0 94		ldy #$94	                ldy #$94        ; STY opcode
.89e8		b5 01		lda $01,x	                lda 1,x         ; MSB
.89ea		d0 02		bne $89ee	                bne +
.89ec		a0 74		ldy #$74	                ldy #$74        ; STZ opcode
.89ee		5a		phy		+               phy
.89ef		b5 00		lda $00,x	                lda 0,x         ; LSB
.89f1		48		pha		                pha
.89f2		a0 02		ldy #$02	                ldy #2
.89f4		b5 01		lda $01,x	                lda 1,x         ; MSB
.89f6		f0 03		beq $89fb	                beq _copy
.89f8		a0 00		ldy #$00	                ldy #0
.89fa		48		pha		                pha
.89fb		b9 0e 8a	lda $8a0e,y	_copy:          lda template_push_tos,y
.89fe		c9 ff		cmp #$ff	                cmp #$ff        ; is it a placeholder?
.8a00		d0 01		bne $8a03	                bne +
.8a02		68		pla		                pla
.8a03		20 bc 97	jsr $97bc	+               jsr cmpl_a
.8a06		c8		iny		                iny
.8a07		c0 0a		cpy #$0a	                cpy #template_push_tos_size
.8a09		d0 f0		bne $89fb	                bne _copy
.8a0b		e8		inx		                inx             ; drop the literal
.8a0c		e8		inx		                inx
.8a0d		60		rts		z_literal:      rts
.8a0e						template_push_tos:
.8a0e		a0 ff		ldy #$ff	                ldy #$ff        ; we'll omit this if MSB is zero
.8a10		a9 ff		lda #$ff	                lda #$ff
.8a12		ca		dex		                dex
.8a13		ca		dex		                dex
.8a14		95 00		sta $00,x	                sta 0,x
>8a16		ff 01				                .byte $ff, 1    ; this will become either sty 1,x or stz 1,x
=10						template_push_tos_size = * - template_push_tos
.8a18						literal_runtime:
.8a18		ca		dex		                dex
.8a19		ca		dex		                dex
.8a1a		68		pla		                pla             ; LSB
.8a1b		85 25		sta $25		                sta tmp1
.8a1d		68		pla		                pla             ; MSB
.8a1e		85 26		sta $26		                sta tmp1+1
.8a20		a0 01		ldy #$01	                ldy #1
.8a22		b1 25		lda ($25),y	                lda (tmp1),y    ; LSB
.8a24		95 00		sta $00,x	                sta 0,x
.8a26		c8		iny		                iny
.8a27		b1 25		lda ($25),y	                lda (tmp1),y    ; MSB
.8a29		95 01		sta $01,x	                sta 1,x
.8a2b		98		tya		                tya
.8a2c		18		clc		                clc
.8a2d		65 25		adc $25		                adc tmp1
.8a2f		a8		tay		                tay
.8a30		a5 26		lda $26		                lda tmp1+1
.8a32		69 00		adc #$00	                adc #0
.8a34		48		pha		                pha
.8a35		5a		phy		                phy
.8a36		60		rts		                rts
.8a37						xt_loop:
.8a37						w_loop:
.8a37		ca		dex		                dex
.8a38		ca		dex		                dex
.8a39		ca		dex		                dex
.8a3a		ca		dex		                dex
.8a3b		a9 b0		lda #$b0	                lda #<loop_runtime
.8a3d		95 02		sta $02,x	                sta 2,x
.8a3f		a9 8a		lda #$8a	                lda #>loop_runtime
.8a41		95 03		sta $03,x	                sta 3,x
.8a43		a9 11		lda #$11	                lda #loop_runtime_size
.8a45		95 00		sta $00,x	                sta 0,x
.8a47		74 01		stz $01,x	                stz 1,x
.8a49		80 12		bra $8a5d	                bra loop_common
.8a4b						xt_plus_loop:
.8a4b						w_plus_loop:
.8a4b		ca		dex		                dex
.8a4c		ca		dex		                dex
.8a4d		ca		dex		                dex
.8a4e		ca		dex		                dex
.8a4f		a9 c9		lda #$c9	                lda #<plus_loop_runtime
.8a51		95 02		sta $02,x	                sta 2,x
.8a53		a9 8a		lda #$8a	                lda #>plus_loop_runtime
.8a55		95 03		sta $03,x	                sta 3,x
.8a57		a9 1a		lda #$1a	                lda #plus_loop_runtime_size
.8a59		95 00		sta $00,x	                sta 0,x
.8a5b		74 01		stz $01,x	                stz 1,x
.8a5d						loop_common:
.8a5d		20 db 8c	jsr $8cdb	                jsr w_over
.8a60		20 1e 92	jsr $921e	                jsr w_swap             ; xt and xt' are the same
.8a63		20 2f 97	jsr $972f	                jsr cmpl_by_limit
.8a66		90 05		bcc $8a6d	                bcc _native
.8a68		20 b1 83	jsr $83b1	                jsr w_comma
.8a6b		80 03		bra $8a70	                bra +
.8a6d						_native:
.8a6d		20 a2 97	jsr $97a2	                jsr cmpl_jump_tos
.8a70						+
.8a70		a5 22		lda $22		                lda loopleave+1         ; MSB=0 means we're done
.8a72		f0 19		beq $8a8d	                beq _noleave
.8a74						_next:
.8a74		a0 01		ldy #$01	                ldy #1
.8a76		b1 21		lda ($21),y	                lda (loopleave),y
.8a78		48		pha		                pha
.8a79		a5 01		lda $01		                lda cp+1
.8a7b		91 21		sta ($21),y	                sta (loopleave),y
.8a7d		88		dey		                dey
.8a7e		b1 21		lda ($21),y	                lda (loopleave),y
.8a80		48		pha		                pha
.8a81		a5 00		lda $00		                lda cp
.8a83		91 21		sta ($21),y	                sta (loopleave),y
.8a85		68		pla		                pla
.8a86		85 21		sta $21		                sta loopleave
.8a88		68		pla		                pla
.8a89		85 22		sta $22		                sta loopleave+1
.8a8b		d0 e7		bne $8a74	                bne _next
.8a8d						_noleave:
.8a8d		b5 00		lda $00,x	                lda 0,x
.8a8f		85 21		sta $21		                sta loopleave
.8a91		b5 01		lda $01,x	                lda 1,x
.8a93		85 22		sta $22		                sta loopleave+1
.8a95		a9 1d		lda #$1d	                lda #<nt_unloop
.8a97		95 00		sta $00,x	                sta 0,x
.8a99		a9 c3		lda #$c3	                lda #>nt_unloop
.8a9b		95 01		sta $01,x	                sta 1,x
.8a9d		20 ad 96	jsr $96ad	                jsr compile_nt_comma    ; use the faster entry with the NT
.8aa0		b5 01		lda $01,x	                lda 1,x                 ; MSB=0 means DO so nothing to do
.8aa2		f0 09		beq $8aad	                beq +
.8aa4		20 e7 88	jsr $88e7	                jsr w_here
.8aa7		20 1e 92	jsr $921e	                jsr w_swap
.8aaa		4c 08 92	jmp $9208	                jmp w_store             ; write here as ?DO jmp target and return
.8aad		e8		inx		+               inx                     ; drop the ignored word for DO
.8aae		e8		inx		                inx
.8aaf						z_loop:
.8aaf		60		rts		z_plus_loop:    rts
.8ab0						loop_runtime:
.8ab0		e6 20		inc $20		                inc loopidx0            ; increment the LSB of loopindex
.8ab2		d0 0d		bne $8ac1	                bne _repeat             ; avoid expensive test most of the time
.8ab4		a4 1f		ldy $1f		                ldy loopctrl
.8ab6		b9 01 01	lda $0101,y	                lda loopindex+1,y
.8ab9		1a		inc a		                ina
.8aba		c9 80		cmp #$80	                cmp #$80
.8abc		f0 06		beq $8ac4	                beq _done
.8abe		99 01 01	sta $0101,y	                sta loopindex+1,y
=17						loop_runtime_size = * - loop_runtime
.8ac1						_repeat:
.8ac1		a9 00		lda #$00	                lda #0
>8ac3		2c				                .byte $2c               ; BIT llhh to hide the lda #1
.8ac4		a9 01		lda #$01	_done:          lda #1
.8ac6		4c 54 98	jmp $9854	                jmp zbranch_runtime
.8ac9						plus_loop_runtime:
.8ac9		18		clc		                clc
.8aca		b5 00		lda $00,x	                lda 0,x                 ; LSB of step
.8acc		65 20		adc $20		                adc loopidx0
.8ace		85 20		sta $20		                sta loopidx0
.8ad0		e8		inx		                inx                     ; dump step from TOS before MSB test
.8ad1		e8		inx		                inx                     ; since we might skip it
.8ad2		b5 ff		lda $ff,x	                lda $FF,x               ; MSB of step since 1,x == -1,x+2
.8ad4		d0 02		bne $8ad8	                bne _chkv               ; if it's non-zero we have to check
.8ad6		90 0b		bcc $8ae3	                bcc _repeat             ; but if 0 and no carry, we're good
.8ad8		b8		clv		_chkv:          clv
.8ad9		a4 1f		ldy $1f		                ldy loopctrl            ; get LCB offset
.8adb		79 01 01	adc $0101,y	                adc loopindex+1,y       ; MSB of index
.8ade		99 01 01	sta $0101,y	                sta loopindex+1,y       ; put MSB of index back on stack
.8ae1		70 03		bvs $8ae6	                bvs _done               ; skip over JMP instruction
=26						plus_loop_runtime_size = * - plus_loop_runtime
.8ae3						_repeat:
.8ae3		a9 00		lda #$00	                lda #0
>8ae5		2c				                .byte $2c               ; BIT llhh to hide the lda #1
.8ae6		a9 01		lda #$01	_done:          lda #1
.8ae8		4c 54 98	jmp $9854	                jmp zbranch_runtime
.8aeb						xt_lshift:
.8aeb		20 cf d7	jsr $d7cf	                jsr underflow_2
.8aee						w_lshift:
.8aee		b5 00		lda $00,x	                lda 0,x
.8af0		29 0f		and #$0f	                and #%00001111
.8af2		f0 08		beq $8afc	                beq _done
.8af4		a8		tay		                tay
.8af5						_loop:
.8af5		16 02		asl $02,x	                asl 2,x
.8af7		36 03		rol $03,x	                rol 3,x
.8af9		88		dey		                dey
.8afa		d0 f9		bne $8af5	                bne _loop
.8afc						_done:
.8afc		e8		inx		                inx
.8afd		e8		inx		                inx
.8afe		60		rts		z_lshift:       rts
.8aff						xt_m_star:
.8aff		20 cf d7	jsr $d7cf	                jsr underflow_2
.8b02						w_m_star:
.8b02		b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.8b04		55 03		eor $03,x	                eor 3,x         ; MSB of n2
.8b06		48		pha		                pha
.8b07		20 d5 80	jsr $80d5	                jsr w_abs
.8b0a		20 1e 92	jsr $921e	                jsr w_swap
.8b0d		20 d5 80	jsr $80d5	                jsr w_abs
.8b10		20 7b 95	jsr $957b	                jsr w_um_star          ; ( d )
.8b13		68		pla		                pla
.8b14		10 03		bpl $8b19	                bpl _done
.8b16		20 e2 9e	jsr $9ee2	                jsr w_dnegate
.8b19						_done:
.8b19		60		rts		z_m_star:       rts
.8b1a						xt_marker:
.8b1a						w_marker:
.8b1a		20 23 d7	jsr $d723	                jsr current_to_dp
.8b1d		a5 02		lda $02		                lda dp
.8b1f		48		pha		                pha
.8b20		a5 03		lda $03		                lda dp+1
.8b22		48		pha		                pha
.8b23		a5 00		lda $00		                lda cp
.8b25		48		pha		                pha
.8b26		a5 01		lda $01		                lda cp+1
.8b28		48		pha		                pha
.8b29		a9 28		lda #$28	                lda #4 + marker_end_offset - marker_start_offset
.8b2b		85 1e		sta $1e		                sta tmpdsp              ; PFA size in bytes
.8b2d		a9 4b		lda #$4b	                lda #<marker_runtime
.8b2f		a0 8b		ldy #$8b	                ldy #>marker_runtime
.8b31		20 fd 83	jsr $83fd	                jsr create_common
.8b34		7a		ply		                ply                     ; MSB
.8b35		68		pla		                pla                     ; LSB
.8b36		20 b8 97	jsr $97b8	                jsr cmpl_word
.8b39		7a		ply		                ply                     ; MSB
.8b3a		68		pla		                pla                     ; LSB
.8b3b		20 b8 97	jsr $97b8	                jsr cmpl_word
.8b3e		a0 08		ldy #$08	                ldy #marker_start_offset
.8b40						-
.8b40		b1 08		lda ($08),y	                lda (up),y
.8b42		20 bc 97	jsr $97bc	                jsr cmpl_a
.8b45		c8		iny		                iny
.8b46		c0 2c		cpy #$2c	                cpy #marker_end_offset
.8b48		d0 f6		bne $8b40	                bne -
.8b4a		60		rts		z_marker:       rts
.8b4b						marker_runtime:
.8b4b		68		pla		                pla
.8b4c		85 25		sta $25		                sta tmp1        ; LSB of address
.8b4e		68		pla		                pla
.8b4f		85 26		sta $26		                sta tmp1+1      ; MSB of address
.8b51		a0 01		ldy #$01	                ldy #1          ; start at 1 due to RTS mechanics
.8b53		b1 25		lda ($25),y	                lda (tmp1),y
.8b55		85 00		sta $00		                sta cp
.8b57		c8		iny		                iny
.8b58		b1 25		lda ($25),y	                lda (tmp1),y
.8b5a		85 01		sta $01		                sta cp+1
.8b5c		c8		iny		                iny
.8b5d		b1 25		lda ($25),y	                lda (tmp1),y
.8b5f		85 02		sta $02		                sta dp
.8b61		c8		iny		                iny
.8b62		b1 25		lda ($25),y	                lda (tmp1),y
.8b64		85 03		sta $03		                sta dp+1
.8b66		38		sec		                sec
.8b67		a5 25		lda $25		                lda tmp1
.8b69		e9 03		sbc #$03	                sbc #marker_start_offset - 5
.8b6b		85 25		sta $25		                sta tmp1
.8b6d		b0 02		bcs $8b71	                bcs +
.8b6f		c6 26		dec $26		                dec tmp1+1
.8b71						+
.8b71		a0 08		ldy #$08	                ldy #marker_start_offset
.8b73						-
.8b73		b1 25		lda ($25),y	                lda (tmp1),y
.8b75		91 08		sta ($08),y	                sta (up),y
.8b77		c8		iny		                iny
.8b78		c0 2c		cpy #$2c	                cpy #marker_end_offset
.8b7a		d0 f7		bne $8b73	                bne -
.8b7c		20 36 d7	jsr $d736	                jsr dp_to_current       ; Move the CURRENT DP back.
.8b7f		60		rts		                rts
.8b80						xt_max:
.8b80		20 cf d7	jsr $d7cf	                jsr underflow_2
.8b83						w_max:
.8b83		b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.8b85		d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets the carry
.8b87		b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.8b89		f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.8b8b		50 02		bvc $8b8f	                bvc _no_overflow
.8b8d		49 80		eor #$80	                eor #$80        ; complement negative flag
.8b8f						_no_overflow:
.8b8f		30 08		bmi $8b99	                bmi _keep_nos
.8b91		b5 00		lda $00,x	                lda 0,x
.8b93		95 02		sta $02,x	                sta 2,x
.8b95		b5 01		lda $01,x	                lda 1,x
.8b97		95 03		sta $03,x	                sta 3,x
.8b99						_keep_nos:
.8b99		e8		inx		                inx
.8b9a		e8		inx		                inx
.8b9b		60		rts		z_max:          rts
.8b9c						xt_min:
.8b9c		20 cf d7	jsr $d7cf	                jsr underflow_2
.8b9f						w_min:
.8b9f		b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.8ba1		d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets carry
.8ba3		b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.8ba5		f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.8ba7		50 02		bvc $8bab	                bvc _no_overflow
.8ba9		49 80		eor #$80	                eor #$80
.8bab						_no_overflow:
.8bab		10 08		bpl $8bb5	                bpl _keep_nos
.8bad		b5 00		lda $00,x	                lda 0,x
.8baf		95 02		sta $02,x	                sta 2,x
.8bb1		b5 01		lda $01,x	                lda 1,x
.8bb3		95 03		sta $03,x	                sta 3,x
.8bb5						_keep_nos:
.8bb5		e8		inx		                inx
.8bb6		e8		inx		                inx
.8bb7		60		rts		z_min:          rts
.8bb8						xt_minus:
.8bb8		20 cf d7	jsr $d7cf	                jsr underflow_2
.8bbb						w_minus:
.8bbb		38		sec		                sec
.8bbc		b5 02		lda $02,x	                lda 2,x         ; LSB
.8bbe		f5 00		sbc $00,x	                sbc 0,x
.8bc0		95 02		sta $02,x	                sta 2,x
.8bc2		b5 03		lda $03,x	                lda 3,x         ; MSB
.8bc4		f5 01		sbc $01,x	                sbc 1,x
.8bc6		95 03		sta $03,x	                sta 3,x
.8bc8		e8		inx		                inx
.8bc9		e8		inx		                inx
.8bca		60		rts		z_minus:        rts
.8bcb						xt_mod:
.8bcb		20 cf d7	jsr $d7cf	                jsr underflow_2
.8bce						w_mod:
.8bce		20 54 91	jsr $9154	                jsr w_slash_mod
.8bd1		e8		inx		                inx             ; DROP
.8bd2		e8		inx		                inx
.8bd3						z_mod:
.8bd3		60		rts		                rts
.8bd4						xt_move:
.8bd4		20 d4 d7	jsr $d7d4	                jsr underflow_3
.8bd7						w_move:
.8bd7		b5 03		lda $03,x	                lda 3,x                 ; MSB of addr2
.8bd9		d5 05		cmp $05,x	                cmp 5,x                 ; MSB of addr1
.8bdb		f0 05		beq $8be2	                beq _lsb                ; wasn't helpful, move to LSB
.8bdd		b0 0e		bcs $8bed	                bcs _to_move_up         ; we want CMOVE>
.8bdf		4c 4a a0	jmp $a04a	                jmp w_cmove            ; JSR/RTS
.8be2						_lsb:
.8be2		b5 02		lda $02,x	                lda 2,x                 ; LSB of addr2
.8be4		d5 04		cmp $04,x	                cmp 4,x                 ; LSB of addr1
.8be6		f0 08		beq $8bf0	                beq _equal              ; LSB is equal as well
.8be8		b0 03		bcs $8bed	                bcs _to_move_up         ; we want CMOVE>
.8bea		4c 4a a0	jmp $a04a	                jmp w_cmove            ; JSR/RTS
.8bed						_to_move_up:
.8bed		4c 85 a0	jmp $a085	                jmp w_cmove_up         ; JSR/RTS
.8bf0						_equal:
.8bf0		8a		txa		                txa
.8bf1		18		clc		                clc
.8bf2		69 06		adc #$06	                adc #6
.8bf4		aa		tax		                tax
.8bf5		60		rts		z_move:         rts
.8bf6						xt_negate:
.8bf6		20 ca d7	jsr $d7ca	                jsr underflow_1
.8bf9						w_negate:
.8bf9		a9 00		lda #$00	        	lda #0
.8bfb		38		sec		                sec
.8bfc		f5 00		sbc $00,x	                sbc 0,x         ; LSB
.8bfe		95 00		sta $00,x	                sta 0,x
.8c00		a9 00		lda #$00	                lda #0
.8c02		f5 01		sbc $01,x	                sbc 1,x         ; MSB
.8c04		95 01		sta $01,x	                sta 1,x
.8c06		60		rts		z_negate:       rts
.8c07						xt_nip:
.8c07		20 cf d7	jsr $d7cf	                jsr underflow_2
.8c0a						w_nip:
.8c0a		b5 00		lda $00,x	                lda 0,x         ; LSB
.8c0c		95 02		sta $02,x	                sta 2,x
.8c0e		b5 01		lda $01,x	                lda 1,x         ; MSB
.8c10		95 03		sta $03,x	                sta 3,x
.8c12		e8		inx		                inx
.8c13		e8		inx		                inx
.8c14		60		rts		z_nip:          rts
.8c15						xt_not_equals:
.8c15		20 cf d7	jsr $d7cf	                jsr underflow_2
.8c18						w_not_equals:
.8c18		a0 00		ldy #$00	                ldy #0                  ; default is true
.8c1a		b5 00		lda $00,x	                lda 0,x                 ; LSB
.8c1c		d5 02		cmp $02,x	                cmp 2,x
.8c1e		d0 0a		bne $8c2a	                bne _not_equal
.8c20		b5 01		lda $01,x	                lda 1,x                 ; MSB
.8c22		d5 03		cmp $03,x	                cmp 3,x
.8c24		d0 04		bne $8c2a	                bne _not_equal
.8c26		a9 ff		lda #$ff	                lda #$FF
.8c28		80 01		bra $8c2b	                bra _done
.8c2a						_not_equal:
.8c2a		88		dey		                dey                     ; drop thru to done
.8c2b						_done:
.8c2b		98		tya		                tya
.8c2c		e8		inx		                inx
.8c2d		e8		inx		                inx
.8c2e		95 00		sta $00,x	                sta 0,x
.8c30		95 01		sta $01,x	                sta 1,x
.8c32		60		rts		z_not_equals:   rts
.8c33						xt_number_sign:
.8c33		20 cf d7	jsr $d7cf	                jsr underflow_2         ; double number
.8c36						w_number_sign:
.8c36		ca		dex		                dex                     ; inline w_zero
.8c37		ca		dex		                dex
.8c38		74 00		stz $00,x	                stz 0,x
.8c3a		74 01		stz $01,x	                stz 1,x
.8c3c		e6 19		inc $19		                inc base+1
.8c3e		b5 02		lda $02,x	                lda 2,x                 ; if msw is 0 we can skip the first pass
.8c40		15 03		ora $03,x	                ora 3,x
.8c42		f0 0b		beq $8c4f	                beq _skip               ; enter with ( v 0 0 -rot -- 0 v 0 )
.8c44						_loop:
.8c44		ca		dex		                dex                     ; inline `base @`
.8c45		ca		dex		                dex
.8c46		a5 18		lda $18		                lda base                ; base <= 36
.8c48		95 00		sta $00,x	                sta 0,x
.8c4a		74 01		stz $01,x	                stz 1,x
.8c4c		20 39 95	jsr $9539	                jsr w_um_slash_mod      ; ( v u 0 base -- v ru qu )
.8c4f		20 f8 9c	jsr $9cf8	_skip:          jsr w_not_rot           ; ( qu v ru )
.8c52		46 19		lsr $19		                lsr base+1              ; 1 => 0 + C=1 => 0 + C=0
.8c54		b0 ee		bcs $8c44	                bcs _loop               ; run two passes
.8c56		b5 00		lda $00,x	                lda 0,x
.8c58		a8		tay		                tay
.8c59		b9 23 d3	lda $d323,y	                lda alpha36,y           ; upper case 0-9A-Z
.8c5c		95 00		sta $00,x	                sta 0,x
.8c5e		74 01		stz $01,x	                stz 1,x                 ; paranoid; now ( ud char )
.8c60		20 fc 88	jsr $88fc	                jsr w_hold
.8c63						z_number_sign:
.8c63		60		rts		                rts
.8c64						xt_number_sign_greater:
.8c64		20 cf d7	jsr $d7cf	                jsr underflow_2         ; double number
.8c67						w_number_sign_greater:
.8c67		a5 2b		lda $2b		                lda tohold
.8c69		95 00		sta $00,x	                sta 0,x         ; LSB of tohold
.8c6b		95 02		sta $02,x	                sta 2,x
.8c6d		a5 2c		lda $2c		                lda tohold+1
.8c6f		95 01		sta $01,x	                sta 1,x         ; MSB of addr
.8c71		95 03		sta $03,x	                sta 3,x         ; ( addr addr )
.8c73		20 e6 8c	jsr $8ce6	                jsr w_pad      ; ( addr addr pad )
.8c76		38		sec		                sec
.8c77		b5 00		lda $00,x	                lda 0,x         ; LSB of pad address
.8c79		f5 02		sbc $02,x	                sbc 2,x
.8c7b		95 02		sta $02,x	                sta 2,x
.8c7d		b5 01		lda $01,x	                lda 1,x         ; MSB, which should always be zero
.8c7f		f5 03		sbc $03,x	                sbc 3,x
.8c81		95 03		sta $03,x	                sta 3,x         ; ( addr u pad )
.8c83		e8		inx		                inx
.8c84		e8		inx		                inx
.8c85						z_number_sign_greater:
.8c85		60		rts		                rts
.8c86						xt_number_sign_s:
.8c86		20 cf d7	jsr $d7cf	                jsr underflow_2
.8c89						w_number_sign_s:
.8c89						_loop:
.8c89		20 36 8c	jsr $8c36	                jsr w_number_sign
.8c8c		b5 00		lda $00,x	                lda 0,x
.8c8e		15 01		ora $01,x	                ora 1,x
.8c90		15 02		ora $02,x	                ora 2,x
.8c92		15 03		ora $03,x	                ora 3,x
.8c94		d0 f3		bne $8c89	                bne _loop
.8c96						z_number_sign_s:
.8c96		60		rts		                rts
.8c97						xt_of:
.8c97						w_of:
.8c97		a0 8c		ldy #$8c	                ldy #>w_over
.8c99		a9 db		lda #$db	                lda #<w_over
.8c9b		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.8c9e		a0 87		ldy #$87	                ldy #>w_equal
.8ca0		a9 5d		lda #$5d	                lda #<w_equal
.8ca2		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.8ca5		20 20 89	jsr $8920	                jsr w_if
.8ca8		a0 86		ldy #$86	                ldy #>w_drop
.8caa		a9 63		lda #$63	                lda #<w_drop
.8cac		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.8caf		60		rts		z_of:           rts
.8cb0						xt_one_minus:
.8cb0		20 ca d7	jsr $d7ca	                jsr underflow_1
.8cb3						w_one_minus:
.8cb3		b5 00		lda $00,x	                lda 0,x
.8cb5		d0 02		bne $8cb9	                bne +
.8cb7		d6 01		dec $01,x	                dec 1,x
.8cb9						+
.8cb9		d6 00		dec $00,x	                dec 0,x
.8cbb		60		rts		z_one_minus:    rts
.8cbc						xt_char_plus:
.8cbc						xt_one_plus:
.8cbc		20 ca d7	jsr $d7ca	                jsr underflow_1
.8cbf						w_char_plus:
.8cbf						w_one_plus:
.8cbf		f6 00		inc $00,x	                inc 0,x
.8cc1		d0 02		bne $8cc5	                bne _done
.8cc3		f6 01		inc $01,x	                inc 1,x
.8cc5						_done:
.8cc5						z_char_plus:
.8cc5		60		rts		z_one_plus:     rts
.8cc6						xt_or:
.8cc6		20 cf d7	jsr $d7cf	                jsr underflow_2
.8cc9						w_or:
.8cc9		b5 00		lda $00,x	                lda 0,x
.8ccb		15 02		ora $02,x	                ora 2,x
.8ccd		95 02		sta $02,x	                sta 2,x
.8ccf		b5 01		lda $01,x	                lda 1,x
.8cd1		15 03		ora $03,x	                ora 3,x
.8cd3		95 03		sta $03,x	                sta 3,x
.8cd5		e8		inx		                inx
.8cd6		e8		inx		                inx
.8cd7		60		rts		z_or:           rts
.8cd8						xt_over:
.8cd8		20 cf d7	jsr $d7cf	                jsr underflow_2
.8cdb						w_over:
.8cdb		ca		dex		                dex
.8cdc		ca		dex		                dex
.8cdd		b5 04		lda $04,x	                lda 4,x         ; LSB
.8cdf		95 00		sta $00,x	                sta 0,x
.8ce1		b5 05		lda $05,x	                lda 5,x         ; MSB
.8ce3		95 01		sta $01,x	                sta 1,x
.8ce5		60		rts		z_over:         rts
.8ce6						xt_pad:
.8ce6						w_pad:
.8ce6		ca		dex		                dex
.8ce7		ca		dex		                dex
.8ce8		a5 00		lda $00		                lda cp
.8cea		18		clc		                clc
.8ceb		69 ff		adc #$ff	                adc #padoffset  ; assumes padoffset one byte in size
.8ced		95 00		sta $00,x	                sta 0,x
.8cef		a5 01		lda $01		                lda cp+1
.8cf1		69 00		adc #$00	                adc #0          ; only need carry
.8cf3		95 01		sta $01,x	                sta 1,x
.8cf5		60		rts		z_pad:          rts
.8cf6						xt_page:
.8cf6						w_page:
.8cf6		a9 1b		lda #$1b	                lda #AscESC
.8cf8		20 93 86	jsr $8693	                jsr emit_a
.8cfb		a9 5b		lda #$5b	                lda #'['
.8cfd		20 93 86	jsr $8693	                jsr emit_a
.8d00		a9 32		lda #$32	                lda #'2'
.8d02		20 93 86	jsr $8693	                jsr emit_a
.8d05		a9 4a		lda #$4a	                lda #'J'
.8d07		20 93 86	jsr $8693	                jsr emit_a
.8d0a		20 71 9e	jsr $9e71	                jsr w_zero
.8d0d		20 71 9e	jsr $9e71	                jsr w_zero
.8d10		20 a8 82	jsr $82a8	                jsr w_at_xy
.8d13		60		rts		z_page:         rts
.8d14						xt_paren:
.8d14						w_paren:
.8d14		ca		dex		                dex
.8d15		ca		dex		                dex
.8d16		a9 29		lda #$29	                lda #41     ; Right parenthesis
.8d18		95 00		sta $00,x	                sta 0,x
.8d1a		74 01		stz $01,x	                stz 1,x
.8d1c		20 82 8d	jsr $8d82	                jsr w_parse
.8d1f		e8		inx		                inx
.8d20		e8		inx		                inx
.8d21		e8		inx		                inx
.8d22		e8		inx		                inx
.8d23		60		rts		z_paren:        rts
.8d24						xt_parse_name:
.8d24						w_parse_name:
.8d24		a5 0e		lda $0e		                lda ciblen              ; LSB of counter
.8d26		38		sec		                sec
.8d27		e5 10		sbc $10		                sbc toin
.8d29		85 25		sta $25		                sta tmp1
.8d2b		a5 0f		lda $0f		                lda ciblen+1            ; MSB
.8d2d		e5 11		sbc $11		                sbc toin+1
.8d2f		85 26		sta $26		                sta tmp1+1
.8d31		a5 25		lda $25		                lda tmp1
.8d33		05 26		ora $26		                ora tmp1+1
.8d35		f0 28		beq $8d5f	                beq _empty_line
.8d37		a5 0c		lda $0c		                lda cib
.8d39		18		clc		                clc
.8d3a		65 10		adc $10		                adc toin
.8d3c		85 27		sta $27		                sta tmp2                ; LSB of first character
.8d3e		a5 0d		lda $0d		                lda cib+1
.8d40		65 11		adc $11		                adc toin+1
.8d42		85 28		sta $28		                sta tmp2+1              ; MSB
.8d44						_skip_loop:
.8d44		b2 27		lda ($27)	                lda (tmp2)              ; work copy of cib
.8d46		20 bd d7	jsr $d7bd	                jsr is_whitespace
.8d49		90 1f		bcc $8d6a	                bcc _char_found
.8d4b		e6 27		inc $27		                inc tmp2
.8d4d		d0 02		bne $8d51	                bne +
.8d4f		e6 28		inc $28		                inc tmp2+1
.8d51						+
.8d51		a5 25		lda $25		                lda tmp1
.8d53		d0 02		bne $8d57	                bne +
.8d55		c6 26		dec $26		                dec tmp1+1
.8d57		c6 25		dec $25		+               dec tmp1
.8d59		a5 25		lda $25		                lda tmp1
.8d5b		05 26		ora $26		                ora tmp1+1
.8d5d		d0 e5		bne $8d44	                bne _skip_loop          ; fall through if empty line
.8d5f						_empty_line:
.8d5f		ca		dex		                dex
.8d60		ca		dex		                dex
.8d61		ca		dex		                dex
.8d62		ca		dex		                dex
.8d63		74 00		stz $00,x	                stz 0,x                 ; TOS is zero
.8d65		74 01		stz $01,x	                stz 1,x
.8d67		4c 14 8e	jmp $8e14	                jmp z_parse_name        ; skip over PARSE
.8d6a						_char_found:
.8d6a		a5 27		lda $27		                lda tmp2
.8d6c		38		sec		                sec
.8d6d		e5 0c		sbc $0c		                sbc cib
.8d6f		85 10		sta $10		                sta toin
.8d71		a5 28		lda $28		                lda tmp2+1
.8d73		e5 0d		sbc $0d		                sbc cib+1
.8d75		85 11		sta $11		                sta toin+1
.8d77		ca		dex		                dex
.8d78		ca		dex		                dex
.8d79		a9 20		lda #$20	                lda #AscSP
.8d7b		95 00		sta $00,x	                sta 0,x
.8d7d		74 01		stz $01,x	                stz 1,x                 ; paranoid, now ( "name" c )
.8d7f						xt_parse:
.8d7f		20 ca d7	jsr $d7ca	                jsr underflow_1
.8d82						w_parse:
.8d82		a5 0e		lda $0e		                lda ciblen
.8d84		05 0f		ora $0f		                ora ciblen+1
.8d86		f0 0c		beq $8d94	                beq _abort_parse
.8d88		a5 11		lda $11		                lda toin+1              ; MSB
.8d8a		c5 0f		cmp $0f		                cmp ciblen+1
.8d8c		90 0e		bcc $8d9c	                bcc _go_parse           ; unsigned comparison
.8d8e		a5 10		lda $10		                lda toin                ; LSB
.8d90		c5 0e		cmp $0e		                cmp ciblen
.8d92		90 08		bcc $8d9c	                bcc _go_parse
.8d94						_abort_parse:
.8d94		ca		dex		                dex
.8d95		ca		dex		                dex
.8d96		74 00		stz $00,x	                stz 0,x
.8d98		74 01		stz $01,x	                stz 1,x
.8d9a		80 78		bra $8e14	                bra _done
.8d9c						_go_parse:
.8d9c		b5 00		lda $00,x	                lda 0,x
.8d9e		85 23		sta $23		                sta tmptos
.8da0		ca		dex		                dex
.8da1		ca		dex		                dex
.8da2		a5 0c		lda $0c		                lda cib
.8da4		18		clc		                clc
.8da5		65 10		adc $10		                adc toin        ; LSB
.8da7		85 25		sta $25		                sta tmp1
.8da9		85 27		sta $27		                sta tmp2
.8dab		95 02		sta $02,x	                sta 2,x
.8dad		a5 0d		lda $0d		                lda cib+1
.8daf		65 11		adc $11		                adc toin+1      ; MSB
.8db1		85 26		sta $26		                sta tmp1+1
.8db3		85 28		sta $28		                sta tmp2+1
.8db5		95 03		sta $03,x	                sta 3,x
.8db7		a5 0c		lda $0c		                lda cib
.8db9		18		clc		                clc
.8dba		65 0e		adc $0e		                adc ciblen
.8dbc		85 29		sta $29		                sta tmp3
.8dbe		a5 0d		lda $0d		                lda cib+1
.8dc0		65 0f		adc $0f		                adc ciblen+1
.8dc2		85 2a		sta $2a		                sta tmp3+1
.8dc4		64 24		stz $24		                stz tmptos+1
.8dc6						_loop:
.8dc6		a5 27		lda $27		                lda tmp2
.8dc8		c5 29		cmp $29		                cmp tmp3
.8dca		d0 06		bne $8dd2	                bne _not_empty
.8dcc		a5 28		lda $28		                lda tmp2+1
.8dce		c5 2a		cmp $2a		                cmp tmp3+1
.8dd0		f0 1d		beq $8def	                beq _eol
.8dd2						_not_empty:
.8dd2		b2 27		lda ($27)	                lda (tmp2)
.8dd4		a4 23		ldy $23		                ldy tmptos
.8dd6		c0 20		cpy #$20	                cpy #AscSP
.8dd8		d0 07		bne $8de1	                bne _not_whitespace
.8dda		20 bd d7	jsr $d7bd	                jsr is_whitespace
.8ddd		90 02		bcc $8de1	                bcc _not_whitespace
.8ddf		80 0c		bra $8ded	                bra _found_delimiter
.8de1						_not_whitespace:
.8de1		c5 23		cmp $23		                cmp tmptos
.8de3		f0 08		beq $8ded	                beq _found_delimiter
.8de5		e6 27		inc $27		                inc tmp2
.8de7		d0 dd		bne $8dc6	                bne _loop
.8de9		e6 28		inc $28		                inc tmp2+1
.8deb		80 d9		bra $8dc6	                bra _loop
.8ded						_found_delimiter:
.8ded		e6 24		inc $24		                inc tmptos+1
.8def						_eol:
.8def		a5 27		lda $27		                lda tmp2
.8df1		38		sec		                sec
.8df2		e5 25		sbc $25		                sbc tmp1
.8df4		95 00		sta $00,x	                sta 0,x
.8df6		a5 28		lda $28		                lda tmp2+1
.8df8		e5 26		sbc $26		                sbc tmp1+1
.8dfa		95 01		sta $01,x	                sta 1,x
.8dfc		a5 27		lda $27		                lda tmp2
.8dfe		38		sec		                sec
.8dff		e5 0c		sbc $0c		                sbc cib
.8e01		85 10		sta $10		                sta toin
.8e03		a5 28		lda $28		                lda tmp2+1
.8e05		e5 0d		sbc $0d		                sbc cib+1
.8e07		85 11		sta $11		                sta toin+1
.8e09		a5 10		lda $10		                lda toin
.8e0b		18		clc		                clc
.8e0c		65 24		adc $24		                adc tmptos+1
.8e0e		85 10		sta $10		                sta toin
.8e10		90 02		bcc $8e14	                bcc +
.8e12		e6 11		inc $11		                inc toin+1
.8e14						+
.8e14						_done:
.8e14						z_parse_name:
.8e14		60		rts		z_parse:        rts
.8e15						xt_pick:
.8e15						w_pick:
.8e15		16 00		asl $00,x	                asl 0,x         ; we assume u < 128 (stack is small)
.8e17		8a		txa		                txa
.8e18		75 00		adc $00,x	                adc 0,x
.8e1a		a8		tay		                tay
.8e1b		b9 02 00	lda $0002,y	                lda 0002,y
.8e1e		95 00		sta $00,x	                sta 0,x
.8e20		b9 03 00	lda $0003,y	                lda 0003,y
.8e23		95 01		sta $01,x	                sta 1,x
.8e25		60		rts		z_pick:         rts
.8e26						xt_plus:
.8e26		20 cf d7	jsr $d7cf	                jsr underflow_2
.8e29						w_plus:
.8e29		18		clc		                clc
.8e2a		b5 00		lda $00,x	                lda 0,x         ; LSB
.8e2c		75 02		adc $02,x	                adc 2,x
.8e2e		95 02		sta $02,x	                sta 2,x
.8e30		b5 01		lda $01,x	                lda 1,x         ; MSB. No CLC, conserve carry bit
.8e32		75 03		adc $03,x	                adc 3,x
.8e34		95 03		sta $03,x	                sta 3,x
.8e36		e8		inx		                inx
.8e37		e8		inx		                inx
.8e38		60		rts		z_plus:         rts
.8e39						xt_plus_store:
.8e39		20 cf d7	jsr $d7cf	                jsr underflow_2
.8e3c						w_plus_store:
.8e3c		18		clc		                clc
.8e3d		a1 00		lda ($00,x)	                lda (0,x)       ; fetch LSB at addr
.8e3f		75 02		adc $02,x	                adc 2,x
.8e41		81 00		sta ($00,x)	                sta (0,x)
.8e43		f6 00		inc $00,x	                inc 0,x         ; addr++
.8e45		d0 02		bne $8e49	                bne +
.8e47		f6 01		inc $01,x	                inc 1,x
.8e49						+
.8e49		a1 00		lda ($00,x)	                lda (0,x)       ; fetch MSB
.8e4b		75 03		adc $03,x	                adc 3,x
.8e4d		81 00		sta ($00,x)	                sta (0,x)
.8e4f		e8		inx		                inx
.8e50		e8		inx		                inx
.8e51		e8		inx		                inx
.8e52		e8		inx		                inx
.8e53		60		rts		z_plus_store:   rts
.8e54						xt_postpone:
.8e54						w_postpone:
.8e54		20 24 8d	jsr $8d24	                jsr w_parse_name               ; ( -- addr n )
.8e57		b5 00		lda $00,x	                lda 0,x
.8e59		15 01		ora $01,x	                ora 1,x
.8e5b		d0 05		bne $8e62	                bne +
.8e5d		a9 05		lda #$05	                lda #err_noname
.8e5f		4c e0 d7	jmp $d7e0	                jmp error
.8e62						+
.8e62		20 5d 9b	jsr $9b5d	                jsr w_find_name                ; ( -- nt | 0 )
.8e65		d0 05		bne $8e6c	                bne +
.8e67		a9 05		lda #$05	                lda #err_noname
.8e69		4c e0 d7	jmp $d7e0	                jmp error
.8e6c						+
.8e6c		20 69 86	jsr $8669	                jsr w_dup
.8e6f		20 bf 8c	jsr $8cbf	                jsr w_one_plus
.8e72		a1 00		lda ($00,x)	                lda (0,x)
.8e74		e8		inx		                inx
.8e75		e8		inx		                inx
.8e76		29 02		and #$02	                and #IM         ; mask all but Intermediate flag
.8e78		f0 05		beq $8e7f	                beq _not_immediate
.8e7a		20 ad 96	jsr $96ad	                jsr compile_nt_comma
.8e7d		80 0a		bra $8e89	                bra _done
.8e7f						_not_immediate:
.8e7f		20 d3 89	jsr $89d3	                jsr w_literal                   ; ( nt -- )
.8e82		a0 96		ldy #$96	                ldy #>compile_nt_comma
.8e84		a9 ad		lda #$ad	                lda #<compile_nt_comma
.8e86		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.8e89						_done:
.8e89		60		rts		z_postpone:     rts
.8e8a						xt_question_dup:
.8e8a		20 ca d7	jsr $d7ca	                jsr underflow_1
.8e8d						w_question_dup:
.8e8d		b5 00		lda $00,x	                lda 0,x
.8e8f		15 01		ora $01,x	                ora 1,x
.8e91		f0 0a		beq $8e9d	                beq _done
.8e93		ca		dex		                dex
.8e94		ca		dex		                dex
.8e95		b5 02		lda $02,x	                lda 2,x
.8e97		95 00		sta $00,x	                sta 0,x
.8e99		b5 03		lda $03,x	                lda 3,x
.8e9b		95 01		sta $01,x	                sta 1,x
.8e9d						_done:
.8e9d		60		rts		z_question_dup: rts
.8e9e						xt_r_fetch:
.8e9e						w_r_fetch:
.8e9e		68		pla		                pla                     ; LSB
.8e9f		7a		ply		                ply                     ; MSB
.8ea0		1a		inc a		                inc a
.8ea1		85 25		sta $25		                sta tmp1                ; LSB
.8ea3		d0 01		bne $8ea6	                bne +
.8ea5		c8		iny		                iny
.8ea6						+
.8ea6		84 26		sty $26		                sty tmp1+1              ; MSB
.8ea8		ca		dex		                dex
.8ea9		ca		dex		                dex
.8eaa		7a		ply		                ply             ; LSB
.8eab		94 00		sty $00,x	                sty 0,x
.8ead		68		pla		                pla             ; MSB
.8eae		95 01		sta $01,x	                sta 1,x
.8eb0		48		pha		                pha
.8eb1		5a		phy		                phy
.8eb2		6c 25 00	jmp ($0025)	z_r_fetch:      jmp (tmp1)
.8eb5						xt_r_from:
.8eb5						w_r_from:
.8eb5		68		pla		                pla                     ; LSB
.8eb6		7a		ply		                ply                     ; MSB
.8eb7		1a		inc a		                inc a
.8eb8		85 25		sta $25		                sta tmp1                ; LSB
.8eba		d0 01		bne $8ebd	                bne +
.8ebc		c8		iny		                iny
.8ebd						+
.8ebd		84 26		sty $26		                sty tmp1+1              ; MSB
.8ebf		ca		dex		                dex
.8ec0		ca		dex		                dex
.8ec1		68		pla		                pla             ; LSB
.8ec2		95 00		sta $00,x	                sta 0,x
.8ec4		68		pla		                pla             ; MSB
.8ec5		95 01		sta $01,x	                sta 1,x
.8ec7		6c 25 00	jmp ($0025)	z_r_from:       jmp (tmp1)
.8eca						xt_recurse:
.8eca						w_recurse:
.8eca		a0 00		ldy #$00	                ldy #0
.8ecc		a9 20		lda #$20	                lda #OpJSR
.8ece		91 00		sta ($00),y	                sta (cp),y
.8ed0		c8		iny		                iny
.8ed1		24 1c		bit $1c		                bit status
.8ed3		70 0c		bvs $8ee1	                bvs _nt_in_workword
.8ed5		a5 06		lda $06		                lda workword
.8ed7		91 00		sta ($00),y	                sta (cp),y
.8ed9		c8		iny		                iny
.8eda		a5 07		lda $07		                lda workword+1
.8edc		91 00		sta ($00),y	                sta (cp),y
.8ede		c8		iny		                iny
.8edf		80 1b		bra $8efc	                bra _update_cp
.8ee1						_nt_in_workword:
.8ee1		a5 06		lda $06		                lda workword            ; LSB
.8ee3		18		clc		                clc
.8ee4		69 04		adc #$04	                adc #4
.8ee6		85 25		sta $25		                sta tmp1
.8ee8		a5 07		lda $07		                lda workword+1          ; MSB
.8eea		69 00		adc #$00	                adc #0
.8eec		85 26		sta $26		                sta tmp1+1
.8eee		b2 25		lda ($25)	                lda (tmp1)
.8ef0		91 00		sta ($00),y	                sta (cp),y
.8ef2		5a		phy		                phy
.8ef3		a0 01		ldy #$01	                ldy #1
.8ef5		b1 25		lda ($25),y	                lda (tmp1),y
.8ef7		7a		ply		                ply
.8ef8		c8		iny		                iny
.8ef9		91 00		sta ($00),y	                sta (cp),y
.8efb		c8		iny		                iny
.8efc						_update_cp:
.8efc		98		tya		                tya
.8efd		18		clc		                clc
.8efe		65 00		adc $00		                adc cp
.8f00		85 00		sta $00		                sta cp
.8f02		90 02		bcc $8f06	                bcc _done
.8f04		e6 01		inc $01		                inc cp+1
.8f06						_done:
.8f06		60		rts		z_recurse:      rts
.8f07						xt_refill:
.8f07						w_refill:
.8f07		a5 0a		lda $0a		                lda insrc               ; cheat: We only check LSB
.8f09		d0 2d		bne $8f38	                bne _src_not_kbd
.8f0b		ca		dex		                dex
.8f0c		ca		dex		                dex
.8f0d		ca		dex		                dex
.8f0e		ca		dex		                dex
.8f0f		a5 0c		lda $0c		                lda cib                 ; address of CIB is NOS
.8f11		95 02		sta $02,x	                sta 2,x
.8f13		a5 0d		lda $0d		                lda cib+1
.8f15		95 03		sta $03,x	                sta 3,x
.8f17		64 0e		stz $0e		                stz ciblen              ; go in with empty buffer
.8f19		64 0f		stz $0f		                stz ciblen+1
.8f1b		a9 ff		lda #$ff	                lda #bsize              ; max number of chars is TOS
.8f1d		95 00		sta $00,x	                sta 0,x
.8f1f		74 01		stz $01,x	                stz 1,x                 ; cheat: We only accept max 255
.8f21		20 ea 80	jsr $80ea	                jsr w_accept           ; ( addr n1 -- n2)
.8f24		b5 00		lda $00,x	                lda 0,x
.8f26		85 0e		sta $0e		                sta ciblen
.8f28		b5 01		lda $01,x	                lda 1,x
.8f2a		85 0f		sta $0f		                sta ciblen+1            ; though we only accept 255 chars
.8f2c		64 10		stz $10		                stz toin
.8f2e		64 11		stz $11		                stz toin+1
.8f30		a9 ff		lda #$ff	                lda #$FF                ; overwrite with TRUE flag
.8f32		95 00		sta $00,x	                sta 0,x
.8f34		95 01		sta $01,x	                sta 1,x
.8f36		80 10		bra $8f48	                bra _done
.8f38						_src_not_kbd:
.8f38		1a		inc a		                ina
.8f39		d0 08		bne $8f43	                bne _src_not_string
.8f3b		ca		dex		                dex
.8f3c		ca		dex		                dex
.8f3d		74 00		stz $00,x	                stz 0,x
.8f3f		74 01		stz $01,x	                stz 1,x
.8f41		80 05		bra $8f48	                bra z_refill
.8f43						_src_not_string:
.8f43		a9 01		lda #$01	                lda #err_badsource
.8f45		4c e0 d7	jmp $d7e0	                jmp error
.8f48						_done:
.8f48		60		rts		z_refill:       rts
.8f49						xt_repeat:
.8f49		20 cf d7	jsr $d7cf	                jsr underflow_2
.8f4c						w_repeat:
.8f4c		20 25 82	jsr $8225	                jsr w_again
.8f4f		4c 82 86	jmp $8682	                jmp w_then
.8f52						z_repeat:
.8f52						xt_right_bracket:
.8f52						w_right_bracket:
.8f52		a9 ff		lda #$ff	                lda #$FF
.8f54		85 1a		sta $1a		                sta state
.8f56		85 1b		sta $1b		                sta state+1
.8f58						z_right_bracket:
.8f58		60		rts		                rts
.8f59						xt_rot:
.8f59		20 d4 d7	jsr $d7d4	                jsr underflow_3
.8f5c						w_rot:
.8f5c		b4 05		ldy $05,x	                ldy 5,x         ; MSB first
.8f5e		b5 03		lda $03,x	                lda 3,x
.8f60		95 05		sta $05,x	                sta 5,x
.8f62		b5 01		lda $01,x	                lda 1,x
.8f64		95 03		sta $03,x	                sta 3,x
.8f66		94 01		sty $01,x	                sty 1,x
.8f68		b4 04		ldy $04,x	                ldy 4,x         ; LSB next
.8f6a		b5 02		lda $02,x	                lda 2,x
.8f6c		95 04		sta $04,x	                sta 4,x
.8f6e		b5 00		lda $00,x	                lda 0,x
.8f70		95 02		sta $02,x	                sta 2,x
.8f72		94 00		sty $00,x	                sty 0,x
.8f74		60		rts		z_rot:          rts
.8f75						xt_rshift:
.8f75		20 cf d7	jsr $d7cf	                jsr underflow_2
.8f78						w_rshift:
.8f78		b5 00		lda $00,x	                lda 0,x
.8f7a		29 0f		and #$0f	                and #%00001111
.8f7c		f0 08		beq $8f86	                beq _done               ; if 0 shifts, quit
.8f7e		a8		tay		                tay
.8f7f						_loop:
.8f7f		56 03		lsr $03,x	                lsr 3,x
.8f81		76 02		ror $02,x	                ror 2,x
.8f83		88		dey		                dey
.8f84		d0 f9		bne $8f7f	                bne _loop
.8f86						_done:
.8f86		e8		inx		                inx
.8f87		e8		inx		                inx
.8f88		60		rts		z_rshift:       rts
.8f89						xt_s_backslash_quote:
.8f89						w_s_backslash_quote:
.8f89		a9 ff		lda #$ff	                lda #$FF
.8f8b		85 27		sta $27		                sta tmp2
.8f8d		64 28		stz $28		                stz tmp2+1
.8f8f		20 a6 8f	jsr $8fa6	                jsr s_quote_start
.8f92						z_s_backslash_quote:
.8f92		60		rts		                rts
.8f93						convert_hex_value:
.8f93		c9 41		cmp #$41	        cmp #'A'
.8f95		90 07		bcc $8f9e	        bcc _digit
.8f97		29 df		and #$df	        and #$DF                ; Make it uppercase.
.8f99		38		sec		        sec
.8f9a		e9 37		sbc #$37	        sbc #'7'                ; gives value 10 for 'A'
.8f9c		80 03		bra $8fa1	        bra _done
.8f9e						_digit:
.8f9e		38		sec		        sec
.8f9f		e9 30		sbc #$30	        sbc #'0'
.8fa1						_done:
.8fa1		60		rts		        rts
.8fa2						xt_s_quote:
.8fa2						w_s_quote:
.8fa2		64 27		stz $27		                stz tmp2
.8fa4		64 28		stz $28		                stz tmp2+1
.8fa6						s_quote_start:
.8fa6		a5 1a		lda $1a		                lda state               ; check whether we're interpeting (0) or compiling (-1)
.8fa8		05 1b		ora $1b		                ora state+1             ; paranoid
.8faa		48		pha		                pha                     ; save zero / nonzero for post-processing
.8fab		f0 0b		beq $8fb8	                beq _interpeting        ; just write string directly
.8fad		18		clc		                clc
.8fae		a5 00		lda $00		                lda cp
.8fb0		69 05		adc #$05	                adc #5                  ; reserve five bytes for the prologue (see below)
.8fb2		85 00		sta $00		                sta cp
.8fb4		90 02		bcc $8fb8	                bcc +
.8fb6		e6 01		inc $01		                inc cp+1
.8fb8						+
.8fb8						_interpeting:
.8fb8		20 e7 88	jsr $88e7	                jsr w_here              ; ( addr )
.8fbb						_savechars_loop:
.8fbb		a5 11		lda $11		                lda toin+1              ; MSB
.8fbd		c5 0f		cmp $0f		                cmp ciblen+1
.8fbf		90 2a		bcc $8feb	                bcc _input_fine         ; unsigned comparison
.8fc1		a5 10		lda $10		                lda toin                ; LSB
.8fc3		c5 0e		cmp $0e		                cmp ciblen
.8fc5		90 24		bcc $8feb	                bcc _input_fine
.8fc7		a5 27		lda $27		                lda tmp2
.8fc9		48		pha		                pha
.8fca		a5 28		lda $28		                lda tmp2+1
.8fcc		48		pha		                pha
.8fcd		a5 29		lda $29		                lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
.8fcf		48		pha		                pha
.8fd0		20 07 8f	jsr $8f07	                jsr w_refill           ; ( -- f )
.8fd3		68		pla		                pla
.8fd4		85 29		sta $29		                sta tmp3
.8fd6		68		pla		                pla
.8fd7		85 28		sta $28		                sta tmp2+1
.8fd9		68		pla		                pla
.8fda		85 27		sta $27		                sta tmp2
.8fdc		b5 00		lda $00,x	                lda 0,x
.8fde		15 01		ora $01,x	                ora 1,x
.8fe0		d0 05		bne $8fe7	                bne _refill_ok
.8fe2		a9 06		lda #$06	                lda #err_refill
.8fe4		4c e0 d7	jmp $d7e0	                jmp error
.8fe7						_refill_ok:
.8fe7		e8		inx		                inx
.8fe8		e8		inx		                inx
.8fe9		80 d0		bra $8fbb	                bra _savechars_loop
.8feb						_input_fine:
.8feb		a5 0c		lda $0c		                lda cib
.8fed		18		clc		                clc
.8fee		65 10		adc $10		                adc toin        ; LSB
.8ff0		85 25		sta $25		                sta tmp1
.8ff2		a5 0d		lda $0d		                lda cib+1
.8ff4		65 11		adc $11		                adc toin+1      ; MSB
.8ff6		85 26		sta $26		                sta tmp1+1
.8ff8		b2 25		lda ($25)	                lda (tmp1)
.8ffa		24 27		bit $27		                bit tmp2
.8ffc		30 03		bmi $9001	                bmi _handle_escapes    ; Only checking bit 7
.8ffe		4c 69 90	jmp $9069	                jmp _regular_char
.9001						_handle_escapes:
.9001		24 28		bit $28		                bit tmp2+1
.9003		30 03		bmi $9008	                bmi _escaped
.9005		4c 5f 90	jmp $905f	                jmp _not_escaped
.9008						_escaped:
.9008		70 21		bvs $902b	                bvs _check_esc_chars
.900a		a9 01		lda #$01	                lda #1
.900c		24 28		bit $28		                bit tmp2+1
.900e		d0 10		bne $9020	                bne _esc_x_second_digit
.9010		e6 28		inc $28		                inc tmp2+1  ; Adjust flag for second digit next time.
.9012		b2 25		lda ($25)	                lda (tmp1)  ; Get the char again.
.9014		20 93 8f	jsr $8f93	                jsr convert_hex_value
.9017		0a		asl a		                asl
.9018		0a		asl a		                asl
.9019		0a		asl a		                asl
.901a		0a		asl a		                asl
.901b		85 29		sta $29		                sta tmp3    ; Save it for later.
.901d		4c 70 90	jmp $9070	                jmp _next_character
.9020						_esc_x_second_digit:
.9020		64 28		stz $28		                stz tmp2+1
.9022		b2 25		lda ($25)	                lda (tmp1)
.9024		20 93 8f	jsr $8f93	                jsr convert_hex_value
.9027		05 29		ora $29		                ora tmp3
.9029		80 42		bra $906d	                bra _save_character
.902b						_check_esc_chars:
.902b		64 28		stz $28		                stz tmp2+1
.902d		c9 61		cmp #$61	                cmp #'a'
.902f		30 1a		bmi $904b	                bmi _check_esc_quote
.9031		c9 7b		cmp #$7b	                cmp #'z'+1
.9033		10 16		bpl $904b	                bpl _check_esc_quote
.9035		a8		tay		                tay
.9036		b9 3b 90	lda $903b,y	                lda escape_tr_table - 'a',y   ; fake base address to index with a-z directly
.9039		d0 03		bne $903e	                bne _esc_replace
.903b		98		tya		                tya                     ; revert if no translation
.903c		80 0d		bra $904b	                bra _check_esc_quote
.903e		10 2d		bpl $906d	_esc_replace:   bpl _save_character     ; simple replacement
.9040		29 7f		and #$7f	                and #$7F                ; clear hi bit
.9042		f0 29		beq $906d	                beq _save_character     ; NUL we can just output
.9044		20 bc 97	jsr $97bc	                jsr cmpl_a              ; else output first char (CR)
.9047		a9 0a		lda #$0a	                lda #10                 ; followed by LF
.9049		80 22		bra $906d	                bra _save_character
.904b						_check_esc_quote:
.904b		c9 22		cmp #$22	                cmp #'"'
.904d		f0 1e		beq $906d	                beq _save_character
.904f		c9 78		cmp #$78	                cmp #'x'
.9051		d0 06		bne $9059	                bne _check_esc_backslash
.9053		a9 be		lda #$be	                lda #%10111110        ; Clear bits 6 and 0
.9055		85 28		sta $28		                sta tmp2+1
.9057		80 17		bra $9070	                bra _next_character
.9059						_check_esc_backslash:
.9059		c9 5c		cmp #$5c	                cmp #'\'
.905b		d0 0c		bne $9069	                bne _regular_char
.905d		80 0e		bra $906d	                bra _save_character
.905f						_not_escaped:
.905f		c9 5c		cmp #$5c	                cmp #'\'
.9061		d0 06		bne $9069	                bne _regular_char
.9063		a9 ff		lda #$ff	                lda #$FF
.9065		85 28		sta $28		                sta tmp2+1
.9067		80 07		bra $9070	                bra _next_character
.9069						_regular_char:
.9069		c9 22		cmp #$22	                cmp #'"'
.906b		f0 0c		beq $9079	                beq _found_string_end
.906d						_save_character:
.906d		20 bc 97	jsr $97bc	                jsr cmpl_a
.9070						_next_character:
.9070		e6 10		inc $10		                inc toin
.9072		d0 02		bne $9076	                bne _savechars_loop_longjump
.9074		e6 11		inc $11		                inc toin+1
.9076						_savechars_loop_longjump:
.9076		4c bb 8f	jmp $8fbb	                jmp _savechars_loop
.9079						_found_string_end:
.9079		e6 10		inc $10		                inc toin
.907b		d0 02		bne $907f	                bne +
.907d		e6 11		inc $11		                inc toin+1
.907f						+
.907f		20 e7 88	jsr $88e7	                jsr w_here
.9082		20 db 8c	jsr $8cdb	                jsr w_over
.9085		20 bb 8b	jsr $8bbb	                jsr w_minus    ; HERE - addr gives string length
.9088		68		pla		                pla                     ; fetch the state flag (0 = interpret)
.9089		f0 10		beq $909b	                beq _done
.908b		38		sec		                sec                     ; rewind the CP to addr-5
.908c		b5 02		lda $02,x	                lda 2,x
.908e		e9 05		sbc #$05	                sbc #5
.9090		85 00		sta $00		                sta cp
.9092		b5 03		lda $03,x	                lda 3,x
.9094		e9 00		sbc #$00	                sbc #0
.9096		85 01		sta $01		                sta cp+1
.9098		20 3a a2	jsr $a23a	                jsr w_sliteral         ; ( addr u -- )
.909b						_done:
.909b		60		rts		z_s_quote:      rts
.909c						escape_tr_table:
>909c		07				    .byte   7               ; a -> BEL (ASCII value 7)
>909d		08				    .byte   8               ; b -> Backspace (ASCII value 8)
>909e		00 00				    .byte   0,0             ; c, d no escape
>90a0		1b				    .byte   27              ; e -> ESC (ASCII value 27)
>90a1		0c				    .byte   12              ; f -> FF (ASCII value 12)
>90a2		00 00 00 00 00			    .byte   0,0,0,0,0       ; g,h,i,j,k
>90a7		0a				    .byte   10              ; l -> LF (ASCII value 10)
>90a8		8d				    .byte   13+128          ; m -> CR/LF pair (ASCII values 13, 10)
>90a9		0a				    .byte   10              ; n behaves like l --> lf
>90aa		00 00				    .byte   0,0             ; o,p
>90ac		22				    .byte   34              ; q -> Double quote (ASCII value 34)
>90ad		0d				    .byte   13              ; r ->  CR (ASCII value 13)
>90ae		00				    .byte   0               ; s
>90af		09				    .byte   9               ; t -> Horizontal TAB (ASCII value 9)
>90b0		00				    .byte   0               ; u
>90b1		0b				    .byte   11              ; v -> Vertical TAB (ASCII value 11)
>90b2		00 00 00			    .byte   0,0,0           ; w,x,y   (x is a special case later)
>90b5		80				    .byte   0+128           ; z -> NULL (ASCII value 0)
.90b6						xt_s_to_d:
.90b6		20 ca d7	jsr $d7ca	                jsr underflow_1
.90b9						w_s_to_d:
.90b9		ca		dex		                dex
.90ba		ca		dex		                dex
.90bb		74 00		stz $00,x	                stz 0,x
.90bd		74 01		stz $01,x	                stz 1,x
.90bf		b5 03		lda $03,x	                lda 3,x
.90c1		10 04		bpl $90c7	                bpl _done
.90c3		d6 00		dec $00,x	                dec 0,x
.90c5		d6 01		dec $01,x	                dec 1,x
.90c7						_done:
.90c7		60		rts		z_s_to_d:       rts
.90c8						xt_semicolon:
.90c8						w_semicolon:
.90c8		24 1c		bit $1c		                bit status              ; check bit 6 (overflow flag)
.90ca		70 11		bvs $90dd	                bvs _colonword
.90cc		a9 60		lda #$60	                lda #OpRTS
.90ce		20 bc 97	jsr $97bc	                jsr cmpl_a
.90d1		ca		dex		                dex
.90d2		ca		dex		                dex
.90d3		a5 06		lda $06		                lda workword
.90d5		95 00		sta $00,x	                sta 0,x
.90d7		a5 07		lda $07		                lda workword+1
.90d9		95 01		sta $01,x	                sta 1,x
.90db		80 53		bra $9130	                bra _semicolon_done
.90dd						_colonword:
.90dd		a9 10		lda #$10	                lda #%00010000
.90df		25 1c		and $1c		                and status
.90e1		f0 08		beq $90eb	                beq +
.90e3		a0 01		ldy #$01	                ldy #1
.90e5		b1 06		lda ($06),y	                lda (workword),y
.90e7		29 f7		and #$f7	                and #255-NN
.90e9		91 06		sta ($06),y	                sta (workword),y
.90eb						+
.90eb		a0 06		ldy #$06	                ldy #6
.90ed		a5 00		lda $00		                lda cp
.90ef		91 06		sta ($06),y	                sta (workword),y
.90f1		c8		iny		                iny
.90f2		a5 01		lda $01		                lda cp+1
.90f4		91 06		sta ($06),y	                sta (workword),y
.90f6		a9 60		lda #$60	                lda #OpRTS
.90f8		20 bc 97	jsr $97bc	                jsr cmpl_a
.90fb		24 1c		bit $1c		                bit status
.90fd		10 26		bpl $9125	                bpl _new_word   ; Bit 7 is clear = new word
.90ff		ca		dex		                dex
.9100		ca		dex		                dex
.9101		ca		dex		                dex
.9102		ca		dex		                dex
.9103		b2 06		lda ($06)	                lda (workword)
.9105		95 00		sta $00,x	                sta 0,x
.9107		74 01		stz $01,x	                stz 1,x
.9109		a5 06		lda $06		                lda workword
.910b		18		clc		                clc
.910c		69 08		adc #$08	                adc #8
.910e		95 02		sta $02,x	                sta 2,x
.9110		a5 07		lda $07		                lda workword+1
.9112		69 00		adc #$00	                adc #0                  ; only want carry
.9114		95 03		sta $03,x	                sta 3,x
.9116		a9 02		lda #$02	                lda #str_redefined       ; address of string "redefined"
.9118		20 06 d8	jsr $d806	                jsr print_string_no_lf
.911b		20 b4 94	jsr $94b4	                jsr w_type
.911e		20 b5 91	jsr $91b5	                jsr w_space
.9121		a9 80		lda #$80	                lda #%10000000
.9123		14 1c		trb $1c		                trb status
.9125						_new_word:
.9125		a5 06		lda $06		                lda workword
.9127		85 02		sta $02		                sta dp
.9129		a5 07		lda $07		                lda workword+1
.912b		85 03		sta $03		                sta dp+1
.912d		20 36 d7	jsr $d736	                jsr dp_to_current       ; Save the updated DP to the
.9130						_semicolon_done:
.9130		64 1a		stz $1a		                stz state
.9132		64 1b		stz $1b		                stz state+1
.9134		60		rts		z_semicolon:    rts
.9135						xt_sign:
.9135		20 ca d7	jsr $d7ca	                jsr underflow_1
.9138						w_sign:
.9138		b5 01		lda $01,x	                lda 1,x         ; check MSB of TOS
.913a		30 04		bmi $9140	                bmi _minus
.913c		e8		inx		                inx
.913d		e8		inx		                inx
.913e		80 09		bra $9149	                bra _done
.9140						_minus:
.9140		a9 2d		lda #$2d	                lda #'-'
.9142		95 00		sta $00,x	                sta 0,x         ; overwrite TOS
.9144		74 01		stz $01,x	                stz 1,x         ; paranoid
.9146		20 fc 88	jsr $88fc	                jsr w_hold
.9149						_done:
.9149		60		rts		z_sign:         rts
.914a						xt_slash:
.914a		20 cf d7	jsr $d7cf	                jsr underflow_2
.914d						w_slash:
.914d		a9 00		lda #$00	                lda #0
.914f		80 05		bra $9156	                bra slashmod_common
.9151						xt_slash_mod:
.9151		20 cf d7	jsr $d7cf	                jsr underflow_2
.9154						w_slash_mod:
.9154		a9 ff		lda #$ff	                lda #$FF                ; falls through to _common
.9156						slashmod_common:
.9156		48		pha		                pha
.9157		20 59 93	jsr $9359	                jsr w_to_r             ; >R
.915a		20 b9 90	jsr $90b9	                jsr w_s_to_d           ; S>D
.915d		20 b5 8e	jsr $8eb5	                jsr w_r_from           ; R>
.9160		20 6f 91	jsr $916f	                jsr w_sm_slash_rem     ; SM/REM
.9163		68		pla		                pla
.9164		d0 05		bne $916b	                bne _done
.9166		20 1e 92	jsr $921e	                jsr w_swap
.9169		e8		inx		                inx             ; DROP
.916a		e8		inx		                inx
.916b						_done:
.916b						z_slash_mod:
.916b		60		rts		z_slash:        rts
.916c						xt_sm_slash_rem:
.916c		20 d4 d7	jsr $d7d4	                jsr underflow_3 ; contains double number
.916f						w_sm_slash_rem:
.916f		b5 03		lda $03,x	                lda 3,x
.9171		48		pha		                pha
.9172		b5 01		lda $01,x	                lda 1,x
.9174		55 03		eor $03,x	                eor 3,x
.9176		48		pha		                pha
.9177		20 d5 80	jsr $80d5	                jsr w_abs
.917a		e8		inx		                inx             ; pretend we pushed n1 to R
.917b		e8		inx		                inx
.917c		20 c3 9e	jsr $9ec3	                jsr w_dabs
.917f		ca		dex		                dex
.9180		ca		dex		                dex
.9181		20 39 95	jsr $9539	                jsr w_um_slash_mod     ; UM/MOD
.9184		68		pla		                pla
.9185		10 03		bpl $918a	                bpl +
.9187		20 f9 8b	jsr $8bf9	                jsr w_negate
.918a						+
.918a		68		pla		                pla
.918b		10 07		bpl $9194	                bpl _done
.918d		e8		inx		                inx             ; pretend we pushed quotient to R
.918e		e8		inx		                inx
.918f		20 f9 8b	jsr $8bf9	                jsr w_negate
.9192		ca		dex		                dex
.9193		ca		dex		                dex
.9194						_done:
.9194		60		rts		z_sm_slash_rem: rts
.9195						xt_source:
.9195						w_source:
.9195		ca		dex		                dex
.9196		ca		dex		                dex
.9197		a5 0c		lda $0c		                lda cib
.9199		95 00		sta $00,x	                sta 0,x
.919b		a5 0d		lda $0d		                lda cib+1
.919d		95 01		sta $01,x	                sta 1,x
.919f		ca		dex		                dex
.91a0		ca		dex		                dex
.91a1		a5 0e		lda $0e		                lda ciblen
.91a3		95 00		sta $00,x	                sta 0,x
.91a5		a5 0f		lda $0f		                lda ciblen+1
.91a7		95 01		sta $01,x	                sta 1,x
.91a9		60		rts		z_source:       rts
.91aa						xt_source_id:
.91aa						w_source_id:
.91aa		ca		dex		                dex
.91ab		ca		dex		                dex
.91ac		a5 0a		lda $0a		                lda insrc
.91ae		95 00		sta $00,x	                sta 0,x
.91b0		a5 0b		lda $0b		                lda insrc+1
.91b2		95 01		sta $01,x	                sta 1,x
.91b4		60		rts		z_source_id:    rts
.91b5						xt_space:
.91b5						w_space:
.91b5		a9 20		lda #$20	                lda #AscSP
.91b7		20 93 86	jsr $8693	                jsr emit_a
.91ba		60		rts		z_space:        rts
.91bb						xt_spaces:
.91bb		20 ca d7	jsr $d7ca	                jsr underflow_1
.91be						w_spaces:
.91be		b5 01		lda $01,x	                lda 1,x         ; ANS says this word takes a signed value
.91c0		30 10		bmi $91d2	                bmi _done       ; but prints no spaces for negative values.
.91c2		b4 00		ldy $00,x	                ldy 0,x
.91c4		f0 08		beq $91ce	                beq _msb
.91c6						_loop:
.91c6		a9 20		lda #$20	                lda #AscSP
.91c8		20 93 86	jsr $8693	                jsr emit_a      ; user routine preserves X and Y
.91cb		88		dey		                dey
.91cc		d0 f8		bne $91c6	                bne _loop       ; Y is zero on exit so looping again emits 256 more spaces
.91ce						_msb:
.91ce		d6 01		dec $01,x	                dec 1,x         ; when decrementing MSB goes negative, it was zero so we're done
.91d0		10 f4		bpl $91c6	                bpl _loop       ; otherwise emit another 256 spaces
.91d2		e8		inx		_done:          inx
.91d3		e8		inx		                inx
.91d4		60		rts		z_spaces:       rts
.91d5						xt_star:
.91d5		20 cf d7	jsr $d7cf	                jsr underflow_2
.91d8						w_star:
.91d8		20 7b 95	jsr $957b	                jsr w_um_star
.91db		e8		inx		                inx
.91dc		e8		inx		                inx
.91dd		60		rts		z_star:         rts
.91de						xt_star_slash:
.91de		20 d4 d7	jsr $d7d4	                jsr underflow_3
.91e1						w_star_slash:
.91e1		20 ed 91	jsr $91ed	                jsr w_star_slash_mod
.91e4		20 1e 92	jsr $921e	                jsr w_swap
.91e7		e8		inx		                inx
.91e8		e8		inx		                inx
.91e9						z_star_slash:
.91e9		60		rts		                rts
.91ea						xt_star_slash_mod:
.91ea		20 d4 d7	jsr $d7d4	                jsr underflow_3
.91ed						w_star_slash_mod:
.91ed		20 59 93	jsr $9359	                jsr w_to_r
.91f0		20 02 8b	jsr $8b02	                jsr w_m_star
.91f3		20 b5 8e	jsr $8eb5	                jsr w_r_from
.91f6		20 6f 91	jsr $916f	                jsr w_sm_slash_rem
.91f9						z_star_slash_mod:
.91f9		60		rts		                rts
.91fa						xt_state:
.91fa						w_state:
.91fa		ca		dex		                dex
.91fb		ca		dex		                dex
.91fc		a9 1a		lda #$1a	                lda #<state
.91fe		95 00		sta $00,x	                sta 0,x
.9200		a9 00		lda #$00	                lda #>state
.9202		95 01		sta $01,x	                sta 1,x
.9204		60		rts		z_state:        rts
.9205						xt_store:
.9205		20 cf d7	jsr $d7cf	                jsr underflow_2
.9208						w_store:
.9208		b5 02		lda $02,x	                lda 2,x         ; LSB
.920a		81 00		sta ($00,x)	                sta (0,x)
.920c		f6 00		inc $00,x	                inc 0,x
.920e		d0 02		bne $9212	                bne +
.9210		f6 01		inc $01,x	                inc 1,x
.9212						+
.9212		b5 03		lda $03,x	                lda 3,x         ; MSB
.9214		81 00		sta ($00,x)	                sta (0,x)
.9216		e8		inx		                inx             ; 2DROP
.9217		e8		inx		                inx
.9218		e8		inx		                inx
.9219		e8		inx		                inx
.921a		60		rts		z_store:        rts
.921b						xt_swap:
.921b		20 cf d7	jsr $d7cf	                jsr underflow_2
.921e						w_swap:
.921e		b5 00		lda $00,x	                lda 0,x         ; LSB
.9220		b4 02		ldy $02,x	                ldy 2,x
.9222		95 02		sta $02,x	                sta 2,x
.9224		94 00		sty $00,x	                sty 0,x
.9226		b5 01		lda $01,x	                lda 1,x         ; MSB
.9228		b4 03		ldy $03,x	                ldy 3,x
.922a		95 03		sta $03,x	                sta 3,x
.922c		94 01		sty $01,x	                sty 1,x
.922e		60		rts		z_swap:         rts
.922f						xt_tick:
.922f						w_tick:
.922f		20 24 8d	jsr $8d24	                jsr w_parse_name       ; ( -- addr u )
.9232		b5 00		lda $00,x	                lda 0,x
.9234		15 01		ora $01,x	                ora 1,x
.9236		d0 05		bne $923d	                bne +
.9238		a9 05		lda #$05	                lda #err_noname
.923a		4c e0 d7	jmp $d7e0	                jmp error
.923d						+
.923d		20 5d 9b	jsr $9b5d	                jsr w_find_name        ; ( addr u -- nt )
.9240		b5 00		lda $00,x	                lda 0,x
.9242		15 01		ora $01,x	                ora 1,x
.9244		d0 05		bne $924b	                bne +
.9246		a9 08		lda #$08	                lda #err_syntax
.9248		4c e0 d7	jmp $d7e0	                jmp error
.924b						+
.924b		20 b1 9c	jsr $9cb1	                jsr w_name_to_int      ; ( nt -- xt )
.924e		60		rts		z_tick:         rts
.924f						xt_to:
.924f						w_to:
.924f		20 2f 92	jsr $922f	                jsr w_tick             ; ( [n] xt )
.9252		b5 00		lda $00,x	                lda 0,x                 ; LSB
.9254		18		clc		                clc
.9255		69 03		adc #$03	                adc #3
.9257		85 25		sta $25		                sta tmp1
.9259		b5 01		lda $01,x	                lda 1,x                 ; MSB
.925b		69 00		adc #$00	                adc #0                  ; we just want the carry
.925d		85 26		sta $26		                sta tmp1+1
.925f		a5 1a		lda $1a		                lda state
.9261		05 1b		ora $1b		                ora state+1
.9263		f0 14		beq $9279	                beq _interpret
.9265		a5 25		lda $25		                lda tmp1            ; replace TOS with tmp1
.9267		95 00		sta $00,x	                sta 0,x
.9269		a5 26		lda $26		                lda tmp1+1
.926b		95 01		sta $01,x	                sta 1,x
.926d		20 d3 89	jsr $89d3	                jsr w_literal      ; generate the runtime for LITERAL tmp1
.9270		a0 92		ldy #$92	                ldy #>w_store      ; write the runtime for !
.9272		a9 08		lda #$08	                lda #<w_store
.9274		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.9277		80 11		bra $928a	                bra _done
.9279						_interpret:
.9279		20 cf d7	jsr $d7cf	                jsr underflow_2
.927c		e8		inx		                inx
.927d		e8		inx		                inx                     ; leaving just ( n )
.927e		b5 00		lda $00,x	                lda 0,x
.9280		92 25		sta ($25)	                sta (tmp1)              ; LSB
.9282		a0 01		ldy #$01	                ldy #1
.9284		b5 01		lda $01,x	                lda 1,x                 ; MSB
.9286		91 25		sta ($25),y	                sta (tmp1),y            ; fall through to common
.9288		e8		inx		                inx                     ; DROP
.9289		e8		inx		                inx
.928a						_done:
.928a		60		rts		z_to:           rts
.928b						xt_to_body:
.928b		20 ca d7	jsr $d7ca	                jsr underflow_1
.928e						w_to_body:
.928e		20 69 86	jsr $8669	                jsr w_dup              ; ( xt xt )
.9291		20 2b 9c	jsr $9c2b	                jsr w_int_to_name      ; ( xt nt )
.9294		f6 00		inc $00,x	                inc 0,x
.9296		d0 02		bne $929a	                bne +
.9298		f6 01		inc $01,x	                inc 1,x
.929a						+
.929a		a1 00		lda ($00,x)	                lda (0,x)               ; get status byte
.929c		29 10		and #$10	                and #HC
.929e		f0 0b		beq $92ab	                beq _no_cfa
.92a0		18		clc		                clc
.92a1		b5 02		lda $02,x	                lda 2,x         ; LSB
.92a3		69 03		adc #$03	                adc #3
.92a5		95 02		sta $02,x	                sta 2,x
.92a7		90 02		bcc $92ab	                bcc _no_cfa
.92a9		f6 03		inc $03,x	                inc 3,x         ; MSB
.92ab						_no_cfa:
.92ab		e8		inx		                inx             ; get rid of the nt
.92ac		e8		inx		                inx
.92ad		60		rts		z_to_body:      rts
.92ae						xt_to_in:
.92ae						w_to_in:
.92ae		ca		dex		                dex
.92af		ca		dex		                dex
.92b0		a9 10		lda #$10	                lda #<toin
.92b2		95 00		sta $00,x	                sta 0,x
.92b4		a9 00		lda #$00	                lda #>toin      ; paranoid, should be zero
.92b6		95 01		sta $01,x	                sta 1,x
.92b8		60		rts		z_to_in:        rts
.92b9						xt_to_number:
.92b9		20 d9 d7	jsr $d7d9	                jsr underflow_4
.92bc						w_to_number:
.92bc		b5 06		lda $06,x	                lda 6,x         ; ud-lo LSB
.92be		85 2d		sta $2d		                sta scratch
.92c0		b5 07		lda $07,x	                lda 7,x         ; ud-lo MSB
.92c2		85 2e		sta $2e		                sta scratch+1
.92c4		b5 04		lda $04,x	                lda 4,x         ; ud-hi LSB
.92c6		85 2f		sta $2f		                sta scratch+2
.92c8		b5 05		lda $05,x	                lda 5,x         ; ud-hi MSB
.92ca		85 30		sta $30		                sta scratch+3
.92cc		ca		dex		                dex
.92cd		ca		dex		                dex
.92ce						_loop:
.92ce		a1 04		lda ($04,x)	                lda (4,x)
.92d0		95 00		sta $00,x	                sta 0,x                 ; ( ud-lo ud-hi addr u char )
.92d2		74 01		stz $01,x	                stz 1,x                 ; paranoid
.92d4		20 01 9b	jsr $9b01	                jsr w_digit_question   ; ( char -- n -1 | char 0 )
.92d7		b5 00		lda $00,x	                lda 0,x
.92d9		d0 04		bne $92df	                bne _digit_ok
.92db		e8		inx		                inx
.92dc		e8		inx		                inx
.92dd		80 67		bra $9346	                bra _done       ; ( ud-lo ud-hi addr u char )
.92df						_digit_ok:
.92df		b5 02		lda $02,x	                lda 2,x
.92e1		85 31		sta $31		                sta scratch+4
.92e3		b5 03		lda $03,x	                lda 3,x
.92e5		85 32		sta $32		                sta scratch+5
.92e7		a5 2f		lda $2f		                lda scratch+2
.92e9		95 02		sta $02,x	                sta 2,x         ; NOS
.92eb		a5 30		lda $30		                lda scratch+3
.92ed		95 03		sta $03,x	                sta 3,x
.92ef		a5 18		lda $18		                lda base
.92f1		95 00		sta $00,x	                sta 0,x         ; TOS
.92f3		74 01		stz $01,x	                stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
.92f5		20 7b 95	jsr $957b	                jsr w_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
.92f8		b5 02		lda $02,x	                lda 2,x         ; ud-hi-lo
.92fa		85 33		sta $33		                sta scratch+6
.92fc		b5 03		lda $03,x	                lda 3,x
.92fe		85 34		sta $34		                sta scratch+7
.9300		a5 2d		lda $2d		                lda scratch
.9302		95 02		sta $02,x	                sta 2,x
.9304		a5 2e		lda $2e		                lda scratch+1
.9306		95 03		sta $03,x	                sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
.9308		a5 18		lda $18		                lda base
.930a		95 00		sta $00,x	                sta 0,x
.930c		74 01		stz $01,x	                stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
.930e		20 7b 95	jsr $957b	                jsr w_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
.9311		b5 00		lda $00,x	                lda 0,x
.9313		85 2f		sta $2f		                sta scratch+2
.9315		b5 01		lda $01,x	                lda 1,x
.9317		85 30		sta $30		                sta scratch+3
.9319		b5 02		lda $02,x	                lda 2,x
.931b		85 2d		sta $2d		                sta scratch
.931d		b5 03		lda $03,x	                lda 3,x
.931f		85 2e		sta $2e		                sta scratch+1
.9321		18		clc		                clc
.9322		a5 2d		lda $2d		                lda scratch     ; ud-lo LSB
.9324		65 31		adc $31		                adc scratch+4   ; n LSB
.9326		85 2d		sta $2d		                sta scratch     ; this is the new ud-lo
.9328		a5 2e		lda $2e		                lda scratch+1   ; ud-lo MSB
.932a		65 32		adc $32		                adc scratch+5   ; n MSB
.932c		85 2e		sta $2e		                sta scratch+1
.932e		a5 2f		lda $2f		                lda scratch+2   ; LSB
.9330		65 33		adc $33		                adc scratch+6
.9332		85 2f		sta $2f		                sta scratch+2   ; this is the new ud-hi
.9334		a5 30		lda $30		                lda scratch+3   ; MSB
.9336		65 34		adc $34		                adc scratch+7
.9338		85 30		sta $30		                sta scratch+3
.933a		e8		inx		                inx
.933b		e8		inx		                inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
.933c		f6 04		inc $04,x	                inc 4,x
.933e		d0 02		bne $9342	                bne +
.9340		f6 05		inc $05,x	                inc 5,x
.9342						+
.9342		d6 02		dec $02,x	                dec 2,x
.9344		d0 88		bne $92ce	                bne _loop
.9346						_done:
.9346		e8		inx		                inx
.9347		e8		inx		                inx             ; ( ud-lo ud-hi addr u )
.9348		a5 2d		lda $2d		                lda scratch     ; new ud-lo
.934a		95 06		sta $06,x	                sta 6,x
.934c		a5 2e		lda $2e		                lda scratch+1
.934e		95 07		sta $07,x	                sta 7,x
.9350		a5 2f		lda $2f		                lda scratch+2
.9352		95 04		sta $04,x	                sta 4,x
.9354		a5 30		lda $30		                lda scratch+3
.9356		95 05		sta $05,x	                sta 5,x
.9358		60		rts		z_to_number:    rts
.9359						xt_to_r:
.9359						w_to_r:
.9359		68		pla		                pla                     ; LSB
.935a		7a		ply		                ply                     ; MSB
.935b		1a		inc a		                inc a
.935c		85 25		sta $25		                sta tmp1                ; LSB
.935e		d0 01		bne $9361	                bne +
.9360		c8		iny		                iny
.9361						+
.9361		84 26		sty $26		                sty tmp1+1              ; MSB
.9363		20 ca d7	jsr $d7ca	                jsr underflow_1
.9366		b5 01		lda $01,x	                lda 1,x         ; MSB
.9368		48		pha		                pha
.9369		b5 00		lda $00,x	                lda 0,x         ; LSB
.936b		48		pha		                pha
.936c		e8		inx		                inx
.936d		e8		inx		                inx
.936e		6c 25 00	jmp ($0025)	z_to_r:         jmp (tmp1)
.9371						xt_true:
.9371						w_true:
.9371		ca		dex		                dex
.9372		ca		dex		                dex
.9373		a9 ff		lda #$ff	                lda #$FF
.9375		95 00		sta $00,x	                sta 0,x
.9377		95 01		sta $01,x	                sta 1,x
.9379		60		rts		z_true:         rts
.937a						xt_tuck:
.937a		20 cf d7	jsr $d7cf	                jsr underflow_2
.937d						w_tuck:
.937d		ca		dex		                dex
.937e		ca		dex		                dex
.937f		b4 04		ldy $04,x	                ldy 4,x         ; LSB
.9381		b5 02		lda $02,x	                lda 2,x
.9383		95 04		sta $04,x	                sta 4,x
.9385		94 02		sty $02,x	                sty 2,x
.9387		95 00		sta $00,x	                sta 0,x
.9389		b4 05		ldy $05,x	                ldy 5,x         ; MSB
.938b		b5 03		lda $03,x	                lda 3,x
.938d		95 05		sta $05,x	                sta 5,x
.938f		94 03		sty $03,x	                sty 3,x         ; bba
.9391		95 01		sta $01,x	                sta 1,x         ; baa
.9393		60		rts		z_tuck:         rts
.9394						xt_two_drop:
.9394		20 cf d7	jsr $d7cf	                jsr underflow_2
.9397						w_two_drop:
.9397		e8		inx		                inx
.9398		e8		inx		                inx
.9399		e8		inx		                inx
.939a		e8		inx		                inx
.939b		60		rts		z_two_drop:     rts
.939c						xt_two_dup:
.939c		20 cf d7	jsr $d7cf	                jsr underflow_2
.939f						w_two_dup:
.939f		ca		dex		                dex
.93a0		ca		dex		                dex
.93a1		ca		dex		                dex
.93a2		ca		dex		                dex
.93a3		b5 04		lda $04,x	                lda 4,x         ; TOS
.93a5		95 00		sta $00,x	                sta 0,x
.93a7		b5 05		lda $05,x	                lda 5,x
.93a9		95 01		sta $01,x	                sta 1,x
.93ab		b5 06		lda $06,x	                lda 6,x         ; NOS
.93ad		95 02		sta $02,x	                sta 2,x
.93af		b5 07		lda $07,x	                lda 7,x
.93b1		95 03		sta $03,x	                sta 3,x
.93b3		60		rts		z_two_dup:      rts
.93b4						xt_two_fetch:
.93b4		20 ca d7	jsr $d7ca	                jsr underflow_1
.93b7						w_two_fetch:
.93b7		b5 00		lda $00,x	                lda 0,x
.93b9		85 25		sta $25		                sta tmp1
.93bb		b4 01		ldy $01,x	                ldy 1,x
.93bd		84 26		sty $26		                sty tmp1+1
.93bf		ca		dex		                dex             ; reuse one stack element
.93c0		ca		dex		                dex
.93c1		b2 25		lda ($25)	                lda (tmp1)      ; copy LSB
.93c3		95 00		sta $00,x	                sta 0,x
.93c5		a0 01		ldy #$01	                ldy #1          ; copy next
.93c7		b1 25		lda ($25),y	                lda (tmp1),y
.93c9		95 01		sta $01,x	                sta 1,x
.93cb		c8		iny		                iny             ; copy next
.93cc		b1 25		lda ($25),y	                lda (tmp1),y
.93ce		95 02		sta $02,x	                sta 2,x
.93d0		c8		iny		                iny             ; copy next
.93d1		b1 25		lda ($25),y	                lda (tmp1),y
.93d3		95 03		sta $03,x	                sta 3,x
.93d5		60		rts		z_two_fetch:    rts
.93d6						xt_two_over:
.93d6		20 d9 d7	jsr $d7d9	                jsr underflow_4
.93d9						w_two_over:
.93d9		ca		dex		                dex
.93da		ca		dex		                dex
.93db		ca		dex		                dex
.93dc		ca		dex		                dex
.93dd		b5 08		lda $08,x	                lda 8,x
.93df		95 00		sta $00,x	                sta 0,x
.93e1		b5 09		lda $09,x	                lda 9,x
.93e3		95 01		sta $01,x	                sta 1,x
.93e5		b5 0a		lda $0a,x	                lda 10,x
.93e7		95 02		sta $02,x	                sta 2,x
.93e9		b5 0b		lda $0b,x	                lda 11,x
.93eb		95 03		sta $03,x	                sta 3,x
.93ed		60		rts		z_two_over:     rts
.93ee						xt_two_r_fetch:
.93ee						w_two_r_fetch:
.93ee		68		pla		                pla                     ; LSB
.93ef		7a		ply		                ply                     ; MSB
.93f0		1a		inc a		                inc a
.93f1		85 25		sta $25		                sta tmp1                ; LSB
.93f3		d0 01		bne $93f6	                bne +
.93f5		c8		iny		                iny
.93f6						+
.93f6		84 26		sty $26		                sty tmp1+1              ; MSB
.93f8		8a		txa		                txa             ; arrange for Y = SP; X -= 4
.93f9		ba		tsx		                tsx
.93fa		da		phx		                phx             ; 65c02 has no TXY, so do it the hard way
.93fb		7a		ply		                ply
.93fc		38		sec		                sec
.93fd		e9 04		sbc #$04	                sbc #4
.93ff		aa		tax		                tax
.9400		b9 01 01	lda $0101,y	                lda $101,y
.9403		95 00		sta $00,x	                sta 0,x
.9405		b9 02 01	lda $0102,y	                lda $102,y
.9408		95 01		sta $01,x	                sta 1,x
.940a		b9 03 01	lda $0103,y	                lda $103,y
.940d		95 02		sta $02,x	                sta 2,x
.940f		b9 04 01	lda $0104,y	                lda $104,y
.9412		95 03		sta $03,x	                sta 3,x
.9414		6c 25 00	jmp ($0025)	z_two_r_fetch:  jmp (tmp1)
.9417						xt_two_r_from:
.9417						w_two_r_from:
.9417		68		pla		                pla
.9418		7a		ply		                ply                     ; MSB
.9419		1a		inc a		                inc a
.941a		85 25		sta $25		                sta tmp1                ; LSB
.941c		d0 01		bne $941f	                bne +
.941e		c8		iny		                iny
.941f						+
.941f		84 26		sty $26		                sty tmp1+1              ; MSB
.9421		ca		dex		                dex
.9422		ca		dex		                dex
.9423		ca		dex		                dex
.9424		ca		dex		                dex
.9425		68		pla		                pla                     ; LSB
.9426		95 00		sta $00,x	                sta 0,x
.9428		68		pla		                pla                     ; MSB
.9429		95 01		sta $01,x	                sta 1,x
.942b		68		pla		                pla                     ; LSB
.942c		95 02		sta $02,x	                sta 2,x
.942e		68		pla		                pla                     ; MSB
.942f		95 03		sta $03,x	                sta 3,x
.9431		6c 25 00	jmp ($0025)	z_two_r_from:   jmp (tmp1)
.9434						xt_two_slash:
.9434		20 ca d7	jsr $d7ca	                jsr underflow_1
.9437						w_two_slash:
.9437		b5 01		lda $01,x	                lda 1,x
.9439		0a		asl a		                asl                     ; save the sign
.943a		76 01		ror $01,x	                ror 1,x
.943c		76 00		ror $00,x	                ror 0,x
.943e		60		rts		z_two_slash:    rts
.943f						xt_two_star:
.943f						xt_cells:
.943f		20 ca d7	jsr $d7ca	                jsr underflow_1
.9442						w_two_star:
.9442						w_cells:
.9442		16 00		asl $00,x	                asl 0,x
.9444		36 01		rol $01,x	                rol 1,x
.9446						z_cells:
.9446		60		rts		z_two_star:     rts
.9447						xt_two_store:
.9447		20 d4 d7	jsr $d7d4	                jsr underflow_3
.944a						w_two_store:
.944a		b5 00		lda $00,x	                lda 0,x
.944c		85 25		sta $25		                sta tmp1
.944e		b4 01		ldy $01,x	                ldy 1,x
.9450		84 26		sty $26		                sty tmp1+1
.9452		e8		inx		                inx
.9453		e8		inx		                inx
.9454		b5 00		lda $00,x	                lda 0,x         ; copy MSB
.9456		92 25		sta ($25)	                sta (tmp1)
.9458		b5 01		lda $01,x	                lda 1,x         ; copy next
.945a		a0 01		ldy #$01	                ldy #1
.945c		91 25		sta ($25),y	                sta (tmp1),y
.945e		b5 02		lda $02,x	                lda 2,x         ; copy next
.9460		c8		iny		                iny
.9461		91 25		sta ($25),y	                sta (tmp1),y
.9463		b5 03		lda $03,x	                lda 3,x         ; copy MSB
.9465		c8		iny		                iny
.9466		91 25		sta ($25),y	                sta (tmp1),y
.9468		e8		inx		                inx             ; 2DROP
.9469		e8		inx		                inx
.946a		e8		inx		                inx
.946b		e8		inx		                inx
.946c		60		rts		z_two_store:    rts
.946d						xt_two_swap:
.946d		20 d9 d7	jsr $d7d9	                jsr underflow_4
.9470						w_two_swap:
.9470		b5 00		lda $00,x	                lda 0,x
.9472		b4 04		ldy $04,x	                ldy 4,x
.9474		95 04		sta $04,x	                sta 4,x
.9476		94 00		sty $00,x	                sty 0,x
.9478		b5 01		lda $01,x	                lda 1,x
.947a		b4 05		ldy $05,x	                ldy 5,x
.947c		95 05		sta $05,x	                sta 5,x
.947e		94 01		sty $01,x	                sty 1,x
.9480		b5 02		lda $02,x	                lda 2,x
.9482		b4 06		ldy $06,x	                ldy 6,x
.9484		95 06		sta $06,x	                sta 6,x
.9486		94 02		sty $02,x	                sty 2,x
.9488		b5 03		lda $03,x	                lda 3,x
.948a		b4 07		ldy $07,x	                ldy 7,x
.948c		95 07		sta $07,x	                sta 7,x
.948e		94 03		sty $03,x	                sty 3,x
.9490		60		rts		z_two_swap:     rts
.9491						xt_two_to_r:
.9491						w_two_to_r:
.9491		68		pla		                pla                     ; LSB
.9492		7a		ply		                ply                     ; MSB
.9493		1a		inc a		                inc a
.9494		85 25		sta $25		                sta tmp1                ; LSB
.9496		d0 01		bne $9499	                bne +
.9498		c8		iny		                iny
.9499						+
.9499		84 26		sty $26		                sty tmp1+1              ; MSB
.949b		20 cf d7	jsr $d7cf	                jsr underflow_2
.949e		b5 03		lda $03,x	                lda 3,x         ; MSB
.94a0		48		pha		                pha
.94a1		b5 02		lda $02,x	                lda 2,x         ; LSB
.94a3		48		pha		                pha
.94a4		b5 01		lda $01,x	                lda 1,x         ; MSB
.94a6		48		pha		                pha
.94a7		b5 00		lda $00,x	                lda 0,x         ; LSB
.94a9		48		pha		                pha
.94aa		e8		inx		                inx
.94ab		e8		inx		                inx
.94ac		e8		inx		                inx
.94ad		e8		inx		                inx
.94ae		6c 25 00	jmp ($0025)	z_two_to_r:     jmp (tmp1)
.94b1						xt_type:
.94b1		20 cf d7	jsr $d7cf	                jsr underflow_2
.94b4						w_type:
.94b4		b5 02		lda $02,x	                lda 2,x
.94b6		85 25		sta $25		                sta tmp1
.94b8		b5 03		lda $03,x	                lda 3,x
.94ba		85 26		sta $26		                sta tmp1+1
.94bc						_loop:
.94bc		b5 00		lda $00,x	                lda 0,x
.94be		15 01		ora $01,x	                ora 1,x
.94c0		f0 15		beq $94d7	                beq _done
.94c2		b2 25		lda ($25)	                lda (tmp1)
.94c4		20 93 86	jsr $8693	                jsr emit_a      ; avoids stack foolery
.94c7		e6 25		inc $25		                inc tmp1
.94c9		d0 02		bne $94cd	                bne +
.94cb		e6 26		inc $26		                inc tmp1+1
.94cd						+
.94cd		b5 00		lda $00,x	                lda 0,x
.94cf		d0 02		bne $94d3	                bne +
.94d1		d6 01		dec $01,x	                dec 1,x
.94d3						+
.94d3		d6 00		dec $00,x	                dec 0,x
.94d5		80 e5		bra $94bc	                bra _loop
.94d7						_done:
.94d7		e8		inx		                inx
.94d8		e8		inx		                inx
.94d9		e8		inx		                inx
.94da		e8		inx		                inx
.94db		60		rts		z_type:         rts
.94dc						xt_u_dot:
.94dc		20 ca d7	jsr $d7ca	                jsr underflow_1
.94df						w_u_dot:
.94df		20 32 d8	jsr $d832	                jsr print_u
.94e2		a9 20		lda #$20	                lda #AscSP
.94e4		20 93 86	jsr $8693	                jsr emit_a
.94e7		60		rts		z_u_dot:        rts
.94e8						xt_u_dot_r:
.94e8		20 cf d7	jsr $d7cf	                jsr underflow_2
.94eb						w_u_dot_r:
.94eb		20 59 93	jsr $9359	                jsr w_to_r
.94ee		20 71 9e	jsr $9e71	                jsr w_zero
.94f1		20 ad 89	jsr $89ad	                jsr w_less_number_sign
.94f4		20 89 8c	jsr $8c89	                jsr w_number_sign_s
.94f7		20 67 8c	jsr $8c67	                jsr w_number_sign_greater
.94fa		20 b5 8e	jsr $8eb5	                jsr w_r_from
.94fd		20 db 8c	jsr $8cdb	                jsr w_over
.9500		20 bb 8b	jsr $8bbb	                jsr w_minus
.9503		20 be 91	jsr $91be	                jsr w_spaces
.9506		20 b4 94	jsr $94b4	                jsr w_type
.9509		60		rts		z_u_dot_r:      rts
.950a						xt_u_greater_than:
.950a		20 cf d7	jsr $d7cf	                jsr underflow_2
.950d						w_u_greater_than:
.950d		b5 00		lda $00,x	                lda 0,x
.950f		d5 02		cmp $02,x	                cmp 2,x
.9511		b5 01		lda $01,x	                lda 1,x
.9513		f5 03		sbc $03,x	                sbc 3,x
.9515		e8		inx		                inx
.9516		e8		inx		                inx
.9517		a9 00		lda #$00	                lda #0
.9519		69 ff		adc #$ff	                adc #$FF
.951b		95 00		sta $00,x	                sta 0,x         ; store flag
.951d		95 01		sta $01,x	                sta 1,x
.951f		60		rts		z_u_greater_than:    rts
.9520						xt_u_less_than:
.9520		20 cf d7	jsr $d7cf	                jsr underflow_2
.9523						w_u_less_than:
.9523		b5 02		lda $02,x	                lda 2,x
.9525		d5 00		cmp $00,x	                cmp 0,x
.9527		b5 03		lda $03,x	                lda 3,x
.9529		f5 01		sbc $01,x	                sbc 1,x
.952b		e8		inx		                inx
.952c		e8		inx		                inx
.952d		a9 00		lda #$00	                lda #0
.952f		69 ff		adc #$ff	                adc #$FF
.9531		95 00		sta $00,x	                sta 0,x         ; store flag
.9533		95 01		sta $01,x	                sta 1,x
.9535		60		rts		z_u_less_than:    rts
.9536						xt_um_slash_mod:
.9536		20 d4 d7	jsr $d7d4	                jsr underflow_3
.9539						w_um_slash_mod:
.9539		b5 00		lda $00,x	                lda 0,x
.953b		15 01		ora $01,x	                ora 1,x
.953d		d0 05		bne $9544	                bne _not_zero
.953f		a9 04		lda #$04	                lda #err_divzero
.9541		4c e0 d7	jmp $d7e0	                jmp error
.9544						_not_zero:
.9544		a9 11		lda #$11	                lda #17
.9546		85 23		sta $23		                sta tmptos
.9548						_loop:
.9548		36 04		rol $04,x	                rol 4,x
.954a		36 05		rol $05,x	                rol 5,x
.954c		c6 23		dec $23		                dec tmptos
.954e		f0 22		beq $9572	                beq _done
.9550		36 02		rol $02,x	                rol 2,x
.9552		36 03		rol $03,x	                rol 3,x
.9554		64 25		stz $25		                stz tmp1        ; store the bit we got from hi cell (MSB)
.9556		26 25		rol $25		                rol tmp1
.9558		38		sec		                sec
.9559		b5 02		lda $02,x	                lda 2,x
.955b		f5 00		sbc $00,x	                sbc 0,x
.955d		85 26		sta $26		                sta tmp1+1
.955f		b5 03		lda $03,x	                lda 3,x
.9561		f5 01		sbc $01,x	                sbc 1,x
.9563		a8		tay		                tay
.9564		a5 25		lda $25		                lda tmp1
.9566		e9 00		sbc #$00	                sbc #0
.9568		90 de		bcc $9548	                bcc _loop
.956a		a5 26		lda $26		                lda tmp1+1
.956c		95 02		sta $02,x	                sta 2,x
.956e		94 03		sty $03,x	                sty 3,x         ; used as temp storage
.9570		80 d6		bra $9548	                bra _loop
.9572						_done:
.9572		e8		inx		                inx
.9573		e8		inx		                inx
.9574		20 1e 92	jsr $921e	                jsr w_swap
.9577		60		rts		z_um_slash_mod: rts
.9578						xt_um_star:
.9578		20 cf d7	jsr $d7cf	                jsr underflow_2
.957b						w_um_star:
.957b		18		clc		                clc
.957c		b5 00		lda $00,x	                lda 0,x         ; copy TOS to tmp2
.957e		e9 00		sbc #$00	                sbc #0
.9580		85 27		sta $27		                sta tmp2
.9582		b5 01		lda $01,x	                lda 1,x
.9584		e9 00		sbc #$00	                sbc #0
.9586		90 31		bcc $95b9	                bcc _zero       ; is TOS zero?
.9588		85 28		sta $28		                sta tmp2+1
.958a		a9 00		lda #$00	                lda #0
.958c		85 25		sta $25		                sta tmp1
.958e		86 29		stx $29		                stx tmp3        ; tested for exit from outer loop
.9590		ca		dex		                dex
.9591		ca		dex		                dex
.9592						_outer_loop:
.9592		a0 08		ldy #$08	                ldy #8          ; counter inner loop
.9594		56 04		lsr $04,x	                lsr 4,x         ; think "2,x" then later "3,x"
.9596						_inner_loop:
.9596		90 0c		bcc $95a4	                bcc _no_add
.9598		85 26		sta $26		                sta tmp1+1      ; save time, don't CLC
.959a		a5 25		lda $25		                lda tmp1
.959c		65 27		adc $27		                adc tmp2
.959e		85 25		sta $25		                sta tmp1
.95a0		a5 26		lda $26		                lda tmp1+1
.95a2		65 28		adc $28		                adc tmp2+1
.95a4						_no_add:
.95a4		6a		ror a		                ror
.95a5		66 25		ror $25		                ror tmp1
.95a7		76 04		ror $04,x	                ror 4,x         ; think "2,x" then later "3,x"
.95a9		88		dey		                dey
.95aa		d0 ea		bne $9596	                bne _inner_loop ; go back for one more shift?
.95ac		e8		inx		                inx
.95ad		e4 29		cpx $29		                cpx tmp3
.95af		d0 e1		bne $9592	                bne _outer_loop ; go back for eight more shifts?
.95b1		95 01		sta $01,x	                sta 1,x
.95b3		a5 25		lda $25		                lda tmp1
.95b5		95 00		sta $00,x	                sta 0,x
.95b7		80 04		bra $95bd	                bra _done
.95b9						_zero:
.95b9		74 02		stz $02,x	                stz 2,x
.95bb		74 03		stz $03,x	                stz 3,x
.95bd						_done:
.95bd		60		rts		z_um_star:      rts
.95be						xt_unloop:
.95be						w_unloop:
.95be		a4 1f		ldy $1f		                ldy loopctrl
.95c0		88		dey		                dey
.95c1		88		dey		                dey
.95c2		88		dey		                dey
.95c3		88		dey		                dey
.95c4		84 1f		sty $1f		                sty loopctrl
.95c6		30 05		bmi $95cd	                bmi z_unloop            ; no active loops?
.95c8		b9 00 01	lda $0100,y	                lda loopindex,y         ; else re-cache the LSB of loopindex
.95cb		85 20		sta $20		                sta loopidx0
.95cd		60		rts		z_unloop:       rts
.95ce						xt_until:
.95ce		20 ca d7	jsr $d7ca	                jsr underflow_1
.95d1						w_until:
.95d1		20 ec 97	jsr $97ec	                jsr cmpl_0branch_tos
.95d4		60		rts		z_until:        rts
.95d5						xt_unused:
.95d5						w_unused:
.95d5		ca		dex		                dex
.95d6		ca		dex		                dex
.95d7		a9 00		lda #$00	                lda #<cp_end
.95d9		38		sec		                sec
.95da		e5 00		sbc $00		                sbc cp
.95dc		95 00		sta $00,x	                sta 0,x
.95de		a9 7c		lda #$7c	                lda #>cp_end
.95e0		e5 01		sbc $01		                sbc cp+1
.95e2		95 01		sta $01,x	                sta 1,x
.95e4		60		rts		z_unused:       rts
.95e5						xt_variable:
.95e5						w_variable:
.95e5		20 f5 83	jsr $83f5	                jsr w_create
.95e8		a9 00		lda #$00	                lda #0
.95ea		20 bc 97	jsr $97bc	                jsr cmpl_a
.95ed		20 bc 97	jsr $97bc	                jsr cmpl_a
.95f0		60		rts		z_variable:     rts
.95f1						xt_while:
.95f1		20 ca d7	jsr $d7ca	                jsr underflow_1
.95f4						w_while:
.95f4		20 d7 97	jsr $97d7	                jsr cmpl_0branch_later          ; branch to location we'll determine later
.95f7		20 1e 92	jsr $921e	                jsr w_swap
.95fa		60		rts		z_while:        rts
.95fb						xt_within:
.95fb		20 d4 d7	jsr $d7d4	                jsr underflow_3
.95fe						w_within:
.95fe		20 db 8c	jsr $8cdb	                jsr w_over
.9601		20 bb 8b	jsr $8bbb	                jsr w_minus
.9604		20 59 93	jsr $9359	                jsr w_to_r
.9607		20 bb 8b	jsr $8bbb	                jsr w_minus
.960a		20 b5 8e	jsr $8eb5	                jsr w_r_from
.960d		20 23 95	jsr $9523	                jsr w_u_less_than
.9610		60		rts		z_within:       rts
.9611						xt_word:
.9611		20 ca d7	jsr $d7ca	                jsr underflow_1
.9614						w_word:
.9614		a4 10		ldy $10		                ldy toin                ; >IN
.9616						_loop:
.9616		c4 0e		cpy $0e		                cpy ciblen              ; quit if end of input
.9618		f0 09		beq $9623	                beq _found_char
.961a		b1 0c		lda ($0c),y	                lda (cib),y
.961c		d5 00		cmp $00,x	                cmp 0,x                 ; ASCII of delimiter
.961e		d0 03		bne $9623	                bne _found_char
.9620		c8		iny		                iny
.9621		80 f3		bra $9616	                bra _loop
.9623						_found_char:
.9623		84 10		sty $10		                sty toin
.9625		20 82 8d	jsr $8d82	                jsr w_parse            ; Returns ( addr u )
.9628		b5 00		lda $00,x	                lda 0,x
.962a		92 00		sta ($00)	                sta (cp)                ; Save length of string
.962c		48		pha		                pha                     ; Keep copy of length for later
.962d		20 69 86	jsr $8669	                jsr w_dup              ; ( addr u u )
.9630		a5 00		lda $00		                lda cp
.9632		18		clc		                clc
.9633		69 01		adc #$01	                adc #1
.9635		95 02		sta $02,x	                sta 2,x                 ; LSB of CP
.9637		a5 01		lda $01		                lda cp+1
.9639		69 00		adc #$00	                adc #0
.963b		95 03		sta $03,x	                sta 3,x                 ; ( addr cp+1 u )
.963d		20 d7 8b	jsr $8bd7	                jsr w_move
.9640		ca		dex		                dex
.9641		ca		dex		                dex
.9642		a5 00		lda $00		                lda cp
.9644		95 00		sta $00,x	                sta 0,x
.9646		a5 01		lda $01		                lda cp+1
.9648		95 01		sta $01,x	                sta 1,x
.964a		68		pla		                pla                     ; length of string
.964b		18		clc		                clc
.964c		65 00		adc $00		                adc cp
.964e		85 00		sta $00		                sta cp
.9650		90 02		bcc $9654	                bcc z_word
.9652		e6 01		inc $01		                inc cp+1
.9654		60		rts		z_word:         rts
.9655						xt_xor:
.9655		20 cf d7	jsr $d7cf	                jsr underflow_2
.9658						w_xor:
.9658		b5 00		lda $00,x	                lda 0,x
.965a		55 02		eor $02,x	                eor 2,x
.965c		95 02		sta $02,x	                sta 2,x
.965e		b5 01		lda $01,x	                lda 1,x
.9660		55 03		eor $03,x	                eor 3,x
.9662		95 03		sta $03,x	                sta 3,x
.9664		e8		inx		                inx
.9665		e8		inx		                inx
.9666		60		rts		z_xor:          rts
.9667						xt_zero_equal:
.9667		20 ca d7	jsr $d7ca	                jsr underflow_1
.966a						w_zero_equal:
.966a		b5 00		lda $00,x	                lda 0,x
.966c		15 01		ora $01,x	                ora 1,x
.966e		f0 02		beq $9672	                beq _zero       ; if 0, A is inverse of the TRUE (-1) we want
.9670		a9 ff		lda #$ff	                lda #$FF        ; else set A inverse of the FALSE (0) we want
.9672						_zero:
.9672		49 ff		eor #$ff	                eor #$FF        ; now just invert:
.9674		95 00		sta $00,x	                sta 0,x
.9676		95 01		sta $01,x	                sta 1,x
.9678		60		rts		z_zero_equal:   rts
.9679						xt_zero_greater:
.9679		20 ca d7	jsr $d7ca	                jsr underflow_1
.967c						w_zero_greater:
.967c		a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS is negative)
.967e		b5 01		lda $01,x	                lda 1,x         ; MSB
.9680		30 05		bmi $9687	                bmi _done       ; TOS is negative, keep FLASE
.9682		15 00		ora $00,x	                ora 0,x
.9684		f0 01		beq $9687	                beq _done       ; TOS is zero, keep FALSE
.9686		88		dey		                dey             ; TOS is postive, make true
.9687						_done:
.9687		98		tya		                tya
.9688		95 00		sta $00,x	                sta 0,x
.968a		95 01		sta $01,x	                sta 1,x
.968c		60		rts		z_zero_greater: rts
.968d						xt_zero_less:
.968d		20 ca d7	jsr $d7ca	                jsr underflow_1
.9690						w_zero_less:
.9690		a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS positive)
.9692		b5 01		lda $01,x	                lda 1,x         ; MSB
.9694		10 01		bpl $9697	                bpl _done       ; TOS is positive, so keep FALSE
.9696		88		dey		                dey             ; TOS is negative, make TRUE
.9697						_done:
.9697		98		tya		                tya
.9698		95 00		sta $00,x	                sta 0,x
.969a		95 01		sta $01,x	                sta 1,x
.969c		60		rts		z_zero_less:    rts
.969d						xt_zero_unequal:
.969d		20 ca d7	jsr $d7ca	                jsr underflow_1
.96a0						w_zero_unequal:
.96a0		b5 00		lda $00,x	                lda 0,x
.96a2		15 01		ora $01,x	                ora 1,x
.96a4		f0 02		beq $96a8	                beq _zero
.96a6		a9 ff		lda #$ff	                lda #$FF
.96a8						_zero:
.96a8		95 00		sta $00,x	                sta 0,x
.96aa		95 01		sta $01,x	                sta 1,x
.96ac		60		rts		z_zero_unequal: rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/compile.asm

.96ad						compile_nt_comma:
.96ad		20 69 86	jsr $8669	        jsr w_dup                       ; ( nt nt )
.96b0		20 b1 9c	jsr $9cb1	        jsr w_name_to_int               ; ( nt xt )
.96b3		20 69 86	jsr $8669	        jsr w_dup                       ; ( nt xt xt )
.96b6		20 5c 8f	jsr $8f5c	        jsr w_rot                       ; ( xt xt nt )
.96b9		80 12		bra $96cd	        bra compile_comma_common
.96bb						xt_compile_comma:
.96bb		20 ca d7	jsr $d7ca	                jsr underflow_1
.96be						w_compile_comma:
.96be		20 69 86	jsr $8669	                jsr w_dup               ; keep an unadjusted copy of xt
.96c1		20 69 86	jsr $8669	                jsr w_dup               ; plus one to convert to nt
.96c4		20 2b 9c	jsr $9c2b	                jsr w_int_to_name
.96c7		b5 00		lda $00,x	                lda 0,x
.96c9		15 01		ora $01,x	                ora 1,x
.96cb		f0 73		beq $9740	                beq cmpl_as_call        ; No nt so unknown size; must compile as a JSR
.96cd						compile_comma_common:
.96cd		20 69 86	jsr $8669	                jsr w_dup
.96d0		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; status is at nt+1
.96d3		a1 00		lda ($00,x)	                lda (0,x)               ; get status byte
.96d5		e8		inx		                inx                     ; drop pointer
.96d6		e8		inx		                inx
.96d7		85 29		sta $29		                sta tmp3                ; keep copy of status byte
.96d9		29 0c		and #$0c	                and #AN+NN              ; check if never native (NN)
.96db		c9 08		cmp #$08	                cmp #NN                 ; NN=1, AN=0?  i.e. not ST=AN+AN
.96dd		f0 61		beq $9740	                beq cmpl_as_call
.96df		20 53 9e	jsr $9e53	                jsr w_wordsize
.96e2		a5 29		lda $29		                lda tmp3
.96e4		29 0c		and #$0c	                and #ST                 ; Check the Stack Thrash flag (ST=NN+AN)
.96e6		c9 0c		cmp #$0c	                cmp #ST
.96e8		d0 16		bne $9700	                bne _check_uf
=10						_strip_sz = 10  ; skip the standard 10 byte header which saves return address + 1 to tmp1
.96ea		18		clc		                clc
.96eb		b5 02		lda $02,x	                lda 2,x
.96ed		69 0a		adc #$0a	                adc #_strip_sz
.96ef		95 02		sta $02,x	                sta 2,x
.96f1		90 02		bcc $96f5	                bcc +
.96f3		f6 03		inc $03,x	                inc 3,x                 ; we just care about the carry
.96f5						+
.96f5		38		sec		                sec
.96f6		b5 00		lda $00,x	                lda 0,x
.96f8		e9 0a		sbc #$0a	                sbc #_strip_sz
.96fa		95 00		sta $00,x	                sta 0,x
.96fc		b0 02		bcs $9700	                bcs +
.96fe		d6 01		dec $01,x	                dec 1,x                 ; we just care about the borrow
.9700						+
.9700						_check_uf:
.9700		a0 02		ldy #$02	                ldy #uf_strip_offset
.9702		b1 08		lda ($08),y	                lda (up),y
.9704		c8		iny		                iny
.9705		11 08		ora ($08),y	                ora (up),y
.9707		f0 1e		beq $9727	                beq _check_limit
.9709		20 db 8c	jsr $8cdb	                jsr w_over
.970c		20 6f 97	jsr $976f	                jsr has_uf_check
.970f		90 16		bcc $9727	                bcc _check_limit        ; not an underflow check
.9711		18		clc		                clc
.9712		b5 02		lda $02,x	                lda 2,x
.9714		69 03		adc #$03	                adc #3
.9716		95 02		sta $02,x	                sta 2,x
.9718		90 02		bcc $971c	                bcc +
.971a		f6 03		inc $03,x	                inc 3,x                  ; we just care about the carry
.971c						+
.971c		38		sec		                sec
.971d		b5 00		lda $00,x	                lda 0,x
.971f		e9 03		sbc #$03	                sbc #3
.9721		95 00		sta $00,x	                sta 0,x
.9723		b0 02		bcs $9727	                bcs +
.9725		d6 01		dec $01,x	                dec 1,x                  ; we just care about the borrow
.9727						+
.9727						_check_limit:
.9727		a5 29		lda $29		                lda tmp3
.9729		29 0c		and #$0c	                and #AN+NN              ; check Always Native (AN) bit
.972b		c9 04		cmp #$04	                cmp #AN                 ; AN=1, NN=0?  (i.e. not ST=AN+NN)
.972d		f0 2c		beq $975b	                beq cmpl_inline         ; always natively compile
.972f						cmpl_by_limit:
.972f		a0 01		ldy #$01	                ldy #nc_limit_offset+1
.9731		b5 01		lda $01,x	                lda 1,x                 ; MSB of word size
.9733		d1 08		cmp ($08),y	                cmp (up),y              ; user-defined limit MSB
.9735		90 24		bcc $975b	                bcc cmpl_inline         ; borrow (C=0) means size < limit
.9737		d0 07		bne $9740	                bne cmpl_as_call        ; else non-zero means size > limit
.9739		88		dey		                dey
.973a		b1 08		lda ($08),y	                lda (up),y              ; user-defined limit LSB
.973c		d5 00		cmp $00,x	                cmp 0,x
.973e		b0 1b		bcs $975b	                bcs cmpl_inline         ; not bigger, so good to go
.9740						cmpl_as_call:
.9740		a5 29		lda $29		                lda tmp3
.9742		29 0c		and #$0c	                and #ST
.9744		d0 08		bne $974e	                bne +
.9746		20 63 86	jsr $8663	                jsr w_drop              ; no stack juggling, use middle (xt or xt')
.9749		20 0a 8c	jsr $8c0a	                jsr w_nip
.974c		80 03		bra $9751	                bra _cmpl
.974e						+
.974e		20 97 93	jsr $9397	                jsr w_two_drop          ; stack juggling, must use first (xt)
.9751						_cmpl:
.9751		a9 20		lda #$20	                lda #OpJSR
.9753		20 bc 97	jsr $97bc	                jsr cmpl_a
.9756		20 b1 83	jsr $83b1	                jsr w_comma
.9759		38		sec		                sec
.975a		60		rts		                rts
.975b						cmpl_inline:
.975b		20 e7 88	jsr $88e7	                jsr w_here
.975e		20 1e 92	jsr $921e	                jsr w_swap
.9761		20 69 86	jsr $8669	                jsr w_dup
.9764		20 2d 82	jsr $822d	                jsr w_allot            ; allocate space for the word
.9767		20 d7 8b	jsr $8bd7	                jsr w_move
.976a		20 63 86	jsr $8663	                jsr w_drop             ; drop original xt
.976d		18		clc		                clc
.976e						z_compile_comma:
.976e		60		rts		                rts
.976f						has_uf_check:
.976f		a1 00		lda ($00,x)	                lda (0,x)               ; fetch byte @ addr
.9771		c9 20		cmp #$20	                cmp #OpJSR
.9773		d0 18		bne $978d	                bne _not_uf             ; not a JSR
.9775		20 bf 8c	jsr $8cbf	                jsr w_one_plus
.9778		20 e9 87	jsr $87e9	                jsr w_fetch             ; get JSR address to TOS
.977b		b5 00		lda $00,x	                lda 0,x                 ; LSB of jsr address
.977d		38		sec		                sec
.977e		e9 ca		sbc #$ca	                sbc #<underflow_1
.9780		a8		tay		                tay                     ; stash LSB of result and finish subtraction
.9781		b5 01		lda $01,x	                lda 1,x                 ; MSB of jsr address
.9783		e9 d7		sbc #$d7	                sbc #>underflow_1
.9785		d0 06		bne $978d	                bne _not_uf             ; MSB of result must be zero
.9787		c0 10		cpy #$10	                cpy #(underflow_4-underflow_1+1)
.9789		b0 02		bcs $978d	                bcs _not_uf             ; LSB is too big
.978b		38		sec		                sec                     ; C=1 means it is an UF check
>978c		24				                .byte OpBITzp           ; mask the clc, with no effect on carry
.978d		18		clc		_not_uf:        clc                     ; C=0 means it isn't a UF check
.978e		e8		inx		                inx                     ; clean up stack
.978f		e8		inx		                inx
.9790		60		rts		                rts
.9791						cmpl_jump_later:
.9791		ca		dex		                dex
.9792		ca		dex		                dex
.9793		a5 01		lda $01		                lda cp+1
.9795		95 01		sta $01,x	                sta 1,x
.9797		a5 00		lda $00		                lda cp
.9799		1a		inc a		                inc a
.979a		95 00		sta $00,x	                sta 0,x
.979c		d0 0a		bne $97a8	                bne cmpl_jump
.979e		f6 01		inc $01,x	                inc 1,x
.97a0		80 06		bra $97a8	                bra cmpl_jump
.97a2						cmpl_jump_tos:
.97a2		b5 00		lda $00,x	                lda 0,x         ; set up for cmpl_jump Y/A
.97a4		b4 01		ldy $01,x	                ldy 1,x
.97a6		e8		inx		                inx
.97a7		e8		inx		                inx
.97a8						cmpl_jump:
.97a8		48		pha		                pha             ; save LSB of address
.97a9		a9 10		lda #$10	                lda #%00010000  ; unset bit 4 to flag as never-native
.97ab		14 1c		trb $1c		                trb status
.97ad		a9 4c		lda #$4c	                lda #OpJMP      ; load opcode for JMP
.97af		80 03		bra $97b4	                bra +
.97b1						cmpl_subroutine:
.97b1		48		pha		                pha             ; save LSB of address
.97b2		a9 20		lda #$20	                lda #OpJSR      ; load opcode for JSR and fall through
.97b4						+
.97b4		20 bc 97	jsr $97bc	                jsr cmpl_a      ; compile opcode
.97b7		68		pla		                pla             ; retrieve address LSB; fall thru to cmpl_word
.97b8						cmpl_word:
.97b8		20 bc 97	jsr $97bc	                jsr cmpl_a      ; compile LSB of address
.97bb		98		tya		                tya             ; fall thru for MSB
.97bc						cmpl_a:
.97bc		92 00		sta ($00)	                sta (cp)
.97be		e6 00		inc $00		                inc cp
.97c0		d0 02		bne $97c4	                bne _done
.97c2		e6 01		inc $01		                inc cp+1
.97c4						_done:
.97c4		60		rts		                rts
.97c5						check_nc_limit:
.97c5		48		pha		                pha
.97c6		38		sec		                sec
.97c7		a0 01		ldy #$01	                ldy #nc_limit_offset+1
.97c9		b1 08		lda ($08),y	                lda (up),y              ; if MSB non zero we're good, leave with C=0
.97cb		f0 01		beq $97ce	                beq +
.97cd		18		clc		                clc
.97ce						+
.97ce		68		pla		                pla
.97cf		90 05		bcc $97d6	                bcc _done
.97d1		3a		dec a		                dea                     ; simplify test to A-1 < nc-limit
.97d2		88		dey		                dey
.97d3		d1 08		cmp ($08),y	                cmp (up),y              ; A-1 < LSB leaves C=0, else C=1
.97d5		1a		inc a		                ina                     ; restore A, preserves carry
.97d6						_done:
.97d6		60		rts		                rts
.97d7						cmpl_0branch_later:
.97d7		20 71 9e	jsr $9e71	                jsr w_zero             ; dummy placeholder, which forces long jmp in native version
.97da		20 ec 97	jsr $97ec	                jsr cmpl_0branch_tos    ; generate native or subroutine branch code
.97dd		20 e7 88	jsr $88e7	                jsr w_here             ; either way the target address is two bytes before here
.97e0		38		sec		                sec
.97e1		b5 00		lda $00,x	                lda 0,x
.97e3		e9 02		sbc #$02	                sbc #2
.97e5		95 00		sta $00,x	                sta 0,x
.97e7		b0 02		bcs $97eb	                bcs +
.97e9		d6 01		dec $01,x	                dec 1,x
.97eb						+
.97eb		60		rts		                rts
.97ec						cmpl_0branch_tos:
.97ec		a9 0b		lda #$0b	                lda #ztest_runtime_size+5       ; typical size of inline form
.97ee		20 c5 97	jsr $97c5	                jsr check_nc_limit              ; returns C=0 if we should native compile
.97f1		90 0a		bcc $97fd	                bcc _inline
.97f3		a0 98		ldy #$98	                ldy #>zero_branch_runtime
.97f5		a9 4e		lda #$4e	                lda #<zero_branch_runtime
.97f7		20 b1 97	jsr $97b1	                jsr cmpl_subroutine             ; call the 0branch runtime
.97fa		4c b1 83	jmp $83b1	                jmp w_comma                    ; add the payload and return
.97fd						_inline:
.97fd		a0 00		ldy #$00	                ldy #0
.97ff						-
.97ff		b9 4e 98	lda $984e,y	                lda ztest_runtime,y
.9802		20 bc 97	jsr $97bc	                jsr cmpl_a
.9805		c8		iny		                iny
.9806		c0 06		cpy #$06	                cpy #ztest_runtime_size
.9808		d0 f5		bne $97ff	                bne -
.980a		b5 00		lda $00,x	                lda 0,x
.980c		15 01		ora $01,x	                ora 1,x
.980e		f0 31		beq $9841	                beq _long               ; always use the long form if target is 0
.9810		20 69 86	jsr $8669	                jsr w_dup
.9813		20 e7 88	jsr $88e7	                jsr w_here
.9816		18		clc		                clc
.9817		a9 02		lda #$02	                lda #2
.9819		75 00		adc $00,x	                adc 0,x
.981b		95 00		sta $00,x	                sta 0,x
.981d		90 02		bcc $9821	                bcc +
.981f		f6 01		inc $01,x	                inc 1,x
.9821						+
.9821		20 bb 8b	jsr $8bbb	                jsr w_minus
.9824		e8		inx		                inx             ; pre-drop offset and use wraparound indexing to preserve flags
.9825		e8		inx		                inx
.9826		b5 ff		lda $ff,x	                lda $ff,x
.9828		a8		tay		                tay             ; Y=MSB of offset
.9829		b5 fe		lda $fe,x	                lda $fe,x       ; A=LSB, setting N flag to bit 7
.982b		30 04		bmi $9831	                bmi _minus
.982d		c0 00		cpy #$00	                cpy #0          ; if LSB is positive we need MSB = 0
.982f		80 02		bra $9833	                bra +
.9831		c0 ff		cpy #$ff	_minus:         cpy #$ff        ; if LSB is negative we need MSB = ff
.9833		d0 0c		bne $9841	+               bne _long
.9835		a9 f0		lda #$f0	                lda #OpBEQ
.9837		20 bc 97	jsr $97bc	                jsr cmpl_a
.983a		b5 fe		lda $fe,x	                lda $fe,x
.983c		e8		inx		                inx             ; drop the original address we used to calc offset
.983d		e8		inx		                inx
.983e		4c bc 97	jmp $97bc	                jmp cmpl_a
.9841						_long:
.9841		a9 d0		lda #$d0	                lda #OpBNE
.9843		20 bc 97	jsr $97bc	                jsr cmpl_a
.9846		a9 03		lda #$03	                lda #3
.9848		20 bc 97	jsr $97bc	                jsr cmpl_a
.984b		4c a2 97	jmp $97a2	                jmp cmpl_jump_tos
.984e						zero_branch_runtime:
.984e						ztest_runtime:
.984e		e8		inx		                inx
.984f		e8		inx		                inx
.9850		b5 fe		lda $fe,x	                lda $FE,x           ; wraparound so inx doesn't wreck Z status
.9852		15 ff		ora $ff,x	                ora $FF,x
=6						ztest_runtime_size = * - ztest_runtime
.9854						zbranch_runtime:
.9854		7a		ply		                ply
.9855		84 25		sty $25		                sty tmp1
.9857		7a		ply		                ply
.9858		84 26		sty $26		                sty tmp1+1
.985a		a8		tay		                tay             ; test if A = 0 which tells us whether to branch
.985b		f0 0d		beq $986a	                beq _branch
.985d		18		clc		                clc
.985e		a5 25		lda $25		                lda tmp1        ; LSB
.9860		69 03		adc #$03	                adc #3          ; skip two bytes plus the extra for jsr/rts behavior
.9862		85 25		sta $25		                sta tmp1
.9864		90 11		bcc $9877	                bcc _jmp
.9866		e6 26		inc $26		                inc tmp1+1
.9868		80 0d		bra $9877	                bra _jmp
.986a						_branch:
.986a		a0 01		ldy #$01	                ldy #1
.986c		b1 25		lda ($25),y	                lda (tmp1),y
.986e		48		pha		                pha                     ; stash the LSB until we've read the MSB too
.986f		c8		iny		                iny
.9870		b1 25		lda ($25),y	                lda (tmp1),y
.9872		85 26		sta $26		                sta tmp1+1              ; update tmp1 with our branch target
.9874		68		pla		                pla
.9875		85 25		sta $25		                sta tmp1
.9877						_jmp:
.9877		6c 25 00	jmp ($0025)	                jmp (tmp1)

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/tools.asm

.987a						xt_bye:
.987a						w_bye:
.987a		4c 21 f0	jmp $f021	                jmp kernel_bye
.987d						z_bye:
.987d						xt_dot_s:
.987d						w_dot_s:
.987d		20 18 85	jsr $8518	                jsr w_depth    ; ( -- u )
.9880		a9 3c		lda #$3c	                lda #'<'
.9882		20 93 86	jsr $8693	                jsr emit_a
.9885		b5 00		lda $00,x	                lda 0,x
.9887		48		pha		                pha
.9888		ca		dex		                dex             ; DUP
.9889		ca		dex		                dex
.988a		95 00		sta $00,x	                sta 0,x
.988c		74 01		stz $01,x	                stz 1,x
.988e		20 32 d8	jsr $d832	                jsr print_u
.9891		a9 3e		lda #$3e	                lda #'>'
.9893		20 93 86	jsr $8693	                jsr emit_a
.9896		a9 20		lda #$20	                lda #AscSP      ; ASCII for SPACE
.9898		20 93 86	jsr $8693	                jsr emit_a
.989b		e8		inx		                inx
.989c		e8		inx		                inx
.989d		e0 78		cpx #$78	                cpx #dsp0
.989f		f0 1e		beq $98bf	                beq _done
.98a1		7a		ply		                ply
.98a2		a9 77		lda #$77	                lda #dsp0-1     ; go up one to avoid garbage
.98a4		85 29		sta $29		                sta tmp3
.98a6		64 2a		stz $2a		                stz tmp3+1      ; must be zero page on the 65c02
.98a8						_loop:
.98a8		ca		dex		                dex
.98a9		ca		dex		                dex
.98aa		b2 29		lda ($29)	                lda (tmp3)
.98ac		95 01		sta $01,x	                sta 1,x
.98ae		c6 29		dec $29		                dec tmp3
.98b0		b2 29		lda ($29)	                lda (tmp3)
.98b2		95 00		sta $00,x	                sta 0,x
.98b4		c6 29		dec $29		                dec tmp3
.98b6		5a		phy		                phy
.98b7		20 f9 85	jsr $85f9	                jsr w_dot
.98ba		7a		ply		                ply
.98bb		88		dey		                dey
.98bc		d0 ea		bne $98a8	                bne _loop
.98be		48		pha		                pha             ; dummy to balance stack
.98bf						_done:
.98bf		68		pla		                pla
.98c0		60		rts		z_dot_s:        rts
.98c1						xt_dump:
.98c1		20 cf d7	jsr $d7cf	                jsr underflow_2
.98c4						w_dump:
.98c4						_row:
.98c4		b5 03		lda $03,x	                lda 3,x
.98c6		85 28		sta $28		                sta tmp2+1
.98c8		b5 02		lda $02,x	                lda 2,x
.98ca		85 27		sta $27		                sta tmp2
.98cc		20 ef 83	jsr $83ef	                jsr w_cr
.98cf		a0 10		ldy #$10	                ldy #16                 ; max 16
.98d1		b5 01		lda $01,x	                lda 1,x                 ; if u > 256 keep 16
.98d3		d0 09		bne $98de	                bne +
.98d5		b5 00		lda $00,x	                lda 0,x                 ; if u = 0 we're done
.98d7		f0 61		beq $993a	                beq _done
.98d9		c9 10		cmp #$10	                cmp #16                 ; if u < 16 do what's left
.98db		b0 01		bcs $98de	                bcs +
.98dd		a8		tay		                tay
.98de						+
.98de		84 25		sty $25		                sty tmp1                ; temporary storage for loop counter
.98e0		a9 40		lda #$40	                lda #$40                ; bit 6 set on first pass and bit 7 on second
.98e2		85 26		sta $26		                sta tmp1+1              ; so we can use bit tmp1+1 to check N flag
.98e4		a0 01		ldy #$01	                ldy #1
.98e6						-
.98e6		b9 27 00	lda $0027,y	                lda tmp2,y
.98e9		20 97 d6	jsr $d697	                jsr byte_to_ascii
.98ec		88		dey		                dey
.98ed		10 f7		bpl $98e6	                bpl -
.98ef		20 b5 91	jsr $91b5	                jsr w_space
.98f2						_pass:
.98f2		a0 00		ldy #$00	                ldy #0
.98f4						_bytes:
.98f4		98		tya		                tya
.98f5		29 07		and #$07	                and #7
.98f7		d0 03		bne $98fc	                bne +
.98f9		20 b5 91	jsr $91b5	                jsr w_space             ; extra space before bytes 0 and 8
.98fc						+
.98fc		b1 27		lda ($27),y	                lda (tmp2),y
.98fe		24 26		bit $26		                bit tmp1+1              ; which pass are we on?
.9900		30 08		bmi $990a	                bmi _ascii              ; bit 7 set on second pass
.9902		20 97 d6	jsr $d697	                jsr byte_to_ascii       ; show byte value
.9905		20 b5 91	jsr $91b5	                jsr w_space
.9908		80 0a		bra $9914	                bra _nextbyte
.990a						_ascii:
.990a		20 b1 d7	jsr $d7b1	                jsr is_printable        ; show ascii char
.990d		b0 02		bcs $9911	                bcs +
.990f		a9 2e		lda #$2e	                lda #'.'                ; use dot if not printable
.9911						+
.9911		20 93 86	jsr $8693	                jsr emit_a
.9914						_nextbyte:
.9914		c8		iny		                iny
.9915		c4 25		cpy $25		                cpy tmp1
.9917		d0 db		bne $98f4	                bne _bytes
.9919		06 26		asl $26		                asl tmp1+1              ; $40 -> $80 -> 0
.991b		f0 13		beq $9930	                beq +                   ; done both passes?
.991d		88		dey		                dey                     ; Y-1 is 0...15
.991e		98		tya		                tya
.991f		49 0f		eor #$0f	                eor #$f                 ; 15-(Y-1) is 16-Y
.9921		85 1e		sta $1e		                sta tmpdsp
.9923		0a		asl a		                asl a                   ; A is 2*(16-Y)
.9924		c9 10		cmp #$10	                cmp #16
.9926		65 1e		adc $1e		                adc tmpdsp              ; 3*(16-Y) + 1 if Y<9
.9928		20 7f a4	jsr $a47f	                jsr push_a_tos
.992b		20 be 91	jsr $91be	                jsr w_spaces
.992e		80 c2		bra $98f2	                bra _pass
.9930						+
.9930		a5 25		lda $25		                lda tmp1
.9932		20 7f a4	jsr $a47f	                jsr push_a_tos
.9935		20 1a a2	jsr $a21a	                jsr w_slash_string      ; ( addr n k -- addr+k n-k )
.9938		80 8a		bra $98c4	                bra _row                ; new row
.993a						_done:
.993a		e8		inx		                inx
.993b		e8		inx		                inx
.993c		e8		inx		                inx
.993d		e8		inx		                inx
.993e		60		rts		z_dump:         rts
.993f						xt_question:
.993f						w_question:
.993f		20 e9 87	jsr $87e9	                jsr w_fetch
.9942		20 f9 85	jsr $85f9	                jsr w_dot
.9945		60		rts		z_question:     rts
.9946						xt_see:
.9946						w_see:
.9946		20 24 8d	jsr $8d24	                jsr w_parse_name       ; ( addr u )
.9949		20 5d 9b	jsr $9b5d	                jsr w_find_name        ; ( nt | 0 )
.994c		b5 00		lda $00,x	                lda 0,x
.994e		15 01		ora $01,x	                ora 1,x
.9950		d0 05		bne $9957	                bne +
.9952		a9 05		lda #$05	                lda #err_noname
.9954		4c e0 d7	jmp $d7e0	                jmp error
.9957						+
.9957		20 ef 83	jsr $83ef	                jsr w_cr
.995a		a5 18		lda $18		                lda base
.995c		48		pha		                pha
.995d		20 f2 88	jsr $88f2	                jsr w_hex
.9960		a9 07		lda #$07	                lda #str_see_nt
.9962		20 06 d8	jsr $d806	                jsr print_string_no_lf
.9965		20 69 86	jsr $8669	                jsr w_dup              ; ( nt nt )
.9968		20 df 94	jsr $94df	                jsr w_u_dot
.996b		20 b5 91	jsr $91b5	                jsr w_space            ; ( nt )
.996e		20 69 86	jsr $8669	                jsr w_dup              ; ( nt nt )
.9971		20 b1 9c	jsr $9cb1	                jsr w_name_to_int      ; ( nt xt )
.9974		a9 08		lda #$08	                lda #str_see_xt
.9976		20 06 d8	jsr $d806	                jsr print_string_no_lf
.9979		20 69 86	jsr $8669	                jsr w_dup              ; ( nt xt xt )
.997c		20 df 94	jsr $94df	                jsr w_u_dot
.997f		20 ef 83	jsr $83ef	                jsr w_cr               ; ( nt xt )
.9982		20 db 8c	jsr $8cdb	                jsr w_over              ; ( nt xt nt )
.9985		20 bf 8c	jsr $8cbf	                jsr w_one_plus          ; ( nt xt nt+1 )
.9988		a1 00		lda ($00,x)	                lda (0,x)
.998a		95 00		sta $00,x	                sta 0,x                 ; stash status flag byte
.998c		74 01		stz $01,x	                stz 1,x                 ; placeholder for synthetic flags
.998e		48		pha		                pha                     ; save a copy of flags for later
.998f		29 0c		and #$0c	                and #ST                 ; calculate ST flag
.9991		c9 0c		cmp #$0c	                cmp #ST
.9993		f0 01		beq $9996	                beq +                   ; C=1 when ST set
.9995		18		clc		                clc
.9996						+
.9996		36 01		rol $01,x	                rol 1,x                 ; add to flag byte
.9998		20 db 8c	jsr $8cdb	                jsr w_over
.999b		20 6f 97	jsr $976f	                jsr has_uf_check        ; C=1 when UF set
.999e		36 01		rol $01,x	                rol 1,x                 ; add to flag byte
.99a0		a9 05		lda #$05	                lda #N_FLAGS            ; count off status byte flags
.99a2		85 23		sta $23		                sta tmptos
.99a4		a9 bc		lda #$bc	                lda #<see_flags_template
.99a6		85 29		sta $29		                sta tmp3                ; LSB
.99a8		a9 d3		lda #$d3	                lda #>see_flags_template
.99aa		85 2a		sta $2a		                sta tmp3+1              ; MSB
.99ac		a0 00		ldy #$00	                ldy #0                  ; index the string
.99ae						_loop:
.99ae		b1 29		lda ($29),y	                lda (tmp3),y            ; next char in template
.99b0		10 04		bpl $99b6	                bpl +                   ; end of string?
.99b2		a0 ff		ldy #$ff	                ldy #$ff                ; flag end of loop
.99b4		29 7f		and #$7f	                and #$7f                ; clear high bit of A to get last character
.99b6						+
.99b6		d0 16		bne $99ce	                bne _emit               ; flag placeholder?
.99b8		20 b5 91	jsr $91b5	                jsr w_space             ; no stack effect
.99bb		c6 23		dec $23		                dec tmptos
.99bd		30 04		bmi $99c3	                bmi _synthetic          ; more core status flags?
.99bf		56 00		lsr $00,x	                lsr 0,x                 ; shift next flag bit into carry
.99c1		80 02		bra $99c5	                bra +
.99c3						_synthetic:
.99c3		56 01		lsr $01,x	                lsr 1,x                 ; show synthetic flags after core ones
.99c5						+
.99c5		a9 30		lda #$30	                lda #'0'                ; convert C=0/1 into '0' or '1'
.99c7		69 00		adc #$00	                adc #0
.99c9		20 93 86	jsr $8693	                jsr emit_a              ; write the flag digit
.99cc		a9 20		lda #$20	                lda #' '                ; fall through and add trailing space
.99ce						_emit:
.99ce		20 93 86	jsr $8693	                jsr emit_a
.99d1		c8		iny		                iny
.99d2		d0 da		bne $99ae	                bne _loop
.99d4		20 ef 83	jsr $83ef	                jsr w_cr
.99d7		e8		inx		                inx
.99d8		e8		inx		                inx                     ; ( nt xt )
.99d9		a9 09		lda #$09	                lda #str_see_size
.99db		20 06 d8	jsr $d806	                jsr print_string_no_lf
.99de		20 1e 92	jsr $921e	                jsr w_swap              ; ( xt nt )
.99e1		20 53 9e	jsr $9e53	                jsr w_wordsize          ; ( xt u )
.99e4		20 69 86	jsr $8669	                jsr w_dup               ; ( xt u u )
.99e7		20 e5 84	jsr $84e5	                jsr w_decimal
.99ea		68		pla		                pla                     ; fetch flag byte we saved earlier
.99eb		29 10		and #$10	                and #HC                 ; does it have CFA?
.99ed		48		pha		                pha                     ; we'll need to check once more
.99ee		f0 0c		beq $99fc	                beq +
.99f0		a9 0a		lda #$0a	                lda #str_see_cfapfa
.99f2		20 06 d8	jsr $d806	                jsr print_string_no_lf  ; print "CFA: 3  PFA: "
.99f5		38		sec		                sec
.99f6		b5 00		lda $00,x	                lda 0,x                 ; reduce to u-3
.99f8		e9 03		sbc #$03	                sbc #3
.99fa		95 00		sta $00,x	                sta 0,x                 ; assume u < 256
.99fc						+
.99fc		20 df 94	jsr $94df	                jsr w_u_dot             ; print u (or u-3 for PFA)
.99ff		20 ef 83	jsr $83ef	                jsr w_cr
.9a02		20 9f 93	jsr $939f	                jsr w_two_dup           ; ( xt u xt u )
.9a05		20 f2 88	jsr $88f2	                jsr w_hex
.9a08		20 c4 98	jsr $98c4	                jsr w_dump
.9a0b		68		pla		                pla                     ; recover HC flag
.9a0c		f0 06		beq $9a14	                beq +
.9a0e		a9 03		lda #$03	                lda #3
.9a10		95 00		sta $00,x	                sta 0,x                 ; for CFA words, just show three bytes
.9a12		74 01		stz $01,x	                stz 1,x
.9a14						+
.9a14		20 88 a2	jsr $a288	                jsr w_disasm
.9a17		68		pla		                pla
.9a18		85 18		sta $18		                sta base
.9a1a		60		rts		z_see:          rts
.9a1b						xt_words:
.9a1b						w_words:
.9a1b		20 ef 83	jsr $83ef	                jsr w_cr
.9a1e		a9 00		lda #$00	                lda #0
.9a20		48		pha		                pha
.9a21		ca		dex		                dex                     ; Make room on the stack for
.9a22		ca		dex		                dex                     ; a dictionary pointer.
.9a23		64 29		stz $29		                stz tmp3                ; Start at the beginning of
.9a25						_wordlist_loop:
.9a25		a0 22		ldy #$22	                ldy #num_order_offset   ; Check against byte variable #ORDER.
.9a27		a5 29		lda $29		                lda tmp3
.9a29		d1 08		cmp ($08),y	                cmp (up),y              ; See if we are done.
.9a2b		d0 02		bne $9a2f	                bne _have_wordlist
.9a2d		80 45		bra $9a74	                bra _words_done
.9a2f						_have_wordlist:
.9a2f		18		clc		                clc                     ; Index into byte array SEARCH-ORDER.
.9a30		69 23		adc #$23	                adc #search_order_offset
.9a32		a8		tay		                tay
.9a33		b1 08		lda ($08),y	                lda (up),y              ; Get the index into array WORDLISTS
.9a35		0a		asl a		                asl                     ; Turn offset into cells offset.
.9a36		18		clc		                clc
.9a37		69 0a		adc #$0a	                adc #wordlists_offset
.9a39		a8		tay		                tay
.9a3a		b1 08		lda ($08),y	                lda (up),y              ; Save the DP for this wordlist
.9a3c		95 00		sta $00,x	                sta 0,x                 ; on the stack. ( nt )
.9a3e		c8		iny		                iny
.9a3f		b1 08		lda ($08),y	                lda (up),y
.9a41		95 01		sta $01,x	                sta 1,x
.9a43						_loop:
.9a43		20 69 86	jsr $8669	                jsr w_dup              ; ( nt nt )
.9a46		20 ce 9c	jsr $9cce	                jsr w_name_to_string   ; ( nt addr u )
.9a49		68		pla		                pla
.9a4a		18		clc		                clc
.9a4b		75 00		adc $00,x	                adc 0,x
.9a4d		1a		inc a		                ina                     ; don't forget the space between words
.9a4e		c9 4f		cmp #$4f	                cmp #MAX_LINE_LENGTH    ; usually 79
.9a50		90 06		bcc $9a58	                bcc +
.9a52		20 ef 83	jsr $83ef	                jsr w_cr
.9a55		b5 00		lda $00,x	                lda 0,x                 ; After going to next line, start
.9a57		1a		inc a		                ina                     ; with length of this word.
.9a58						+
.9a58		48		pha		                pha
.9a59		20 b4 94	jsr $94b4	                jsr w_type             ; ( nt )
.9a5c		a9 20		lda #$20	                lda #AscSP
.9a5e		20 93 86	jsr $8693	                jsr emit_a
.9a61		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; 1+
.9a64		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; 1+
.9a67		20 e9 87	jsr $87e9	                jsr w_fetch            ; @ ( nt+1 )
.9a6a		b5 00		lda $00,x	                lda 0,x
.9a6c		15 01		ora $01,x	                ora 1,x
.9a6e		d0 d3		bne $9a43	                bne _loop
.9a70		e6 29		inc $29		                inc tmp3
.9a72		80 b1		bra $9a25	                bra _wordlist_loop
.9a74						_words_done:
.9a74		68		pla		                pla                     ; dump counter
.9a75		e8		inx		                inx
.9a76		e8		inx		                inx
.9a77		60		rts		z_words:        rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/tali.asm

.9a78						xt_allow_native:
.9a78						w_allow_native:
.9a78		20 23 d7	jsr $d723	                jsr current_to_dp
.9a7b		a0 01		ldy #$01	                ldy #1          ; offset for header flag byte
.9a7d		b1 02		lda ($02),y	                lda (dp),y
.9a7f		29 f3		and #$f3	                and #$FF-NN-AN  ; AN and NN flag is clear.
.9a81		91 02		sta ($02),y	                sta (dp),y
.9a83						z_allow_native:
.9a83		60		rts		                rts
.9a84						xt_always_native:
.9a84						w_always_native:
.9a84		20 23 d7	jsr $d723	                jsr current_to_dp
.9a87		a0 01		ldy #$01	                ldy #1          ; offset for header flag byte
.9a89		b1 02		lda ($02),y	                lda (dp),y
.9a8b		09 04		ora #$04	                ora #AN         ; Make sure AN flag is set
.9a8d		29 f7		and #$f7	                and #$FF-NN     ; and NN flag is clear.
.9a8f		91 02		sta ($02),y	                sta (dp),y
.9a91						z_always_native:
.9a91		60		rts		                rts
.9a92						xt_bell:
.9a92						w_bell:
.9a92		a9 07		lda #$07	                lda #7          ; ASCII value for BELL (aka ctrl-G)
.9a94		20 93 86	jsr $8693	                jsr emit_a
.9a97		60		rts		z_bell:         rts
.9a98						xt_bounds:
.9a98		20 cf d7	jsr $d7cf	                jsr underflow_2
.9a9b						w_bounds:
.9a9b		18		clc		                clc
.9a9c		b5 00		lda $00,x	                lda 0,x                 ; LSB u
.9a9e		b4 02		ldy $02,x	                ldy 2,x                 ; LSB addr
.9aa0		75 02		adc $02,x	                adc 2,x
.9aa2		95 02		sta $02,x	                sta 2,x                 ; LSB addr+u
.9aa4		94 00		sty $00,x	                sty 0,x
.9aa6		b5 01		lda $01,x	                lda 1,x                 ; MSB u
.9aa8		b4 03		ldy $03,x	                ldy 3,x                 ; MSB addr
.9aaa		75 03		adc $03,x	                adc 3,x
.9aac		95 03		sta $03,x	                sta 3,x                 ; MSB addr+u
.9aae		94 01		sty $01,x	                sty 1,x
.9ab0		60		rts		z_bounds:       rts
.9ab1						xt_cleave:
.9ab1		20 cf d7	jsr $d7cf	                jsr underflow_2
.9ab4						w_cleave:
.9ab4		20 25 a1	jsr $a125	                jsr w_minus_leading    ; -LEADING ( addr u )
.9ab7		20 12 9c	jsr $9c12	                jsr w_input_to_r       ; save old imput state
.9aba		b5 00		lda $00,x	                lda 0,x         ; u is new ciblen
.9abc		85 0e		sta $0e		                sta ciblen
.9abe		b5 01		lda $01,x	                lda 1,x
.9ac0		85 0f		sta $0f		                sta ciblen+1
.9ac2		b5 02		lda $02,x	                lda 2,x         ; addr is new cib
.9ac4		85 0c		sta $0c		                sta cib
.9ac6		b5 03		lda $03,x	                lda 3,x
.9ac8		85 0d		sta $0d		                sta cib+1
.9aca		64 10		stz $10		                stz toin        ; >IN pointer is zero
.9acc		64 11		stz $11		                stz toin+1
.9ace		20 24 8d	jsr $8d24	                jsr w_parse_name       ; ( addr u addr-s u-s )
.9ad1		b5 00		lda $00,x	                lda 0,x
.9ad3		15 01		ora $01,x	                ora 1,x
.9ad5		f0 23		beq $9afa	                beq _done
.9ad7		b5 04		lda $04,x	                lda 4,x         ; LSB of original u
.9ad9		38		sec		                sec
.9ada		f5 00		sbc $00,x	                sbc 0,x
.9adc		95 04		sta $04,x	                sta 4,x
.9ade		b5 05		lda $05,x	                lda 5,x         ; MSB of original u
.9ae0		f5 01		sbc $01,x	                sbc 1,x
.9ae2		95 05		sta $05,x	                sta 5,x
.9ae4		b5 06		lda $06,x	                lda 6,x         ; LSB of original addr
.9ae6		18		clc		                clc
.9ae7		75 00		adc $00,x	                adc 0,x
.9ae9		95 06		sta $06,x	                sta 6,x
.9aeb		b5 07		lda $07,x	                lda 7,x         ; MSB of original addr
.9aed		75 01		adc $01,x	                adc 1,x
.9aef		95 07		sta $07,x	                sta 7,x
.9af1		20 70 94	jsr $9470	                jsr w_two_swap         ; ( addr-s u-s addr u )
.9af4		20 25 a1	jsr $a125	                jsr w_minus_leading
.9af7		20 70 94	jsr $9470	                jsr w_two_swap         ; ( addr u addr-s u-s )
.9afa						_done:
.9afa		20 1f 9e	jsr $9e1f	                jsr w_r_to_input
.9afd		60		rts		z_cleave:       rts
.9afe						xt_digit_question:
.9afe		20 ca d7	jsr $d7ca	                jsr underflow_1
.9b01						w_digit_question:
.9b01		ca		dex		                dex
.9b02		ca		dex		                dex
.9b03		74 00		stz $00,x	                stz 0,x                 ; default flag is failure
.9b05		74 01		stz $01,x	                stz 1,x
.9b07		74 03		stz $03,x	                stz 3,x                 ; paranoid
.9b09		b5 02		lda $02,x	                lda 2,x
.9b0b		c9 30		cmp #$30	                cmp #'0'
.9b0d		90 23		bcc $9b32	                bcc _done               ; failure flag already set
.9b0f		c9 3a		cmp #$3a	                cmp #'9'+1               ; this is actually ":"
.9b11		90 12		bcc $9b25	                bcc _checkbase
.9b13		c9 41		cmp #$41	                cmp #'A'
.9b15		90 1b		bcc $9b32	                bcc _done               ; failure flag is already set
.9b17		c9 61		cmp #$61	                cmp #'a'
.9b19		90 07		bcc $9b22	                bcc _case_done          ; not lower case, too low
.9b1b		c9 7b		cmp #$7b	                cmp #'z'+1
.9b1d		b0 03		bcs $9b22	                bcs _case_done          ; not lower case, too high
.9b1f		18		clc		                clc                     ; just right
.9b20		69 e0		adc #$e0	                adc #$E0                ; offset to upper case (wraps)
.9b22						_case_done:
.9b22		38		sec		                sec
.9b23		e9 07		sbc #$07	                sbc #7                  ; fall through to _checkbase
.9b25						_checkbase:
.9b25		38		sec		                sec
.9b26		e9 30		sbc #$30	                sbc #'0'                 ; this is also the conversion step
.9b28		c5 18		cmp $18		                cmp base
.9b2a		b0 06		bcs $9b32	                bcs _done               ; already have false flag
.9b2c		95 02		sta $02,x	                sta 2,x                 ; put number in NOS
.9b2e		d6 00		dec $00,x	                dec 0,x                 ; set success flag
.9b30		d6 01		dec $01,x	                dec 1,x
.9b32						_done:
.9b32						z_digit_question:
.9b32		60		rts		                rts
.9b33						xt_execute_parsing:
.9b33		20 d4 d7	jsr $d7d4	                jsr underflow_3
.9b36						w_execute_parsing:
.9b36		20 12 9c	jsr $9c12	                jsr w_input_to_r       ; save normal input for later
.9b39		20 f8 9c	jsr $9cf8	                jsr w_not_rot          ; -ROT ( xt addr u )
.9b3c		b5 00		lda $00,x	                lda 0,x                 ; TOS is new ciblen
.9b3e		85 0e		sta $0e		                sta ciblen
.9b40		b5 01		lda $01,x	                lda 1,x
.9b42		85 0f		sta $0f		                sta ciblen+1
.9b44		b5 02		lda $02,x	                lda 2,x                 ; NOS is new cib
.9b46		85 0c		sta $0c		                sta cib
.9b48		b5 03		lda $03,x	                lda 3,x
.9b4a		85 0d		sta $0d		                sta cib+1
.9b4c		64 10		stz $10		                stz toin                ; Set >IN to zero
.9b4e		64 11		stz $11		                stz toin+1
.9b50		20 97 93	jsr $9397	                jsr w_two_drop         ; 2DROP ( xt )
.9b53		20 d4 87	jsr $87d4	                jsr w_execute
.9b56		20 1f 9e	jsr $9e1f	                jsr w_r_to_input
.9b59						z_execute_parsing:
.9b59		60		rts		                rts
.9b5a						xt_find_name:
.9b5a		20 cf d7	jsr $d7cf	                jsr underflow_2
.9b5d						w_find_name:
.9b5d		b5 00		lda $00,x	                lda 0,x
.9b5f		15 01		ora $01,x	                ora 1,x
.9b61		d0 03		bne $9b66	                bne _nonempty
.9b63		4c a2 9b	jmp $9ba2	                jmp _fail_done
.9b66						_nonempty:
.9b66		ca		dex		                dex
.9b67		ca		dex		                dex
.9b68		a9 1f		lda #$1f	                lda #31
.9b6a		95 00		sta $00,x	                sta 0,x
.9b6c		74 01		stz $01,x	                stz 1,x
.9b6e		20 9f 8b	jsr $8b9f	                jsr w_min
.9b71		64 29		stz $29		                stz tmp3                ; Start at the beginning
.9b73						_wordlist_loop:
.9b73		a0 22		ldy #$22	                ldy #num_order_offset   ; Compare to byte variable #ORDER
.9b75		a5 29		lda $29		                lda tmp3
.9b77		d1 08		cmp ($08),y	                cmp (up),y              ; Check to see if we are done
.9b79		f0 27		beq $9ba2	                beq _fail_done
.9b7b		18		clc		                clc             ; SEARCH-ORDER is array of bytes.
.9b7c		69 23		adc #$23	                adc #search_order_offset
.9b7e		a8		tay		                tay
.9b7f		b1 08		lda ($08),y	                lda (up),y      ; Get the id byte, which is the offset
.9b81		0a		asl a		                asl                     ; Turn offset into cells offset.
.9b82		18		clc		                clc
.9b83		69 0a		adc #$0a	                adc #wordlists_offset
.9b85		a8		tay		                tay
.9b86		b1 08		lda ($08),y	                lda (up),y
.9b88		85 25		sta $25		                sta tmp1
.9b8a		c8		iny		                iny
.9b8b		b1 08		lda ($08),y	                lda (up),y
.9b8d		85 26		sta $26		                sta tmp1+1
.9b8f		20 ae d6	jsr $d6ae	                jsr find_header_name
.9b92		d0 04		bne $9b98	                bne _success
.9b94		e6 29		inc $29		                inc tmp3
.9b96		80 db		bra $9b73	                bra _wordlist_loop
.9b98						_success:
.9b98		a5 25		lda $25		                lda tmp1
.9b9a		95 02		sta $02,x	                sta 2,x
.9b9c		a5 26		lda $26		                lda tmp1+1
.9b9e		95 03		sta $03,x	                sta 3,x
.9ba0		80 04		bra $9ba6	                bra _done
.9ba2						_fail_done:
.9ba2		74 02		stz $02,x	                stz 2,x         ; failure flag
.9ba4		74 03		stz $03,x	                stz 3,x
.9ba6						_done:
.9ba6		e8		inx		                inx
.9ba7		e8		inx		                inx
.9ba8		60		rts		z_find_name:    rts
.9ba9						xt_havekey:
.9ba9						w_havekey:
.9ba9		ca		dex		                dex
.9baa		ca		dex		                dex
.9bab		a9 16		lda #$16	                lda #<havekey
.9bad		95 00		sta $00,x	                sta 0,x
.9baf		a9 00		lda #$00	                lda #>havekey
.9bb1		95 01		sta $01,x	                sta 1,x
.9bb3		60		rts		z_havekey:      rts
.9bb4						xt_hexstore:
.9bb4		20 d4 d7	jsr $d7d4	                jsr underflow_3
.9bb7						w_hexstore:
.9bb7		20 69 86	jsr $8669	                jsr w_dup              ; Save copy of original address
.9bba		20 91 94	jsr $9491	                jsr w_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
.9bbd						_loop:
.9bbd		b5 00		lda $00,x	                lda 0,x
.9bbf		15 01		ora $01,x	                ora 1,x
.9bc1		f0 36		beq $9bf9	                beq _done
.9bc3		20 b4 9a	jsr $9ab4	                jsr w_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.9bc6		20 91 94	jsr $9491	                jsr w_two_to_r
.9bc9		20 71 9e	jsr $9e71	                jsr w_zero
.9bcc		20 71 9e	jsr $9e71	                jsr w_zero
.9bcf		20 17 94	jsr $9417	                jsr w_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.9bd2		20 bc 92	jsr $92bc	                jsr w_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.9bd5		b5 00		lda $00,x	                lda 0,x
.9bd7		15 01		ora $01,x	                ora 1,x
.9bd9		d0 17		bne $9bf2	                bne _have_chars_left
.9bdb		20 97 93	jsr $9397	                jsr w_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
.9bde		20 bd 9e	jsr $9ebd	                jsr w_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
.9be1		20 9e 8e	jsr $8e9e	                jsr w_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.9be4		20 3d 83	jsr $833d	                jsr w_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
.9be7		20 b5 8e	jsr $8eb5	                jsr w_r_from           ; R>
.9bea		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; 1+
.9bed		20 59 93	jsr $9359	                jsr w_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.9bf0		80 cb		bra $9bbd	                bra _loop
.9bf2						_have_chars_left:
.9bf2		8a		txa		                txa
.9bf3		18		clc		                clc
.9bf4		69 08		adc #$08	                adc #8
.9bf6		aa		tax		                tax
.9bf7		80 c4		bra $9bbd	                bra _loop
.9bf9						_done:
.9bf9		e8		inx		                inx
.9bfa		e8		inx		                inx
.9bfb		e8		inx		                inx
.9bfc		e8		inx		                inx                     ; 2DROP
.9bfd		20 17 94	jsr $9417	                jsr w_two_r_from       ; ( addr2+n addr2 )
.9c00		20 1e 92	jsr $921e	                jsr w_swap
.9c03		20 bb 8b	jsr $8bbb	                jsr w_minus            ; ( n )
.9c06		60		rts		z_hexstore:     rts
.9c07						xt_input:
.9c07						w_input:
.9c07		ca		dex		                dex
.9c08		ca		dex		                dex
.9c09		a9 14		lda #$14	                lda #<input
.9c0b		95 00		sta $00,x	                sta 0,x
.9c0d		a9 00		lda #$00	                lda #>input
.9c0f		95 01		sta $01,x	                sta 1,x
.9c11		60		rts		z_input:        rts
.9c12						xt_input_to_r:
.9c12						w_input_to_r:
.9c12		68		pla		                pla
.9c13		85 25		sta $25		                sta tmp1
.9c15		68		pla		                pla
.9c16		85 26		sta $26		                sta tmp1+1
.9c18		a0 07		ldy #$07	                ldy #7
.9c1a						_loop:
.9c1a		b9 0a 00	lda $000a,y	                lda insrc,y     ; insrc+7 is toin+1
.9c1d		48		pha		                pha
.9c1e		88		dey		                dey
.9c1f		10 f9		bpl $9c1a	                bpl _loop
.9c21		a5 26		lda $26		                lda tmp1+1
.9c23		48		pha		                pha
.9c24		a5 25		lda $25		                lda tmp1
.9c26		48		pha		                pha
.9c27		60		rts		z_input_to_r: 	rts
.9c28						xt_int_to_name:
.9c28		20 ca d7	jsr $d7ca	                jsr underflow_1
.9c2b						w_int_to_name:
.9c2b		ca		dex		                dex
.9c2c		ca		dex		                dex
.9c2d		74 00		stz $00,x	                stz 0,x
.9c2f		74 01		stz $01,x	                stz 1,x
.9c31						_wordlist_loop:
.9c31		b5 00		lda $00,x	                lda 0,x                 ; Get the current wordlist.
.9c33		0a		asl a		                asl                     ; Turn offset into cells offset.
.9c34		18		clc		                clc
.9c35		69 0a		adc #$0a	                adc #wordlists_offset
.9c37		a8		tay		                tay
.9c38		b1 08		lda ($08),y	                lda (up),y              ; Save the DP for this wordlist
.9c3a		85 27		sta $27		                sta tmp2                ; into tmp2
.9c3c		c8		iny		                iny
.9c3d		b1 08		lda ($08),y	                lda (up),y
.9c3f		85 28		sta $28		                sta tmp2+1
.9c41		a5 27		lda $27		                lda tmp2
.9c43		05 28		ora $28		                ora tmp2+1
.9c45		f0 36		beq $9c7d	                beq _next_wordlist
.9c47		b5 02		lda $02,x	                lda 2,x         ; Target xt is now behind wordlist id.
.9c49		85 29		sta $29		                sta tmp3        ; Save target xt in tmp3
.9c4b		b5 03		lda $03,x	                lda 3,x
.9c4d		85 2a		sta $2a		                sta tmp3+1
.9c4f						_loop:
.9c4f		a0 04		ldy #$04	                ldy #4          ; xt is four bytes down
.9c51		b1 27		lda ($27),y	                lda (tmp2),y    ; LSB of xt of current nt
.9c53		c5 29		cmp $29		                cmp tmp3
.9c55		d0 07		bne $9c5e	                bne _no_match
.9c57		c8		iny		                iny
.9c58		b1 27		lda ($27),y	                lda (tmp2),y    ; MSB of xt of current nt
.9c5a		c5 2a		cmp $2a		                cmp tmp3+1
.9c5c		f0 30		beq $9c8e	                beq _match
.9c5e						_no_match:
.9c5e		18		clc		                clc
.9c5f		a5 27		lda $27		                lda tmp2
.9c61		69 02		adc #$02	                adc #2
.9c63		85 27		sta $27		                sta tmp2
.9c65		90 02		bcc $9c69	                bcc +
.9c67		e6 28		inc $28		                inc tmp2+1
.9c69						+
.9c69		a0 00		ldy #$00	                ldy #0
.9c6b		b1 27		lda ($27),y	                lda (tmp2),y
.9c6d		48		pha		                pha
.9c6e		c8		iny		                iny
.9c6f		11 27		ora ($27),y	                ora (tmp2),y
.9c71		f0 09		beq $9c7c	                beq _zero
.9c73		b1 27		lda ($27),y	                lda (tmp2),y
.9c75		85 28		sta $28		                sta tmp2+1
.9c77		68		pla		                pla
.9c78		85 27		sta $27		                sta tmp2
.9c7a		80 d3		bra $9c4f	                bra _loop
.9c7c						_zero:
.9c7c		68		pla		                pla             ; Leftover from above loop
.9c7d						_next_wordlist:
.9c7d		b5 00		lda $00,x	                lda 0,x
.9c7f		1a		inc a		                ina
.9c80		95 00		sta $00,x	                sta 0,x
.9c82		c9 0c		cmp #$0c	                cmp #max_wordlists
.9c84		d0 ab		bne $9c31	                bne _wordlist_loop
.9c86		e8		inx		                inx
.9c87		e8		inx		                inx
.9c88		74 00		stz $00,x	                stz 0,x
.9c8a		74 01		stz $01,x	                stz 1,x
.9c8c		80 0a		bra $9c98	                bra z_int_to_name
.9c8e						_match:
.9c8e		e8		inx		                inx
.9c8f		e8		inx		                inx
.9c90		a5 27		lda $27		                lda tmp2
.9c92		95 00		sta $00,x	                sta 0,x
.9c94		a5 28		lda $28		                lda tmp2+1
.9c96		95 01		sta $01,x	                sta 1,x
.9c98		60		rts		z_int_to_name:  rts
.9c99						xt_latestnt:
.9c99						w_latestnt:
.9c99		ca		dex		                dex
.9c9a		ca		dex		                dex
.9c9b		20 23 d7	jsr $d723	                jsr current_to_dp
.9c9e		a5 02		lda $02		                lda dp
.9ca0		95 00		sta $00,x	                sta 0,x
.9ca2		a5 03		lda $03		                lda dp+1
.9ca4		95 01		sta $01,x	                sta 1,x
.9ca6		60		rts		z_latestnt:     rts
.9ca7						xt_latestxt:
.9ca7						w_latestxt:
.9ca7		20 99 9c	jsr $9c99	                jsr w_latestnt         ; ( nt )
.9caa		20 b1 9c	jsr $9cb1	                jsr w_name_to_int      ; ( xt )
.9cad		60		rts		z_latestxt:     rts
.9cae						xt_name_to_int:
.9cae		20 ca d7	jsr $d7ca	                jsr underflow_1
.9cb1						w_name_to_int:
.9cb1		b5 00		lda $00,x	                lda 0,x
.9cb3		18		clc		                clc
.9cb4		69 04		adc #$04	                adc #4
.9cb6		85 29		sta $29		                sta tmp3
.9cb8		b5 01		lda $01,x	                lda 1,x
.9cba		90 01		bcc $9cbd	                bcc _done
.9cbc		1a		inc a		                ina
.9cbd						_done:
.9cbd		85 2a		sta $2a		                sta tmp3+1
.9cbf		a0 00		ldy #$00	                ldy #0
.9cc1		b1 29		lda ($29),y	                lda (tmp3),y
.9cc3		95 00		sta $00,x	                sta 0,x
.9cc5		c8		iny		                iny
.9cc6		b1 29		lda ($29),y	                lda (tmp3),y
.9cc8		95 01		sta $01,x	                sta 1,x
.9cca		60		rts		z_name_to_int:  rts
.9ccb						xt_name_to_string:
.9ccb		20 ca d7	jsr $d7ca	                jsr underflow_1
.9cce						w_name_to_string:
.9cce		ca		dex		                dex
.9ccf		ca		dex		                dex
.9cd0		a1 02		lda ($02,x)	                lda (2,x)
.9cd2		95 00		sta $00,x	                sta 0,x
.9cd4		74 01		stz $01,x	                stz 1,x
.9cd6		b5 02		lda $02,x	                lda 2,x         ; LSB
.9cd8		18		clc		                clc
.9cd9		69 08		adc #$08	                adc #8
.9cdb		95 02		sta $02,x	                sta 2,x
.9cdd		90 02		bcc $9ce1	                bcc z_name_to_string
.9cdf		f6 03		inc $03,x	                inc 3,x         ; MSB
.9ce1						z_name_to_string:
.9ce1		60		rts		                rts
.9ce2						xt_nc_limit:
.9ce2						w_nc_limit:
.9ce2		a9 00		lda #$00	                lda #nc_limit_offset
.9ce4		4c 88 d6	jmp $d688	                jmp push_upvar_tos
.9ce7						z_nc_limit:
.9ce7						xt_never_native:
.9ce7						w_never_native:
.9ce7		20 23 d7	jsr $d723	                jsr current_to_dp
.9cea		a0 01		ldy #$01	                ldy #1          ; offset for header flag byte
.9cec		b1 02		lda ($02),y	                lda (dp),y
.9cee		09 08		ora #$08	                ora #NN         ; Make sure NN flag is set
.9cf0		29 fb		and #$fb	                and #$FF-AN     ; and AN flag is clear.
.9cf2		91 02		sta ($02),y	                sta (dp),y
.9cf4						z_never_native:
.9cf4		60		rts		                rts
.9cf5						xt_not_rot:
.9cf5		20 d4 d7	jsr $d7d4	                jsr underflow_3
.9cf8						w_not_rot:
.9cf8		b4 01		ldy $01,x	                ldy 1,x         ; MSB first
.9cfa		b5 03		lda $03,x	                lda 3,x
.9cfc		95 01		sta $01,x	                sta 1,x
.9cfe		b5 05		lda $05,x	                lda 5,x
.9d00		95 03		sta $03,x	                sta 3,x
.9d02		94 05		sty $05,x	                sty 5,x
.9d04		b4 00		ldy $00,x	                ldy 0,x         ; LSB second
.9d06		b5 02		lda $02,x	                lda 2,x
.9d08		95 00		sta $00,x	                sta 0,x
.9d0a		b5 04		lda $04,x	                lda 4,x
.9d0c		95 02		sta $02,x	                sta 2,x
.9d0e		94 04		sty $04,x	                sty 4,x
.9d10		60		rts		z_not_rot:      rts
.9d11						xt_number:
.9d11		20 cf d7	jsr $d7cf	                jsr underflow_2
.9d14						w_number:
.9d14		64 1e		stz $1e		                stz tmpdsp      ; %n000 000d
.9d16		a5 18		lda $18		                lda base
.9d18		48		pha		                pha
.9d19		20 9f 93	jsr $939f	                jsr w_two_dup
.9d1c		a1 02		lda ($02,x)	                lda (2,x)
.9d1e		c9 23		cmp #$23	                cmp #'#'                ; decimal?
.9d20		d0 04		bne $9d26	                bne _check_hex
.9d22		a9 0a		lda #$0a	                lda #10
.9d24		80 42		bra $9d68	                bra _base_changed
.9d26						_check_hex:
.9d26		c9 24		cmp #$24	                cmp #'$'
.9d28		d0 04		bne $9d2e	                bne _check_binary
.9d2a		a9 10		lda #$10	                lda #16
.9d2c		80 3a		bra $9d68	                bra _base_changed
.9d2e						_check_binary:
.9d2e		c9 25		cmp #$25	                cmp #'%'
.9d30		d0 04		bne $9d36	                bne _check_char
.9d32		a9 02		lda #$02	                lda #2
.9d34		80 32		bra $9d68	                bra _base_changed
.9d36						_check_char:
.9d36		c9 27		cmp #$27	                cmp #"'"
.9d38		d0 3a		bne $9d74	                bne _check_minus
.9d3a		b5 00		lda $00,x	                lda 0,x         ; Get the length
.9d3c		c9 03		cmp #$03	                cmp #3
.9d3e		d0 26		bne $9d66	                bne _not_a_char
.9d40		b5 01		lda $01,x	                lda 1,x
.9d42		d0 22		bne $9d66	                bne _not_a_char ; No compare needed to check for non-zero.
.9d44		b5 02		lda $02,x	                lda 2,x         ; LSB of address
.9d46		18		clc		                clc
.9d47		69 02		adc #$02	                adc #2          ; length of string
.9d49		85 23		sta $23		                sta tmptos
.9d4b		b5 03		lda $03,x	                lda 3,x
.9d4d		69 00		adc #$00	                adc #0          ; only need carry
.9d4f		85 24		sta $24		                sta tmptos+1
.9d51		b2 23		lda ($23)	                lda (tmptos)
.9d53		c9 27		cmp #$27	                cmp #"'"
.9d55		d0 0f		bne $9d66	                bne _not_a_char
.9d57		f6 02		inc $02,x	                inc 2,x
.9d59		d0 02		bne $9d5d	                bne +
.9d5b		f6 03		inc $03,x	                inc 3,x
.9d5d						+
.9d5d		a1 02		lda ($02,x)	                lda (2,x)
.9d5f		95 02		sta $02,x	                sta 2,x
.9d61		74 03		stz $03,x	                stz 3,x
.9d63		4c e6 9d	jmp $9de6	                jmp _drop_original_string ; Single flag will drop the TOS for us.
.9d66						_not_a_char:
.9d66		80 5c		bra $9dc4	                bra _number_error
.9d68						_base_changed:
.9d68		85 18		sta $18		                sta base        ; Switch to the new base
.9d6a		f6 02		inc $02,x	                inc 2,x         ; start one character later
.9d6c		d0 02		bne $9d70	                bne +
.9d6e		f6 03		inc $03,x	                inc 3,x
.9d70						+
.9d70		d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.9d72		a1 02		lda ($02,x)	                lda (2,x)       ; Load the first char again
.9d74						_check_minus:
.9d74		c9 2d		cmp #$2d	                cmp #'-'
.9d76		d0 0c		bne $9d84	                bne _check_dot
.9d78		a9 80		lda #$80	                lda #$80
.9d7a		85 1e		sta $1e		                sta tmpdsp      ; set the sign bit
.9d7c		f6 02		inc $02,x	                inc 2,x         ; start one character later
.9d7e		d0 02		bne $9d82	                bne +
.9d80		f6 03		inc $03,x	                inc 3,x
.9d82						+
.9d82		d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.9d84						_check_dot:
.9d84		b5 02		lda $02,x	                lda 2,x         ; LSB of address
.9d86		18		clc		                clc
.9d87		75 00		adc $00,x	                adc 0,x         ; length of string
.9d89		85 23		sta $23		                sta tmptos
.9d8b		b5 03		lda $03,x	                lda 3,x
.9d8d		69 00		adc #$00	                adc #0          ; only need carry
.9d8f		85 24		sta $24		                sta tmptos+1
.9d91		a5 23		lda $23		                lda tmptos
.9d93		d0 02		bne $9d97	                bne +
.9d95		c6 24		dec $24		                dec tmptos+1
.9d97						+
.9d97		c6 23		dec $23		                dec tmptos
.9d99		b2 23		lda ($23)	                lda (tmptos)
.9d9b		c9 2e		cmp #$2e	                cmp #'.'
.9d9d		d0 04		bne $9da3	                bne _main
.9d9f		e6 1e		inc $1e		                inc tmpdsp
.9da1		d6 00		dec $00,x	                dec 0,x
.9da3						_main:
.9da3		ca		dex		                dex
.9da4		ca		dex		                dex
.9da5		ca		dex		                dex
.9da6		ca		dex		                dex
.9da7		b5 04		lda $04,x	                lda 4,x         ; LSB of length
.9da9		95 00		sta $00,x	                sta 0,x
.9dab		74 01		stz $01,x	                stz 1,x         ; MSB, max length 255 chars
.9dad		b5 06		lda $06,x	                lda 6,x         ; LSB of address
.9daf		95 02		sta $02,x	                sta 2,x
.9db1		b5 07		lda $07,x	                lda 7,x         ; MSB of address
.9db3		95 03		sta $03,x	                sta 3,x
.9db5		74 04		stz $04,x	                stz 4,x         ; clear space for ud
.9db7		74 05		stz $05,x	                stz 5,x
.9db9		74 06		stz $06,x	                stz 6,x
.9dbb		74 07		stz $07,x	                stz 7,x
.9dbd		20 bc 92	jsr $92bc	                jsr w_to_number        ; (ud addr u -- ud addr u )
.9dc0		b5 00		lda $00,x	                lda 0,x
.9dc2		f0 1e		beq $9de2	                beq _all_converted
.9dc4						_number_error:
.9dc4		20 97 93	jsr $9397	                jsr w_two_drop ; >NUMBER modified addr u
.9dc7		20 97 93	jsr $9397	                jsr w_two_drop ; ud   (partially converted number)
.9dca		a9 3e		lda #$3e	                lda #'>'
.9dcc		20 93 86	jsr $8693	                jsr emit_a
.9dcf		20 b4 94	jsr $94b4	                jsr w_type
.9dd2		a9 3c		lda #$3c	                lda #'<'
.9dd4		20 93 86	jsr $8693	                jsr emit_a
.9dd7		20 b5 91	jsr $91b5	                jsr w_space
.9dda		68		pla		                pla
.9ddb		85 18		sta $18		                sta base
.9ddd		a9 08		lda #$08	                lda #err_syntax
.9ddf		4c e0 d7	jmp $d7e0	                jmp error
.9de2						_all_converted:
.9de2		e8		inx		                inx ; Drop the current addr u
.9de3		e8		inx		                inx
.9de4		e8		inx		                inx
.9de5		e8		inx		                inx
.9de6						_drop_original_string:
.9de6		20 70 94	jsr $9470	                jsr w_two_swap  ; Drop the original addr u
.9de9		20 97 93	jsr $9397	                jsr w_two_drop  ; (was saved for unknown word error message)
.9dec		a5 1e		lda $1e		                lda tmpdsp      ; flag for double/minus
.9dee		a0 20		ldy #$20	                ldy #%00100000  ; status bit 5 for double(1) or single(0)
.9df0		0a		asl a		                asl             ; %n000 000d => %0000 00d0, C=n, Z=d
.9df1		f0 0a		beq $9dfd	                beq _single
.9df3		98		tya		                tya
.9df4		04 1c		tsb $1c		                tsb status
.9df6		90 0f		bcc $9e07	                bcc _done       ; no minus, all done
.9df8		20 e2 9e	jsr $9ee2	                jsr w_dnegate
.9dfb		80 0a		bra $9e07	                bra _done
.9dfd						_single:
.9dfd		e8		inx		                inx
.9dfe		e8		inx		                inx
.9dff		98		tya		                tya
.9e00		14 1c		trb $1c		                trb status
.9e02		90 03		bcc $9e07	                bcc _done       ; no minus, all done
.9e04		20 f9 8b	jsr $8bf9	                jsr w_negate
.9e07						_done:
.9e07		68		pla		                pla
.9e08		85 18		sta $18		                sta base
.9e0a		60		rts		z_number:       rts
.9e0b						xt_editor_wordlist:
.9e0b						xt_one:
.9e0b						w_editor_wordlist:
.9e0b						w_one:
.9e0b		ca		dex		                dex
.9e0c		ca		dex		                dex
.9e0d		a9 01		lda #$01	                lda #1
.9e0f		95 00		sta $00,x	                sta 0,x
.9e11		74 01		stz $01,x	                stz 1,x
.9e13						z_editor_wordlist:
.9e13						z_one:
.9e13		60		rts		                rts
.9e14						xt_output:
.9e14						w_output:
.9e14		ca		dex		                dex
.9e15		ca		dex		                dex
.9e16		a9 12		lda #$12	                lda #<output
.9e18		95 00		sta $00,x	                sta 0,x
.9e1a		a9 00		lda #$00	                lda #>output
.9e1c		95 01		sta $01,x	                sta 1,x
.9e1e		60		rts		z_output:       rts
.9e1f						xt_r_to_input:
.9e1f						w_r_to_input:
.9e1f		68		pla		                pla
.9e20		85 25		sta $25		                sta tmp1
.9e22		68		pla		                pla
.9e23		85 26		sta $26		                sta tmp1+1
.9e25		a0 00		ldy #$00	                ldy #0
.9e27						_loop:
.9e27		68		pla		                pla
.9e28		99 0a 00	sta $000a,y	                sta insrc,y
.9e2b		c8		iny		                iny
.9e2c		c0 08		cpy #$08	                cpy #8
.9e2e		d0 f7		bne $9e27	                bne _loop
.9e30		a5 26		lda $26		                lda tmp1+1
.9e32		48		pha		                pha
.9e33		a5 25		lda $25		                lda tmp1
.9e35		48		pha		                pha
.9e36		60		rts		z_r_to_input: 	rts
.9e37						xt_strip_underflow:
.9e37						w_strip_underflow:
.9e37		a9 02		lda #$02	                lda #uf_strip_offset
.9e39		4c 88 d6	jmp $d688	                jmp push_upvar_tos
.9e3c						z_strip_underflow:
.9e3c						xt_assembler_wordlist:
.9e3c						xt_two:
.9e3c						w_assembler_wordlist:
.9e3c						w_two:
.9e3c		ca		dex		                dex
.9e3d		ca		dex		                dex
.9e3e		a9 02		lda #$02	                lda #2
.9e40		95 00		sta $00,x	                sta 0,x
.9e42		74 01		stz $01,x	                stz 1,x
.9e44						z_assembler_wordlist:
.9e44		60		rts		z_two:          rts
.9e45						xt_useraddr:
.9e45						w_useraddr:
.9e45		ca		dex		                dex
.9e46		ca		dex		                dex
.9e47		a9 08		lda #$08	                lda #<up
.9e49		95 00		sta $00,x	                sta 0,x
.9e4b		a9 00		lda #$00	                lda #>up
.9e4d		95 01		sta $01,x	                sta 1,x
.9e4f		60		rts		z_useraddr:     rts
.9e50						xt_wordsize:
.9e50		20 ca d7	jsr $d7ca	                jsr underflow_1
.9e53						w_wordsize:
.9e53		b5 00		lda $00,x	                lda 0,x
.9e55		85 25		sta $25		                sta tmp1
.9e57		b5 01		lda $01,x	                lda 1,x
.9e59		85 26		sta $26		                sta tmp1+1
.9e5b		a0 06		ldy #$06	                ldy #6
.9e5d		b1 25		lda ($25),y	                lda (tmp1),y    ; LSB of z
.9e5f		88		dey		                dey
.9e60		88		dey		                dey
.9e61		38		sec		                sec
.9e62		f1 25		sbc ($25),y	                sbc (tmp1),y    ; LSB of xt
.9e64		95 00		sta $00,x	                sta 0,x
.9e66		a0 07		ldy #$07	                ldy #7
.9e68		b1 25		lda ($25),y	                lda (tmp1),y    ; MSB of z
.9e6a		88		dey		                dey
.9e6b		88		dey		                dey
.9e6c		f1 25		sbc ($25),y	                sbc (tmp1),y    ; MSB of xt
.9e6e		95 01		sta $01,x	                sta 1,x
.9e70		60		rts		z_wordsize:     rts
.9e71						xt_case:
.9e71						xt_false:
.9e71						xt_forth_wordlist:
.9e71						xt_zero:
.9e71						w_case:
.9e71						w_false:
.9e71						w_forth_wordlist:
.9e71						w_zero:
.9e71		ca		dex		                dex             ; push
.9e72		ca		dex		                dex
.9e73		74 00		stz $00,x	                stz 0,x
.9e75		74 01		stz $01,x	                stz 1,x
.9e77						z_case:
.9e77						z_false:
.9e77						z_forth_wordlist:
.9e77						z_zero:
.9e77		60		rts		                rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/double.asm

.9e78						xt_d_minus:
.9e78		20 d9 d7	jsr $d7d9	                jsr underflow_4 ; two double numbers
.9e7b						w_d_minus:
.9e7b		38		sec		                sec
.9e7c		b5 06		lda $06,x	                lda 6,x         ; LSB of lower word
.9e7e		f5 02		sbc $02,x	                sbc 2,x
.9e80		95 06		sta $06,x	                sta 6,x
.9e82		b5 07		lda $07,x	                lda 7,x         ; MSB of lower word
.9e84		f5 03		sbc $03,x	                sbc 3,x
.9e86		95 07		sta $07,x	                sta 7,x
.9e88		b5 04		lda $04,x	                lda 4,x         ; LSB of upper word
.9e8a		f5 00		sbc $00,x	                sbc 0,x
.9e8c		95 04		sta $04,x	                sta 4,x
.9e8e		b5 05		lda $05,x	                lda 5,x         ; MSB of upper word
.9e90		f5 01		sbc $01,x	                sbc 1,x
.9e92		95 05		sta $05,x	                sta 5,x
.9e94		e8		inx		                inx
.9e95		e8		inx		                inx
.9e96		e8		inx		                inx
.9e97		e8		inx		                inx
.9e98		60		rts		z_d_minus:      rts
.9e99						xt_d_plus:
.9e99		20 d9 d7	jsr $d7d9	                jsr underflow_4 ; two double numbers
.9e9c						w_d_plus:
.9e9c		18		clc		                clc
.9e9d		b5 02		lda $02,x	                lda 2,x         ; LSB of lower word
.9e9f		75 06		adc $06,x	                adc 6,x
.9ea1		95 06		sta $06,x	                sta 6,x
.9ea3		b5 03		lda $03,x	                lda 3,x         ; MSB of lower word
.9ea5		75 07		adc $07,x	                adc 7,x
.9ea7		95 07		sta $07,x	                sta 7,x
.9ea9		b5 00		lda $00,x	                lda 0,x         ; LSB of upper word
.9eab		75 04		adc $04,x	                adc 4,x
.9ead		95 04		sta $04,x	                sta 4,x
.9eaf		b5 01		lda $01,x	                lda 1,x         ; MSB of upper word
.9eb1		75 05		adc $05,x	                adc 5,x
.9eb3		95 05		sta $05,x	                sta 5,x
.9eb5		e8		inx		                inx
.9eb6		e8		inx		                inx
.9eb7		e8		inx		                inx
.9eb8		e8		inx		                inx
.9eb9		60		rts		z_d_plus:       rts
.9eba						xt_d_to_s:
.9eba		20 cf d7	jsr $d7cf	                jsr underflow_2
.9ebd						w_d_to_s:
.9ebd		e8		inx		                inx
.9ebe		e8		inx		                inx
.9ebf		60		rts		z_d_to_s:       rts
.9ec0						xt_dabs:
.9ec0		20 cf d7	jsr $d7cf	                jsr underflow_2 ; double number
.9ec3						w_dabs:
.9ec3		b5 01		lda $01,x	                lda 1,x         ; MSB of high cell
.9ec5		10 17		bpl $9ede	                bpl _done       ; positive, we get off light
.9ec7		a0 00		ldy #$00	                ldy #0
.9ec9		38		sec		                sec
.9eca		98		tya		                tya
.9ecb		f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.9ecd		95 02		sta $02,x	                sta 2,x
.9ecf		98		tya		                tya
.9ed0		f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.9ed2		95 03		sta $03,x	                sta 3,x
.9ed4		98		tya		                tya
.9ed5		f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.9ed7		95 00		sta $00,x	                sta 0,x
.9ed9		98		tya		                tya
.9eda		f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.9edc		95 01		sta $01,x	                sta 1,x
.9ede						_done:
.9ede		60		rts		z_dabs:         rts
.9edf						xt_dnegate:
.9edf		20 cf d7	jsr $d7cf	                jsr underflow_2 ; double number
.9ee2						w_dnegate:
.9ee2		a0 00		ldy #$00	     		ldy #0
.9ee4		38		sec		                sec
.9ee5		98		tya		                tya
.9ee6		f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.9ee8		95 02		sta $02,x	                sta 2,x
.9eea		98		tya		                tya
.9eeb		f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.9eed		95 03		sta $03,x	                sta 3,x
.9eef		98		tya		                tya
.9ef0		f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.9ef2		95 00		sta $00,x	                sta 0,x
.9ef4		98		tya		                tya
.9ef5		f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.9ef7		95 01		sta $01,x	                sta 1,x
.9ef9		60		rts		z_dnegate:      rts
.9efa						xt_d_dot:
.9efa		20 cf d7	jsr $d7cf	                jsr underflow_2
.9efd						w_d_dot:
.9efd		20 7d 93	jsr $937d	                jsr w_tuck
.9f00		20 c3 9e	jsr $9ec3	                jsr w_dabs
.9f03		20 ad 89	jsr $89ad	                jsr w_less_number_sign
.9f06		20 89 8c	jsr $8c89	                jsr w_number_sign_s
.9f09		20 5c 8f	jsr $8f5c	                jsr w_rot
.9f0c		20 38 91	jsr $9138	                jsr w_sign
.9f0f		20 67 8c	jsr $8c67	                jsr w_number_sign_greater
.9f12		20 b4 94	jsr $94b4	                jsr w_type
.9f15		20 b5 91	jsr $91b5	                jsr w_space
.9f18		60		rts		z_d_dot:        rts
.9f19						xt_d_dot_r:
.9f19		20 d4 d7	jsr $d7d4	                jsr underflow_3
.9f1c						w_d_dot_r:
.9f1c		20 59 93	jsr $9359	                jsr w_to_r
.9f1f		20 7d 93	jsr $937d	                jsr w_tuck
.9f22		20 c3 9e	jsr $9ec3	                jsr w_dabs
.9f25		20 ad 89	jsr $89ad	                jsr w_less_number_sign
.9f28		20 89 8c	jsr $8c89	                jsr w_number_sign_s
.9f2b		20 5c 8f	jsr $8f5c	                jsr w_rot
.9f2e		20 38 91	jsr $9138	                jsr w_sign
.9f31		20 67 8c	jsr $8c67	                jsr w_number_sign_greater
.9f34		20 b5 8e	jsr $8eb5	                jsr w_r_from
.9f37		20 db 8c	jsr $8cdb	                jsr w_over
.9f3a		20 bb 8b	jsr $8bbb	                jsr w_minus
.9f3d		20 be 91	jsr $91be	                jsr w_spaces
.9f40		20 b4 94	jsr $94b4	                jsr w_type
.9f43		60		rts		z_d_dot_r:      rts
.9f44						xt_m_star_slash:
.9f44		20 d9 d7	jsr $d7d9	                jsr underflow_4
.9f47						w_m_star_slash:
.9f47		20 9f 93	jsr $939f	                jsr w_two_dup
.9f4a		20 58 96	jsr $9658	                jsr w_xor
.9f4d		20 1e 92	jsr $921e	                jsr w_swap
.9f50		20 d5 80	jsr $80d5	                jsr w_abs
.9f53		20 59 93	jsr $9359	                jsr w_to_r
.9f56		20 1e 92	jsr $921e	                jsr w_swap
.9f59		20 d5 80	jsr $80d5	                jsr w_abs
.9f5c		20 59 93	jsr $9359	                jsr w_to_r
.9f5f		20 db 8c	jsr $8cdb	                jsr w_over
.9f62		20 58 96	jsr $9658	                jsr w_xor
.9f65		20 f8 9c	jsr $9cf8	                jsr w_not_rot          ; rot rot
.9f68		20 c3 9e	jsr $9ec3	                jsr w_dabs
.9f6b		20 1e 92	jsr $921e	                jsr w_swap
.9f6e		20 9e 8e	jsr $8e9e	                jsr w_r_fetch
.9f71		20 7b 95	jsr $957b	                jsr w_um_star
.9f74		20 5c 8f	jsr $8f5c	                jsr w_rot
.9f77		20 b5 8e	jsr $8eb5	                jsr w_r_from
.9f7a		20 7b 95	jsr $957b	                jsr w_um_star
.9f7d		20 5c 8f	jsr $8f5c	                jsr w_rot
.9f80		20 71 9e	jsr $9e71	                jsr w_zero
.9f83		20 9c 9e	jsr $9e9c	                jsr w_d_plus
.9f86		20 9e 8e	jsr $8e9e	                jsr w_r_fetch
.9f89		20 39 95	jsr $9539	                jsr w_um_slash_mod
.9f8c		20 f8 9c	jsr $9cf8	                jsr w_not_rot          ; rot rot
.9f8f		20 b5 8e	jsr $8eb5	                jsr w_r_from
.9f92		20 39 95	jsr $9539	                jsr w_um_slash_mod
.9f95		20 1e 92	jsr $921e	                jsr w_swap
.9f98		20 63 86	jsr $8663	                jsr w_drop
.9f9b		20 1e 92	jsr $921e	                jsr w_swap
.9f9e		20 5c 8f	jsr $8f5c	                jsr w_rot
.9fa1		e8		inx		                inx                     ; pre-drop TOS
.9fa2		e8		inx		                inx
.9fa3		b5 ff		lda $ff,x	                lda $ff,x               ; and check sign bit MSB
.9fa5		10 03		bpl $9faa	                bpl z_m_star_slash      ; ... 0< if ...
.9fa7		20 e2 9e	jsr $9ee2	                jsr w_dnegate
.9faa		60		rts		z_m_star_slash: rts
.9fab						xt_two_constant:
.9fab		20 cf d7	jsr $d7cf	                jsr underflow_2
.9fae						w_two_constant:
.9fae		a9 04		lda #$04	                lda #4
.9fb0		85 1e		sta $1e		                sta tmpdsp              ; PFA size 4
.9fb2		20 f9 83	jsr $83f9	                jsr create_dovar
.9fb5		20 b1 83	jsr $83b1	                jsr w_comma
.9fb8		20 b1 83	jsr $83b1	                jsr w_comma
.9fbb		20 c4 85	jsr $85c4	                jsr does_runtime    ; does> turns into these two routines.
.9fbe		20 61 d6	jsr $d661	                jsr dodoes
.9fc1		20 b7 93	jsr $93b7	                jsr w_two_fetch
.9fc4		60		rts		z_two_constant: rts
.9fc5						xt_two_literal:
.9fc5		20 cf d7	jsr $d7cf	                jsr underflow_2 ; double number
.9fc8						w_two_literal:
.9fc8		a9 14		lda #$14	                lda #2 * template_push_tos_size
.9fca		20 c5 97	jsr $97c5	                jsr check_nc_limit
.9fcd		b0 09		bcs $9fd8	                bcs _no_inline
.9fcf		20 1e 92	jsr $921e	                jsr w_swap
.9fd2		20 d3 89	jsr $89d3	                jsr w_literal
.9fd5		4c d3 89	jmp $89d3	                jmp w_literal
.9fd8						_no_inline:
.9fd8		a0 9f		ldy #$9f	                ldy #>two_literal_runtime
.9fda		a9 eb		lda #$eb	                lda #<two_literal_runtime
.9fdc		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.9fdf		a0 04		ldy #$04	                ldy #4
.9fe1						-
.9fe1		b5 00		lda $00,x	                lda 0,x         ; move four bytes from the stack to cp
.9fe3		20 bc 97	jsr $97bc	                jsr cmpl_a
.9fe6		e8		inx		                inx
.9fe7		88		dey		                dey
.9fe8		d0 f7		bne $9fe1	                bne -
.9fea		60		rts		z_two_literal:  rts
.9feb						two_literal_runtime:
.9feb		68		pla		                pla             ; LSB of address
.9fec		85 25		sta $25		                sta tmp1
.9fee		7a		ply		                ply             ; MSB of address
.9fef		84 26		sty $26		                sty tmp1+1
.9ff1		18		clc		                clc             ; add four to the return address
.9ff2		69 04		adc #$04	                adc #4
.9ff4		90 01		bcc $9ff7	                bcc +
.9ff6		c8		iny		                iny
.9ff7						+
.9ff7		5a		phy		                phy             ; and re-stack
.9ff8		48		pha		                pha
.9ff9		a0 04		ldy #$04	                ldy #4
.9ffb						-
.9ffb		b1 25		lda ($25),y	                lda (tmp1),y    ; copy trailing four bytes to the stack
.9ffd		ca		dex		                dex
.9ffe		95 00		sta $00,x	                sta 0,x
.a000		88		dey		                dey
.a001		d0 f8		bne $9ffb	                bne -
.a003		60		rts		                rts
.a004						xt_two_variable:
.a004						w_two_variable:
.a004		ca		dex		                dex
.a005		ca		dex		                dex
.a006		a9 04		lda #$04	                lda #4
.a008		95 00		sta $00,x	                sta 0,x
.a00a		74 01		stz $01,x	                stz 1,x
.a00c		85 1e		sta $1e		                sta tmpdsp              ; PFA size 4
.a00e		20 f9 83	jsr $83f9	                jsr create_dovar
.a011		20 2d 82	jsr $822d	                jsr w_allot
.a014		60		rts		z_two_variable: rts
.a015						xt_ud_dot:
.a015		20 cf d7	jsr $d7cf	                jsr underflow_2 ; double number
.a018						w_ud_dot:
.a018		20 ad 89	jsr $89ad	                jsr w_less_number_sign
.a01b		20 89 8c	jsr $8c89	                jsr w_number_sign_s
.a01e		20 67 8c	jsr $8c67	                jsr w_number_sign_greater
.a021		20 b4 94	jsr $94b4	                jsr w_type
.a024		20 b5 91	jsr $91b5	                jsr w_space
.a027		60		rts		z_ud_dot:        rts
.a028						xt_ud_dot_r:
.a028		20 d4 d7	jsr $d7d4	                jsr underflow_3
.a02b						w_ud_dot_r:
.a02b		20 59 93	jsr $9359	                jsr w_to_r
.a02e		20 ad 89	jsr $89ad	                jsr w_less_number_sign
.a031		20 89 8c	jsr $8c89	                jsr w_number_sign_s
.a034		20 67 8c	jsr $8c67	                jsr w_number_sign_greater
.a037		20 b5 8e	jsr $8eb5	                jsr w_r_from
.a03a		20 db 8c	jsr $8cdb	                jsr w_over
.a03d		20 bb 8b	jsr $8bbb	                jsr w_minus
.a040		20 be 91	jsr $91be	                jsr w_spaces
.a043		20 b4 94	jsr $94b4	                jsr w_type
.a046		60		rts		z_ud_dot_r:      rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/string.asm

.a047						xt_cmove:
.a047		20 d4 d7	jsr $d7d4	                jsr underflow_3
.a04a						w_cmove:
.a04a		b5 02		lda $02,x	                lda 2,x
.a04c		85 27		sta $27		                sta tmp2        ; use tmp2 because easier to remember
.a04e		b5 03		lda $03,x	                lda 3,x
.a050		85 28		sta $28		                sta tmp2+1
.a052		b5 04		lda $04,x	                lda 4,x
.a054		85 25		sta $25		                sta tmp1        ; use tmp1 because easier to remember
.a056		b5 05		lda $05,x	                lda 5,x
.a058		85 26		sta $26		                sta tmp1+1
.a05a		a0 00		ldy #$00	                ldy #0
.a05c		b5 01		lda $01,x	                lda 1,x         ; number of whole pages to move
.a05e		f0 0f		beq $a06f	                beq _dopartial
.a060						_page:
.a060		b1 25		lda ($25),y	                lda (tmp1),y
.a062		91 27		sta ($27),y	                sta (tmp2),y
.a064		c8		iny		                iny
.a065		d0 f9		bne $a060	                bne _page
.a067		e6 26		inc $26		                inc tmp1+1
.a069		e6 28		inc $28		                inc tmp2+1
.a06b		d6 01		dec $01,x	                dec 1,x
.a06d		d0 f1		bne $a060	                bne _page
.a06f						_dopartial:
.a06f		b5 00		lda $00,x	                lda 0,x         ; length of last page
.a071		f0 09		beq $a07c	                beq _done
.a073						_partial:
.a073		b1 25		lda ($25),y	                lda (tmp1),y
.a075		91 27		sta ($27),y	                sta (tmp2),y
.a077		c8		iny		                iny
.a078		d6 00		dec $00,x	                dec 0,x
.a07a		d0 f7		bne $a073	                bne _partial
.a07c						_done:
.a07c		8a		txa		                txa
.a07d		18		clc		                clc
.a07e		69 06		adc #$06	                adc #6
.a080		aa		tax		                tax
.a081		60		rts		z_cmove:        rts
.a082						xt_cmove_up:
.a082		20 d4 d7	jsr $d7d4	                jsr underflow_3
.a085						w_cmove_up:
.a085		b5 02		lda $02,x	                lda 2,x
.a087		85 27		sta $27		                sta tmp2        ; use tmp2 because easier to remember
.a089		b5 03		lda $03,x	                lda 3,x
.a08b		18		clc		                clc
.a08c		75 01		adc $01,x	                adc 1,x
.a08e		85 28		sta $28		                sta tmp2+1      ; point to last page of destination
.a090		b5 04		lda $04,x	                lda 4,x
.a092		85 25		sta $25		                sta tmp1        ; use tmp1 because easier to remember
.a094		b5 05		lda $05,x	                lda 5,x
.a096		18		clc		                clc
.a097		75 01		adc $01,x	                adc 1,x
.a099		85 26		sta $26		                sta tmp1+1      ; point to last page of source
.a09b		f6 01		inc $01,x	                inc 1,x         ; allows us to use bne with dec 1,x below
.a09d		b4 00		ldy $00,x	                ldy 0,x         ; length of last page
.a09f		f0 0e		beq $a0af	                beq _nopartial
.a0a1						_outerloop:
.a0a1		88		dey		                dey
.a0a2		f0 07		beq $a0ab	                beq _finishpage
.a0a4						_innerloop:
.a0a4		b1 25		lda ($25),y	                lda (tmp1),y
.a0a6		91 27		sta ($27),y	                sta (tmp2),y
.a0a8		88		dey		                dey
.a0a9		d0 f9		bne $a0a4	                bne _innerloop
.a0ab						_finishpage:
.a0ab		b2 25		lda ($25)	                lda (tmp1)      ; handle y = 0 separately
.a0ad		92 27		sta ($27)	                sta (tmp2)
.a0af						_nopartial:
.a0af		c6 26		dec $26		                dec tmp1+1      ; back up to previous pages
.a0b1		c6 28		dec $28		                dec tmp2+1
.a0b3		d6 01		dec $01,x	                dec 1,x
.a0b5		d0 ea		bne $a0a1	                bne _outerloop
.a0b7		8a		txa		                txa
.a0b8		18		clc		                clc
.a0b9		69 06		adc #$06	                adc #6
.a0bb		aa		tax		                tax
.a0bc		60		rts		z_cmove_up:     rts
.a0bd						xt_compare:
.a0bd		20 d9 d7	jsr $d7d9	                jsr underflow_4
.a0c0						w_compare:
.a0c0		b5 02		lda $02,x	                lda 2,x
.a0c2		85 27		sta $27		                sta tmp2
.a0c4		b5 03		lda $03,x	                lda 3,x
.a0c6		85 28		sta $28		                sta tmp2+1
.a0c8		b5 06		lda $06,x	                lda 6,x
.a0ca		85 25		sta $25		                sta tmp1
.a0cc		b5 07		lda $07,x	                lda 7,x
.a0ce		85 26		sta $26		                sta tmp1+1
.a0d0						_compare_loop:
.a0d0		b5 04		lda $04,x	                lda 4,x
.a0d2		15 05		ora $05,x	                ora 5,x
.a0d4		f0 2c		beq $a102	                beq _str1_done
.a0d6		b5 00		lda $00,x	                lda 0,x
.a0d8		15 01		ora $01,x	                ora 1,x
.a0da		f0 3a		beq $a116	                beq _greater    ; Str2 empty first
.a0dc		b2 25		lda ($25)	                lda (tmp1)
.a0de		d2 27		cmp ($27)	                cmp (tmp2)
.a0e0		90 26		bcc $a108	                bcc _less
.a0e2		d0 32		bne $a116	                bne _greater
.a0e4		e6 25		inc $25		                inc tmp1
.a0e6		d0 02		bne $a0ea	                bne +
.a0e8		e6 26		inc $26		                inc tmp1+1
.a0ea						+
.a0ea		e6 27		inc $27		                inc tmp2
.a0ec		d0 02		bne $a0f0	                bne +
.a0ee		e6 28		inc $28		                inc tmp2+1
.a0f0						+
.a0f0		b5 04		lda $04,x	                lda 4,x
.a0f2		d0 02		bne $a0f6	                bne +
.a0f4		d6 05		dec $05,x	                dec 5,x
.a0f6						+
.a0f6		d6 04		dec $04,x	                dec 4,x
.a0f8		b5 00		lda $00,x	                lda 0,x
.a0fa		d0 02		bne $a0fe	                bne +
.a0fc		d6 01		dec $01,x	                dec 1,x
.a0fe						+
.a0fe		d6 00		dec $00,x	                dec 0,x
.a100		80 ce		bra $a0d0	                bra _compare_loop
.a102						_str1_done:
.a102		b5 00		lda $00,x	                lda 0,x
.a104		15 01		ora $01,x	                ora 1,x
.a106		f0 08		beq $a110	                beq _equal      ; Both out of letters
.a108						_less:
.a108		a9 ff		lda #$ff	                lda #$FF
.a10a		95 06		sta $06,x	                sta 6,x
.a10c		95 07		sta $07,x	                sta 7,x
.a10e		80 0c		bra $a11c	                bra _done
.a110						_equal:
.a110		74 06		stz $06,x	                stz 6,x
.a112		74 07		stz $07,x	                stz 7,x
.a114		80 06		bra $a11c	                bra _done
.a116						_greater:
.a116		a9 01		lda #$01	                lda #1
.a118		95 06		sta $06,x	                sta 6,x
.a11a		74 07		stz $07,x	                stz 7,x
.a11c						_done:
.a11c		8a		txa		                txa
.a11d		18		clc		                clc
.a11e		69 06		adc #$06	                adc #6
.a120		aa		tax		                tax
.a121		60		rts		z_compare:      rts
.a122						xt_minus_leading:
.a122		20 cf d7	jsr $d7cf	                jsr underflow_2
.a125						w_minus_leading:
.a125						_loop:
.a125		b5 00		lda $00,x	                lda 0,x
.a127		15 01		ora $01,x	                ora 1,x
.a129		f0 0f		beq $a13a	                beq _done
.a12b		a1 02		lda ($02,x)	                lda (2,x)               ; get first character
.a12d		20 bd d7	jsr $d7bd	                jsr is_whitespace
.a130		90 08		bcc $a13a	                bcc _done
.a132		20 0b 9e	jsr $9e0b	                jsr w_one              ; ( addr u 1 )
.a135		20 1a a2	jsr $a21a	                jsr w_slash_string     ; ( addr+ u-1 )
.a138		80 eb		bra $a125	                bra _loop
.a13a						_done:
.a13a						z_minus_leading:
.a13a		60		rts		                rts
.a13b						xt_minus_trailing:
.a13b		20 cf d7	jsr $d7cf	                jsr underflow_2
.a13e						w_minus_trailing:
.a13e		b5 00		lda $00,x	                lda 0,x         ; LSB of n
.a140		15 01		ora $01,x	                ora 1,x         ; MSB of n
.a142		f0 33		beq $a177	                beq _done
.a144		18		clc		                clc
.a145		b5 02		lda $02,x	                lda 2,x         ; LSB of addr
.a147		75 00		adc $00,x	                adc 0,x
.a149		85 25		sta $25		                sta tmp1
.a14b		b5 03		lda $03,x	                lda 3,x         ; MSB of addr
.a14d		75 01		adc $01,x	                adc 1,x
.a14f		85 26		sta $26		                sta tmp1+1
.a151		a5 25		lda $25		                lda tmp1
.a153		d0 02		bne $a157	                bne +
.a155		c6 26		dec $26		                dec tmp1+1
.a157						+
.a157		c6 25		dec $25		                dec tmp1
.a159						_loop:
.a159		b2 25		lda ($25)	                lda (tmp1)
.a15b		c9 20		cmp #$20	                cmp #AscSP
.a15d		d0 18		bne $a177	                bne _done
.a15f		a5 25		lda $25		                lda tmp1
.a161		d0 02		bne $a165	                bne +
.a163		c6 26		dec $26		                dec tmp1+1
.a165						+
.a165		c6 25		dec $25		                dec tmp1
.a167		b5 00		lda $00,x	                lda 0,x
.a169		d0 02		bne $a16d	                bne +
.a16b		d6 01		dec $01,x	                dec 1,x
.a16d						+
.a16d		d6 00		dec $00,x	                dec 0,x
.a16f		b5 00		lda $00,x	                lda 0,x
.a171		15 01		ora $01,x	                ora 1,x
.a173		f0 02		beq $a177	                beq _done       ; Count has reached zero - we're done!
.a175		80 e2		bra $a159	                bra _loop
.a177						_done:
.a177						z_minus_trailing:
.a177		60		rts		                rts
.a178						xt_search:
.a178		20 d9 d7	jsr $d7d9	                jsr underflow_4
.a17b						w_search:
.a17b		b5 00		lda $00,x	                lda 0,x
.a17d		15 01		ora $01,x	                ora 1,x
.a17f		d0 0b		bne $a18c	                bne _start_search
.a181		e8		inx		                inx             ; Remove u2
.a182		e8		inx		                inx
.a183		a9 ff		lda #$ff	                lda #$FF        ; Turn addr2 into a true flag
.a185		95 00		sta $00,x	                sta 0,x
.a187		95 01		sta $01,x	                sta 1,x
.a189		4c 16 a2	jmp $a216	                jmp z_search
.a18c						_start_search:
.a18c		20 71 9e	jsr $9e71	                jsr w_zero
.a18f						_search_loop:
.a18f		18		clc		                clc
.a190		b5 00		lda $00,x	                lda 0,x
.a192		75 02		adc $02,x	                adc 2,x
.a194		85 25		sta $25		                sta tmp1
.a196		b5 01		lda $01,x	                lda 1,x
.a198		75 03		adc $03,x	                adc 3,x
.a19a		d5 07		cmp $07,x	                cmp 7,x
.a19c		90 12		bcc $a1b0	                bcc _init_comparison ; Obviously less
.a19e		d0 06		bne $a1a6	                bne _not_found
.a1a0		b5 06		lda $06,x	                lda 6,x
.a1a2		c5 25		cmp $25		                cmp tmp1
.a1a4		b0 0a		bcs $a1b0	                bcs _init_comparison
.a1a6						_not_found:
.a1a6		e8		inx		                inx             ; Remove offset
.a1a7		e8		inx		                inx
.a1a8		e8		inx		                inx             ; Remove u2
.a1a9		e8		inx		                inx
.a1aa		74 00		stz $00,x	                stz 0,x         ; Turn addr2 into a false flag
.a1ac		74 01		stz $01,x	                stz 1,x
.a1ae		80 66		bra $a216	                bra z_search
.a1b0						_init_comparison:
.a1b0		18		clc		                clc
.a1b1		b5 08		lda $08,x	                lda 8,x
.a1b3		75 00		adc $00,x	                adc 0,x
.a1b5		85 25		sta $25		                sta tmp1
.a1b7		b5 09		lda $09,x	                lda 9,x
.a1b9		75 01		adc $01,x	                adc 1,x
.a1bb		85 26		sta $26		                sta tmp1+1
.a1bd		b5 04		lda $04,x	                lda 4,x
.a1bf		85 27		sta $27		                sta tmp2
.a1c1		b5 05		lda $05,x	                lda 5,x
.a1c3		85 28		sta $28		                sta tmp2+1
.a1c5		b5 02		lda $02,x	                lda 2,x
.a1c7		85 29		sta $29		                sta tmp3
.a1c9		b5 03		lda $03,x	                lda 3,x
.a1cb		85 2a		sta $2a		                sta tmp3+1
.a1cd						_comparison_loop:
.a1cd		b2 25		lda ($25)	                lda (tmp1)
.a1cf		d2 27		cmp ($27)	                cmp (tmp2)
.a1d1		f0 05		beq $a1d8	                beq _letters_match
.a1d3		20 bf 8c	jsr $8cbf	                jsr w_one_plus
.a1d6		80 b7		bra $a18f	                bra _search_loop
.a1d8						_letters_match:
.a1d8		e6 25		inc $25		                inc tmp1
.a1da		d0 02		bne $a1de	                bne +
.a1dc		e6 26		inc $26		                inc tmp1+1
.a1de						+
.a1de		e6 27		inc $27		                inc tmp2
.a1e0		d0 02		bne $a1e4	                bne +
.a1e2		e6 28		inc $28		                inc tmp2+1
.a1e4						+
.a1e4		a5 29		lda $29		                lda tmp3
.a1e6		d0 02		bne $a1ea	                bne +
.a1e8		c6 2a		dec $2a		                dec tmp3+1
.a1ea						+
.a1ea		c6 29		dec $29		                dec tmp3
.a1ec		a5 29		lda $29		                lda tmp3
.a1ee		05 2a		ora $2a		                ora tmp3+1
.a1f0		d0 db		bne $a1cd	                bne _comparison_loop ; Check the next letter
.a1f2		18		clc		                clc
.a1f3		b5 00		lda $00,x	                lda 0,x
.a1f5		75 08		adc $08,x	                adc 8,x
.a1f7		95 08		sta $08,x	                sta 8,x
.a1f9		b5 01		lda $01,x	                lda 1,x
.a1fb		75 09		adc $09,x	                adc 9,x
.a1fd		95 09		sta $09,x	                sta 9,x
.a1ff		38		sec		                sec
.a200		b5 06		lda $06,x	                lda 6,x
.a202		f5 00		sbc $00,x	                sbc 0,x
.a204		95 06		sta $06,x	                sta 6,x
.a206		b5 07		lda $07,x	                lda 7,x
.a208		f5 01		sbc $01,x	                sbc 1,x
.a20a		95 07		sta $07,x	                sta 7,x
.a20c		e8		inx		                inx             ; drop offset
.a20d		e8		inx		                inx
.a20e		e8		inx		                inx             ; drop u2
.a20f		e8		inx		                inx
.a210		a9 ff		lda #$ff	                lda #$FF
.a212		95 00		sta $00,x	                sta 0,x         ; Turn addr2 into a true flag.
.a214		95 01		sta $01,x	                sta 1,x
.a216		60		rts		z_search:       rts
.a217						xt_slash_string:
.a217		20 d4 d7	jsr $d7d4	                jsr underflow_3
.a21a						w_slash_string:
.a21a		18		clc		                clc             ; 3OS+TOS
.a21b		b5 00		lda $00,x	                lda 0,x
.a21d		75 04		adc $04,x	                adc 4,x
.a21f		95 04		sta $04,x	                sta 4,x
.a221		b5 01		lda $01,x	                lda 1,x
.a223		75 05		adc $05,x	                adc 5,x
.a225		95 05		sta $05,x	                sta 5,x
.a227		38		sec		                sec             ; NOS-TOS
.a228		b5 02		lda $02,x	                lda 2,x
.a22a		f5 00		sbc $00,x	                sbc 0,x
.a22c		95 02		sta $02,x	                sta 2,x
.a22e		b5 03		lda $03,x	                lda 3,x
.a230		f5 01		sbc $01,x	                sbc 1,x
.a232		95 03		sta $03,x	                sta 3,x
.a234		e8		inx		                inx
.a235		e8		inx		                inx
.a236		60		rts		z_slash_string: rts
.a237						xt_sliteral:
.a237		20 cf d7	jsr $d7cf	                jsr underflow_2
.a23a						w_sliteral:
.a23a		a0 a2		ldy #$a2	                ldy #>sliteral_runtime
.a23c		a9 58		lda #$58	                lda #<sliteral_runtime
.a23e		20 b1 97	jsr $97b1	                jsr cmpl_subroutine     ; jsr sliteral_runtime
.a241		b5 00		lda $00,x	                lda 0,x
.a243		b4 01		ldy $01,x	                ldy 1,x
.a245		20 b8 97	jsr $97b8	                jsr cmpl_word           ; .word u
.a248		20 e7 88	jsr $88e7	                jsr w_here
.a24b		20 1e 92	jsr $921e	                jsr w_swap
.a24e		20 69 86	jsr $8669	                jsr w_dup               ; allocate space for the string
.a251		20 2d 82	jsr $822d	                jsr w_allot
.a254		20 d7 8b	jsr $8bd7	                jsr w_move              ; .text < u bytes >
.a257		60		rts		z_sliteral:     rts
.a258						sliteral_runtime:
.a258		ca		dex		                dex             ; make space on the stack
.a259		ca		dex		                dex
.a25a		ca		dex		                dex
.a25b		ca		dex		                dex
.a25c		18		clc		                clc
.a25d		68		pla		                pla             ; LSB of return address
.a25e		85 25		sta $25		                sta tmp1
.a260		69 03		adc #$03	                adc #3          ; calculate string offset
.a262		95 02		sta $02,x	                sta 2,x         ; LSB of string address
.a264		7a		ply		                ply             ; MSB of address
.a265		84 26		sty $26		                sty tmp1+1
.a267		90 01		bcc $a26a	                bcc +
.a269		c8		iny		                iny
.a26a						+
.a26a		94 03		sty $03,x	                sty 3,x         ; MSB of string address
.a26c		a0 02		ldy #$02	                ldy #2          ; copy u to TOS
.a26e		b1 25		lda ($25),y	                lda (tmp1),y
.a270		95 01		sta $01,x	                sta 1,x         ; MSB of u
.a272		88		dey		                dey
.a273		b1 25		lda ($25),y	                lda (tmp1),y
.a275		95 00		sta $00,x	                sta 0,x         ; LSB of u
.a277		18		clc		                clc             ; A still has LSB of u
.a278		75 02		adc $02,x	                adc 2,x         ; LSB of continuation address
.a27a		85 25		sta $25		                sta tmp1
.a27c		b5 01		lda $01,x	                lda 1,x
.a27e		75 03		adc $03,x	                adc 3,x
.a280		85 26		sta $26		                sta tmp1+1
.a282		6c 25 00	jmp ($0025)	                jmp (tmp1)

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/disasm.asm

.a285						xt_disasm:
.a285		20 cf d7	jsr $d7cf	                jsr underflow_2
.a288						w_disasm:
.a288		20 8c a2	jsr $a28c	                jsr disassembler
.a28b		60		rts		z_disasm:       rts
.a28c						disassembler:
.a28c		20 ef 83	jsr $83ef	                jsr w_cr       ; ( addr u )
.a28f						_byte_loop:
.a28f		20 db 8c	jsr $8cdb	                jsr w_over     ; ( addr u addr )
.a292		20 df 94	jsr $94df	                jsr w_u_dot    ; ( addr u )
.a295		20 b5 91	jsr $91b5	                jsr w_space
.a298		a9 eb		lda #$eb	                lda #<oc_index_table
.a29a		85 27		sta $27		                sta tmp2
.a29c		a9 b3		lda #$b3	                lda #>oc_index_table
.a29e		85 28		sta $28		                sta tmp2+1
.a2a0		a1 02		lda ($02,x)	                lda (2,x)       ; get opcode that addr points to
.a2a2		85 2d		sta $2d		                sta scratch     ; Save opcode
.a2a4		0a		asl a		                asl             ; multiply by two for offset
.a2a5		90 02		bcc $a2a9	                bcc +
.a2a7		e6 28		inc $28		                inc tmp2+1      ; we're on second page
.a2a9						+
.a2a9		a8		tay		                tay             ; use Y as the index
.a2aa		b1 27		lda ($27),y	                lda (tmp2),y    ; LSB
.a2ac		85 29		sta $29		                sta tmp3
.a2ae		48		pha		                pha
.a2af		c8		iny		                iny
.a2b0		b1 27		lda ($27),y	                lda (tmp2),y    ; MSB
.a2b2		85 2a		sta $2a		                sta tmp3+1
.a2b4		48		pha		                pha
.a2b5		b2 29		lda ($29)	                lda (tmp3)
.a2b7		a8		tay		                tay                     ; save copy of lengths byte
.a2b8		10 2f		bpl $a2e9	                bpl _no_operand         ; bit 7 clear, single-byte instruction
.a2ba		20 0b 9e	jsr $9e0b	                jsr w_one
.a2bd		20 1a a2	jsr $a21a	                jsr w_slash_string
.a2c0		20 71 9e	jsr $9e71	                jsr w_zero             ; ( addr+1 u-1 0 ) ZERO does not use Y
.a2c3		a1 04		lda ($04,x)	                lda (4,x)
.a2c5		95 00		sta $00,x	                sta 0,x                 ; LSB of operand ( addr+1 u-1 LSB )
.a2c7		85 2e		sta $2e		                sta scratch+1           ; Save a copy in the scratch buffer
.a2c9		98		tya		                tya                     ; retrieve copy of lengths byte
.a2ca		2a		rol a		                rol                     ; shift bit 6 to bit 7
.a2cb		10 12		bpl $a2df	                bpl _print_operand
.a2cd		20 f8 9c	jsr $9cf8	                jsr w_not_rot           ; ( LSB addr u )
.a2d0		20 0b 9e	jsr $9e0b	                jsr w_one
.a2d3		20 1a a2	jsr $a21a	                jsr w_slash_string
.a2d6		20 5c 8f	jsr $8f5c	                jsr w_rot               ; ( addr+2 u-2 LSB )
.a2d9		a1 04		lda ($04,x)	                lda (4,x)
.a2db		95 01		sta $01,x	                sta 1,x                 ; MSB of operand ( addr+2 u-2 opr )
.a2dd		85 2f		sta $2f		                sta scratch+2           ; Save a copy in the scratch buffer
.a2df						_print_operand:
.a2df		a9 05		lda #$05	                lda #5
.a2e1		20 7f a4	jsr $a47f	                jsr push_a_tos               ; ( addr+n u-n opr 5 )
.a2e4		20 eb 94	jsr $94eb	                jsr w_u_dot_r           ; U.R ( addr+n u-n )
.a2e7		80 08		bra $a2f1	                bra _print_mnemonic
.a2e9						_no_operand:
.a2e9		a9 05		lda #$05	                lda #5
.a2eb		20 7f a4	jsr $a47f	                jsr push_a_tos               ; ( addr u 5 )
.a2ee		20 be 91	jsr $91be	                jsr w_spaces            ; ( addr u )
.a2f1						_print_mnemonic:
.a2f1		20 b5 91	jsr $91b5	                jsr w_space
.a2f4		ca		dex		                dex
.a2f5		ca		dex		                dex                     ; ( addr u ? )
.a2f6		68		pla		                pla                     ; MSB
.a2f7		95 01		sta $01,x	                sta 1,x                 ; ( addr u MSB )
.a2f9		68		pla		                pla                     ; LSB
.a2fa		95 00		sta $00,x	                sta 0,x                 ; ( addr u addr-o )
.a2fc		20 de 83	jsr $83de	                jsr w_count            ; ( addr u addr-o u-o )
.a2ff		74 01		stz $01,x	                stz 1,x                 ; paranoid
.a301		b5 00		lda $00,x	                lda 0,x
.a303		29 07		and #$07	                and #%00000111          ; ( addr u addr-o u-o )
.a305		95 00		sta $00,x	                sta 0,x
.a307		20 b4 94	jsr $94b4	                jsr w_type             ; ( addr u )
.a30a		a5 2d		lda $2d		                lda scratch
.a30c		c9 20		cmp #$20	                cmp #OpJSR
.a30e		d0 12		bne $a322	                bne _not_jsr
.a310		a9 05		lda #$05	                lda #5
.a312		20 7f a4	jsr $a47f	                jsr push_a_tos
.a315		20 be 91	jsr $91be	                jsr w_spaces
.a318		20 ac a3	jsr $a3ac	                jsr disasm_special
.a31b		b0 39		bcs $a356	                bcs _printing_done
.a31d		20 6f a3	jsr $a36f	                jsr disasm_jsr
.a320		b0 34		bcs $a356	                bcs _printing_done
.a322						_not_jsr:
.a322		c9 80		cmp #$80	                cmp #OpBRA            ; is it bra?
.a324		f0 06		beq $a32c	                beq _is_rel
.a326		29 1f		and #$1f	                and #$1F
.a328		49 10		eor #$10	                eor #$10            ; do bottom five bits match xxx10000 ?
.a32a		d0 2a		bne $a356	                bne _printing_done
.a32c						_is_rel:
.a32c		a0 76		ldy #$76	                ldy #'v'            ; we'll indicate branch forward or back with v or ^
.a32e		a5 2e		lda $2e		                lda scratch+1
.a330		20 7f a4	jsr $a47f	                jsr push_a_tos
.a333		10 04		bpl $a339	                bpl +
.a335		d6 01		dec $01,x	                dec 1,x             ; for negative offsets extend the sign bit so add works out
.a337		a0 5e		ldy #$5e	                ldy #'^'            ; it's a backward branch
.a339		38		sec		+               sec                 ; start counting from address after opcode
.a33a		75 04		adc $04,x	                adc 4,x
.a33c		95 00		sta $00,x	                sta 0,x
.a33e		b5 01		lda $01,x	                lda 1,x
.a340		75 05		adc $05,x	                adc 5,x
.a342		95 01		sta $01,x	                sta 1,x
.a344		5a		phy		                phy                 ; save the direction indicator
.a345		a9 09		lda #$09	                lda #9
.a347		20 7f a4	jsr $a47f	                jsr push_a_tos
.a34a		20 eb 94	jsr $94eb	                jsr w_u_dot_r      ; print the destination with 5 leading spaces
.a34d		a9 20		lda #$20	                lda #AscSP          ; print space and branch direction indicator
.a34f		20 93 86	jsr $8693	                jsr emit_a
.a352		68		pla		                pla
.a353		20 93 86	jsr $8693	                jsr emit_a
.a356						_printing_done:
.a356		20 ef 83	jsr $83ef	                jsr w_cr
.a359		20 0b 9e	jsr $9e0b	                jsr w_one
.a35c		20 1a a2	jsr $a21a	                jsr w_slash_string      ; ( addr u -- addr+1 u-1 )
.a35f		b5 00		lda $00,x	                lda 0,x                 ; All done?
.a361		15 01		ora $01,x	                ora 1,x
.a363		f0 07		beq $a36c	                beq _done
.a365		b5 01		lda $01,x	                lda 1,x                 ; Catch mid-instruction ranges
.a367		30 03		bmi $a36c	                bmi _done
.a369		4c 8f a2	jmp $a28f	                jmp _byte_loop          ; out of range for BRA
.a36c						_done:
.a36c		4c 97 93	jmp $9397	                jmp w_two_drop         ; JSR/RTS
.a36f						disasm_jsr:
.a36f		ca		dex		                dex
.a370		ca		dex		                dex
.a371		a5 2e		lda $2e		                lda scratch+1
.a373		95 00		sta $00,x	                sta 0,x
.a375		a5 2f		lda $2f		                lda scratch+2
.a377		95 01		sta $01,x	                sta 1,x
.a379		20 2b 9c	jsr $9c2b	                jsr w_int_to_name
.a37c		b5 00		lda $00,x	                lda 0,x
.a37e		15 01		ora $01,x	                ora 1,x
.a380		d0 1e		bne $a3a0	                bne _found_nt
.a382		a5 2e		lda $2e		                lda scratch+1
.a384		38		sec		                sec
.a385		e9 03		sbc #$03	                sbc #3         ; Subtract 3 this time.
.a387		95 00		sta $00,x	                sta 0,x
.a389		a5 2f		lda $2f		                lda scratch+2
.a38b		e9 00		sbc #$00	                sbc #0         ; Subtract the carry if needed.
.a38d		95 01		sta $01,x	                sta 1,x
.a38f		20 69 86	jsr $8669	                jsr w_dup
.a392		20 6f 97	jsr $976f	                jsr has_uf_check
.a395		90 11		bcc $a3a8	                bcc _no_nt
.a397		20 2b 9c	jsr $9c2b	                jsr w_int_to_name     ; Try looking again
.a39a		b5 00		lda $00,x	                lda 0,x
.a39c		15 01		ora $01,x	                ora 1,x
.a39e		f0 08		beq $a3a8	                beq _no_nt
.a3a0						_found_nt:
.a3a0		20 ce 9c	jsr $9cce	                jsr w_name_to_string
.a3a3		20 b4 94	jsr $94b4	                jsr w_type
.a3a6		38		sec		                sec
.a3a7		60		rts		                rts
.a3a8						_no_nt:
.a3a8		e8		inx		                inx
.a3a9		e8		inx		                inx
.a3aa		18		clc		                clc
.a3ab		60		rts		                rts
.a3ac						disasm_special:
.a3ac		a0 2c		ldy #$2c	                ldy #(_end_handlers - _special_handlers - 4)
.a3ae		b9 4f a4	lda $a44f,y	_check:         lda _special_handlers,y
.a3b1		c5 2e		cmp $2e		                cmp scratch+1
.a3b3		d0 07		bne $a3bc	                bne _next
.a3b5		b9 50 a4	lda $a450,y	                lda _special_handlers+1,y
.a3b8		c5 2f		cmp $2f		                cmp scratch+2
.a3ba		f0 08		beq $a3c4	                beq _found_handler
.a3bc		88		dey		_next:          dey
.a3bd		88		dey		                dey
.a3be		88		dey		                dey
.a3bf		88		dey		                dey
.a3c0		10 ec		bpl $a3ae	                bpl _check
.a3c2		18		clc		                clc
.a3c3		60		rts		                rts
.a3c4						_found_handler:
.a3c4		84 32		sty $32		                sty scratch+5               ; store the offset for later
.a3c6		b9 52 a4	lda $a452,y	                lda _special_handlers+3,y   ; payload + prefix
.a3c9		48		pha		                pha                         ; stash a copy for payload later
.a3ca		4a		lsr a		                lsr
.a3cb		4a		lsr a		                lsr
.a3cc		f0 06		beq $a3d4	                beq _no_prefix
.a3ce		18		clc		                clc
.a3cf		69 20		adc #$20	                adc #32
.a3d1		20 93 86	jsr $8693	                jsr emit_a                  ; print the char stored as (ch - 32) << 2
.a3d4						_no_prefix:
.a3d4		b9 51 a4	lda $a451,y	                lda _special_handlers+2,y   ; string index
.a3d7		20 06 d8	jsr $d806	                jsr print_string_no_lf
.a3da		68		pla		                pla
.a3db		29 03		and #$03	                and #3                      ; payload is 0, 1 or 2 words
.a3dd		f0 4b		beq $a42a	                beq _done
.a3df		c9 03		cmp #$03	                cmp #3                      ; where 3 means a double-word
.a3e1		d0 05		bne $a3e8	                bne _show_payload
.a3e3		20 3b a4	jsr $a43b	                jsr _print_2literal
.a3e6		80 42		bra $a42a	                bra _done
.a3e8						_show_payload:
.a3e8		48		pha		                pha
.a3e9		20 2c a4	jsr $a42c	                jsr _print_literal
.a3ec		68		pla		                pla
.a3ed		3a		dec a		                dea
.a3ee		d0 f8		bne $a3e8	                bne _show_payload
.a3f0		a5 32		lda $32		                lda scratch+5
.a3f2		c9 14		cmp #$14	                cmp #_sliteral_handler - _special_handlers
.a3f4		d0 34		bne $a42a	                bne _done
.a3f6		20 db 8c	jsr $8cdb	                jsr w_over
.a3f9		20 b3 8c	jsr $8cb3	                jsr w_one_minus
.a3fc		20 e9 87	jsr $87e9	                jsr w_fetch         ; ( addr n u )
.a3ff		b5 01		lda $01,x	                lda 1,x
.a401		d0 06		bne $a409	                bne _truncate
.a403		b5 00		lda $00,x	                lda 0,x
.a405		c9 10		cmp #$10	                cmp #16
.a407		90 02		bcc $a40b	                bcc +               ; length < 16?
.a409						_truncate:
.a409		a9 12		lda #$12	                lda #18             ; extra chars for ellipses
.a40b						+
.a40b		85 1e		sta $1e		                sta tmpdsp
.a40d		b5 04		lda $04,x	                lda 4,x             ; tmp1 points 1 before string
.a40f		85 25		sta $25		                sta tmp1
.a411		b5 05		lda $05,x	                lda 5,x
.a413		85 26		sta $26		                sta tmp1+1
.a415		a0 01		ldy #$01	                ldy #1
.a417						_snippet:
.a417		b1 25		lda ($25),y	                lda (tmp1),y
.a419		c0 10		cpy #$10	                cpy #16
.a41b		90 02		bcc $a41f	                bcc +
.a41d		a9 2e		lda #$2e	                lda #'.'
.a41f						+
.a41f		20 93 86	jsr $8693	                jsr emit_a
.a422		c8		iny		                iny
.a423		c6 1e		dec $1e		                dec tmpdsp
.a425		d0 f0		bne $a417	                bne _snippet
.a427		20 1a a2	jsr $a21a	                jsr w_slash_string
.a42a		38		sec		_done:          sec
.a42b		60		rts		                rts
.a42c						_print_literal:
.a42c		20 db 8c	jsr $8cdb	                jsr w_over
.a42f		20 bf 8c	jsr $8cbf	                jsr w_one_plus              ; ( addr u addr+1 )
.a432		20 3f 99	jsr $993f	                jsr w_question              ; Print the value at the address
.a435		20 3c 9e	jsr $9e3c	                jsr w_two
.a438		4c 1a a2	jmp $a21a	                jmp w_slash_string          ; leaving (addr+2 u-2)
.a43b						_print_2literal:
.a43b		20 db 8c	jsr $8cdb	                jsr w_over                  ; ( addr u addr+1 )
.a43e		20 bf 8c	jsr $8cbf	                jsr w_one_plus
.a441		20 b7 93	jsr $93b7	                jsr w_two_fetch
.a444		20 fd 9e	jsr $9efd	                jsr w_d_dot                 ; fetch and print double word
.a447		a9 04		lda #$04	                lda #4
.a449		20 7f a4	jsr $a47f	                jsr push_a_tos
.a44c		4c 1a a2	jmp $a21a	                jmp w_slash_string          ; ( addr+4 u-4 )
.a44f						_special_handlers:
>a44f		ca d7				    .word underflow_1
>a451		0b 44				        .byte str_disasm_sdc, 0 + ('1'-32)*4
>a453		cf d7				    .word underflow_2
>a455		0b 48				        .byte str_disasm_sdc, 0 + ('2'-32)*4
>a457		d4 d7				    .word underflow_3
>a459		0b 4c				        .byte str_disasm_sdc, 0 + ('3'-32)*4
>a45b		d9 d7				    .word underflow_4
>a45d		0b 50				        .byte str_disasm_sdc, 0 + ('4'-32)*4
>a45f		18 8a				    .word literal_runtime
>a461		0c 01				        .byte str_disasm_lit, 1
.a463						_sliteral_handler:
>a463		58 a2				    .word sliteral_runtime
>a465		0c cd				        .byte str_disasm_lit, 1 + ('S'-32)*4
>a467		eb 9f				    .word two_literal_runtime
>a469		0c 4b				        .byte str_disasm_lit, 3 + ('2'-32)*4
>a46b		4e 98				    .word zero_branch_runtime
>a46d		0d 01				        .byte str_disasm_0bra, 1
>a46f		b0 8a				    .word loop_runtime
>a471		0e 01				        .byte str_disasm_loop, 1
>a473		c9 8a				    .word plus_loop_runtime
>a475		0e 2d				        .byte str_disasm_loop, 1 + ('+'-32)*4
>a477		82 85				    .word do_runtime
>a479		0f 00				        .byte str_disasm_do, 0
>a47b		6a 85				    .word question_do_runtime
>a47d		0f 7d				        .byte str_disasm_do, 1 + ('?'-32)*4
.a47f						_end_handlers:
.a47f						push_a_tos:
.a47f		ca		dex		                dex
.a480		ca		dex		                dex
.a481		95 00		sta $00,x	                sta 0,x
.a483		74 01		stz $01,x	                stz 1,x
.a485						z_push_a_tos:
.a485		60		rts		                rts
.a486						disassembler_end:

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/assembler.asm

.a486						assembler:
.a486						xt_asm_adc_h:
.a486		a9 69		lda #$69	                lda #$69
.a488		4c df a7	jmp $a7df	                jmp asm_common
.a48b						z_asm_adc_h:
.a48b						xt_asm_adc_x:
.a48b		a9 7d		lda #$7d	                lda #$7D
.a48d		4c df a7	jmp $a7df	                jmp asm_common
.a490						z_asm_adc_x:
.a490						xt_asm_adc_y:
.a490		a9 79		lda #$79	                lda #$79
.a492		4c df a7	jmp $a7df	                jmp asm_common
.a495						z_asm_adc_y:
.a495						xt_asm_adc_z:
.a495		a9 65		lda #$65	                lda #$65
.a497		4c df a7	jmp $a7df	                jmp asm_common
.a49a						z_asm_adc_z:
.a49a						xt_asm_adc_zi:
.a49a		a9 72		lda #$72	                lda #$72
.a49c		4c df a7	jmp $a7df	                jmp asm_common
.a49f						z_asm_adc_zi:
.a49f						xt_asm_adc_ziy:
.a49f		a9 71		lda #$71	                lda #$71
.a4a1		4c df a7	jmp $a7df	                jmp asm_common
.a4a4						z_asm_adc_ziy:
.a4a4						xt_asm_adc_zx:
.a4a4		a9 75		lda #$75	                lda #$75
.a4a6		4c df a7	jmp $a7df	                jmp asm_common
.a4a9						z_asm_adc_zx:
.a4a9						xt_asm_adc_zxi:
.a4a9		a9 61		lda #$61	                lda #$61
.a4ab		4c df a7	jmp $a7df	                jmp asm_common
.a4ae						z_asm_adc_zxi:
.a4ae						xt_asm_and:
.a4ae		a9 2d		lda #$2d	                lda #$2D
.a4b0		4c df a7	jmp $a7df	                jmp asm_common
.a4b3						z_asm_and:
.a4b3						xt_asm_and_h:
.a4b3		a9 29		lda #$29	                lda #$29
.a4b5		4c df a7	jmp $a7df	                jmp asm_common
.a4b8						z_asm_and_h:
.a4b8						xt_asm_and_x:
.a4b8		a9 3d		lda #$3d	                lda #$3D
.a4ba		4c df a7	jmp $a7df	                jmp asm_common
.a4bd						z_asm_and_x:
.a4bd						xt_asm_and_y:
.a4bd		a9 39		lda #$39	                lda #$39
.a4bf		4c df a7	jmp $a7df	                jmp asm_common
.a4c2						z_asm_and_y:
.a4c2						xt_asm_and_z:
.a4c2		a9 25		lda #$25	                lda #$25
.a4c4		4c df a7	jmp $a7df	                jmp asm_common
.a4c7						z_asm_and_z:
.a4c7						xt_asm_and_zi:
.a4c7		a9 32		lda #$32	                lda #$32
.a4c9		4c df a7	jmp $a7df	                jmp asm_common
.a4cc						z_asm_and_zi:
.a4cc						xt_asm_and_ziy:
.a4cc		a9 31		lda #$31	                lda #$31
.a4ce		4c df a7	jmp $a7df	                jmp asm_common
.a4d1						z_asm_and_ziy:
.a4d1						xt_asm_and_zx:
.a4d1		a9 35		lda #$35	                lda #$35
.a4d3		4c df a7	jmp $a7df	                jmp asm_common
.a4d6						z_asm_and_zx:
.a4d6						xt_asm_and_zxi:
.a4d6		a9 21		lda #$21	                lda #$21
.a4d8		4c df a7	jmp $a7df	                jmp asm_common
.a4db						z_asm_and_zxi:
.a4db						xt_asm_asl:
.a4db		a9 0e		lda #$0e	                lda #$0E
.a4dd		4c df a7	jmp $a7df	                jmp asm_common
.a4e0						z_asm_asl:
.a4e0						xt_asm_asl_a:
.a4e0		a9 0a		lda #$0a	                lda #$0A
.a4e2		4c df a7	jmp $a7df	                jmp asm_common
.a4e5						z_asm_asl_a:
.a4e5						xt_asm_asl_x:
.a4e5		a9 1e		lda #$1e	                lda #$1E
.a4e7		4c df a7	jmp $a7df	                jmp asm_common
.a4ea						z_asm_asl_x:
.a4ea						xt_asm_asl_z:
.a4ea		a9 06		lda #$06	                lda #$06
.a4ec		4c df a7	jmp $a7df	                jmp asm_common
.a4ef						z_asm_asl_z:
.a4ef						xt_asm_asl_zx:
.a4ef		a9 16		lda #$16	                lda #$16
.a4f1		4c df a7	jmp $a7df	                jmp asm_common
.a4f4						z_asm_asl_zx:
.a4f4						xt_asm_bcc:
.a4f4		a9 90		lda #$90	                lda #$90
.a4f6		4c df a7	jmp $a7df	                jmp asm_common
.a4f9						z_asm_bcc:
.a4f9						xt_asm_bcs:
.a4f9		a9 b0		lda #$b0	                lda #$B0
.a4fb		a0 02		ldy #$02	                ldy #2
.a4fd		4c df a7	jmp $a7df	                jmp asm_common
.a500						z_asm_bcs:
.a500						xt_asm_beq:
.a500		a9 f0		lda #$f0	                lda #$F0
.a502		4c df a7	jmp $a7df	                jmp asm_common
.a505						z_asm_beq:
.a505						xt_asm_bit:
.a505		a9 2c		lda #$2c	                lda #$2C
.a507		4c df a7	jmp $a7df	                jmp asm_common
.a50a						z_asm_bit:
.a50a						xt_asm_bit_h:
.a50a		a9 89		lda #$89	                lda #$89
.a50c		4c df a7	jmp $a7df	                jmp asm_common
.a50f						z_asm_bit_h:
.a50f						xt_asm_bit_x:
.a50f		a9 3c		lda #$3c	                lda #$3C
.a511		4c df a7	jmp $a7df	                jmp asm_common
.a514						z_asm_bit_x:
.a514						xt_asm_bit_z:
.a514		a9 24		lda #$24	                lda #$24
.a516		4c df a7	jmp $a7df	                jmp asm_common
.a519						z_asm_bit_z:
.a519						xt_asm_bit_zx:
.a519		a9 34		lda #$34	                lda #$34
.a51b		4c df a7	jmp $a7df	                jmp asm_common
.a51e						z_asm_bit_zx:
.a51e						xt_asm_bmi:
.a51e		a9 30		lda #$30	                lda #$30
.a520		4c df a7	jmp $a7df	                jmp asm_common
.a523						z_asm_bmi:
.a523						xt_asm_bne:
.a523		a9 d0		lda #$d0	                lda #$D0
.a525		4c df a7	jmp $a7df	                jmp asm_common
.a528						z_asm_bne:
.a528						xt_asm_bpl:
.a528		a9 10		lda #$10	                lda #$10
.a52a		4c df a7	jmp $a7df	                jmp asm_common
.a52d						z_asm_bpl:
.a52d						xt_asm_bra:
.a52d		a9 80		lda #$80	                lda #$80
.a52f		4c df a7	jmp $a7df	                jmp asm_common
.a532						z_asm_bra:
.a532						xt_asm_brk:
.a532		a9 00		lda #$00	                lda #$00
.a534		4c df a7	jmp $a7df	                jmp asm_common
.a537						z_asm_brk:
.a537						xt_asm_bvc:
.a537		a9 50		lda #$50	                lda #$50
.a539		4c df a7	jmp $a7df	                jmp asm_common
.a53c						z_asm_bvc:
.a53c						xt_asm_bvs:
.a53c		a9 70		lda #$70	                lda #$70
.a53e		4c df a7	jmp $a7df	                jmp asm_common
.a541						z_asm_bvs:
.a541						xt_asm_clc:
.a541		a9 18		lda #$18	                lda #$18
.a543		4c df a7	jmp $a7df	                jmp asm_common
.a546						z_asm_clc:
.a546						xt_asm_cld:
.a546		a9 d8		lda #$d8	                lda #$D8
.a548		4c df a7	jmp $a7df	                jmp asm_common
.a54b						z_asm_cld:
.a54b						xt_asm_cli:
.a54b		a9 58		lda #$58	                lda #$58
.a54d		4c df a7	jmp $a7df	                jmp asm_common
.a550						z_asm_cli:
.a550						xt_asm_clv:
.a550		a9 b8		lda #$b8	                lda #$B8
.a552		4c df a7	jmp $a7df	                jmp asm_common
.a555						z_asm_clv:
.a555						xt_asm_cmp:
.a555		a9 cd		lda #$cd	                lda #$CD
.a557		4c df a7	jmp $a7df	                jmp asm_common
.a55a						z_asm_cmp:
.a55a						xt_asm_cmp_h:
.a55a		a9 c9		lda #$c9	                lda #$C9
.a55c		4c df a7	jmp $a7df	                jmp asm_common
.a55f						z_asm_cmp_h:
.a55f						xt_asm_cmp_x:
.a55f		a9 dd		lda #$dd	                lda #$DD
.a561		4c df a7	jmp $a7df	                jmp asm_common
.a564						z_asm_cmp_x:
.a564						xt_asm_cmp_y:
.a564		a9 d9		lda #$d9	                lda #$D9
.a566		4c df a7	jmp $a7df	                jmp asm_common
.a569						z_asm_cmp_y:
.a569						xt_asm_cmp_z:
.a569		a9 c5		lda #$c5	                lda #$C5
.a56b		4c df a7	jmp $a7df	                jmp asm_common
.a56e						z_asm_cmp_z:
.a56e						xt_asm_cmp_zi:
.a56e		a9 d2		lda #$d2	                lda #$D2
.a570		4c df a7	jmp $a7df	                jmp asm_common
.a573						z_asm_cmp_zi:
.a573						xt_asm_cmp_ziy:
.a573		a9 d1		lda #$d1	                lda #$D1
.a575		4c df a7	jmp $a7df	                jmp asm_common
.a578						z_asm_cmp_ziy:
.a578						xt_asm_cmp_zx:
.a578		a9 d5		lda #$d5	                lda #$D5
.a57a		4c df a7	jmp $a7df	                jmp asm_common
.a57d						z_asm_cmp_zx:
.a57d						xt_asm_cmp_zxi:
.a57d		a9 c1		lda #$c1	                lda #$C1
.a57f		4c df a7	jmp $a7df	                jmp asm_common
.a582						z_asm_cmp_zxi:
.a582						xt_asm_cpx:
.a582		a9 ec		lda #$ec	                lda #$EC
.a584		4c df a7	jmp $a7df	                jmp asm_common
.a587						z_asm_cpx:
.a587						xt_asm_cpx_h:
.a587		a9 e0		lda #$e0	                lda #$E0
.a589		4c df a7	jmp $a7df	                jmp asm_common
.a58c						z_asm_cpx_h:
.a58c						xt_asm_cpx_z:
.a58c		a9 e4		lda #$e4	                lda #$E4
.a58e		4c df a7	jmp $a7df	                jmp asm_common
.a591						z_asm_cpx_z:
.a591						xt_asm_cpy:
.a591		a9 cc		lda #$cc	                lda #$CC
.a593		a0 03		ldy #$03	                ldy #3
.a595		4c df a7	jmp $a7df	                jmp asm_common
.a598						z_asm_cpy:
.a598						xt_asm_cpy_h:
.a598		a9 c0		lda #$c0	                lda #$C0
.a59a		4c df a7	jmp $a7df	                jmp asm_common
.a59d						z_asm_cpy_h:
.a59d						xt_asm_cpy_z:
.a59d		a9 c4		lda #$c4	                lda #$C4
.a59f		4c df a7	jmp $a7df	                jmp asm_common
.a5a2						z_asm_cpy_z:
.a5a2						xt_asm_dec:
.a5a2		a9 ce		lda #$ce	                lda #$CE
.a5a4		4c df a7	jmp $a7df	                jmp asm_common
.a5a7						z_asm_dec:
.a5a7						xt_asm_dec_a:
.a5a7		a9 3a		lda #$3a	                lda #$3A
.a5a9		4c df a7	jmp $a7df	                jmp asm_common
.a5ac						z_asm_dec_a:
.a5ac						xt_asm_dec_x:
.a5ac		a9 de		lda #$de	                lda #$DE
.a5ae		4c df a7	jmp $a7df	                jmp asm_common
.a5b1						z_asm_dec_x:
.a5b1						xt_asm_dec_z:
.a5b1		a9 c6		lda #$c6	                lda #$C6
.a5b3		4c df a7	jmp $a7df	                jmp asm_common
.a5b6						z_asm_dec_z:
.a5b6						xt_asm_dec_zx:
.a5b6		a9 d6		lda #$d6	                lda #$D6
.a5b8		4c df a7	jmp $a7df	                jmp asm_common
.a5bb						z_asm_dec_zx:
.a5bb						xt_asm_dex:
.a5bb		a9 ca		lda #$ca	                lda #$CA
.a5bd		4c df a7	jmp $a7df	                jmp asm_common
.a5c0						z_asm_dex:
.a5c0						xt_asm_dey:
.a5c0		a9 88		lda #$88	                lda #$88
.a5c2		4c df a7	jmp $a7df	                jmp asm_common
.a5c5						z_asm_dey:
.a5c5						xt_asm_eor:
.a5c5		a9 4d		lda #$4d	                lda #$4D
.a5c7		4c df a7	jmp $a7df	                jmp asm_common
.a5ca						z_asm_eor:
.a5ca						xt_asm_eor_h:
.a5ca		a9 49		lda #$49	                lda #$49
.a5cc		4c df a7	jmp $a7df	                jmp asm_common
.a5cf						z_asm_eor_h:
.a5cf						xt_asm_eor_x:
.a5cf		a9 5d		lda #$5d	                lda #$5D
.a5d1		4c df a7	jmp $a7df	                jmp asm_common
.a5d4						z_asm_eor_x:
.a5d4						xt_asm_eor_y:
.a5d4		a9 59		lda #$59	                lda #$59
.a5d6		4c df a7	jmp $a7df	                jmp asm_common
.a5d9						z_asm_eor_y:
.a5d9						xt_asm_eor_z:
.a5d9		a9 45		lda #$45	                lda #$45
.a5db		4c df a7	jmp $a7df	                jmp asm_common
.a5de						z_asm_eor_z:
.a5de						xt_asm_eor_zi:
.a5de		a9 52		lda #$52	                lda #$52
.a5e0		4c df a7	jmp $a7df	                jmp asm_common
.a5e3						z_asm_eor_zi:
.a5e3						xt_asm_eor_ziy:
.a5e3		a9 51		lda #$51	                lda #$51
.a5e5		4c df a7	jmp $a7df	                jmp asm_common
.a5e8						z_asm_eor_ziy:
.a5e8						xt_asm_eor_zx:
.a5e8		a9 55		lda #$55	                lda #$55
.a5ea		4c df a7	jmp $a7df	                jmp asm_common
.a5ed						z_asm_eor_zx:
.a5ed						xt_asm_eor_zxi:
.a5ed		a9 41		lda #$41	                lda #$41
.a5ef		4c df a7	jmp $a7df	                jmp asm_common
.a5f2						z_asm_eor_zxi:
.a5f2						xt_asm_inc:
.a5f2		a9 ee		lda #$ee	                lda #$EE
.a5f4		4c df a7	jmp $a7df	                jmp asm_common
.a5f7						z_asm_inc:
.a5f7						xt_asm_inc_a:
.a5f7		a9 1a		lda #$1a	                lda #$1A
.a5f9		4c df a7	jmp $a7df	                jmp asm_common
.a5fc						z_asm_inc_a:
.a5fc						xt_asm_inc_x:
.a5fc		a9 fe		lda #$fe	                lda #$FE
.a5fe		4c df a7	jmp $a7df	                jmp asm_common
.a601						z_asm_inc_x:
.a601						xt_asm_inc_z:
.a601		a9 e6		lda #$e6	                lda #$E6
.a603		4c df a7	jmp $a7df	                jmp asm_common
.a606						z_asm_inc_z:
.a606						xt_asm_inc_zx:
.a606		a9 f6		lda #$f6	                lda #$F6
.a608		4c df a7	jmp $a7df	                jmp asm_common
.a60b						z_asm_inc_zx:
.a60b						xt_asm_inx:
.a60b		a9 e8		lda #$e8	                lda #$E8
.a60d		4c df a7	jmp $a7df	                jmp asm_common
.a610						z_asm_inx:
.a610						xt_asm_iny:
.a610		a9 c8		lda #$c8	                lda #$C8
.a612		4c df a7	jmp $a7df	                jmp asm_common
.a615						z_asm_iny:
.a615						xt_asm_jmp:
.a615		4c a2 97	jmp $97a2	                jmp cmpl_jump_tos
.a618						z_asm_jmp:
.a618						xt_asm_jmp_i:
.a618		a9 6c		lda #$6c	                lda #$6C
.a61a		4c df a7	jmp $a7df	                jmp asm_common
.a61d						z_asm_jmp_i:
.a61d						xt_asm_jmp_xi:
.a61d		a9 7c		lda #$7c	                lda #$7C
.a61f		4c df a7	jmp $a7df	                jmp asm_common
.a622						z_asm_jmp_xi:
.a622						xt_asm_jsr:
.a622		a9 20		lda #$20	                lda #$20
.a624		4c df a7	jmp $a7df	                jmp asm_common
.a627						z_asm_jsr:
.a627						xt_asm_lda:
.a627		a9 ad		lda #$ad	                lda #$AD
.a629		4c df a7	jmp $a7df	                jmp asm_common
.a62c						z_asm_lda:
.a62c						xt_asm_lda_h:
.a62c		a9 a9		lda #$a9	                lda #$A9
.a62e		4c df a7	jmp $a7df	                jmp asm_common
.a631						z_asm_lda_h:
.a631						xt_asm_lda_x:
.a631		a9 bd		lda #$bd	                lda #$BD
.a633		4c df a7	jmp $a7df	                jmp asm_common
.a636						z_asm_lda_x:
.a636						xt_asm_lda_y:
.a636		a9 b9		lda #$b9	                lda #$B9
.a638		4c df a7	jmp $a7df	                jmp asm_common
.a63b						z_asm_lda_y:
.a63b						xt_asm_lda_z:
.a63b		a9 a5		lda #$a5	                lda #$A5
.a63d		4c df a7	jmp $a7df	                jmp asm_common
.a640						z_asm_lda_z:
.a640						xt_asm_lda_zi:
.a640		a9 b2		lda #$b2	                lda #$B2
.a642		4c df a7	jmp $a7df	                jmp asm_common
.a645						z_asm_lda_zi:
.a645						xt_asm_lda_ziy:
.a645		a9 b1		lda #$b1	                lda #$B1
.a647		4c df a7	jmp $a7df	                jmp asm_common
.a64a						z_asm_lda_ziy:
.a64a						xt_asm_lda_zx:
.a64a		a9 b5		lda #$b5	                lda #$B5
.a64c		4c df a7	jmp $a7df	                jmp asm_common
.a64f						z_asm_lda_zx:
.a64f						xt_asm_lda_zxi:
.a64f		a9 a1		lda #$a1	                lda #$A1
.a651		4c df a7	jmp $a7df	                jmp asm_common
.a654						z_asm_lda_zxi:
.a654						xt_asm_ldx:
.a654		a9 ae		lda #$ae	                lda #$AE
.a656		4c df a7	jmp $a7df	                jmp asm_common
.a659						z_asm_ldx:
.a659						xt_asm_ldx_h:
.a659		a9 a2		lda #$a2	                lda #$A2
.a65b		4c df a7	jmp $a7df	                jmp asm_common
.a65e						z_asm_ldx_h:
.a65e						xt_asm_ldx_y:
.a65e		a9 be		lda #$be	                lda #$BE
.a660		4c df a7	jmp $a7df	                jmp asm_common
.a663						z_asm_ldx_y:
.a663						xt_asm_ldx_z:
.a663		a9 a6		lda #$a6	                lda #$A6
.a665		4c df a7	jmp $a7df	                jmp asm_common
.a668						z_asm_ldx_z:
.a668						xt_asm_ldx_zy:
.a668		a9 b6		lda #$b6	                lda #$B6
.a66a		4c df a7	jmp $a7df	                jmp asm_common
.a66d						z_asm_ldx_zy:
.a66d						xt_asm_ldy:
.a66d		a9 ac		lda #$ac	                lda #$AC
.a66f		4c df a7	jmp $a7df	                jmp asm_common
.a672						z_asm_ldy:
.a672						xt_asm_ldy_h:
.a672		a9 a0		lda #$a0	                lda #$A0
.a674		4c df a7	jmp $a7df	                jmp asm_common
.a677						z_asm_ldy_h:
.a677						xt_asm_ldy_x:
.a677		a9 bc		lda #$bc	                lda #$BC
.a679		4c df a7	jmp $a7df	                jmp asm_common
.a67c						z_asm_ldy_x:
.a67c						xt_asm_ldy_z:
.a67c		a9 a4		lda #$a4	                lda #$A4
.a67e		4c df a7	jmp $a7df	                jmp asm_common
.a681						z_asm_ldy_z:
.a681						xt_asm_ldy_zx:
.a681		a9 b4		lda #$b4	                lda #$B4
.a683		4c df a7	jmp $a7df	                jmp asm_common
.a686						z_asm_ldy_zx:
.a686						xt_asm_lsr:
.a686		a9 4e		lda #$4e	                lda #$4E
.a688		4c df a7	jmp $a7df	                jmp asm_common
.a68b						z_asm_lsr:
.a68b						xt_asm_lsr_a:
.a68b		a9 4a		lda #$4a	                lda #$4A
.a68d		4c df a7	jmp $a7df	                jmp asm_common
.a690						z_asm_lsr_a:
.a690						xt_asm_lsr_x:
.a690		a9 5e		lda #$5e	                lda #$5E
.a692		4c df a7	jmp $a7df	                jmp asm_common
.a695						z_asm_lsr_x:
.a695						xt_asm_lsr_z:
.a695		a9 46		lda #$46	                lda #$46
.a697		4c df a7	jmp $a7df	                jmp asm_common
.a69a						z_asm_lsr_z:
.a69a						xt_asm_lsr_zx:
.a69a		a9 56		lda #$56	                lda #$56
.a69c		4c df a7	jmp $a7df	                jmp asm_common
.a69f						z_asm_lsr_zx:
.a69f						xt_asm_nop:
.a69f		a9 ea		lda #$ea	                lda #$EA
.a6a1		4c df a7	jmp $a7df	                jmp asm_common
.a6a4						z_asm_nop:
.a6a4						xt_asm_ora:
.a6a4		a9 0d		lda #$0d	                lda #$0D
.a6a6		4c df a7	jmp $a7df	                jmp asm_common
.a6a9						z_asm_ora:
.a6a9						xt_asm_ora_h:
.a6a9		a9 09		lda #$09	                lda #$09
.a6ab		4c df a7	jmp $a7df	                jmp asm_common
.a6ae						z_asm_ora_h:
.a6ae						xt_asm_ora_x:
.a6ae		a9 1d		lda #$1d	                lda #$1D
.a6b0		4c df a7	jmp $a7df	                jmp asm_common
.a6b3						z_asm_ora_x:
.a6b3						xt_asm_ora_y:
.a6b3		a9 19		lda #$19	                lda #$19
.a6b5		4c df a7	jmp $a7df	                jmp asm_common
.a6b8						z_asm_ora_y:
.a6b8						xt_asm_ora_z:
.a6b8		a9 05		lda #$05	                lda #$05
.a6ba		4c df a7	jmp $a7df	                jmp asm_common
.a6bd						z_asm_ora_z:
.a6bd						xt_asm_ora_zi:
.a6bd		a9 12		lda #$12	                lda #$12
.a6bf		a0 02		ldy #$02	                ldy #2
.a6c1		4c df a7	jmp $a7df	                jmp asm_common
.a6c4						z_asm_ora_zi:
.a6c4						xt_asm_ora_ziy:
.a6c4		a9 11		lda #$11	                lda #$11
.a6c6		4c df a7	jmp $a7df	                jmp asm_common
.a6c9						z_asm_ora_ziy:
.a6c9						xt_asm_ora_zx:
.a6c9		a9 15		lda #$15	                lda #$15
.a6cb		4c df a7	jmp $a7df	                jmp asm_common
.a6ce						z_asm_ora_zx:
.a6ce						xt_asm_ora_zxi:
.a6ce		a9 01		lda #$01	                lda #$01
.a6d0		4c df a7	jmp $a7df	                jmp asm_common
.a6d3						z_asm_ora_zxi:
.a6d3						xt_asm_pha:
.a6d3		a9 48		lda #$48	                lda #$48
.a6d5		4c df a7	jmp $a7df	                jmp asm_common
.a6d8						z_asm_pha:
.a6d8						xt_asm_php:
.a6d8		a9 08		lda #$08	                lda #$08
.a6da		4c df a7	jmp $a7df	                jmp asm_common
.a6dd						z_asm_php:
.a6dd						xt_asm_phx:
.a6dd		a9 da		lda #$da	                lda #$DA
.a6df		4c df a7	jmp $a7df	                jmp asm_common
.a6e2						z_asm_phx:
.a6e2						xt_asm_phy:
.a6e2		a9 5a		lda #$5a	                lda #$5A
.a6e4		4c df a7	jmp $a7df	                jmp asm_common
.a6e7						z_asm_phy:
.a6e7						xt_asm_pla:
.a6e7		a9 68		lda #$68	                lda #$68
.a6e9		4c df a7	jmp $a7df	                jmp asm_common
.a6ec						z_asm_pla:
.a6ec						xt_asm_plp:
.a6ec		a9 28		lda #$28	                lda #$28
.a6ee		4c df a7	jmp $a7df	                jmp asm_common
.a6f1						z_asm_plp:
.a6f1						xt_asm_plx:
.a6f1		a9 fa		lda #$fa	                lda #$FA
.a6f3		4c df a7	jmp $a7df	                jmp asm_common
.a6f6						z_asm_plx:
.a6f6						xt_asm_ply:
.a6f6		a9 7a		lda #$7a	                lda #$7A
.a6f8		4c df a7	jmp $a7df	                jmp asm_common
.a6fb						z_asm_ply:
.a6fb						xt_asm_rol:
.a6fb		a9 2e		lda #$2e	                lda #$2E
.a6fd		4c df a7	jmp $a7df	                jmp asm_common
.a700						z_asm_rol:
.a700						xt_asm_rol_a:
.a700		a9 2a		lda #$2a	                lda #$2A
.a702		4c df a7	jmp $a7df	                jmp asm_common
.a705						z_asm_rol_a:
.a705						xt_asm_rol_x:
.a705		a9 3e		lda #$3e	                lda #$3E
.a707		4c df a7	jmp $a7df	                jmp asm_common
.a70a						z_asm_rol_x:
.a70a						xt_asm_rol_z:
.a70a		a9 26		lda #$26	                lda #$26
.a70c		4c df a7	jmp $a7df	                jmp asm_common
.a70f						z_asm_rol_z:
.a70f						xt_asm_rol_zx:
.a70f		a9 36		lda #$36	                lda #$36
.a711		4c df a7	jmp $a7df	                jmp asm_common
.a714						z_asm_rol_zx:
.a714						xt_asm_ror:
.a714		a9 6e		lda #$6e	                lda #$6E
.a716		4c df a7	jmp $a7df	                jmp asm_common
.a719						z_asm_ror:
.a719						xt_asm_ror_a:
.a719		a9 6a		lda #$6a	                lda #$6A
.a71b		4c df a7	jmp $a7df	                jmp asm_common
.a71e						z_asm_ror_a:
.a71e						xt_asm_ror_x:
.a71e		a9 7e		lda #$7e	                lda #$7E
.a720		4c df a7	jmp $a7df	                jmp asm_common
.a723						z_asm_ror_x:
.a723						xt_asm_ror_z:
.a723		a9 66		lda #$66	                lda #$66
.a725		4c df a7	jmp $a7df	                jmp asm_common
.a728						z_asm_ror_z:
.a728						xt_asm_ror_zx:
.a728		a9 76		lda #$76	                lda #$76
.a72a		4c df a7	jmp $a7df	                jmp asm_common
.a72d						z_asm_ror_zx:
.a72d						xt_asm_rti:
.a72d		a9 40		lda #$40	                lda #$40
.a72f		4c df a7	jmp $a7df	                jmp asm_common
.a732						z_asm_rti:
.a732						xt_asm_rts:
.a732		a9 60		lda #$60	                lda #$60
.a734		4c df a7	jmp $a7df	                jmp asm_common
.a737						z_asm_rts:
.a737						xt_asm_sbc:
.a737		a9 ed		lda #$ed	                lda #$ED
.a739		4c df a7	jmp $a7df	                jmp asm_common
.a73c						z_asm_sbc:
.a73c						xt_asm_sbc_h:
.a73c		a9 e9		lda #$e9	                lda #$E9
.a73e		4c df a7	jmp $a7df	                jmp asm_common
.a741						z_asm_sbc_h:
.a741						xt_asm_sbc_x:
.a741		a9 fd		lda #$fd	                lda #$FD
.a743		4c df a7	jmp $a7df	                jmp asm_common
.a746						z_asm_sbc_x:
.a746						xt_asm_sbc_y:
.a746		a9 f9		lda #$f9	                lda #$F9
.a748		4c df a7	jmp $a7df	                jmp asm_common
.a74b						z_asm_sbc_y:
.a74b						xt_asm_sbc_z:
.a74b		a9 e5		lda #$e5	                lda #$E5
.a74d		4c df a7	jmp $a7df	                jmp asm_common
.a750						z_asm_sbc_z:
.a750						xt_asm_sbc_zi:
.a750		a9 f2		lda #$f2	                lda #$F2
.a752		4c df a7	jmp $a7df	                jmp asm_common
.a755						z_asm_sbc_zi:
.a755						xt_asm_sbc_ziy:
.a755		a9 f1		lda #$f1	                lda #$F1
.a757		4c df a7	jmp $a7df	                jmp asm_common
.a75a						z_asm_sbc_ziy:
.a75a						xt_asm_sbc_zx:
.a75a		a9 f5		lda #$f5	                lda #$F5
.a75c		4c df a7	jmp $a7df	                jmp asm_common
.a75f						z_asm_sbc_zx:
.a75f						xt_asm_sbc_zxi:
.a75f		a9 e1		lda #$e1	                lda #$E1
.a761		80 7c		bra $a7df	                bra asm_common  ; <-- limit for BRA instead of JMP
.a763						z_asm_sbc_zxi:
.a763						xt_asm_sec:
.a763		a9 38		lda #$38	                lda #$38
.a765		80 78		bra $a7df	                bra asm_common
.a767						z_asm_sec:
.a767						xt_asm_sed:
.a767		a9 f8		lda #$f8	                lda #$F8
.a769		80 74		bra $a7df	                bra asm_common
.a76b						z_asm_sed:
.a76b						xt_asm_sei:
.a76b		a9 78		lda #$78	                lda #$78
.a76d		80 70		bra $a7df	                bra asm_common
.a76f						z_asm_sei:
.a76f						xt_asm_sta:
.a76f		a9 8d		lda #$8d	                lda #$8D
.a771		80 6c		bra $a7df	                bra asm_common
.a773						z_asm_sta:
.a773						xt_asm_sta_x:
.a773		a9 9d		lda #$9d	                lda #$9D
.a775		80 68		bra $a7df	                bra asm_common
.a777						z_asm_sta_x:
.a777						xt_asm_sta_y:
.a777		a9 99		lda #$99	                lda #$99
.a779		80 64		bra $a7df	                bra asm_common
.a77b						z_asm_sta_y:
.a77b						xt_asm_sta_z:
.a77b		a9 85		lda #$85	                lda #$85
.a77d		80 60		bra $a7df	                bra asm_common
.a77f						z_asm_sta_z:
.a77f						xt_asm_sta_zi:
.a77f		a9 92		lda #$92	                lda #$92
.a781		80 5c		bra $a7df	                bra asm_common
.a783						z_asm_sta_zi:
.a783						xt_asm_sta_ziy:
.a783		a9 91		lda #$91	                lda #$91
.a785		80 58		bra $a7df	                bra asm_common
.a787						z_asm_sta_ziy:
.a787						xt_asm_sta_zx:
.a787		a9 95		lda #$95	                lda #$95
.a789		80 54		bra $a7df	                bra asm_common
.a78b						z_asm_sta_zx:
.a78b						xt_asm_sta_zxi:
.a78b		a9 81		lda #$81	                lda #$81
.a78d		80 50		bra $a7df	                bra asm_common
.a78f						z_asm_sta_zxi:
.a78f						xt_asm_stx:
.a78f		a9 8e		lda #$8e	                lda #$8E
.a791		80 4c		bra $a7df	                bra asm_common
.a793						z_asm_stx:
.a793						xt_asm_stx_z:
.a793		a9 86		lda #$86	                lda #$86
.a795		80 48		bra $a7df	                bra asm_common
.a797						z_asm_stx_z:
.a797						xt_asm_stx_zy:
.a797		a9 96		lda #$96	                lda #$96
.a799		80 44		bra $a7df	                bra asm_common
.a79b						z_asm_stx_zy:
.a79b						xt_asm_sty:
.a79b		a9 8c		lda #$8c	                lda #$8C
.a79d		80 40		bra $a7df	                bra asm_common
.a79f						z_asm_sty:
.a79f						xt_asm_sty_z:
.a79f		a9 84		lda #$84	                lda #$84
.a7a1		80 3c		bra $a7df	                bra asm_common
.a7a3						z_asm_sty_z:
.a7a3						xt_asm_sty_zx:
.a7a3		a9 94		lda #$94	                lda #$94
.a7a5		80 38		bra $a7df	                bra asm_common
.a7a7						z_asm_sty_zx:
.a7a7						xt_asm_stz:
.a7a7		a9 9c		lda #$9c	                lda #$9C
.a7a9		80 34		bra $a7df	                bra asm_common
.a7ab						z_asm_stz:
.a7ab						xt_asm_stz_x:
.a7ab		a9 9e		lda #$9e	                lda #$9E
.a7ad		80 30		bra $a7df	                bra asm_common
.a7af						z_asm_stz_x:
.a7af						xt_asm_stz_z:
.a7af		a9 64		lda #$64	                lda #$64
.a7b1		80 2c		bra $a7df	                bra asm_common
.a7b3						z_asm_stz_z:
.a7b3						xt_asm_stz_zx:
.a7b3		a9 74		lda #$74	                lda #$74
.a7b5		80 28		bra $a7df	                bra asm_common
.a7b7						z_asm_stz_zx:
.a7b7						xt_asm_tax:
.a7b7		a9 aa		lda #$aa	                lda #$AA
.a7b9		80 24		bra $a7df	                bra asm_common
.a7bb						z_asm_tax:
.a7bb						xt_asm_tay:
.a7bb		a9 a8		lda #$a8	                lda #$A8
.a7bd		80 20		bra $a7df	                bra asm_common
.a7bf						z_asm_tay:
.a7bf						xt_asm_trb:
.a7bf		a9 1c		lda #$1c	                lda #$1C
.a7c1		80 1c		bra $a7df	                bra asm_common
.a7c3						z_asm_trb:
.a7c3						xt_asm_trb_z:
.a7c3		a9 14		lda #$14	                lda #$14
.a7c5		80 18		bra $a7df	                bra asm_common
.a7c7						z_asm_trb_z:
.a7c7						xt_asm_tsb:
.a7c7		a9 0c		lda #$0c	                lda #$0C
.a7c9		80 14		bra $a7df	                bra asm_common
.a7cb						z_asm_tsb:
.a7cb						xt_asm_tsb_z:
.a7cb		a9 04		lda #$04	                lda #$04
.a7cd		80 10		bra $a7df	                bra asm_common
.a7cf						z_asm_tsb_z:
.a7cf						xt_asm_tsx:
.a7cf		a9 ba		lda #$ba	                lda #$BA
.a7d1		80 0c		bra $a7df	                bra asm_common
.a7d3						z_asm_tsx:
.a7d3						xt_asm_txa:
.a7d3		a9 8a		lda #$8a	                lda #$8A
.a7d5		80 08		bra $a7df	                bra asm_common
.a7d7						z_asm_txa:
.a7d7						xt_asm_txs:
.a7d7		a9 9a		lda #$9a	                lda #$9A
.a7d9		80 04		bra $a7df	                bra asm_common
.a7db						z_asm_txs:
.a7db						xt_asm_tya:
.a7db		a9 98		lda #$98	                lda #$98
.a7dd		80 00		bra $a7df	                bra asm_common
.a7df						z_asm_tya:
.a7df						asm_common:
.a7df		a8		tay		                tay
.a7e0		20 bc 97	jsr $97bc	                jsr cmpl_a
.a7e3		a9 eb		lda #$eb	                lda #<oc_index_table
.a7e5		85 27		sta $27		                sta tmp2
.a7e7		a9 b3		lda #$b3	                lda #>oc_index_table
.a7e9		85 28		sta $28		                sta tmp2+1
.a7eb		98		tya		                tya             ; retrieve opcode
.a7ec		0a		asl a		                asl             ; times two for offset
.a7ed		90 02		bcc $a7f1	                bcc +
.a7ef		e6 28		inc $28		                inc tmp2+1
.a7f1						+
.a7f1		a8		tay		                tay             ; use Y as the index
.a7f2		b1 27		lda ($27),y	                lda (tmp2),y    ; LSB
.a7f4		85 29		sta $29		                sta tmp3
.a7f6		c8		iny		                iny
.a7f7		b1 27		lda ($27),y	                lda (tmp2),y    ; MSB
.a7f9		85 2a		sta $2a		                sta tmp3+1
.a7fb		b2 29		lda ($29)	                lda (tmp3)      ; get "lengths byte"
.a7fd		2a		rol a		                rol
.a7fe		2a		rol a		                rol
.a7ff		2a		rol a		                rol             ; Three times because we go through Carry
.a800		29 03		and #$03	                and #%00000011
.a802		a8		tay		                tay
.a803		88		dey		                dey
.a804		f0 12		beq $a818	                beq _done
.a806		20 ca d7	jsr $d7ca	                jsr underflow_1
.a809		b5 00		lda $00,x	                lda 0,x
.a80b		20 bc 97	jsr $97bc	                jsr cmpl_a      ; does not use Y
.a80e		88		dey		                dey
.a80f		f0 05		beq $a816	                beq _done_drop
.a811		b5 01		lda $01,x	                lda 1,x
.a813		20 bc 97	jsr $97bc	                jsr cmpl_a      ; Fall through to _done_drop
.a816						_done_drop:
.a816		e8		inx		                inx
.a817		e8		inx		                inx             ; Fall through to _done
.a818						_done:
.a818		60		rts		                rts             ; Returns to original caller
.a819						xt_asm_push_a:
.a819		a0 00		ldy #$00	                ldy #0
.a81b						_loop:
.a81b		b9 7f a4	lda $a47f,y	                lda push_a_tos,y
.a81e		20 bc 97	jsr $97bc	                jsr cmpl_a      ; does not change Y
.a821		c8		iny		                iny
.a822		c0 06		cpy #$06	                cpy #z_push_a_tos - push_a_tos
.a824		d0 f5		bne $a81b	                bne _loop
.a826						_done:
.a826						z_asm_push_a:
.a826		60		rts		                rts
.a827						xt_asm_back_jump:
.a827						z_asm_back_jump:
.a827		60		rts		                rts
.a828						xt_asm_back_branch:
.a828		20 e7 88	jsr $88e7	                jsr w_here             ; ( addr-l addr-h )
.a82b		20 bb 8b	jsr $8bbb	                jsr w_minus            ; ( offset )
.a82e		3a		dec a		                dea
.a82f		3a		dec a		                dea
.a830						z_asm_back_branch:
.a830		60		rts		                rts
.a831						assembler_end:

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/ed.asm

.a831						xt_ed:
.a831						w_ed:
.a831		20 35 a8	jsr $a835	                jsr ed6502      ; kept in separate file
.a834		60		rts		z_ed:           rts
=$0035						ed_head  = tmped    ; pointer to first list element (addr) (2 bytes)
=$0037						ed_cur   = tmped+2  ; current line number (1 is first line) (2 bytes)
=$0039						ed_flags = tmped+4  ; Flags used by ed, where
=$003a						ed_base  = tmped+5  ; used to hold BASE and put it back at the end.
.a835						ed6502:
.a835		a5 18		lda $18		                lda base
.a837		85 3a		sta $3a		                sta ed_base
.a839		a9 0a		lda #$0a	                lda #10
.a83b		85 18		sta $18		                sta base
.a83d		64 35		stz $35		                stz ed_head
.a83f		64 36		stz $36		                stz ed_head+1
.a841		64 37		stz $37		                stz ed_cur
.a843		64 38		stz $38		                stz ed_cur+1
.a845		64 39		stz $39		                stz ed_flags
.a847		20 71 9e	jsr $9e71	                jsr w_zero
.a84a		20 71 9e	jsr $9e71	                jsr w_zero             ; ( addr-t u-t )
.a84d		20 ef 83	jsr $83ef	                jsr w_cr
.a850						ed_input_loop:
.a850		a9 81		lda #$81	                lda #%10000001
.a852		14 39		trb $39		                trb ed_flags
.a854		20 2f ad	jsr $ad2f	                jsr ed_get_input
.a857		a5 0e		lda $0e		                lda ciblen
.a859		d0 1f		bne $a87a	                bne _command_mode
.a85b		ca		dex		                dex
.a85c		ca		dex		                dex                     ; ( addr-t u-t ? )
.a85d		a5 37		lda $37		                lda ed_cur
.a85f		95 00		sta $00,x	                sta 0,x
.a861		a5 38		lda $38		                lda ed_cur+1
.a863		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t u )
.a865		a9 80		lda #$80	                lda #%10000000
.a867		04 39		tsb $39		                tsb ed_flags
.a869		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; ( addr-t u-t u+1 )
.a86c		20 4b ad	jsr $ad4b	                jsr ed_is_valid_line
.a86f		b0 03		bcs $a874	                bcs +
.a871		4c 1f ad	jmp $ad1f	                jmp ed_error_1drop
.a874						+
.a874		20 71 9e	jsr $9e71	                jsr w_zero             ; ( addr-t u-t u+1 0 )
.a877		4c 45 a9	jmp $a945	                jmp _line_number_only_from_external
.a87a						_command_mode:
.a87a		20 71 9e	jsr $9e71	                jsr w_zero             ; parameter 1 is NOS ( addr-t u-t 0 )
.a87d		20 71 9e	jsr $9e71	                jsr w_zero             ; parameter 2 is TOS ( addr-t u-t 0 0 )
.a880		b2 0c		lda ($0c)	                lda (cib)
.a882		c9 2e		cmp #$2e	                cmp #'.'                ; ASCII '.'
.a884		d0 3a		bne $a8c0	                bne _prefix_dollar
.a886		20 40 ad	jsr $ad40	                jsr ed_have_text
.a889		a5 37		lda $37		                lda ed_cur
.a88b		95 02		sta $02,x	                sta 2,x
.a88d		a5 38		lda $38		                lda ed_cur+1
.a88f		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.a891		a9 80		lda #$80	                lda #%10000000
.a893		04 39		tsb $39		                tsb ed_flags
.a895		a5 0e		lda $0e		                lda ciblen
.a897		3a		dec a		                dea                     ; sets Z if A was 1
.a898		d0 03		bne $a89d	                bne +
.a89a		4c 45 a9	jmp $a945	                jmp _line_number_only_from_external
.a89d						+
.a89d		ca		dex		                dex
.a89e		ca		dex		                dex
.a89f		ca		dex		                dex
.a8a0		ca		dex		                dex
.a8a1		a5 0c		lda $0c		                lda cib
.a8a3		95 02		sta $02,x	                sta 2,x
.a8a5		a5 0d		lda $0d		                lda cib+1
.a8a7		95 03		sta $03,x	                sta 3,x
.a8a9		a5 0e		lda $0e		                lda ciblen
.a8ab		95 00		sta $00,x	                sta 0,x
.a8ad		a5 0f		lda $0f		                lda ciblen+1
.a8af		95 01		sta $01,x	                sta 1,x
.a8b1		20 b3 8c	jsr $8cb3	                jsr w_one_minus        ; ( addr-t u-t para1 0 addr u-1 )
.a8b4		20 1e 92	jsr $921e	                jsr w_swap             ; ( addr-t u-t para1 0 u-1 addr )
.a8b7		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; ( addr-t u-t para1 0 u-1 addr+1 )
.a8ba		20 1e 92	jsr $921e	                jsr w_swap             ; ( addr-t u-t para1 0 addr+1 u-1 )
.a8bd		4c 9d a9	jmp $a99d	                jmp _check_for_para2
.a8c0						_prefix_dollar:
.a8c0		b2 0c		lda ($0c)	                lda (cib)
.a8c2		c9 24		cmp #$24	                cmp #'$'
.a8c4		d0 1c		bne $a8e2	                bne _prefix_percent
.a8c6		20 40 ad	jsr $ad40	                jsr ed_have_text
.a8c9		e8		inx		                inx
.a8ca		e8		inx		                inx                     ; ( addr-t u-t 0 )
.a8cb		20 6d ad	jsr $ad6d	                jsr ed_last_line          ; ( addr-t u-t 0 para1 )
.a8ce		20 1e 92	jsr $921e	                jsr w_swap             ; SWAP ( addr-t u-t para1 0 )
.a8d1		a9 80		lda #$80	                lda #%10000000
.a8d3		04 39		tsb $39		                tsb ed_flags
.a8d5		a5 0e		lda $0e		                lda ciblen
.a8d7		3a		dec a		                dea                     ; sets Z if A was 1
.a8d8		d0 03		bne $a8dd	                bne +
.a8da		4c 45 a9	jmp $a945	                jmp _line_number_only_from_external
.a8dd						+
.a8dd		a0 01		ldy #$01	                ldy #01
.a8df		4c 19 aa	jmp $aa19	                jmp _check_command
.a8e2						_prefix_percent:
.a8e2		b2 0c		lda ($0c)	                lda (cib)
.a8e4		c9 25		cmp #$25	                cmp #'%'                ; ASCII '%'
.a8e6		f0 04		beq $a8ec	                beq _whole_text
.a8e8		c9 2c		cmp #$2c	                cmp #','                ; ASCII ','
.a8ea		d0 17		bne $a903	                bne _prefix_semicolon
.a8ec						_whole_text:
.a8ec		20 40 ad	jsr $ad40	                jsr ed_have_text
.a8ef		a9 01		lda #$01	                lda #01
.a8f1		95 02		sta $02,x	                sta 2,x                 ; LSB of NOS is para 1
.a8f3		74 03		stz $03,x	                stz 3,x                 ; ( addr-t u-t para1 0 )
.a8f5						_semicolon_entry:
.a8f5		e8		inx		                inx
.a8f6		e8		inx		                inx                     ; DROP ( addr-t u-t para1 )
.a8f7		20 6d ad	jsr $ad6d	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.a8fa		a9 80		lda #$80	                lda #%10000000
.a8fc		04 39		tsb $39		                tsb ed_flags
.a8fe		a0 01		ldy #$01	                ldy #01
.a900		4c 19 aa	jmp $aa19	                jmp _check_command
.a903						_prefix_semicolon:
.a903		b2 0c		lda ($0c)	                lda (cib)
.a905		c9 3b		cmp #$3b	                cmp #';'                ; ASCII ';'
.a907		d0 0d		bne $a916	                bne _prefix_number
.a909		20 40 ad	jsr $ad40	                jsr ed_have_text
.a90c		a5 37		lda $37		                lda ed_cur
.a90e		95 02		sta $02,x	                sta 2,x
.a910		a5 38		lda $38		                lda ed_cur+1
.a912		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.a914		80 df		bra $a8f5	                bra _semicolon_entry
.a916						_prefix_number:
.a916		20 71 9e	jsr $9e71	                jsr w_zero
.a919		20 71 9e	jsr $9e71	                jsr w_zero             ; ( addr-t u-t 0 0 0 0 )
.a91c		ca		dex		                dex
.a91d		ca		dex		                dex
.a91e		ca		dex		                dex
.a91f		ca		dex		                dex                     ; ( addr-t u-t 0 0 0 0 ? ? )
.a920		a5 0c		lda $0c		                lda cib
.a922		95 02		sta $02,x	                sta 2,x
.a924		a5 0d		lda $0d		                lda cib+1
.a926		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t 0 0 0 0 cib ? )
.a928		a5 0e		lda $0e		                lda ciblen
.a92a		95 00		sta $00,x	                sta 0,x
.a92c		a5 0f		lda $0f		                lda ciblen+1
.a92e		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 0 0 cib ciblen )
.a930		20 bc 92	jsr $92bc	                jsr w_to_number        ; ( addr-t u-t 0 0 ud addr2 u2 )
.a933		b5 00		lda $00,x	                lda 0,x
.a935		15 01		ora $01,x	                ora 1,x
.a937		d0 24		bne $a95d	                bne _have_unconverted_chars
.a939		e8		inx		                inx
.a93a		e8		inx		                inx
.a93b		e8		inx		                inx
.a93c		e8		inx		                inx                     ; 2DROP ( addr-t u-t 0 0 ud )
.a93d		20 bd 9e	jsr $9ebd	                jsr w_d_to_s           ; D>S ( addr-t u-t 0 0 u )
.a940		20 f8 9c	jsr $9cf8	                jsr w_not_rot          ; -ROT ( addr-t u-t u 0 0 )
.a943		e8		inx		                inx
.a944		e8		inx		                inx                     ; ( addr-t u-t u 0 ) drop through
.a945						_line_number_only_from_external:
.a945		20 1e 92	jsr $921e	                jsr w_swap             ; ( addr-t u-t 0 u )
.a948		20 4b ad	jsr $ad4b	                jsr ed_is_valid_line
.a94b		b0 03		bcs $a950	                bcs +
.a94d		4c 1d ad	jmp $ad1d	                jmp ed_error_2drop
.a950						+
.a950		20 1e 92	jsr $921e	                jsr w_swap             ; ( addr-t u-t u 0 )
.a953		20 da ad	jsr $adda	                jsr ed_para1_to_cur
.a956		a9 80		lda #$80	                lda #%10000000
.a958		04 39		tsb $39		                tsb ed_flags
.a95a		4c f8 ab	jmp $abf8	                jmp ed_cmd_p_from_external
.a95d						_have_unconverted_chars:
.a95d		20 69 86	jsr $8669	                jsr w_dup              ; ( addr-t u-t 0 0 ud addr2 u2 u2 )
.a960		ca		dex		                dex
.a961		ca		dex		                dex                     ; ( addr-t u-t 0 0 ud addr2 u2 u2 ? )
.a962		a5 0e		lda $0e		                lda ciblen
.a964		95 00		sta $00,x	                sta 0,x
.a966		a5 0f		lda $0f		                lda ciblen+1
.a968		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 ud addr2 u2 u2 ciblen )
.a96a		20 5d 87	jsr $875d	                jsr w_equal            ; ( addr-t u-t 0 0 ud addr2 u2 f )
.a96d		b5 00		lda $00,x	                lda 0,x
.a96f		15 01		ora $01,x	                ora 1,x
.a971		f0 0e		beq $a981	                beq _no_command_yet
.a973		8a		txa		                txa
.a974		18		clc		                clc
.a975		69 0a		adc #$0a	                adc #10
.a977		aa		tax		                tax                     ; ( addr-t u-t 0 0 )
.a978		a9 80		lda #$80	                lda #%10000000
.a97a		14 39		trb $39		                trb ed_flags
.a97c		a0 00		ldy #$00	                ldy #00
.a97e		4c 19 aa	jmp $aa19	                jmp _check_command
.a981						_no_command_yet:
.a981		e8		inx		                inx
.a982		e8		inx		                inx                     ; ( ... 0 0 ud addr2 u2 )
.a983		20 59 93	jsr $9359	                jsr w_to_r             ; >R ( ... 0 0 ud addr2 ) (R: u2)
.a986		20 f8 9c	jsr $9cf8	                jsr w_not_rot          ; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.a989		20 bd 9e	jsr $9ebd	                jsr w_d_to_s           ; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.a98c		b5 00		lda $00,x	                lda 0,x                 ; LSB
.a98e		95 06		sta $06,x	                sta 6,x
.a990		b5 01		lda $01,x	                lda 1,x                 ; MSB
.a992		95 07		sta $07,x	                sta 7,x                 ; ( ... para1 0 addr2 para1 ) (R: u2)
.a994		e8		inx		                inx
.a995		e8		inx		                inx                     ; ( addr-t u-t para1 0 addr2 ) (R: u2)
.a996		20 b5 8e	jsr $8eb5	                jsr w_r_from           ; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.a999		a9 80		lda #$80	                lda #%10000000
.a99b		04 39		tsb $39		                tsb ed_flags
.a99d						_check_for_para2:
.a99d		a1 02		lda ($02,x)	                lda (2,x)
.a99f		c9 2c		cmp #$2c	                cmp #','                ; ASCII code for ',' (comma)
.a9a1		f0 0d		beq $a9b0	                beq _got_comma
.a9a3		38		sec		                sec
.a9a4		a5 0e		lda $0e		                lda ciblen
.a9a6		f5 00		sbc $00,x	                sbc 0,x
.a9a8		a8		tay		                tay
.a9a9		e8		inx		                inx
.a9aa		e8		inx		                inx
.a9ab		e8		inx		                inx
.a9ac		e8		inx		                inx                     ; 2DROP ( addr-t u-t para1 0 )
.a9ad		4c 19 aa	jmp $aa19	                jmp _check_command
.a9b0						_got_comma:
.a9b0		f6 02		inc $02,x	                inc 2,x
.a9b2		d0 02		bne $a9b6	                bne +
.a9b4		f6 03		inc $03,x	                inc 3,x                 ; ( addr-t u-t para1 0 addr2+1 u2 )
.a9b6						+
.a9b6		b5 01		lda $01,x	                lda 1,x
.a9b8		f0 02		beq $a9bc	                beq +
.a9ba		d6 01		dec $01,x	                dec 1,x
.a9bc						+
.a9bc		d6 00		dec $00,x	                dec 0,x                 ; ( addr-t u-t para1 0 addr2+1 u2-1 )
.a9be		a1 02		lda ($02,x)	                lda (2,x)
.a9c0		c9 24		cmp #$24	                cmp #$24                ; ASCII for '$'
.a9c2		d0 14		bne $a9d8	                bne _para2_not_dollar
.a9c4		38		sec		                sec
.a9c5		a5 0e		lda $0e		                lda ciblen
.a9c7		f5 02		sbc $02,x	                sbc 2,x
.a9c9		a8		tay		                tay
.a9ca		c8		iny		                iny
.a9cb		5a		phy		                phy
.a9cc		8a		txa		                txa
.a9cd		18		clc		                clc
.a9ce		69 06		adc #$06	                adc #06
.a9d0		aa		tax		                tax                     ; ( addr-t u-t para1 )
.a9d1		20 6d ad	jsr $ad6d	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.a9d4		7a		ply		                ply
.a9d5		4c 19 aa	jmp $aa19	                jmp _check_command
.a9d8						_para2_not_dollar:
.a9d8		20 59 93	jsr $9359	                jsr w_to_r             ; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.a9db		20 71 9e	jsr $9e71	                jsr w_zero             ; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.a9de		20 71 9e	jsr $9e71	                jsr w_zero             ; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.a9e1		20 5c 8f	jsr $8f5c	                jsr w_rot              ; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.a9e4		20 b5 8e	jsr $8eb5	                jsr w_r_from           ; R> ( ... para1 0 0 0 addr2+1 u2-1)
.a9e7		20 69 86	jsr $8669	                jsr w_dup              ; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.a9ea		20 59 93	jsr $9359	                jsr w_to_r             ; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.a9ed		20 bc 92	jsr $92bc	                jsr w_to_number        ; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.a9f0		20 69 86	jsr $8669	                jsr w_dup              ; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.a9f3		20 b5 8e	jsr $8eb5	                jsr w_r_from           ; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.a9f6		20 5d 87	jsr $875d	                jsr w_equal            ; = ( ... para1 0 ud addr3 u3 f )
.a9f9		b5 00		lda $00,x	                lda 0,x
.a9fb		15 01		ora $01,x	                ora 1,x
.a9fd		f0 08		beq $aa07	                beq _second_number
.a9ff		8a		txa		                txa
.aa00		18		clc		                clc
.aa01		69 0c		adc #$0c	                adc #12
.aa03		aa		tax		                tax                     ; back to ( addr-t u-t )
.aa04		4c 21 ad	jmp $ad21	                jmp ed_error
.aa07						_second_number:
.aa07		e8		inx		                inx
.aa08		e8		inx		                inx                     ; ( addr-t u-t para1 0 ud addr3 u3 )
.aa09		38		sec		                sec
.aa0a		a5 0e		lda $0e		                lda ciblen
.aa0c		f5 00		sbc $00,x	                sbc 0,x
.aa0e		48		pha		                pha
.aa0f		20 97 93	jsr $9397	                jsr w_two_drop         ; 2DROP ( addr-t u-t para1 0 ud )
.aa12		20 bd 9e	jsr $9ebd	                jsr w_d_to_s           ; D>S  ( addr-t u-t para1 0 para2 )
.aa15		20 0a 8c	jsr $8c0a	                jsr w_nip              ; NIP ( addr-t u-t para1 para2 )
.aa18		7a		ply		                ply
.aa19						_check_command:
.aa19		24 39		bit $39		                bit ed_flags
.aa1b		30 08		bmi $aa25	                bmi _check_command_have_arg
.aa1d		a5 37		lda $37		                lda ed_cur
.aa1f		95 02		sta $02,x	                sta 2,x
.aa21		a5 38		lda $38		                lda ed_cur+1
.aa23		95 03		sta $03,x	                sta 3,x
.aa25						_check_command_have_arg:
.aa25		b1 0c		lda ($0c),y	                lda (cib),y             ; get mystery char from input
.aa27		85 25		sta $25		                sta tmp1
.aa29		da		phx		                phx
.aa2a		a2 00		ldx #$00	                ldx #00
.aa2c						_cmd_loop:
.aa2c		bd 05 ae	lda $ae05,x	                lda ed_cmd_list,x
.aa2f		f0 07		beq $aa38	                beq _illegal_command    ; zero marks end of list
.aa31		c5 25		cmp $25		                cmp tmp1
.aa33		f0 07		beq $aa3c	                beq _found_cmd
.aa35		e8		inx		                inx
.aa36		80 f4		bra $aa2c	                bra _cmd_loop
.aa38						_illegal_command:
.aa38		fa		plx		                plx
.aa39		4c 1d ad	jmp $ad1d	                jmp ed_error_2drop
.aa3c						_found_cmd:
.aa3c		8a		txa		                txa
.aa3d		0a		asl a		                asl
.aa3e		aa		tax		                tax                     ; X * 2 for table
.aa3f		7c 10 ae	jmp ($ae10,x)	                jmp (ed_cmd_table,x)
.aa42						ed_next_command:
.aa42		e8		inx		                inx
.aa43		e8		inx		                inx
.aa44		e8		inx		                inx
.aa45		e8		inx		                inx                     ; ( addr-t u-t ) Fall through
.aa46		4c 50 a8	jmp $a850	                jmp ed_input_loop
.aa49						ed_all_done:
.aa49		64 0e		stz $0e		                stz ciblen
.aa4b		64 0f		stz $0f		                stz ciblen+1
.aa4d		20 97 93	jsr $9397	                jsr w_two_drop                 ; 2DROP ( addr-t u-t )
.aa50		a5 3a		lda $3a		                lda ed_base
.aa52		85 18		sta $18		                sta base
.aa54		60		rts		                rts
.aa55						ed_cmd_a:
.aa55		fa		plx		                plx
.aa56		e8		inx		                inx
.aa57		e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.aa58						ed_entry_cmd_i:
.aa58		20 a3 ad	jsr $ada3	                jsr ed_num_to_addr        ;  ( addr-t u-t addr1 )
.aa5b		20 ef 83	jsr $83ef	                jsr w_cr
.aa5e						_next_string_loop:
.aa5e		20 2f ad	jsr $ad2f	                jsr ed_get_input
.aa61		b2 0c		lda ($0c)	                lda (cib)
.aa63		c9 2e		cmp #$2e	                cmp #'.'                ; ASCII for '.'
.aa65		d0 16		bne $aa7d	                bne _add_line
.aa67		a4 0e		ldy $0e		                ldy ciblen
.aa69		c0 01		cpy #$01	                cpy #01
.aa6b		d0 10		bne $aa7d	                bne _add_line
.aa6d		a4 0f		ldy $0f		                ldy ciblen+1
.aa6f		d0 0c		bne $aa7d	                bne _add_line
.aa71		e8		inx		                inx
.aa72		e8		inx		                inx
.aa73		a9 40		lda #$40	                lda #%01000000
.aa75		04 39		tsb $39		                tsb ed_flags
.aa77		20 ef 83	jsr $83ef	                jsr w_cr
.aa7a		4c 50 a8	jmp $a850	                jmp ed_input_loop
.aa7d						_add_line:
.aa7d		20 69 86	jsr $8669	                jsr w_dup              ; DUP ( addr-t u-t addr1 addr1 )
.aa80		20 e7 88	jsr $88e7	                jsr w_here             ; HERE ( addr-t u-t addr1 addr1 here )
.aa83		20 1e 92	jsr $921e	                jsr w_swap             ; SWAP ( addr-t u-t addr1 here addr1 )
.aa86		20 e9 87	jsr $87e9	                jsr w_fetch            ; @  ( addr-t u-t addr1 here addr2 )
.aa89		20 b1 83	jsr $83b1	                jsr w_comma            ; ,  ( addr-t u-t addr1 here )
.aa8c		20 7d 93	jsr $937d	                jsr w_tuck             ; TUCK ( addr-t u-t here addr1 here )
.aa8f		20 1e 92	jsr $921e	                jsr w_swap             ; SWAP ( addr-t u-t here here addr1 )
.aa92		20 08 92	jsr $9208	                jsr w_store            ; ! ( addr-t u-t here )
.aa95		20 e7 88	jsr $88e7	                jsr w_here             ; HERE ( addr-t u-t here here2)
.aa98		a5 00		lda $00		                lda cp
.aa9a		18		clc		                clc
.aa9b		69 04		adc #$04	                adc #04
.aa9d		85 00		sta $00		                sta cp
.aa9f		90 02		bcc $aaa3	                bcc +
.aaa1		e6 01		inc $01		                inc cp+1
.aaa3						+
.aaa3		e6 37		inc $37		                inc ed_cur
.aaa5		d0 02		bne $aaa9	                bne +
.aaa7		e6 38		inc $38		                inc ed_cur+1
.aaa9						+
.aaa9		20 e7 88	jsr $88e7	                jsr w_here     ; HERE ( addr-t u-t here here2 here3 )
.aaac		20 69 86	jsr $8669	                jsr w_dup      ; DUP ( addr-t u-t here here2 here3 here3 )
.aaaf		ca		dex		                dex
.aab0		ca		dex		                dex             ; ( addr-t u-t here here2 here3 here3 ? )
.aab1		a5 0c		lda $0c		                lda cib
.aab3		95 00		sta $00,x	                sta 0,x
.aab5		a5 0d		lda $0d		                lda cib+1
.aab7		95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 here3 cib )
.aab9		20 1e 92	jsr $921e	                jsr w_swap     ; SWAP ( addr-t u-t here here2 here3 cib here3 )
.aabc		ca		dex		                dex
.aabd		ca		dex		                dex             ; ( addr-t u-t here here2 here3 cib here3 ? )
.aabe		a5 0e		lda $0e		                lda ciblen
.aac0		95 00		sta $00,x	                sta 0,x
.aac2		a5 0f		lda $0f		                lda ciblen+1
.aac4		95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 cib here3 ciblen )
.aac6		20 d7 8b	jsr $8bd7	                jsr w_move     ; ( addr-t u-t here here2 here3 )
.aac9		18		clc		                clc
.aaca		a5 00		lda $00		                lda cp
.aacc		65 0e		adc $0e		                adc ciblen
.aace		85 00		sta $00		                sta cp
.aad0		90 06		bcc $aad8	                bcc +
.aad2		a5 01		lda $01		                lda cp+1
.aad4		65 0f		adc $0f		                adc ciblen+1
.aad6		85 01		sta $01		                sta cp+1
.aad8						+
.aad8		20 db 8c	jsr $8cdb	                jsr w_over             ; OVER ( addr-t u-t here here2 here3 here2 )
.aadb		20 08 92	jsr $9208	                jsr w_store            ; ! ( addr-t u-t here here2 )
.aade		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; 1+
.aae1		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; 1+ ( addr-t u-t here here2+2 )
.aae4		20 69 86	jsr $8669	                jsr w_dup              ; DUP ( addr-t u-t here here2+2 here2+2 )
.aae7		a5 0e		lda $0e		                lda ciblen
.aae9		95 02		sta $02,x	                sta 2,x
.aaeb		a5 0f		lda $0f		                lda ciblen+1
.aaed		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t here ciblen here2+2 )
.aaef		20 08 92	jsr $9208	                jsr w_store            ; ! ( addr-t u-t here )
.aaf2		20 ef 83	jsr $83ef	                jsr w_cr
.aaf5		4c 5e aa	jmp $aa5e	                jmp _next_string_loop
.aaf8						ed_cmd_d:
.aaf8		fa		plx		                plx
.aaf9		20 40 ad	jsr $ad40	                jsr ed_have_text
.aafc		20 95 ad	jsr $ad95	                jsr ed_no_line_zero
.aaff		b5 00		lda $00,x	                lda 0,x
.ab01		15 01		ora $01,x	                ora 1,x
.ab03		d0 08		bne $ab0d	                bne +
.ab05		20 db 8c	jsr $8cdb	                jsr w_over             ; ( addr-t u-t para1 0 para1 )
.ab08		20 4a ab	jsr $ab4a	                jsr _cmd_d_common       ; ( addr-t u-t para1 0 )
.ab0b		80 33		bra $ab40	                bra _cmd_d_done
.ab0d						+
.ab0d		20 4b ad	jsr $ad4b	                jsr ed_is_valid_line      ; result is in C flag
.ab10		b0 03		bcs $ab15	                bcs _cmd_d_loop
.ab12		4c 1d ad	jmp $ad1d	                jmp ed_error_2drop
.ab15						_cmd_d_loop:
.ab15		20 9f 93	jsr $939f	                jsr w_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.ab18		20 d5 88	jsr $88d5	                jsr w_greater_than     ; > ( addr-t u-t para1 para2 f )
.ab1b		b5 00		lda $00,x	                lda 0,x
.ab1d		15 01		ora $01,x	                ora 1,x
.ab1f		d0 0d		bne $ab2e	                bne _cmd_d_done_with_flag
.ab21		e8		inx		                inx
.ab22		e8		inx		                inx                     ; Get rid of the flag from >
.ab23		20 69 86	jsr $8669	                jsr w_dup              ; DUP ( addr-t u-t para1 para2 para2 )
.ab26		20 4a ab	jsr $ab4a	                jsr _cmd_d_common       ; ( addr-t u-t para1 para2 )
.ab29		20 b3 8c	jsr $8cb3	                jsr w_one_minus        ; 1- ( addr-t u-t para1 para2-1 )
.ab2c		80 e7		bra $ab15	                bra _cmd_d_loop
.ab2e						_cmd_d_done_with_flag:
.ab2e		e8		inx		                inx                     ; ( addr-t u-t para1 para2 )
.ab2f		e8		inx		                inx
.ab30		b5 02		lda $02,x	                lda 2,x
.ab32		d0 02		bne $ab36	                bne +
.ab34		d6 03		dec $03,x	                dec 3,x
.ab36						+
.ab36		d6 02		dec $02,x	                dec 2,x
.ab38		b5 02		lda $02,x	                lda 2,x
.ab3a		85 37		sta $37		                sta ed_cur
.ab3c		b5 03		lda $03,x	                lda 3,x
.ab3e		85 38		sta $38		                sta ed_cur+1            ; drop through to _cmd_d_done
.ab40						_cmd_d_done:
.ab40		a9 40		lda #$40	                lda #%01000000
.ab42		04 39		tsb $39		                tsb ed_flags
.ab44		20 ef 83	jsr $83ef	                jsr w_cr
.ab47		4c 42 aa	jmp $aa42	                jmp ed_next_command
.ab4a						_cmd_d_common:
.ab4a		20 69 86	jsr $8669	                jsr w_dup              ; DUP ( addr-t u-t u u )
.ab4d		20 a3 ad	jsr $ada3	                jsr ed_num_to_addr        ; ( addr-t u-t u addr )
.ab50		20 e9 87	jsr $87e9	                jsr w_fetch            ; @ ( addr-t u-t u addr1 )
.ab53		20 1e 92	jsr $921e	                jsr w_swap             ; SWAP ( addr-t u-t addr1 u )
.ab56		20 b3 8c	jsr $8cb3	                jsr w_one_minus        ; 1- ( addr-t u-t addr1 u-1 )
.ab59		20 a3 ad	jsr $ada3	                jsr ed_num_to_addr        ; ( addr-t u-t addr1 addr-1 )
.ab5c		20 08 92	jsr $9208	                jsr w_store            ; ! ( addr-t u-t )
.ab5f		60		rts		                rts
.ab60						ed_cmd_equ:
.ab60		fa		plx		                plx
.ab61		a5 35		lda $35		                lda ed_head
.ab63		05 36		ora $36		                ora ed_head+1
.ab65		d0 08		bne $ab6f	                bne _cmd_equ_have_text
.ab67		ca		dex		                dex
.ab68		ca		dex		                dex
.ab69		74 00		stz $00,x	                stz 0,x
.ab6b		74 01		stz $01,x	                stz 1,x                 ; ( addr-t u-t para1 para2 0 )
.ab6d		80 21		bra $ab90	                bra _cmd_equ_done
.ab6f						_cmd_equ_have_text:
.ab6f		20 95 ad	jsr $ad95	                jsr ed_no_line_zero
.ab72		24 39		bit $39		                bit ed_flags
.ab74		30 0c		bmi $ab82	                bmi _cmd_equ_have_para
.ab76		ca		dex		                dex
.ab77		ca		dex		                dex                     ; ( addr-t u-t para1 para2 ? )
.ab78		a5 37		lda $37		                lda ed_cur
.ab7a		95 00		sta $00,x	                sta 0,x
.ab7c		a5 38		lda $38		                lda ed_cur+1
.ab7e		95 01		sta $01,x	                sta 1,x
.ab80		80 0e		bra $ab90	                bra _cmd_equ_done       ; ( addr-t u-t para1 para2 cur )
.ab82						_cmd_equ_have_para:
.ab82		b5 00		lda $00,x	                lda 0,x
.ab84		15 01		ora $01,x	                ora 1,x
.ab86		d0 05		bne $ab8d	                bne _cmd_equ_two_paras
.ab88		20 db 8c	jsr $8cdb	                jsr w_over             ; ( addr-t u-t para1 para2 para1)
.ab8b		80 03		bra $ab90	                bra _cmd_equ_done
.ab8d						_cmd_equ_two_paras:
.ab8d		20 69 86	jsr $8669	                jsr w_dup              ; ( addr-t u-t para1 para2 para2) drop through
.ab90						_cmd_equ_done:
.ab90		20 ef 83	jsr $83ef	                jsr w_cr               ; number goes on new line
.ab93		20 df 94	jsr $94df	                jsr w_u_dot            ; ( addr-t u-t para1 para2 )
.ab96		20 ef 83	jsr $83ef	                jsr w_cr
.ab99		4c 42 aa	jmp $aa42	                jmp ed_next_command
.ab9c						ed_cmd_f:
.ab9c		fa		plx		                plx
.ab9d		24 39		bit $39		                bit ed_flags
.ab9f		30 17		bmi $abb8	                bmi _cmd_f_have_para
.aba1		20 ef 83	jsr $83ef	                jsr w_cr
.aba4		20 59 93	jsr $9359	                jsr w_to_r             ; >R   ( addr-t u-t 0 ) ( R: 0 )
.aba7		20 5c 8f	jsr $8f5c	                jsr w_rot              ; ROT  ( u-t 0 addr-t ) ( R: 0 )
.abaa		20 69 86	jsr $8669	                jsr w_dup              ; DUP  ( u-t 0 addr-t addr-t ) ( R: 0 )
.abad		20 df 94	jsr $94df	                jsr w_u_dot            ; U.   ( u-t 0 addr-t ) ( R: 0 )
.abb0		20 f8 9c	jsr $9cf8	                jsr w_not_rot          ; -ROT ( addr-t u-t 0 ) ( R: 0 )
.abb3		20 b5 8e	jsr $8eb5	                jsr w_r_from           ; R>   ( addr-t u-t 0 0 )
.abb6		80 11		bra $abc9	                bra _cmd_f_done
.abb8						_cmd_f_have_para:
.abb8		20 db 8c	jsr $8cdb	                jsr w_over
.abbb		20 ef 83	jsr $83ef	                jsr w_cr
.abbe		20 df 94	jsr $94df	                jsr w_u_dot
.abc1		b5 02		lda $02,x	                lda 2,x
.abc3		95 06		sta $06,x	                sta 6,x
.abc5		b5 03		lda $03,x	                lda 3,x
.abc7		95 07		sta $07,x	                sta 7,x                 ; fall through to _cmd_f_done
.abc9						_cmd_f_done:
.abc9		20 ef 83	jsr $83ef	                jsr w_cr
.abcc		4c 42 aa	jmp $aa42	                jmp ed_next_command
.abcf						ed_cmd_i:
.abcf		fa		plx		                plx
.abd0		e8		inx		                inx
.abd1		e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.abd2		24 39		bit $39		                bit ed_flags
.abd4		30 08		bmi $abde	                bmi _cmd_i_have_para
.abd6		a5 37		lda $37		                lda ed_cur
.abd8		95 00		sta $00,x	                sta 0,x
.abda		a5 38		lda $38		                lda ed_cur+1
.abdc		95 01		sta $01,x	                sta 1,x                 ;  ( addr-t u-t cur ) drop through
.abde						_cmd_i_have_para:
.abde		b5 00		lda $00,x	                lda 0,x
.abe0		15 01		ora $01,x	                ora 1,x
.abe2		f0 09		beq $abed	                beq _cmd_i_done
.abe4		20 b3 8c	jsr $8cb3	                jsr w_one_minus        ; 1-  ( addr-t u-t para1-1 )
.abe7		20 71 9e	jsr $9e71	                jsr w_zero             ; 0   ( addr-t u-t para1-1 0 )
.abea		20 83 8b	jsr $8b83	                jsr w_max              ; MAX ( addr-t u-t para1-1 | 0 )
.abed						_cmd_i_done:
.abed		4c 58 aa	jmp $aa58	                jmp ed_entry_cmd_i
.abf0						ed_cmd_n:
.abf0		fa		plx		                plx
.abf1		a9 01		lda #$01	                lda #%00000001
.abf3		04 39		tsb $39		                tsb ed_flags
.abf5		80 05		bra $abfc	                bra ed_cmd_p_entry_for_cmd_n
.abf7						ed_cmd_p:
.abf7		fa		plx		                plx
.abf8						ed_cmd_p_from_external:
.abf8		a9 01		lda #$01	                lda #%00000001
.abfa		14 39		trb $39		                trb ed_flags
.abfc						ed_cmd_p_entry_for_cmd_n:
.abfc		20 40 ad	jsr $ad40	                jsr ed_have_text
.abff		20 95 ad	jsr $ad95	                jsr ed_no_line_zero
.ac02		20 ef 83	jsr $83ef	                jsr w_cr
.ac05		b5 00		lda $00,x	                lda 0,x
.ac07		15 01		ora $01,x	                ora 1,x
.ac09		d0 10		bne $ac1b	                bne _cmd_p_loop
.ac0b		b5 02		lda $02,x	                lda 2,x
.ac0d		85 37		sta $37		                sta ed_cur
.ac0f		b5 03		lda $03,x	                lda 3,x
.ac11		85 38		sta $38		                sta ed_cur+1
.ac13		20 db 8c	jsr $8cdb	                jsr w_over             ; OVER ( addr-t u-t para1 para2 para1 )
.ac16		20 44 ac	jsr $ac44	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.ac19		80 26		bra $ac41	                bra _cmd_p_all_done
.ac1b						_cmd_p_loop:
.ac1b		20 9f 93	jsr $939f	                jsr w_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.ac1e		20 d5 88	jsr $88d5	                jsr w_greater_than     ; > ( addr-t u-t para1 para2 f )
.ac21		b5 00		lda $00,x	                lda 0,x
.ac23		15 01		ora $01,x	                ora 1,x
.ac25		d0 10		bne $ac37	                bne _cmd_p_done
.ac27		e8		inx		                inx
.ac28		e8		inx		                inx                     ; Get rid of the flag from >
.ac29		20 db 8c	jsr $8cdb	                jsr w_over             ; ( addr-t u-t para1 para2 para1 )
.ac2c		20 44 ac	jsr $ac44	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.ac2f		f6 02		inc $02,x	                inc 2,x
.ac31		d0 02		bne $ac35	                bne +
.ac33		f6 03		inc $03,x	                inc 3,x
.ac35						+
.ac35		80 e4		bra $ac1b	                bra _cmd_p_loop
.ac37						_cmd_p_done:
.ac37		e8		inx		                inx
.ac38		e8		inx		                inx                     ; fall through to _cmp_p_all_done
.ac39		b5 00		lda $00,x	                lda 0,x
.ac3b		85 37		sta $37		                sta ed_cur
.ac3d		b5 01		lda $01,x	                lda 1,x
.ac3f		85 38		sta $38		                sta ed_cur+1
.ac41						_cmd_p_all_done:
.ac41		4c 42 aa	jmp $aa42	                jmp ed_next_command
.ac44						_cmd_p_common:
.ac44		a5 39		lda $39		                lda ed_flags
.ac46		4a		lsr a		                lsr                     ; bit 0 now in carry
.ac47		90 0b		bcc $ac54	                bcc _cmd_p_common_no_num
.ac49		20 69 86	jsr $8669	                jsr w_dup              ; DUP ( addr-t u-t para1 para1 )
.ac4c		20 df 94	jsr $94df	                jsr w_u_dot            ; U. ( addr-t u-t para1 )
.ac4f		a9 09		lda #$09	                lda #$09                 ; ASCII for Tab
.ac51		20 93 86	jsr $8693	                jsr emit_a
.ac54						_cmd_p_common_no_num:
.ac54		20 a3 ad	jsr $ada3	                jsr ed_num_to_addr        ; ( addr-t u-t addr )
.ac57		20 e3 ad	jsr $ade3	                jsr ed_print_addr
.ac5a		60		rts		                rts
.ac5b						ed_cmd_q:
.ac5b		fa		plx		                plx
.ac5c		24 39		bit $39		                bit ed_flags            ; bit 6 is change flag
.ac5e		50 03		bvc $ac63	                bvc +
.ac60		4c 1d ad	jmp $ad1d	                jmp ed_error_2drop
.ac63						+
.ac63		4c 49 aa	jmp $aa49	                jmp ed_all_done            ; can't fall thru because of PLX
.ac66						ed_cmd_qq:
.ac66		fa		plx		                plx
.ac67		4c 49 aa	jmp $aa49	                jmp ed_all_done
.ac6a						ed_cmd_w:
.ac6a		fa		plx		                plx
.ac6b		20 40 ad	jsr $ad40	                jsr ed_have_text
.ac6e		24 39		bit $39		                bit ed_flags
.ac70		30 13		bmi $ac85	                bmi _cmd_w_have_para
.ac72		b5 06		lda $06,x	                lda 6,x
.ac74		15 07		ora $07,x	                ora 7,x
.ac76		d0 03		bne $ac7b	                bne +
.ac78		4c 1d ad	jmp $ad1d	                jmp ed_error_2drop
.ac7b						+
.ac7b		b5 06		lda $06,x	                lda 6,x
.ac7d		95 02		sta $02,x	                sta 2,x
.ac7f		b5 07		lda $07,x	                lda 7,x
.ac81		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t addr-t ? )
.ac83		80 08		bra $ac8d	                bra _cmd_w_para_ready
.ac85						_cmd_w_have_para:
.ac85		b5 02		lda $02,x	                lda 2,x
.ac87		95 06		sta $06,x	                sta 6,x
.ac89		b5 03		lda $03,x	                lda 3,x
.ac8b		95 07		sta $07,x	                sta 7,x                 ; drop through to _cmd_w_para_ready
.ac8d						_cmd_w_para_ready:
.ac8d		a9 35		lda #$35	                lda #<ed_head
.ac8f		95 00		sta $00,x	                sta 0,x
.ac91		a9 00		lda #$00	                lda #>ed_head
.ac93		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t addr-t addr-h )
.ac95		20 db 8c	jsr $8cdb	                jsr w_over             ; OVER ( addr-t u-t addr-t addr-h addr-t )
.ac98		20 59 93	jsr $9359	                jsr w_to_r             ; >R ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.ac9b						_cmd_w_loop:
.ac9b		20 e9 87	jsr $87e9	                jsr w_fetch            ; @ ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.ac9e		b5 00		lda $00,x	                lda 0,x
.aca0		15 01		ora $01,x	                ora 1,x
.aca2		f0 55		beq $acf9	                beq _cmd_w_eol
.aca4		20 9f 93	jsr $939f	                jsr w_two_dup          ; 2DUP ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.aca7		20 91 94	jsr $9491	                jsr w_two_to_r         ; 2>R  ( addr-t addr-1 ) (R: ... )
.acaa		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; 1+ ( addr-t addr1+1 ) (R: ... )
.acad		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; 1+ ( addr-t addr1+2 ) (R: ... )
.acb0		20 69 86	jsr $8669	                jsr w_dup              ; DUP ( addr-t addr1+2 addr1+2 ) ( R: ... )
.acb3		20 e9 87	jsr $87e9	                jsr w_fetch            ; @ ( addr-t addr1+2 addr-s ) ( R: ... )
.acb6		20 1e 92	jsr $921e	                jsr w_swap             ; SWAP ( addr-t addr-s addr1+2 ) ( R: ... )
.acb9		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; 1+ ( addr-t addr-s addr1+1 ) (R: ... )
.acbc		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; 1+ ( addr-t addr-s addr1+2 ) (R: ... )
.acbf		20 e9 87	jsr $87e9	                jsr w_fetch            ; @ ( addr-t addr-s u-s ) ( R: ... )
.acc2		20 f8 9c	jsr $9cf8	                jsr w_not_rot          ; -ROT ( u-s addr-t addr-s ) ( R: ... )
.acc5		20 1e 92	jsr $921e	                jsr w_swap             ; SWAP ( u-s addr-s addr-t ) ( R: ... )
.acc8		20 5c 8f	jsr $8f5c	                jsr w_rot              ; ROT (addr-s addr-t u-s ) ( R: ... )
.accb		20 69 86	jsr $8669	                jsr w_dup              ; DUP (addr-s addr-t u-s u-s ) ( R: ... )
.acce		20 59 93	jsr $9359	                jsr w_to_r             ; >R (addr-s addr-t u-s ) ( R: ... u-s )
.acd1		20 d7 8b	jsr $8bd7	                jsr w_move             ; MOVE ( )( R: addr-t addr-1 addr-t )
.acd4		20 b5 8e	jsr $8eb5	                jsr w_r_from           ; R> ( u-s )  ( R: addr-t addr-h addr-t )
.acd7		20 17 94	jsr $9417	                jsr w_two_r_from       ; 2R> ( u-s addr-t addr-h ) ( R: addr-t )
.acda		20 f8 9c	jsr $9cf8	                jsr w_not_rot          ; -ROT ( addr-h u-s addr-t ) ( R: addr-t )
.acdd		20 29 8e	jsr $8e29	                jsr w_plus             ; + ( addr-h addr-t1 ) ( R: addr-t )
.ace0		20 69 86	jsr $8669	                jsr w_dup              ; DUP ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.ace3		ca		dex		                dex
.ace4		ca		dex		                dex                     ; ( addr-h addr-t1 addr-t1 ? ) ( R: addr-t )
.ace5		a9 0a		lda #$0a	                lda #AscLF              ; ASCII for LF
.ace7		95 00		sta $00,x	                sta 0,x
.ace9		74 01		stz $01,x	                stz 1,x                 ; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.aceb		20 1e 92	jsr $921e	                jsr w_swap             ; SWAP ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.acee		20 08 92	jsr $9208	                jsr w_store            ; ! ( addr-h addr-t1 ) ( R: addr-t )
.acf1		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; 1+ ( addr-h addr-t1+1 ) ( R: addr-t )
.acf4		20 1e 92	jsr $921e	                jsr w_swap             ; SWAP ( addr-t1+1 addr-h ) ( R: addr-t )
.acf7		80 a2		bra $ac9b	                bra _cmd_w_loop
.acf9						_cmd_w_eol:
.acf9		20 1e 92	jsr $921e	                jsr w_swap             ; SWAP ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.acfc		20 b5 8e	jsr $8eb5	                jsr w_r_from           ; R> ( addr-t u-t addr-n addr-tn addr-t )
.acff		20 bb 8b	jsr $8bbb	                jsr w_minus            ; - ( addr-t u-t addr-n u )
.ad02		b5 00		lda $00,x	                lda 0,x
.ad04		95 04		sta $04,x	                sta 4,x
.ad06		b5 01		lda $01,x	                lda 1,x
.ad08		95 05		sta $05,x	                sta 5,x                 ; ( addr-t u addr-n u )
.ad0a		20 ef 83	jsr $83ef	                jsr w_cr
.ad0d		20 69 86	jsr $8669	                jsr w_dup              ; DUP ( addr-t u addr-n u u )
.ad10		20 df 94	jsr $94df	                jsr w_u_dot            ; U. ( addr-t u addr-n u )
.ad13		20 ef 83	jsr $83ef	                jsr w_cr
.ad16		a9 40		lda #$40	                lda #%01000000
.ad18		14 39		trb $39		                trb ed_flags
.ad1a		4c 42 aa	jmp $aa42	                jmp ed_next_command
.ad1d						ed_error_2drop:
.ad1d		e8		inx		                inx
.ad1e		e8		inx		                inx                     ; drop through to _error_1drop
.ad1f						ed_error_1drop:
.ad1f		e8		inx		                inx
.ad20		e8		inx		                inx                     ; drop through to _error
.ad21						ed_error:
.ad21		20 ef 83	jsr $83ef	                jsr w_cr
.ad24		a9 3f		lda #$3f	                lda #'?'
.ad26		20 93 86	jsr $8693	                jsr emit_a
.ad29		20 ef 83	jsr $83ef	                jsr w_cr
.ad2c		4c 50 a8	jmp $a850	                jmp ed_input_loop
.ad2f						ed_get_input:
.ad2f		20 07 8f	jsr $8f07	                jsr w_refill           ;  ( addr-t u-t f )
.ad32		b5 00		lda $00,x	                lda 0,x
.ad34		15 01		ora $01,x	                ora 1,x
.ad36		d0 05		bne $ad3d	                bne +
.ad38		7a		ply		                ply
.ad39		7a		ply		                ply
.ad3a		4c 1f ad	jmp $ad1f	                jmp ed_error_1drop
.ad3d						+
.ad3d		e8		inx		                inx
.ad3e		e8		inx		                inx
.ad3f		60		rts		                rts
.ad40						ed_have_text:
.ad40		a5 35		lda $35		                lda ed_head
.ad42		05 36		ora $36		                ora ed_head+1
.ad44		d0 04		bne $ad4a	                bne +
.ad46		7a		ply		                ply
.ad47		7a		ply		                ply
.ad48		80 d7		bra $ad21	                bra ed_error
.ad4a						+
.ad4a		60		rts		                rts
.ad4b						ed_is_valid_line:
.ad4b		38		sec		                sec                             ; default is legal line number
.ad4c		b5 00		lda $00,x	                lda 0,x
.ad4e		15 01		ora $01,x	                ora 1,x
.ad50		f0 19		beq $ad6b	                beq _is_valid_line_nope_zero    ; ( n )
.ad52		20 69 86	jsr $8669	                jsr w_dup                      ; DUP ( n n )
.ad55		20 6d ad	jsr $ad6d	                jsr ed_last_line                  ; ( n n last )
.ad58		20 1e 92	jsr $921e	                jsr w_swap                     ; SWAP ( n last n )
.ad5b		20 be 89	jsr $89be	                jsr w_less_than                ; < ( n f )
.ad5e		b5 00		lda $00,x	                lda 0,x                         ; 0 flag is good
.ad60		15 01		ora $01,x	                ora 1,x
.ad62		d0 05		bne $ad69	                bne _is_valid_line_too_small
.ad64		e8		inx		                inx
.ad65		e8		inx		                inx                     ; DROP flag ( n )
.ad66		38		sec		                sec                     ; Who knows what's happened to C by now
.ad67		80 03		bra $ad6c	                bra _is_valid_line_done ; only one exit from this routine
.ad69						_is_valid_line_too_small:
.ad69		e8		inx		                inx
.ad6a		e8		inx		                inx                     ; drop through to _is_valid_line_zero
.ad6b						_is_valid_line_nope_zero:
.ad6b		18		clc		                clc                     ; drop through to _is_valid_line_done
.ad6c						_is_valid_line_done:
.ad6c		60		rts		                rts
.ad6d						ed_last_line:
.ad6d		64 25		stz $25		                stz tmp1
.ad6f		64 26		stz $26		                stz tmp1+1
.ad71		ca		dex		                dex
.ad72		ca		dex		                dex                     ; ( ? )
.ad73		a9 35		lda #$35	                lda #<ed_head
.ad75		95 00		sta $00,x	                sta 0,x
.ad77		a9 00		lda #$00	                lda #>ed_head
.ad79		95 01		sta $01,x	                sta 1,x                 ; ( addr )
.ad7b						_last_line_loop:
.ad7b		20 e9 87	jsr $87e9	                jsr w_fetch            ; ( addr | 0 )
.ad7e		b5 00		lda $00,x	                lda 0,x
.ad80		15 01		ora $01,x	                ora 1,x
.ad82		f0 08		beq $ad8c	                beq _last_line_done
.ad84		e6 25		inc $25		                inc tmp1
.ad86		d0 02		bne $ad8a	                bne +
.ad88		e6 26		inc $26		                inc tmp1+1
.ad8a						+
.ad8a		80 ef		bra $ad7b	                bra _last_line_loop
.ad8c						_last_line_done:
.ad8c		a5 25		lda $25		                lda tmp1
.ad8e		95 00		sta $00,x	                sta 0,x
.ad90		a5 26		lda $26		                lda tmp1+1
.ad92		95 01		sta $01,x	                sta 1,x                 ; ( u )
.ad94		60		rts		                rts
.ad95						ed_no_line_zero:
.ad95		b5 02		lda $02,x	                lda 2,x
.ad97		15 03		ora $03,x	                ora 3,x
.ad99		d0 07		bne $ada2	                bne _no_line_zero_done
.ad9b		24 39		bit $39		                bit ed_flags
.ad9d		10 03		bpl $ada2	                bpl _no_line_zero_done
.ad9f		4c 1d ad	jmp $ad1d	                jmp ed_error_2drop
.ada2						_no_line_zero_done:
.ada2		60		rts		                rts
.ada3						ed_num_to_addr:
.ada3		ca		dex		                dex
.ada4		ca		dex		                dex                     ; ( u ? )
.ada5		a9 35		lda #$35	                lda #<ed_head
.ada7		95 00		sta $00,x	                sta 0,x
.ada9		a9 00		lda #$00	                lda #>ed_head
.adab		95 01		sta $01,x	                sta 1,x                 ; ( u addr-h )
.adad		b5 02		lda $02,x	                lda 2,x
.adaf		15 03		ora $03,x	                ora 3,x
.adb1		d0 05		bne $adb8	                bne _num_to_addr_loop
.adb3		20 0a 8c	jsr $8c0a	                jsr w_nip              ; ( addr-h )
.adb6		80 21		bra $add9	                bra _num_to_addr_done
.adb8						_num_to_addr_loop:
.adb8		20 e9 87	jsr $87e9	                jsr w_fetch            ; @ ( u addr1 )
.adbb		b5 00		lda $00,x	                lda 0,x
.adbd		15 01		ora $01,x	                ora 1,x
.adbf		d0 05		bne $adc6	                bne +
.adc1		20 0a 8c	jsr $8c0a	                jsr w_nip              ; NIP ( addr1 )
.adc4		80 13		bra $add9	                bra _num_to_addr_done
.adc6						+
.adc6		20 1e 92	jsr $921e	                jsr w_swap             ; SWAP ( addr1 u )
.adc9		20 b3 8c	jsr $8cb3	                jsr w_one_minus        ; 1- ( addr1 u-1 )
.adcc		b5 00		lda $00,x	                lda 0,x
.adce		15 01		ora $01,x	                ora 1,x
.add0		f0 05		beq $add7	                beq _num_to_addr_finished
.add2		20 1e 92	jsr $921e	                jsr w_swap             ; SWAP ( u-1 addr1 )
.add5		80 e1		bra $adb8	                bra _num_to_addr_loop
.add7						_num_to_addr_finished:
.add7		e8		inx		                inx
.add8		e8		inx		                inx                     ; ( addr )
.add9						_num_to_addr_done:
.add9		60		rts		                rts
.adda						ed_para1_to_cur:
.adda		b5 02		lda $02,x	                lda 2,x
.addc		85 37		sta $37		                sta ed_cur
.adde		b5 03		lda $03,x	                lda 3,x
.ade0		85 38		sta $38		                sta ed_cur+1
.ade2		60		rts		                rts
.ade3						ed_print_addr:
.ade3		20 bf 8c	jsr $8cbf	                jsr w_one_plus
.ade6		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; ( addr+2 )
.ade9		20 69 86	jsr $8669	                jsr w_dup              ; ( addr+2 addr+2 )
.adec		20 bf 8c	jsr $8cbf	                jsr w_one_plus
.adef		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; ( addr+2 addr+4 )
.adf2		20 e9 87	jsr $87e9	                jsr w_fetch            ; ( addr+2 u-s )
.adf5		20 1e 92	jsr $921e	                jsr w_swap             ; ( u-s addr+2 )
.adf8		20 e9 87	jsr $87e9	                jsr w_fetch            ; ( u-s addr-s )
.adfb		20 1e 92	jsr $921e	                jsr w_swap             ; ( addr-s u-s )
.adfe		20 b4 94	jsr $94b4	                jsr w_type
.ae01		20 ef 83	jsr $83ef	                jsr w_cr
.ae04		60		rts		                rts
>ae05		61 66 69 64 70 6e 3d 77		ed_cmd_list:    .text "afidpn=wqQ", 0
>ae0d		71 51 00
.ae10						ed_cmd_table:
>ae10		55 aa 9c ab cf ab f8 aa		                .word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>ae18		f7 ab f0 ab
>ae1c		60 ab 6a ac 5b ac 66 ac		                .word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.ae24						ed6502_end:

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/block.asm

.ae24						xt_blk:
.ae24						w_blk:
.ae24		a9 04		lda #$04	                lda #blk_offset
.ae26		4c 88 d6	jmp $d688	                jmp push_upvar_tos
.ae29						z_blk:
.ae29						xt_blkbuffer:
.ae29						w_blkbuffer:
.ae29		ca		dex		                dex
.ae2a		ca		dex		                dex
.ae2b		a0 2c		ldy #$2c	                ldy #blkbuffer_offset
.ae2d		b1 08		lda ($08),y	                lda (up),y
.ae2f		95 00		sta $00,x	                sta 0,x
.ae31		c8		iny		                iny             ; Move along to the next byte
.ae32		b1 08		lda ($08),y	                lda (up),y
.ae34		95 01		sta $01,x	                sta 1,x
.ae36		60		rts		z_blkbuffer:    rts
.ae37						xt_block:
.ae37						w_block:
.ae37		a0 2e		ldy #$2e	                ldy #buffblocknum_offset
.ae39		b1 08		lda ($08),y	                lda (up),y
.ae3b		d5 00		cmp $00,x	                cmp 0,x
.ae3d		d0 0f		bne $ae4e	                bne _not_in_buffer
.ae3f		c8		iny		                iny
.ae40		b1 08		lda ($08),y	                lda (up),y
.ae42		d5 01		cmp $01,x	                cmp 1,x
.ae44		d0 08		bne $ae4e	                bne _not_in_buffer
.ae46		a0 30		ldy #$30	                ldy #buffstatus_offset
.ae48		b1 08		lda ($08),y	                lda (up),y
.ae4a		29 01		and #$01	                and #1          ; Check the in-use flag (bit 0)
.ae4c		d0 30		bne $ae7e	                bne _done       ; It's already in the buffer and in use.
.ae4e						_not_in_buffer:
.ae4e		a0 30		ldy #$30	                ldy #buffstatus_offset
.ae50		b1 08		lda ($08),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.ae52		c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.ae54		d0 0c		bne $ae62	                bne _buffer_available ; Unused or not dirty = available
.ae56		20 29 ae	jsr $ae29	                jsr w_blkbuffer
.ae59		20 d9 af	jsr $afd9	                jsr w_buffblocknum
.ae5c		20 e9 87	jsr $87e9	                jsr w_fetch
.ae5f		20 c6 af	jsr $afc6	                jsr w_block_write
.ae62						_buffer_available:
.ae62		a0 2e		ldy #$2e	                ldy #buffblocknum_offset
.ae64		b5 00		lda $00,x	                lda 0,x
.ae66		91 08		sta ($08),y	                sta (up),y
.ae68		c8		iny		                iny
.ae69		b5 01		lda $01,x	                lda 1,x
.ae6b		91 08		sta ($08),y	                sta (up),y
.ae6d		20 29 ae	jsr $ae29	                jsr w_blkbuffer
.ae70		20 1e 92	jsr $921e	                jsr w_swap
.ae73		20 ae af	jsr $afae	                jsr w_block_read
.ae76		a9 01		lda #$01	                lda #1
.ae78		a0 30		ldy #$30	                ldy #buffstatus_offset
.ae7a		91 08		sta ($08),y	                sta (up),y
.ae7c		ca		dex		                dex
.ae7d		ca		dex		                dex
.ae7e						_done:
.ae7e		a0 2c		ldy #$2c	                ldy #blkbuffer_offset
.ae80		b1 08		lda ($08),y	                lda (up),y
.ae82		95 00		sta $00,x	                sta 0,x
.ae84		c8		iny		                iny
.ae85		b1 08		lda ($08),y	                lda (up),y
.ae87		95 01		sta $01,x	                sta 1,x
.ae89		60		rts		z_block:        rts
.ae8a						xt_block_ramdrive_init:
.ae8a		20 ca d7	jsr $d7ca	                jsr underflow_1
.ae8d						w_block_ramdrive_init:
.ae8d		20 58 a2	jsr $a258	                jsr sliteral_runtime
>ae90		18 01				                .word ramdrive_code_end-ramdrive_code
.ae92						ramdrive_code:
>ae92		62 61 73 65 20 40 20 73		                .text "base @ swap decimal"
>ae9a		77 61 70 20 64 65 63 69 6d 61 6c
>aea5		20 31 30 32 34 20 2a		                .text " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
>aeac		20 64 75 70			                .text " dup"    ; ( Save a copy for formatting it at the end )
>aeb0		20 62 75 66 66 65 72 3a		                .text " buffer: ramdrive" ; ( Create ramdrive )
>aeb8		20 72 61 6d 64 72 69 76 65
>aec1		20 3a 20 62 6c 6f 63 6b		                .text " : block-read-ramdrive"  ; ( addr u -- )
>aec9		2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65
>aed7		20 72 61 6d 64 72 69 76		                .text " ramdrive swap 1024 * + swap 1024 move ;"
>aedf		65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>aeef		73 77 61 70 20 31 30 32 34 20 6d 6f 76 65 20 3b
>aeff		20 3a 20 62 6c 6f 63 6b		                .text " : block-write-ramdrive" ; ( addr u -- )
>af07		2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65
>af16		20 72 61 6d 64 72 69 76		                .text " ramdrive swap 1024 * + 1024 move ;"
>af1e		65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>af2e		31 30 32 34 20 6d 6f 76 65 20 3b
>af39		20 27 20 62 6c 6f 63 6b		                .text " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
>af41		2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65 20 62
>af51		6c 6f 63 6b 2d 72 65 61 64 2d 76 65 63 74 6f 72
>af61		20 21
>af63		20 27 20 62 6c 6f 63 6b		                .text " ' block-write-ramdrive block-write-vector !"
>af6b		2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65 20
>af7b		62 6c 6f 63 6b 2d 77 72 69 74 65 2d 76 65 63 74
>af8b		6f 72 20 21
>af8f		20 72 61 6d 64 72 69 76		                .text " ramdrive swap blank base !"
>af97		65 20 73 77 61 70 20 62 6c 61 6e 6b 20 62 61 73
>afa7		65 20 21
.afaa						ramdrive_code_end:
.afaa		20 81 88	jsr $8881	                jsr w_evaluate
.afad						z_block_ramdrive_init:
.afad		60		rts		                rts
.afae						xt_block_read:
.afae						w_block_read:
.afae		a0 32		ldy #$32	                ldy #blockread_offset
.afb0		b1 08		lda ($08),y	                lda (up),y
.afb2		85 25		sta $25		                sta tmp1
.afb4		c8		iny		                iny
.afb5		b1 08		lda ($08),y	                lda (up),y
.afb7		85 26		sta $26		                sta tmp1+1
.afb9		6c 25 00	jmp ($0025)	                jmp (tmp1)
.afbc						z_block_read:
.afbc						xt_block_read_vector:
.afbc						w_block_read_vector:
.afbc		a9 32		lda #$32	                lda #blockread_offset
.afbe		4c 88 d6	jmp $d688	                jmp push_upvar_tos
.afc1						z_block_read_vector:
.afc1						xt_block_word_error:
.afc1						w_block_word_error:
.afc1		a9 0c		lda #$0c	                lda #err_blockwords
.afc3		4c e0 d7	jmp $d7e0	                jmp error       ; no RTS needed
.afc6						xt_block_write:
.afc6						w_block_write:
.afc6		a0 34		ldy #$34	                ldy #blockwrite_offset
.afc8		b1 08		lda ($08),y	                lda (up),y
.afca		85 25		sta $25		                sta tmp1
.afcc		c8		iny		                iny
.afcd		b1 08		lda ($08),y	                lda (up),y
.afcf		85 26		sta $26		                sta tmp1+1
.afd1		6c 25 00	jmp ($0025)	                jmp (tmp1)
.afd4						z_block_write:
.afd4						xt_block_write_vector:
.afd4						w_block_write_vector:
.afd4		a9 34		lda #$34	                lda #blockwrite_offset
.afd6		4c 88 d6	jmp $d688	                jmp push_upvar_tos
.afd9						z_block_write_vector:
.afd9						xt_buffblocknum:
.afd9						w_buffblocknum:
.afd9		a9 2e		lda #$2e	                lda #buffblocknum_offset
.afdb		4c 88 d6	jmp $d688	                jmp push_upvar_tos
.afde						z_buffblocknum:
.afde						xt_buffer:
.afde						w_buffer:
.afde		a0 30		ldy #$30	                ldy #buffstatus_offset
.afe0		b1 08		lda ($08),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.afe2		c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.afe4		d0 0c		bne $aff2	                bne _buffer_available ; Unused or not dirty = available
.afe6		20 29 ae	jsr $ae29	                jsr w_blkbuffer
.afe9		20 d9 af	jsr $afd9	                jsr w_buffblocknum
.afec		20 e9 87	jsr $87e9	                jsr w_fetch
.afef		20 c6 af	jsr $afc6	                jsr w_block_write
.aff2						_buffer_available:
.aff2		a0 2e		ldy #$2e	                ldy #buffblocknum_offset
.aff4		b5 00		lda $00,x	                lda 0,x
.aff6		91 08		sta ($08),y	                sta (up),y
.aff8		c8		iny		                iny
.aff9		b5 01		lda $01,x	                lda 1,x
.affb		91 08		sta ($08),y	                sta (up),y
.affd		a9 01		lda #$01	                lda #1
.afff		a0 30		ldy #$30	                ldy #buffstatus_offset
.b001		91 08		sta ($08),y	                sta (up),y
.b003		a0 2c		ldy #$2c	                ldy #blkbuffer_offset
.b005		b1 08		lda ($08),y	                lda (up),y
.b007		95 00		sta $00,x	                sta 0,x
.b009		c8		iny		                iny
.b00a		b1 08		lda ($08),y	                lda (up),y
.b00c		95 01		sta $01,x	                sta 1,x
.b00e		60		rts		z_buffer:       rts
.b00f						xt_buffstatus:
.b00f						w_buffstatus:
.b00f		a9 30		lda #$30	                lda #buffstatus_offset
.b011		4c 88 d6	jmp $d688	                jmp push_upvar_tos
.b014						z_buffstatus:
.b014						xt_empty_buffers:
.b014						w_empty_buffers:
.b014		a0 30		ldy #$30	                ldy #buffstatus_offset
.b016		a9 00		lda #$00	                lda #0
.b018		91 08		sta ($08),y	                sta (up),y      ; Only LSB is used.
.b01a						z_empty_buffers:
.b01a		60		rts		                rts
.b01b						xt_flush:
.b01b						w_flush:
.b01b		20 76 b0	jsr $b076	                jsr w_save_buffers
.b01e		a0 30		ldy #$30	                ldy #buffstatus_offset
.b020		a9 00		lda #$00	                lda #0
.b022		91 08		sta ($08),y	                sta (up),y      ; Only LSB is used.
.b024						z_flush:
.b024		60		rts		                rts
.b025						xt_list:
.b025		20 ca d7	jsr $d7ca	                jsr underflow_1
.b028						w_list:
.b028		20 91 b0	jsr $b091	                jsr w_scr
.b02b		20 08 92	jsr $9208	                jsr w_store
.b02e		20 30 b1	jsr $b130	                jsr w_editor_l
.b031		60		rts		z_list:         rts
.b032						xt_load:
.b032		20 ca d7	jsr $d7ca	                jsr underflow_1
.b035						w_load:
.b035		a0 05		ldy #$05	                ldy #blk_offset+1
.b037		b1 08		lda ($08),y	                lda (up),y
.b039		48		pha		                pha
.b03a		88		dey		                dey
.b03b		b1 08		lda ($08),y	                lda (up),y
.b03d		48		pha		                pha
.b03e		b5 00		lda $00,x	                lda 0,x
.b040		91 08		sta ($08),y	                sta (up),y
.b042		c8		iny		                iny
.b043		b5 01		lda $01,x	                lda 1,x
.b045		91 08		sta ($08),y	                sta (up),y
.b047		20 37 ae	jsr $ae37	                jsr w_block
.b04a		ca		dex		                dex
.b04b		ca		dex		                dex
.b04c		a9 04		lda #$04	                lda #4
.b04e		95 01		sta $01,x	                sta 1,x
.b050		74 00		stz $00,x	                stz 0,x
.b052		20 78 88	jsr $8878	                jsr load_evaluate
.b055		a0 04		ldy #$04	                ldy #blk_offset
.b057		68		pla		                pla
.b058		91 08		sta ($08),y	                sta (up),y
.b05a		c8		iny		                iny
.b05b		68		pla		                pla
.b05c		91 08		sta ($08),y	                sta (up),y
.b05e		88		dey		                dey
.b05f		11 08		ora ($08),y	                ora (up),y
.b061		f0 12		beq $b075	                beq _done
.b063		ca		dex		                dex
.b064		ca		dex		                dex
.b065		a0 04		ldy #$04	                ldy #blk_offset
.b067		b1 08		lda ($08),y	                lda (up),y
.b069		95 00		sta $00,x	                sta 0,x
.b06b		c8		iny		                iny
.b06c		b1 08		lda ($08),y	                lda (up),y
.b06e		95 01		sta $01,x	                sta 1,x
.b070		20 37 ae	jsr $ae37	                jsr w_block
.b073		e8		inx		                inx
.b074		e8		inx		                inx
.b075						_done:
.b075		60		rts		z_load:         rts
.b076						xt_save_buffers:
.b076						w_save_buffers:
.b076		a0 30		ldy #$30	                ldy #buffstatus_offset
.b078		b1 08		lda ($08),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.b07a		c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.b07c		d0 12		bne $b090	                bne _done       ; Either not used or not dirty = done!
.b07e		20 29 ae	jsr $ae29	                jsr w_blkbuffer
.b081		20 d9 af	jsr $afd9	                jsr w_buffblocknum
.b084		20 e9 87	jsr $87e9	                jsr w_fetch
.b087		20 c6 af	jsr $afc6	                jsr w_block_write
.b08a		a9 01		lda #$01	                lda #1
.b08c		a0 30		ldy #$30	                ldy #buffstatus_offset
.b08e		91 08		sta ($08),y	                sta (up),y
.b090						_done:
.b090		60		rts		z_save_buffers: rts
.b091						xt_scr:
.b091						w_scr:
.b091		a9 06		lda #$06	                lda #scr_offset
.b093		4c 88 d6	jmp $d688	                jmp push_upvar_tos
.b096						z_scr:
.b096						xt_thru:
.b096		20 cf d7	jsr $d7cf	                jsr underflow_2
.b099						w_thru:
.b099		b5 01		lda $01,x	                lda 1,x
.b09b		48		pha		                pha
.b09c		b5 00		lda $00,x	                lda 0,x
.b09e		48		pha		                pha
.b09f		e8		inx		                inx
.b0a0		e8		inx		                inx
.b0a1						_thru_loop:
.b0a1		b5 01		lda $01,x	                lda 1,x
.b0a3		48		pha		                pha
.b0a4		b5 00		lda $00,x	                lda 0,x
.b0a6		48		pha		                pha
.b0a7		20 35 b0	jsr $b035	                jsr w_load
.b0aa		68		pla		                pla
.b0ab		85 25		sta $25		                sta tmp1
.b0ad		68		pla		                pla
.b0ae		85 26		sta $26		                sta tmp1+1
.b0b0		68		pla		                pla
.b0b1		85 27		sta $27		                sta tmp2
.b0b3		68		pla		                pla
.b0b4		85 28		sta $28		                sta tmp2+1
.b0b6		c5 26		cmp $26		                cmp tmp1+1
.b0b8		d0 08		bne $b0c2	                bne _next_screen
.b0ba		a5 27		lda $27		                lda tmp2        ; Compare the LSB
.b0bc		c5 25		cmp $25		                cmp tmp1
.b0be		d0 02		bne $b0c2	                bne _next_screen
.b0c0		80 18		bra $b0da	                bra _done       ; We just did the last screen.
.b0c2						_next_screen:
.b0c2		a5 28		lda $28		                lda tmp2+1
.b0c4		48		pha		                pha
.b0c5		a5 27		lda $27		                lda tmp2
.b0c7		48		pha		                pha
.b0c8		e6 25		inc $25		                inc tmp1
.b0ca		d0 02		bne $b0ce	                bne +
.b0cc		e6 26		inc $26		                inc tmp1+1
.b0ce						+
.b0ce		ca		dex		                dex
.b0cf		ca		dex		                dex
.b0d0		a5 25		lda $25		                lda tmp1
.b0d2		95 00		sta $00,x	                sta 0,x
.b0d4		a5 26		lda $26		                lda tmp1+1
.b0d6		95 01		sta $01,x	                sta 1,x
.b0d8		80 c7		bra $b0a1	                bra _thru_loop
.b0da						_done:
.b0da		60		rts		z_thru:         rts
.b0db						xt_update:
.b0db						w_update:
.b0db		a0 30		ldy #$30	                ldy #buffstatus_offset
.b0dd		b1 08		lda ($08),y	                lda (up),y
.b0df		09 02		ora #$02	                ora #2          ; Turn on dirty flag (bit 2)
.b0e1		91 08		sta ($08),y	                sta (up),y
.b0e3		60		rts		z_update:       rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/editor.asm

.b0e4						xt_editor_screen_helper:
.b0e4						w_editor_screen_helper:
.b0e4		20 69 86	jsr $8669	                jsr w_dup
.b0e7		20 91 b0	jsr $b091	                jsr w_scr
.b0ea		20 08 92	jsr $9208	                jsr w_store
.b0ed		4c de af	jmp $afde	                jmp w_buffer
.b0f0						xt_editor_enter_screen:
.b0f0						w_editor_enter_screen:
.b0f0		20 e4 b0	jsr $b0e4	                jsr w_editor_screen_helper
.b0f3		20 63 86	jsr $8663	                jsr w_drop
.b0f6		64 35		stz $35		                stz ed_head
.b0f8						_prompt_loop:
.b0f8		ca		dex		                dex
.b0f9		ca		dex		                dex
.b0fa		a5 35		lda $35		                lda ed_head
.b0fc		95 00		sta $00,x	                sta 0,x
.b0fe		74 01		stz $01,x	                stz 1,x
.b100		20 bf b1	jsr $b1bf	                jsr w_editor_o
.b103		e6 35		inc $35		                inc ed_head
.b105		a9 10		lda #$10	                lda #16
.b107		c5 35		cmp $35		                cmp ed_head
.b109		d0 ed		bne $b0f8	                bne _prompt_loop
.b10b						z_editor_enter_screen:
.b10b		60		rts		                rts
.b10c						xt_editor_erase_screen:
.b10c						w_editor_erase_screen:
.b10c		20 e4 b0	jsr $b0e4	                jsr w_editor_screen_helper
.b10f		ca		dex		                dex
.b110		ca		dex		                dex
.b111		74 00		stz $00,x	                stz 0,x
.b113		a9 04		lda #$04	                lda #4          ; 4 in MSB makes 1024 ($400).
.b115		95 01		sta $01,x	                sta 1,x
.b117		20 79 87	jsr $8779	                jsr w_blank
.b11a		20 db b0	jsr $b0db	                jsr w_update
.b11d						z_editor_erase_screen:
.b11d		60		rts		                rts
.b11e						xt_editor_el:
.b11e						w_editor_el:
.b11e		20 a9 b1	jsr $b1a9	                jsr w_editor_line
.b121		ca		dex		                dex
.b122		ca		dex		                dex
.b123		a9 40		lda #$40	                lda #64
.b125		95 00		sta $00,x	                sta 0,x
.b127		74 01		stz $01,x	                stz 1,x
.b129		20 79 87	jsr $8779	                jsr w_blank
.b12c		20 db b0	jsr $b0db	                jsr w_update
.b12f		60		rts		z_editor_el:    rts
.b130						xt_editor_l:
.b130						w_editor_l:
.b130		ca		dex		                dex             ; Put SCR on the stack.
.b131		ca		dex		                dex
.b132		a0 06		ldy #$06	                ldy #scr_offset
.b134		b1 08		lda ($08),y	                lda (up),y
.b136		95 00		sta $00,x	                sta 0,x
.b138		c8		iny		                iny
.b139		b1 08		lda ($08),y	                lda (up),y
.b13b		95 01		sta $01,x	                sta 1,x
.b13d		20 37 ae	jsr $ae37	                jsr w_block    ; Get the current screen.
.b140		20 ef 83	jsr $83ef	                jsr w_cr
.b143		20 58 a2	jsr $a258	                jsr sliteral_runtime
>b146		08 00				                .word _after_screen_msg-_screen_msg
.b148						_screen_msg:
>b148		53 63 72 65 65 6e 20 23		                .text "Screen #"
.b150						_after_screen_msg:
.b150		20 b4 94	jsr $94b4	                jsr w_type
.b153		20 91 b0	jsr $b091	                jsr w_scr
.b156		20 e9 87	jsr $87e9	                jsr w_fetch
.b159		ca		dex		                dex
.b15a		ca		dex		                dex
.b15b		a9 04		lda #$04	                lda #4          ; four spaces
.b15d		95 00		sta $00,x	                sta 0,x
.b15f		74 01		stz $01,x	                stz 1,x
.b161		20 eb 94	jsr $94eb	                jsr w_u_dot_r
.b164		64 29		stz $29		                stz tmp3
.b166						_line_loop:
.b166		20 ef 83	jsr $83ef	                jsr w_cr
.b169		ca		dex		                dex
.b16a		ca		dex		                dex
.b16b		ca		dex		                dex
.b16c		ca		dex		                dex
.b16d		74 03		stz $03,x	                stz 3,x
.b16f		a5 29		lda $29		                lda tmp3
.b171		95 02		sta $02,x	                sta 2,x
.b173		74 01		stz $01,x	                stz 1,x
.b175		a9 02		lda #$02	                lda #2
.b177		95 00		sta $00,x	                sta 0,x
.b179		20 eb 94	jsr $94eb	                jsr w_u_dot_r
.b17c		20 b5 91	jsr $91b5	                jsr w_space
.b17f		20 69 86	jsr $8669	                jsr w_dup
.b182		ca		dex		                dex
.b183		ca		dex		                dex
.b184		a9 40		lda #$40	                lda #64
.b186		95 00		sta $00,x	                sta 0,x
.b188		74 01		stz $01,x	                stz 1,x
.b18a		20 b4 94	jsr $94b4	                jsr w_type
.b18d		18		clc		                clc
.b18e		a9 40		lda #$40	                lda #64
.b190		75 00		adc $00,x	                adc 0,x
.b192		95 00		sta $00,x	                sta 0,x
.b194		90 02		bcc $b198	                bcc +
.b196		f6 01		inc $01,x	                inc 1,x
.b198						+
.b198		e6 29		inc $29		                inc tmp3
.b19a		a5 29		lda $29		                lda tmp3
.b19c		c9 10		cmp #$10	                cmp #16
.b19e		d0 c6		bne $b166	                bne _line_loop
.b1a0		20 ef 83	jsr $83ef	                jsr w_cr
.b1a3		e8		inx		                inx
.b1a4		e8		inx		                inx
.b1a5		60		rts		z_editor_l:     rts
.b1a6						xt_editor_line:
.b1a6		20 ca d7	jsr $d7ca	                jsr underflow_1
.b1a9						w_editor_line:
.b1a9		a0 06		ldy #$06	                ldy #6          ; *64 is same as left shift 6 times.
.b1ab						_shift_tos_left:
.b1ab		16 00		asl $00,x	                asl 0,x         ; Shift TOS to the left
.b1ad		36 01		rol $01,x	                rol 1,x         ; ROL brings MSb from lower byte.
.b1af		88		dey		                dey
.b1b0		d0 f9		bne $b1ab	                bne _shift_tos_left
.b1b2		20 91 b0	jsr $b091	                jsr w_scr
.b1b5		20 e9 87	jsr $87e9	                jsr w_fetch
.b1b8		20 37 ae	jsr $ae37	                jsr w_block
.b1bb		20 29 8e	jsr $8e29	                jsr w_plus
.b1be		60		rts		z_editor_line:  rts
.b1bf						xt_editor_o:
.b1bf						w_editor_o:
.b1bf		20 ef 83	jsr $83ef	                jsr w_cr
.b1c2		20 69 86	jsr $8669	                jsr w_dup
.b1c5		20 3c 9e	jsr $9e3c	                jsr w_two
.b1c8		20 eb 94	jsr $94eb	                jsr w_u_dot_r
.b1cb		20 b5 91	jsr $91b5	                jsr w_space
.b1ce		a9 2a		lda #$2a	                lda #'*'
.b1d0		20 93 86	jsr $8693	                jsr emit_a
.b1d3		20 b5 91	jsr $91b5	                jsr w_space
.b1d6		20 a9 b1	jsr $b1a9	                jsr w_editor_line
.b1d9		20 69 86	jsr $8669	                jsr w_dup      ; Save a copy of the line address for later.
.b1dc		ca		dex		                dex
.b1dd		ca		dex		                dex
.b1de		a9 40		lda #$40	                lda #64         ; chars/line
.b1e0		95 00		sta $00,x	                sta 0,x
.b1e2		74 01		stz $01,x	                stz 1,x
.b1e4		20 ea 80	jsr $80ea	                jsr w_accept
.b1e7		20 69 86	jsr $8669	                jsr w_dup
.b1ea		20 f8 9c	jsr $9cf8	                jsr w_not_rot  ; -rot
.b1ed		20 29 8e	jsr $8e29	                jsr w_plus
.b1f0		ca		dex		                dex
.b1f1		ca		dex		                dex
.b1f2		a9 40		lda #$40	                lda #64         ; chars/line
.b1f4		95 00		sta $00,x	                sta 0,x
.b1f6		74 01		stz $01,x	                stz 1,x
.b1f8		20 5c 8f	jsr $8f5c	                jsr w_rot
.b1fb		20 bb 8b	jsr $8bbb	                jsr w_minus
.b1fe		20 79 87	jsr $8779	                jsr w_blank
.b201		20 db b0	jsr $b0db	                jsr w_update
.b204		60		rts		z_editor_o:     rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/wordlist.asm

.b205						xt_also:
.b205						w_also:
.b205		20 30 b2	jsr $b230	                jsr w_get_order
.b208		20 db 8c	jsr $8cdb	                jsr w_over
.b20b		20 1e 92	jsr $921e	                jsr w_swap
.b20e		20 bf 8c	jsr $8cbf	                jsr w_one_plus
.b211		20 39 b3	jsr $b339	                jsr w_set_order
.b214		60		rts		z_also:         rts
.b215						xt_definitions:
.b215						w_definitions:
.b215		a0 23		ldy #$23	                ldy #search_order_offset    ; Transfer byte variable
.b217		b1 08		lda ($08),y	                lda (up),y                  ; SEARCH_ORDER[0] to
.b219		a0 08		ldy #$08	                ldy #current_offset         ; byte variable CURRENT.
.b21b		91 08		sta ($08),y	                sta (up),y
.b21d		60		rts		z_definitions:  rts
.b21e						xt_forth:
.b21e						w_forth:
.b21e		a0 23		ldy #$23	                ldy #search_order_offset
.b220		a9 00		lda #$00	                lda #0          ; The WID for Forth is 0.
.b222		91 08		sta ($08),y	                sta (up),y
.b224						z_forth:
.b224		60		rts		                rts
.b225						xt_get_current:
.b225						w_get_current:
.b225		ca		dex		                dex
.b226		ca		dex		                dex
.b227		a0 08		ldy #$08	                ldy #current_offset
.b229		b1 08		lda ($08),y	                lda (up),y
.b22b		95 00		sta $00,x	                sta 0,x         ; CURRENT is a byte variable
.b22d		74 01		stz $01,x	                stz 1,x         ; so the MSB is zero.
.b22f		60		rts		z_get_current:  rts
.b230						xt_get_order:
.b230						w_get_order:
.b230		a0 22		ldy #$22	                ldy #num_order_offset
.b232		b1 08		lda ($08),y	                lda (up),y
.b234		85 25		sta $25		                sta tmp1
.b236		f0 16		beq $b24e	                beq _done       ; If zero, there are no wordlists.
.b238						_loop:
.b238		c6 25		dec $25		                dec tmp1        ; Count down by bytes.
.b23a		a9 23		lda #$23	                lda #search_order_offset
.b23c		18		clc		                clc
.b23d		65 25		adc $25		                adc tmp1
.b23f		a8		tay		                tay
.b240		ca		dex		                dex
.b241		ca		dex		                dex
.b242		b1 08		lda ($08),y	                lda (up),y
.b244		95 00		sta $00,x	                sta 0,x         ; Search order array is bytes, so
.b246		74 01		stz $01,x	                stz 1,x         ; put a zero in the high byte.
.b248		a9 00		lda #$00	                lda #0
.b24a		c5 25		cmp $25		                cmp tmp1
.b24c		d0 ea		bne $b238	                bne _loop
.b24e						_done:
.b24e		ca		dex		                dex
.b24f		ca		dex		                dex
.b250		a0 22		ldy #$22	                ldy #num_order_offset
.b252		b1 08		lda ($08),y	                lda (up),y
.b254		95 00		sta $00,x	                sta 0,x
.b256		74 01		stz $01,x	                stz 1,x         ; We only support 8 wordlists.
.b258		60		rts		z_get_order:    rts
.b259						xt_only:
.b259						w_only:
.b259		20 71 93	jsr $9371	                jsr w_true
.b25c		20 39 b3	jsr $b339	                jsr w_set_order
.b25f		60		rts		z_only:         rts
.b260						xt_order:
.b260						w_order:
.b260		20 ef 83	jsr $83ef	                jsr w_cr
.b263		20 30 b2	jsr $b230	                jsr w_get_order         ; ( wid_n ... wid_1 n )
.b266		e8		inx		                inx                     ; pre-drop n
.b267		e8		inx		                inx
.b268		b5 fe		lda $fe,x	                lda $fe,x                 ; assumes no more than 255 wordlists
.b26a		f0 1e		beq $b28a	                beq _done
.b26c		85 1e		sta $1e		                sta tmpdsp
.b26e						_loop:
.b26e		b5 00		lda $00,x	                lda 0,x                 ; fetch wid to A and drop it
.b270		e8		inx		                inx
.b271		e8		inx		                inx
.b272		20 8b b2	jsr $b28b	                jsr order_print_wid_string   ; internal helper function
.b275		c6 1e		dec $1e		                dec tmpdsp
.b277		d0 f5		bne $b26e	                bne _loop
.b279		20 b5 91	jsr $91b5	                jsr w_space
.b27c		20 b5 91	jsr $91b5	                jsr w_space
.b27f		20 25 b2	jsr $b225	                jsr w_get_current      ; ( wid )
.b282		b5 00		lda $00,x	                lda 0,x
.b284		20 8b b2	jsr $b28b	                jsr order_print_wid_string
.b287		20 ef 83	jsr $83ef	                jsr w_cr
.b28a						_done:
.b28a						z_order:
.b28a		60		rts		                rts
.b28b						order_print_wid_string:
.b28b		c9 04		cmp #$04	                cmp #4
.b28d		90 09		bcc $b298	                bcc _output_string      ; less than 4, print a real string
.b28f		ca		dex		                dex
.b290		ca		dex		                dex
.b291		95 00		sta $00,x	                sta 0,x
.b293		74 01		stz $01,x	                stz 1,x
.b295		4c df 94	jmp $94df	                jmp w_u_dot            ; JSR/RTS as this routine is not compiled
.b298						_output_string:
.b298		a8		tay		                tay
.b299		b9 9f b2	lda $b29f,y	                lda _wid_data,y
.b29c		4c 06 d8	jmp $d806	                jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
.b29f						_wid_data:
>b29f		03				        .byte str_wid_forth            ; WID 0: "Forth "
>b2a0		04				        .byte str_wid_editor           ; WID 1: "Editor "
>b2a1		05				        .byte str_wid_assembler        ; WID 2: "Assembler "
>b2a2		06				        .byte str_wid_root             ; WID 3: "Root "
.b2a3						xt_previous:
.b2a3						w_previous:
.b2a3		20 30 b2	jsr $b230	                jsr w_get_order
.b2a6		20 0a 8c	jsr $8c0a	                jsr w_nip
.b2a9		20 b3 8c	jsr $8cb3	                jsr w_one_minus
.b2ac		20 39 b3	jsr $b339	                jsr w_set_order
.b2af		60		rts		z_previous:     rts
.b2b0						xt_root_wordlist:
.b2b0						w_root_wordlist:
.b2b0		ca		dex		                dex             ; The WID for the Root wordlist is 3.
.b2b1		ca		dex		                dex
.b2b2		a9 03		lda #$03	                lda #3
.b2b4		95 00		sta $00,x	                sta 0,x
.b2b6		74 01		stz $01,x	                stz 1,x
.b2b8						z_root_wordlist:
.b2b8		60		rts		                rts
.b2b9						xt_search_wordlist:
.b2b9		20 d4 d7	jsr $d7d4	                jsr underflow_3
.b2bc						w_search_wordlist:
.b2bc		a5 08		lda $08		                lda up
.b2be		18		clc		                clc
.b2bf		69 0a		adc #$0a	                adc #wordlists_offset
.b2c1		85 27		sta $27		                sta tmp2
.b2c3		a5 09		lda $09		                lda up+1
.b2c5		69 00		adc #$00	                adc #0          ; Adding carry
.b2c7		85 28		sta $28		                sta tmp2+1
.b2c9		b5 00		lda $00,x	                lda 0,x
.b2cb		0a		asl a		                asl             ; Convert wid to offset in cells (x2)
.b2cc		65 27		adc $27		                adc tmp2
.b2ce		85 27		sta $27		                sta tmp2
.b2d0		90 02		bcc $b2d4	                bcc +
.b2d2		e6 28		inc $28		                inc tmp2+1      ; Propagate carry if needed.
.b2d4						+
.b2d4		e8		inx		                inx
.b2d5		e8		inx		                inx
.b2d6		b5 00		lda $00,x	                lda 0,x
.b2d8		15 01		ora $01,x	                ora 1,x
.b2da		f0 4e		beq $b32a	                beq _done
.b2dc		a5 27		lda $27		                lda tmp2
.b2de		05 28		ora $28		                ora tmp2+1
.b2e0		f0 48		beq $b32a	                beq _done
.b2e2		b2 27		lda ($27)	                lda (tmp2)              ; nt of first word in Dictionary
.b2e4		85 25		sta $25		                sta tmp1
.b2e6		e6 27		inc $27		                inc tmp2                ; Move to the upper byte
.b2e8		d0 02		bne $b2ec	                bne +
.b2ea		e6 28		inc $28		                inc tmp2+1
.b2ec						+
.b2ec		b2 27		lda ($27)	                lda (tmp2)
.b2ee		85 26		sta $26		                sta tmp1+1
.b2f0		20 ae d6	jsr $d6ae	                jsr find_header_name
.b2f3		f0 31		beq $b326	                beq _fail_done
.b2f5		e8		inx		                inx
.b2f6		e8		inx		                inx
.b2f7		a5 25		lda $25		                lda tmp1
.b2f9		95 00		sta $00,x	                sta 0,x
.b2fb		a5 26		lda $26		                lda tmp1+1
.b2fd		95 01		sta $01,x	                sta 1,x
.b2ff		20 69 86	jsr $8669	                jsr w_dup              ; ( nt nt )
.b302		20 b1 9c	jsr $9cb1	                jsr w_name_to_int      ; ( nt xt )
.b305		20 1e 92	jsr $921e	                jsr w_swap             ; ( xt nt )
.b308		a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.b30a		f6 00		inc $00,x	                inc 0,x
.b30c		d0 02		bne $b310	                bne +
.b30e		f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.b310						+
.b310		a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.b312		29 02		and #$02	                and #IM
.b314		d0 08		bne $b31e	                bne _immediate          ; bit set, we're immediate
.b316		a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.b318		95 00		sta $00,x	                sta 0,x
.b31a		95 01		sta $01,x	                sta 1,x
.b31c		80 0e		bra $b32c	                bra _done_nodrop
.b31e						_immediate:
.b31e		a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.b320		95 00		sta $00,x	                sta 0,x
.b322		74 01		stz $01,x	                stz 1,x
.b324		80 06		bra $b32c	                bra _done_nodrop
.b326						_fail_done:
.b326		74 02		stz $02,x	                stz 2,x         ; failure flag
.b328		74 03		stz $03,x	                stz 3,x
.b32a						_done:
.b32a		e8		inx		                inx
.b32b		e8		inx		                inx
.b32c						_done_nodrop:
.b32c						z_search_wordlist:
.b32c		60		rts		                rts
.b32d						xt_set_current:
.b32d		20 ca d7	jsr $d7ca	                jsr underflow_1
.b330						w_set_current:
.b330		a0 08		ldy #$08	                ldy #current_offset
.b332		b5 00		lda $00,x	                lda 0,x         ; CURRENT is byte variable
.b334		91 08		sta ($08),y	                sta (up),y      ; so only the LSB is used.
.b336		e8		inx		                inx
.b337		e8		inx		                inx
.b338		60		rts		z_set_current:  rts
.b339						xt_set_order:
.b339						w_set_order:
.b339		a9 ff		lda #$ff	                lda #$FF
.b33b		d5 01		cmp $01,x	                cmp 1,x
.b33d		d0 12		bne $b351	                bne _start
.b33f		d5 00		cmp $00,x	                cmp 0,x
.b341		d0 0e		bne $b351	                bne _start
.b343		ca		dex		                dex             ; Make room for the count.
.b344		ca		dex		                dex
.b345		74 03		stz $03,x	                stz 3,x         ; ROOT-WORDLIST is 3
.b347		a9 03		lda #$03	                lda #3
.b349		95 02		sta $02,x	                sta 2,x
.b34b		74 01		stz $01,x	                stz 1,x         ; Count is 1.
.b34d		a9 01		lda #$01	                lda #1
.b34f		95 00		sta $00,x	                sta 0,x
.b351						_start:
.b351		a0 22		ldy #$22	                ldy #num_order_offset
.b353		b5 00		lda $00,x	                lda 0,x
.b355		91 08		sta ($08),y	                sta (up),y      ; #ORDER is a byte variable.
.b357		85 25		sta $25		                sta tmp1        ; Save a copy for zero check and looping.
.b359		e8		inx		                inx             ; Drop the count off the data stack.
.b35a		e8		inx		                inx
.b35b		a5 25		lda $25		                lda tmp1
.b35d		f0 0d		beq $b36c	                beq _done       ; If zero, there are no wordlists.
.b35f		a0 23		ldy #$23	                ldy #search_order_offset
.b361						_loop:
.b361		b5 00		lda $00,x	                lda 0,x         ; The search order is a byte array
.b363		91 08		sta ($08),y	                sta (up),y      ; so only save the LSB
.b365		c8		iny		                iny
.b366		e8		inx		                inx
.b367		e8		inx		                inx
.b368		c6 25		dec $25		                dec tmp1
.b36a		d0 f5		bne $b361	                bne _loop
.b36c						_done:
.b36c		60		rts		z_set_order:    rts
.b36d						xt_to_order:
.b36d						w_to_order:
.b36d		20 59 93	jsr $9359	                jsr w_to_r
.b370		20 30 b2	jsr $b230	                jsr w_get_order
.b373		20 b5 8e	jsr $8eb5	                jsr w_r_from
.b376		20 1e 92	jsr $921e	                jsr w_swap
.b379		20 bf 8c	jsr $8cbf	                jsr w_one_plus
.b37c		20 39 b3	jsr $b339	                jsr w_set_order
.b37f		60		rts		z_to_order:     rts
.b380						xt_wordlist:
.b380						w_wordlist:
.b380		a0 09		ldy #$09	                ldy #num_wordlists_offset
.b382		b1 08		lda ($08),y	                lda (up),y      ; This is a byte variable, so only
.b384		c9 0c		cmp #$0c	                cmp #max_wordlists
.b386		d0 05		bne $b38d	                bne _ok
.b388		a9 0b		lda #$0b	                lda #err_wordlist
.b38a		4c e0 d7	jmp $d7e0	                jmp error
.b38d						_ok:
.b38d		1a		inc a		                ina             ; Increment the wordlist#
.b38e		91 08		sta ($08),y	                sta (up),y      ; Save it into byte variable #wordlists
.b390		ca		dex		                dex             ; and put it on the stack.
.b391		ca		dex		                dex
.b392		95 00		sta $00,x	                sta 0,x
.b394		74 01		stz $01,x	                stz 1,x         ; 12 is the max, so upper byte is always zero.
.b396		60		rts		z_wordlist:     rts

;******  Return to file: platform/../words/all.asm


;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../definitions.asm

=$0000						ram_start = $0000          ; start of installed RAM, must include zpage
=$0000						zpage     = ram_start      ; begin of Zero Page ($0000-$00ff)
=$0100						stack0    = $0100          ; begin of Return Stack ($0100-$01ff)
=$7f						zpage_end = $7F            ; end of Zero Page used ($0000-$007f)
=32767						ram_end   = $8000-1        ; end of installed RAM
=31744						hist_buff = ram_end-$03ff  ; begin of history buffers
=$ff						rsp0      = $ff              ; initial Return Stack Pointer (65c02 stack)
=$ff						bsize     = $ff              ; size of input/output buffers
=$0000						user0     = zpage            ; TaliForth2 system variables
=512						buffer0   = stack0+$100      ; input buffer ($0200-$02ff)
=768						cp0       = buffer0+bsize+1  ; Dictionary starts after last buffer
=31744						cp_end    = hist_buff        ; Last RAM byte available for code
=$ff						padoffset = $ff              ; offset from CP to PAD (holds number strings)
=120						dsp0      = zpage_end-7    ; initial Data Stack Pointer
.b397						cold_zp_table:
>b397	0000	00 08				cp:         .word cp0+256+1024      ; Compiler Pointer
>b399	0002	7a bb				dp:         .word dictionary_start  ; Dictionary Pointer
>b39b	0004	00 00				ip:         .word 0                 ; Instruction Pointer (current xt)
>b39d	0006	00 00				workword:   .word 0                 ; nt (not xt!) of word being compiled, except in
>b39f	0008	00 03				up:         .word cp0               ; Forth user vars at start of available RAM
>b3a1	000a	00 00				insrc:      .word 0                 ; input source for SOURCE-ID (0 for keyboard)
>b3a3	000c	00 02				cib:        .word buffer0           ; address of current input buffer
>b3a5	000e	00 00				ciblen:     .word 0                 ; length of current input buffer
>b3a7	0010	00 00				toin:       .word 0                 ; pointer to CIB (>IN in Forth)
>b3a9	0012	22 f0				output:     .word kernel_putc       ; vector for EMIT
>b3ab	0014	26 f0				input:      .word kernel_getc       ; vector for KEY
>b3ad	0016	34 f0				havekey:    .word kernel_kbhit      ; vector for KEY?
>b3af	0018	0a 00				base:       .word 10                ; number radix, default decimal
>b3b1	001a	00 00				state:      .word 0                 ; STATE: -1 compile, 0 interpret
>b3b3	001c	00 00				status:     .word 0                 ; internal status used by CREATE : :NONAME ; ACCEPT NUMBER
>b3b5	001e					tmpdsp:     .byte ?         ; temporary DSP (X) storage (single byte)
>b3b6	001f					loopctrl:   .byte ?         ; Offset from lcbstack0 to current loop control block for DO/LOOP/+LOOP
>b3b7	0020					loopidx0    .byte ?         ; cached LSB of current loop index for LOOP (not +LOOP)
=$0100						lcbstack0 = stack0
=256						loopindex = lcbstack0+0     ; loop control block index for adjusted loopindex
=258						loopfufa  = lcbstack0+2     ; loop control block offset for limit fudge factor
>b3b8	0021					loopleave:  .word ?         ; tmp for LEAVE chaining ;TODO could it use existing tmp?
>b3ba	0023					tmptos:     .word ?         ; temporary TOS storage
>b3bc	0025					tmp1:       .word ?         ; temporary storage
>b3be	0027					tmp2:       .word ?         ; temporary storage
>b3c0	0029					tmp3:       .word ?         ; temporary storage (especially for print)
>b3c2	002b					tohold:     .word ?         ; pointer for formatted output
>b3c4	002d					scratch:    .word ?,?,?,?   ; 8 byte scratchpad (see UM/MOD)
>b3cc	0035					tmped:      .word ?,?,?     ; temporary for editors
.b3b5						cold_zp_table_end:
.b3b5						cold_user_table:
>b3b5	0000	14 00				nc_limit_offset:        .word 20        ; byte limit for Native Compile size
>b3b7	0002	00 00				uf_strip_offset:        .word 0         ; flag to strip underflow detection (0 off)
>b3b9	0004	00 00				blk_offset:             .word 0         ; BLK
>b3bb	0006	00 00				scr_offset:             .word 0         ; SCR
=12						max_wordlists = 12    ; Maximum number of wordlists supported (4 built-in, 8 user wordlists)
.b3bd	0008					marker_start_offset:
>b3bd	0008	00				current_offset:         .byte 0         ; CURRENT = FORTH-WORDLIST (compilation wordlist)
>b3be	0009	04				num_wordlists_offset:   .byte 4         ; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
.b3bf	000a					wordlists_offset:
>b3bf	000a	7a bb				    .word dictionary_start              ; FORTH-WORDLIST
>b3c1	000c	e9 c9				    .word editor_dictionary_start       ; EDITOR-WORDLIST
>b3c3	000e	39 ca				    .word assembler_dictionary_start    ; ASSEMBLER-WORDLIST
>b3c5	0010	a8 c9				    .word root_dictionary_start         ; ROOT-WORDLIST
>b3c7	0012	00 00 00 00 00 00 00 00		    .word 0,0,0,0,0,0,0,0               ; Space for 8 User wordlists
>b3cf	001a	00 00 00 00 00 00 00 00
>b3d7	0022	01				num_order_offset:       .byte 1         ; #ORDER (Number of wordlists in search order)
.b3d8	0023					search_order_offset:
>b3d8	0023	00 00 00 00 00 00 00 00		    .byte 0,0,0,0,0,0,0,0,0             ; SEARCH-ORDER (9 bytes to keep offsets even)
>b3e0	002b	00
.b3e1	002c					marker_end_offset:
>b3e1	002c	00 04				blkbuffer_offset:       .word cp0+256   ; Address of buffer (right after USER vars)
>b3e3	002e	00 00				buffblocknum_offset:    .word 0         ; Block number current in buffer
>b3e5	0030	00 00				buffstatus_offset:      .word 0         ; Buffer status (bit 0 = used, bit 1 = dirty) (not in use)
>b3e7	0032	c1 af				blockread_offset:       .word xt_block_word_error   ; Vector to block reading routine
>b3e9	0034	c1 af				blockwrite_offset:      .word xt_block_word_error   ; Vector to block writing routine
.b3eb						cold_user_table_end:
=$03						AscCC   = $03  ; break (CTRL-c)
=$07						AscBELL = $07  ; bell sound
=$08						AscBS   = $08  ; backspace
=$0a						AscLF   = $0A  ; line feed
=$0d						AscCR   = $0D  ; carriage return
=$1b						AscESC  = $1B  ; escape
=$20						AscSP   = $20  ; space
=$7f						AscDEL  = $7F  ; delete (CTRL-h)
=$10						AscCP   = $10  ; CTRL-p (used to recall previous input history)
=$0e						AscCN   = $0E  ; CTRL-n (used to recall next input history)
=$20						OpJSR   = $20
=$4c						OpJMP   = $4C
=$d0						OpBNE   = $D0
=$f0						OpBEQ   = $F0
=$60						OpRTS   = $60
=$80						OpBRA   = $80
=$24						OpBITzp = $24   ; used to save a branch occasionally
=5						N_FLAGS = 5                 ; Bits 5-7 are currently unused.
=1						CO = 1                      ; Compile Only
=2						IM = 2                      ; Immediate Word
=4						AN = 4                      ; Always Native Compile
=8						NN = 8                      ; Never Native Compile
=12						ST = AN+NN                  ; Stack juggling to be stripped for native compile
=16						HC = 16                     ; Word has Code Field Area (CFA)
=79						MAX_LINE_LENGTH  = 79      ; assumes 80 character lines

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../opcodes.asm

.b3eb						oc_index_table:
>b3eb		eb b5 ef b5 96 ba 96 ba		        .word oc00, oc01, oc__, oc__, oc04, oc05, oc06, oc07
>b3f3		f7 b5 fd b5 03 b6 09 b6
>b3fb		10 b6 14 b6 1a b6 96 ba		        .word oc08, oc09, oc0A, oc__, oc0C, oc0D, oc0E, oc0F
>b403		20 b6 24 b6 28 b6 2c b6
>b40b		31 b6 35 b6 3d b6 96 ba		        .word oc10, oc11, oc12, oc__, oc14, oc15, oc16, oc17
>b413		44 b6 4a b6 51 b6 58 b6
>b41b		5f b6 63 b6 69 b6 96 ba		        .word oc18, oc19, oc1A, oc__, oc1C, oc1D, oc1E, oc1F
>b423		6f b6 73 b6 79 b6 7f b6
>b42b		84 b6 88 b6 96 ba 96 ba		        .word oc20, oc21, oc__, oc__, oc24, oc25, oc26, oc27
>b433		90 b6 96 b6 9c b6 a2 b6
>b43b		a9 b6 ad b6 b3 b6 96 ba		        .word oc28, oc29, oc2A, oc__, oc2C, oc2D, oc2E, oc2F
>b443		b9 b6 bd b6 c2 b6 c6 b6
>b44b		cb b6 cf b6 d7 b6 96 ba		        .word oc30, oc31, oc32, oc__, oc34, oc35, oc36, oc37
>b453		de b6 e6 b6 ed b6 f4 b6
>b45b		fb b6 ff b6 05 b7 96 ba		        .word oc38, oc39, oc3A, oc__, oc3C, oc3D, oc3E, oc3F
>b463		0b b7 11 b7 17 b7 1d b7
>b46b		22 b7 26 b7 96 ba 96 ba		        .word oc40, oc41, oc__, oc__, oc__, oc45, oc46, oc47
>b473		96 ba 2e b7 34 b7 3a b7
>b47b		41 b7 45 b7 4b b7 96 ba		        .word oc48, oc49, oc4A, oc__, oc4C, oc4D, oc4E, oc4F
>b483		51 b7 55 b7 59 b7 5d b7
>b48b		62 b7 66 b7 6e b7 96 ba		        .word oc50, oc51, oc52, oc__, oc__, oc55, oc56, oc57
>b493		96 ba 75 b7 7c b7 83 b7
>b49b		8a b7 8e b7 94 b7 96 ba		        .word oc58, oc59, oc5A, oc__, oc__, oc5D, oc5E, oc5F
>b4a3		96 ba 98 b7 9e b7 a4 b7
>b4ab		a9 b7 ad b7 96 ba 96 ba		        .word oc60, oc61, oc__, oc__, oc64, oc65, oc66, oc67
>b4b3		b5 b7 bb b7 c1 b7 c7 b7
>b4bb		ce b7 d2 b7 d8 b7 96 ba		        .word oc68, oc69, oc6A, oc__, oc6C, oc6D, oc6E, oc6F
>b4c3		de b7 e4 b7 e8 b7 ec b7
>b4cb		f1 b7 f5 b7 fd b7 96 ba		        .word oc70, oc71, oc72, oc__, oc74, oc75, oc76, oc77
>b4d3		04 b8 0b b8 12 b8 19 b8
>b4db		20 b8 24 b8 2a b8 96 ba		        .word oc78, oc79, oc7A, oc__, oc7C, oc7D, oc7E, oc7F
>b4e3		2e b8 35 b8 3b b8 41 b8
>b4eb		46 b8 4a b8 96 ba 96 ba		        .word oc80, oc81, oc__, oc__, oc84, oc85, oc86, oc87
>b4f3		52 b8 58 b8 5e b8 64 b8
>b4fb		6b b8 6f b8 75 b8 96 ba		        .word oc88, oc89, oc8A, oc__, oc8C, oc8D, oc8E, oc8F
>b503		79 b8 7d b8 81 b8 85 b8
>b50b		8a b8 8e b8 96 b8 96 ba		        .word oc90, oc91, oc92, oc__, oc94, oc95, oc96, oc97
>b513		9d b8 a4 b8 ab b8 b2 b8
>b51b		b9 b8 bd b8 c3 b8 96 ba		        .word oc98, oc99, oc9A, oc__, oc9C, oc9D, oc9E, oc9F
>b523		c7 b8 cb b8 d1 b8 d7 b8
>b52b		dc b8 e2 b8 ea b8 96 ba		        .word ocA0, ocA1, ocA2, oc__, ocA4, ocA5, ocA6, ocA7
>b533		f0 b8 f6 b8 fc b8 02 b9
>b53b		09 b9 0d b9 13 b9 96 ba		        .word ocA8, ocA9, ocAA, oc__, ocAC, ocAD, ocAE, ocAF
>b543		17 b9 1b b9 1f b9 23 b9
>b54b		28 b9 2c b9 34 b9 96 ba		        .word ocB0, ocB1, ocB2, oc__, ocB4, ocB5, ocB6, ocB7
>b553		3b b9 42 b9 49 b9 50 b9
>b55b		57 b9 5b b9 61 b9 96 ba		        .word ocB8, ocB9, ocBA, oc__, ocBC, ocBD, ocBE, ocBF
>b563		65 b9 6b b9 71 b9 77 b9
>b56b		7c b9 82 b9 96 ba 96 ba		        .word ocC0, ocC1, oc__, oc__, ocC4, ocC5, ocC6, ocC7
>b573		8a b9 90 b9 96 b9 9c b9
>b57b		a3 b9 a7 b9 ad b9 96 ba		        .word ocC8, ocC9, ocCA, oc__, ocCC, ocCD, ocCE, ocCF
>b583		b1 b9 b5 b9 b9 b9 bd b9
>b58b		c2 b9 c6 b9 ce b9 96 ba		        .word ocD0, ocD1, ocD2, oc__, oc__, ocD5, ocD6, ocD7
>b593		96 ba d5 b9 dc b9 e3 b9
>b59b		ea b9 ee b9 f4 b9 96 ba		        .word ocD8, ocD9, ocDA, oc__, oc__, ocDD, ocDE, ocDF
>b5a3		96 ba f8 b9 fe b9 04 ba
>b5ab		09 ba 0f ba 96 ba 96 ba		        .word ocE0, ocE1, oc__, oc__, ocE4, ocE5, ocE6, ocE7
>b5b3		17 ba 1d ba 23 ba 29 ba
>b5bb		30 ba 34 ba 3a ba 96 ba		        .word ocE8, ocE9, ocEA, oc__, ocEC, ocED, ocEE, ocEF
>b5c3		3e ba 42 ba 46 ba 4a ba
>b5cb		4f ba 53 ba 5b ba 96 ba		        .word ocF0, ocF1, ocF2, oc__, oc__, ocF5, ocF6, ocF7
>b5d3		96 ba 62 ba 69 ba 70 ba
>b5db		77 ba 7b ba 81 ba 96 ba		        .word ocF8, ocF9, ocFA, oc__, oc__, ocFD, ocFE, ocFF
>b5e3		96 ba 85 ba 8b ba 91 ba
>b5eb		83 62 72 6b				oc00:	.text 2*64+3, "brk"              ; enforce the signature byte
>b5ef		87 6f 72 61 2e 7a 78 69			oc01:	.text 2*64+7, "ora.zxi"
>b5f7		85 74 73 62 2e 7a		    oc04:   .text 2*64+5, "tsb.z"
>b5fd		85 6f 72 61 2e 7a			oc05:	.text 2*64+5, "ora.z"
>b603		85 61 73 6c 2e 7a			oc06:	.text 2*64+5, "asl.z"
>b609		86 72 6d 62 30 2e 7a			oc07:	.text 2*64+6, "rmb0.z"
>b610		43 70 68 70				oc08:	.text 1*64+3, "php"
>b614		85 6f 72 61 2e 23			oc09:	.text 2*64+5, "ora.#"
>b61a		45 61 73 6c 2e 61			oc0A:	.text 1*64+5, "asl.a"
>b620		c3 74 73 62				oc0C:	.text 3*64+3, "tsb"
>b624		c3 6f 72 61				oc0D:	.text 3*64+3, "ora"
>b628		c3 61 73 6c				oc0E:	.text 3*64+3, "asl"
>b62c		c4 62 62 72 30				oc0F:	.text 3*64+4, "bbr0"
>b631		83 62 70 6c				oc10:	.text 2*64+3, "bpl"
>b635		87 6f 72 61 2e 7a 69 79			oc11:	.text 2*64+7, "ora.ziy"
>b63d		86 6f 72 61 2e 7a 69			oc12:	.text 2*64+6, "ora.zi"
>b644		85 74 72 62 2e 7a			oc14:	.text 2*64+5, "trb.z"
>b64a		86 6f 72 61 2e 7a 78			oc15:	.text 2*64+6, "ora.zx"
>b651		86 61 73 6c 2e 7a 78			oc16:	.text 2*64+6, "asl.zx"
>b658		86 72 6d 62 31 2e 7a			oc17:	.text 2*64+6, "rmb1.z"
>b65f		43 63 6c 63				oc18:	.text 1*64+3, "clc"
>b663		c5 6f 72 61 2e 79			oc19:	.text 3*64+5, "ora.y"
>b669		45 69 6e 63 2e 61			oc1A:	.text 1*64+5, "inc.a"
>b66f		c3 74 72 62				oc1C:	.text 3*64+3, "trb"
>b673		c5 6f 72 61 2e 78			oc1D:	.text 3*64+5, "ora.x"
>b679		c5 61 73 6c 2e 78			oc1E:	.text 3*64+5, "asl.x"
>b67f		c4 62 62 72 31				oc1F:	.text 3*64+4, "bbr1"
>b684		c3 6a 73 72				oc20:	.text 3*64+3, "jsr"
>b688		87 61 6e 64 2e 7a 78 69			oc21:	.text 2*64+7, "and.zxi"
>b690		85 62 69 74 2e 7a			oc24:	.text 2*64+5, "bit.z"
>b696		85 61 6e 64 2e 7a			oc25:	.text 2*64+5, "and.z"
>b69c		85 72 6f 6c 2e 7a			oc26:	.text 2*64+5, "rol.z"
>b6a2		86 72 6d 62 32 2e 7a			oc27:	.text 2*64+6, "rmb2.z"
>b6a9		43 70 6c 70				oc28:	.text 1*64+3, "plp"
>b6ad		85 61 6e 64 2e 23			oc29:	.text 2*64+5, "and.#"
>b6b3		45 72 6f 6c 2e 61			oc2A:	.text 1*64+5, "rol.a"
>b6b9		c3 62 69 74				oc2C:	.text 3*64+3, "bit"
>b6bd		c4 61 6e 64 2e				oc2D:	.text 3*64+4, "and."
>b6c2		c3 72 6f 6c				oc2E:	.text 3*64+3, "rol"
>b6c6		c4 62 62 72 32				oc2F:	.text 3*64+4, "bbr2"
>b6cb		83 62 6d 69				oc30:	.text 2*64+3, "bmi"
>b6cf		87 61 6e 64 2e 7a 69 79			oc31:	.text 2*64+7, "and.ziy"
>b6d7		86 61 6e 64 2e 7a 69			oc32:	.text 2*64+6, "and.zi"
>b6de		87 62 69 74 2e 7a 78 69			oc34:	.text 2*64+7, "bit.zxi"
>b6e6		86 61 6e 64 2e 7a 78			oc35:	.text 2*64+6, "and.zx"
>b6ed		86 72 6f 6c 2e 7a 78			oc36:	.text 2*64+6, "rol.zx"
>b6f4		86 72 6d 62 33 2e 7a			oc37:	.text 2*64+6, "rmb3.z"
>b6fb		43 73 65 63				oc38:	.text 1*64+3, "sec"
>b6ff		c5 61 6e 64 2e 79			oc39:	.text 3*64+5, "and.y"
>b705		45 64 65 63 2e 61			oc3A:	.text 1*64+5, "dec.a"
>b70b		c5 62 69 74 2e 78			oc3C:	.text 3*64+5, "bit.x"
>b711		c5 61 6e 64 2e 78			oc3D:	.text 3*64+5, "and.x"
>b717		c5 72 6f 6c 2e 78			oc3E:	.text 3*64+5, "rol.x"
>b71d		c4 62 62 72 33				oc3F:	.text 3*64+4, "bbr3"
>b722		43 72 74 69				oc40:	.text 1*64+3, "rti"
>b726		87 65 6f 72 2e 7a 78 69			oc41:	.text 2*64+7, "eor.zxi"
>b72e		85 65 6f 72 2e 7a			oc45:	.text 2*64+5, "eor.z"
>b734		85 6c 73 72 2e 7a			oc46:	.text 2*64+5, "lsr.z"
>b73a		86 72 62 6d 34 2e 7a			oc47:	.text 2*64+6, "rbm4.z"
>b741		43 70 68 61				oc48:	.text 1*64+3, "pha"
>b745		85 65 6f 72 2e 23			oc49:	.text 2*64+5, "eor.#"
>b74b		45 6c 73 72 2e 61			oc4A:	.text 1*64+5, "lsr.a"
>b751		c3 6a 6d 70				oc4C:	.text 3*64+3, "jmp"
>b755		c3 65 6f 72				oc4D:	.text 3*64+3, "eor"
>b759		c3 6c 73 72				oc4E:	.text 3*64+3, "lsr"
>b75d		c4 62 62 72 34				oc4F:	.text 3*64+4, "bbr4"
>b762		83 62 76 63				oc50:	.text 2*64+3, "bvc"
>b766		87 65 6f 72 2e 7a 69 79			oc51:	.text 2*64+7, "eor.ziy"
>b76e		86 65 6f 72 2e 7a 69			oc52:	.text 2*64+6, "eor.zi"
>b775		86 65 6f 72 2e 7a 78			oc55:	.text 2*64+6, "eor.zx"
>b77c		86 6c 73 72 2e 7a 78			oc56:	.text 2*64+6, "lsr.zx"
>b783		86 72 62 6d 35 2e 7a			oc57:	.text 2*64+6, "rbm5.z"
>b78a		43 63 6c 69				oc58:	.text 1*64+3, "cli"
>b78e		c5 65 6f 72 2e 79			oc59:	.text 3*64+5, "eor.y"
>b794		43 70 68 79				oc5A:	.text 1*64+3, "phy"
>b798		c5 65 6f 72 2e 78			oc5D:	.text 3*64+5, "eor.x"
>b79e		c5 6c 73 72 2e 78			oc5E:	.text 3*64+5, "lsr.x"
>b7a4		c4 62 62 72 35				oc5F:	.text 3*64+4, "bbr5"
>b7a9		43 72 74 73				oc60:	.text 1*64+3, "rts"
>b7ad		87 61 64 63 2e 7a 78 69			oc61:	.text 2*64+7, "adc.zxi"
>b7b5		85 73 74 7a 2e 7a			oc64:	.text 2*64+5, "stz.z"
>b7bb		85 61 64 63 2e 7a			oc65:	.text 2*64+5, "adc.z"
>b7c1		85 72 6f 72 2e 7a			oc66:	.text 2*64+5, "ror.z"
>b7c7		86 72 6d 62 36 2e 7a			oc67:	.text 2*64+6, "rmb6.z"
>b7ce		43 70 6c 61				oc68:	.text 1*64+3, "pla"
>b7d2		85 61 64 63 2e 23			oc69:	.text 2*64+5, "adc.#"
>b7d8		45 72 6f 72 2e 61			oc6A:	.text 1*64+5, "ror.a"
>b7de		c5 6a 6d 70 2e 69			oc6C:	.text 3*64+5, "jmp.i"
>b7e4		c3 61 64 63				oc6D:	.text 3*64+3, "adc"
>b7e8		c3 72 6f 72				oc6E:	.text 3*64+3, "ror"
>b7ec		c4 62 62 72 36				oc6F:	.text 3*64+4, "bbr6"
>b7f1		83 62 76 73				oc70:	.text 2*64+3, "bvs"
>b7f5		87 61 64 63 2e 7a 69 79			oc71:	.text 2*64+7, "adc.ziy"
>b7fd		86 61 64 63 2e 7a 69			oc72:	.text 2*64+6, "adc.zi"
>b804		86 73 74 7a 2e 7a 78			oc74:	.text 2*64+6, "stz.zx"
>b80b		86 61 64 63 2e 7a 78			oc75:	.text 2*64+6, "adc.zx"
>b812		86 72 6f 72 2e 7a 78			oc76:	.text 2*64+6, "ror.zx"
>b819		86 72 6d 62 37 2e 7a			oc77:	.text 2*64+6, "rmb7.z"
>b820		43 73 65 69				oc78:	.text 1*64+3, "sei"
>b824		c5 61 64 63 2e 79			oc79:	.text 3*64+5, "adc.y"
>b82a		43 70 6c 79				oc7A:	.text 1*64+3, "ply"
>b82e		c6 6a 6d 70 2e 78 69			oc7C:	.text 3*64+6, "jmp.xi"
>b835		c5 61 64 63 2e 78			oc7D:	.text 3*64+5, "adc.x"
>b83b		c5 72 6f 72 2e 78			oc7E:	.text 3*64+5, "ror.x"
>b841		c4 62 62 72 37				oc7F:	.text 3*64+4, "bbr7"
>b846		83 62 72 61				oc80:	.text 2*64+3, "bra"
>b84a		87 73 74 61 2e 7a 78 69			oc81:	.text 2*64+7, "sta.zxi"
>b852		85 73 74 79 2e 7a			oc84:	.text 2*64+5, "sty.z"
>b858		85 73 74 61 2e 7a			oc85:	.text 2*64+5, "sta.z"
>b85e		85 73 74 78 2e 7a			oc86:	.text 2*64+5, "stx.z"
>b864		86 73 6d 62 30 2e 7a			oc87:	.text 2*64+6, "smb0.z"
>b86b		43 64 65 79				oc88:	.text 1*64+3, "dey"
>b86f		85 62 69 74 2e 23			oc89:	.text 2*64+5, "bit.#"
>b875		43 74 78 61				oc8A:	.text 1*64+3, "txa"
>b879		c3 73 74 79				oc8C:	.text 3*64+3, "sty"
>b87d		c3 73 74 61				oc8D:	.text 3*64+3, "sta"
>b881		c3 73 74 78				oc8E:	.text 3*64+3, "stx"
>b885		c4 62 62 73 30				oc8F:	.text 3*64+4, "bbs0"
>b88a		83 62 63 63				oc90:	.text 2*64+3, "bcc"
>b88e		87 73 74 61 2e 7a 69 79			oc91:	.text 2*64+7, "sta.ziy"
>b896		86 73 74 61 2e 7a 69			oc92:	.text 2*64+6, "sta.zi"
>b89d		86 73 74 79 2e 7a 78			oc94:	.text 2*64+6, "sty.zx"
>b8a4		86 73 74 61 2e 7a 78			oc95:	.text 2*64+6, "sta.zx"
>b8ab		86 73 74 78 2e 7a 79			oc96:	.text 2*64+6, "stx.zy"
>b8b2		86 73 6d 62 31 2e 7a			oc97:	.text 2*64+6, "smb1.z"
>b8b9		43 74 79 61				oc98:	.text 1*64+3, "tya"
>b8bd		c5 73 74 61 2e 79			oc99:	.text 3*64+5, "sta.y"
>b8c3		43 74 78 73				oc9A:	.text 1*64+3, "txs"
>b8c7		c3 73 74 7a				oc9C:	.text 3*64+3, "stz"
>b8cb		c5 73 74 61 2e 78			oc9D:	.text 3*64+5, "sta.x"
>b8d1		c5 73 74 7a 2e 78			oc9E:	.text 3*64+5, "stz.x"
>b8d7		c4 62 62 73 31				oc9F:	.text 3*64+4, "bbs1"
>b8dc		85 6c 64 79 2e 23			ocA0:	.text 2*64+5, "ldy.#"
>b8e2		87 6c 64 61 2e 7a 78 69			ocA1:	.text 2*64+7, "lda.zxi"
>b8ea		85 6c 64 78 2e 23			ocA2:	.text 2*64+5, "ldx.#"
>b8f0		85 6c 64 79 2e 7a			ocA4:	.text 2*64+5, "ldy.z"
>b8f6		85 6c 64 61 2e 7a			ocA5:	.text 2*64+5, "lda.z"
>b8fc		85 6c 64 78 2e 7a			ocA6:	.text 2*64+5, "ldx.z"
>b902		86 73 6d 62 32 2e 7a			ocA7:	.text 2*64+6, "smb2.z"
>b909		43 74 61 79				ocA8:	.text 1*64+3, "tay"
>b90d		85 6c 64 61 2e 23			ocA9:	.text 2*64+5, "lda.#"
>b913		43 74 61 78				ocAA:	.text 1*64+3, "tax"
>b917		c3 6c 64 79				ocAC:	.text 3*64+3, "ldy"
>b91b		c3 6c 64 61				ocAD:	.text 3*64+3, "lda"
>b91f		c3 6c 64 78				ocAE:	.text 3*64+3, "ldx"
>b923		c4 62 62 73 32				ocAF:	.text 3*64+4, "bbs2"
>b928		83 62 63 73				ocB0:	.text 2*64+3, "bcs"
>b92c		87 6c 64 61 2e 7a 69 79			ocB1:	.text 2*64+7, "lda.ziy"
>b934		86 6c 64 61 2e 7a 69			ocB2:	.text 2*64+6, "lda.zi"
>b93b		86 6c 64 79 2e 7a 78			ocB4:	.text 2*64+6, "ldy.zx"
>b942		86 6c 64 61 2e 7a 78			ocB5:	.text 2*64+6, "lda.zx"
>b949		86 6c 64 78 2e 7a 79			ocB6:	.text 2*64+6, "ldx.zy"
>b950		86 73 6d 62 33 2e 7a			ocB7:	.text 2*64+6, "smb3.z"
>b957		43 63 6c 76				ocB8:	.text 1*64+3, "clv"
>b95b		c5 6c 64 61 2e 79			ocB9:	.text 3*64+5, "lda.y"
>b961		43 74 73 78				ocBA:	.text 1*64+3, "tsx"
>b965		c5 6c 64 79 2e 78			ocBC:	.text 3*64+5, "ldy.x"
>b96b		c5 6c 64 61 2e 78			ocBD:	.text 3*64+5, "lda.x"
>b971		c5 6c 64 78 2e 79			ocBE:	.text 3*64+5, "ldx.y"
>b977		c4 62 62 73 34				ocBF:	.text 3*64+4, "bbs4"
>b97c		85 63 70 79 2e 23			ocC0:	.text 2*64+5, "cpy.#"
>b982		87 63 6d 70 2e 7a 78 69			ocC1:	.text 2*64+7, "cmp.zxi"
>b98a		85 63 70 79 2e 7a			ocC4:	.text 2*64+5, "cpy.z"
>b990		85 63 6d 70 2e 7a			ocC5:	.text 2*64+5, "cmp.z"
>b996		85 64 65 63 2e 7a			ocC6:	.text 2*64+5, "dec.z"
>b99c		86 73 6d 62 34 2e 7a			ocC7:	.text 2*64+6, "smb4.z"
>b9a3		43 69 6e 79				ocC8:	.text 1*64+3, "iny"
>b9a7		85 63 6d 70 2e 23			ocC9:	.text 2*64+5, "cmp.#"
>b9ad		43 64 65 78				ocCA:	.text 1*64+3, "dex"
>b9b1		c3 63 70 79				ocCC:	.text 3*64+3, "cpy"
>b9b5		c3 63 6d 70				ocCD:	.text 3*64+3, "cmp"
>b9b9		c3 64 65 63				ocCE:	.text 3*64+3, "dec"
>b9bd		c4 62 62 73 34				ocCF:	.text 3*64+4, "bbs4"
>b9c2		83 62 6e 65				ocD0:	.text 2*64+3, "bne"
>b9c6		87 63 6d 70 2e 7a 69 79			ocD1:	.text 2*64+7, "cmp.ziy"
>b9ce		86 63 6d 70 2e 7a 69			ocD2:	.text 2*64+6, "cmp.zi"
>b9d5		86 63 6d 70 2e 7a 78			ocD5:	.text 2*64+6, "cmp.zx"
>b9dc		86 64 65 63 2e 7a 78			ocD6:	.text 2*64+6, "dec.zx"
>b9e3		86 73 6d 62 35 2e 7a			ocD7:	.text 2*64+6, "smb5.z"
>b9ea		43 63 6c 64				ocD8:	.text 1*64+3, "cld"
>b9ee		c5 63 6d 70 2e 79			ocD9:	.text 3*64+5, "cmp.y"
>b9f4		43 70 68 78				ocDA:	.text 1*64+3, "phx"
>b9f8		c5 63 6d 70 2e 78			ocDD:	.text 3*64+5, "cmp.x"
>b9fe		c5 64 65 63 2e 78			ocDE:	.text 3*64+5, "dec.x"
>ba04		c4 62 62 73 35				ocDF:	.text 3*64+4, "bbs5"
>ba09		85 63 70 78 2e 23			ocE0:	.text 2*64+5, "cpx.#"
>ba0f		87 73 62 63 2e 7a 78 69			ocE1:	.text 2*64+7, "sbc.zxi"
>ba17		85 63 70 78 2e 7a			ocE4:	.text 2*64+5, "cpx.z"
>ba1d		85 73 62 63 2e 7a			ocE5:	.text 2*64+5, "sbc.z"
>ba23		85 69 6e 63 2e 7a			ocE6:	.text 2*64+5, "inc.z"
>ba29		86 73 6d 62 36 2e 7a			ocE7:	.text 2*64+6, "smb6.z"
>ba30		43 69 6e 78				ocE8:	.text 1*64+3, "inx"
>ba34		85 73 62 63 2e 23			ocE9:	.text 2*64+5, "sbc.#"
>ba3a		43 6e 6f 70				ocEA:	.text 1*64+3, "nop"
>ba3e		c3 63 70 78				ocEC:	.text 3*64+3, "cpx"
>ba42		c3 73 62 63				ocED:	.text 3*64+3, "sbc"
>ba46		c3 69 6e 63				ocEE:	.text 3*64+3, "inc"
>ba4a		c4 62 62 73 36				ocEF:	.text 3*64+4, "bbs6"
>ba4f		83 62 65 71				ocF0:	.text 2*64+3, "beq"
>ba53		87 73 62 63 2e 7a 69 79			ocF1:	.text 2*64+7, "sbc.ziy"
>ba5b		86 73 62 63 2e 7a 69			ocF2:	.text 2*64+6, "sbc.zi"
>ba62		86 73 62 63 2e 7a 78			ocF5:	.text 2*64+6, "sbc.zx"
>ba69		86 69 6e 63 2e 7a 78			ocF6:	.text 2*64+6, "inc.zx"
>ba70		86 73 6d 62 37 2e 7a			ocF7:	.text 2*64+6, "smb7.z"
>ba77		43 73 65 64				ocF8:	.text 1*64+3, "sed"
>ba7b		c5 73 62 63 2e 79			ocF9:	.text 3*64+5, "sbc.y"
>ba81		43 70 6c 78				ocFA:	.text 1*64+3, "plx"
>ba85		c5 73 62 63 2e 78			ocFD:	.text 3*64+5, "sbc.x"
>ba8b		c5 69 6e 63 2e 78			ocFE:	.text 3*64+5, "inc.x"
>ba91		c4 62 62 73 37				ocFF:	.text 3*64+4, "bbs7"
>ba96		01 3f					oc__:	.text 1, "?"

;******  Return to file: platform/../taliforth.asm

.ba98						forth_words_start:
>ba98		20 63 72 20 2e 28 20 54		.binary "forth_words.asc"
>baa0		61 6c 69 20 46 6f 72 74 68 20 32 20 66 6f 72 20
>bab0		74 68 65 20 36 35 63 30 32 29 20 63 72 20 2e 28
>bac0		20 56 65 72 73 69 6f 6e 20 31 2e 31 20 30 36 2e
>bad0		20 41 70 72 20 32 30 32 34 20 29 20 63 72 20 2e
>bae0		28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31 34
>baf0		2d 32 30 32 34 20 53 63 6f 74 20 57 2e 20 53 74
>bb00		65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f 6c
>bb10		77 65 6c 6c 2c 20 50 61 74 72 69 63 6b 20 53 75
>bb20		72 72 79 29 20 63 72 20 2e 28 20 54 61 6c 69 20
>bb30		46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20 77 69
>bb40		74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20 4e 4f
>bb50		20 57 41 52 52 41 4e 54 59 29 20 63 72 20 2e 28
>bb60		20 54 79 70 65 20 27 62 79 65 27 20 74 6f 20 65
>bb70		78 69 74 29 20 63 72 20
.bb78						forth_words_end:
.bb78						user_words_start:
>bb78		20 20				.binary "user_words.asc"
.bb7a						user_words_end:

;******  Processing file: platform/../words/headers.asm

.bb7a						dictionary_start:
.bb7a						nt_drop:
>bb7a		04 00				        .byte 4, 0
>bb7c		86 bb 60 86 65 86		        .word nt_dup, xt_drop, z_drop
>bb82		64 72 6f 70			        .text "drop"
.bb86						nt_dup:
>bb86		03 00				        .byte 3, 0
>bb88		91 bb 66 86 73 86		        .word nt_swap, xt_dup, z_dup
>bb8e		64 75 70			        .text "dup"
.bb91						nt_swap:
>bb91		04 00				        .byte 4, 0
>bb93		9d bb 1b 92 2e 92		        .word nt_store, xt_swap, z_swap
>bb99		73 77 61 70			        .text "swap"
.bb9d						nt_store:
>bb9d		01 00				        .byte 1, 0
>bb9f		a6 bb 05 92 1a 92		        .word nt_fetch, xt_store, z_store
>bba5		21				        .text "!"
.bba6						nt_fetch:
>bba6		01 00				        .byte 1, 0
>bba8		af bb e6 87 f8 87		        .word nt_over, xt_fetch, z_fetch
>bbae		40				        .text "@"
.bbaf						nt_over:
>bbaf		04 00				        .byte 4, 0
>bbb1		bb bb d8 8c e5 8c		        .word nt_to_r, xt_over, z_over
>bbb7		6f 76 65 72			        .text "over"
.bbbb						nt_to_r:
>bbbb		02 0d				        .byte 2, CO+ST       ; native skips stack juggling
>bbbd		c5 bb 59 93 6e 93		        .word nt_r_from, xt_to_r, z_to_r
>bbc3		3e 72				        .text ">r"
.bbc5						nt_r_from:
>bbc5		02 0d				        .byte 2, CO+ST          ; native skips stack juggling
>bbc7		cf bb b5 8e c7 8e		        .word nt_r_fetch, xt_r_from, z_r_from
>bbcd		72 3e				        .text "r>"
.bbcf						nt_r_fetch:
>bbcf		02 0d				        .byte 2, CO+ST          ; native skips stack juggling
>bbd1		d9 bb 9e 8e b2 8e		        .word nt_nip, xt_r_fetch, z_r_fetch
>bbd7		72 40				        .text "r@"
.bbd9						nt_nip:
>bbd9		03 00				        .byte 3, 0
>bbdb		e4 bb 07 8c 14 8c		        .word nt_rot, xt_nip, z_nip
>bbe1		6e 69 70			        .text "nip"
.bbe4						nt_rot:
>bbe4		03 00				        .byte 3, 0
>bbe6		ef bb 59 8f 74 8f		        .word nt_not_rot, xt_rot, z_rot
>bbec		72 6f 74			        .text "rot"
.bbef						nt_not_rot:
>bbef		04 00				        .byte 4, 0
>bbf1		fb bb f5 9c 10 9d		        .word nt_tuck, xt_not_rot, z_not_rot
>bbf7		2d 72 6f 74			        .text "-rot"
.bbfb						nt_tuck:
>bbfb		04 00				        .byte 4, 0
>bbfd		07 bc 7a 93 93 93		        .word nt_comma, xt_tuck, z_tuck
>bc03		74 75 63 6b			        .text "tuck"
.bc07						nt_comma:
>bc07		01 00				        .byte 1, 0
>bc09		10 bc ae 83 bc 83		        .word nt_c_fetch, xt_comma, z_comma
>bc0f		2c				        .text ","
.bc10						nt_c_fetch:
>bc10		02 00				        .byte 2, 0
>bc12		1a bc 30 83 39 83		        .word nt_c_store, xt_c_fetch, z_c_fetch
>bc18		63 40				        .text "c@"
.bc1a						nt_c_store:
>bc1a		02 00				        .byte 2, 0
>bc1c		24 bc 3a 83 45 83		        .word nt_plus_store, xt_c_store, z_c_store
>bc22		63 21				        .text "c!"
.bc24						nt_plus_store:
>bc24		02 00				        .byte 2, 0
>bc26		2e bc 39 8e 53 8e		        .word nt_zero, xt_plus_store, z_plus_store
>bc2c		2b 21				        .text "+!"
.bc2e						nt_zero:
>bc2e		01 00				        .byte 1, 0
>bc30		37 bc 71 9e 77 9e		        .word nt_one, xt_zero, z_zero
>bc36		30				        .text "0"
.bc37						nt_one:
>bc37		01 00				        .byte 1, 0
>bc39		40 bc 0b 9e 13 9e		        .word nt_two, xt_one, z_one
>bc3f		31				        .text "1"
.bc40						nt_two:
>bc40		01 00				        .byte 1, 0
>bc42		49 bc 3c 9e 44 9e		        .word nt_execute, xt_two, z_two
>bc48		32				        .text "2"
.bc49						nt_execute:
>bc49		07 00				        .byte 7, 0
>bc4b		58 bc d1 87 d7 87		        .word nt_emit, xt_execute, z_execute
>bc51		65 78 65 63 75 74 65		        .text "execute"
.bc58						nt_emit:
>bc58		04 08				        .byte 4, NN
>bc5a		64 bc 8c 86 96 86		        .word nt_type, xt_emit, z_emit
>bc60		65 6d 69 74			        .text "emit"
.bc64						nt_type:
>bc64		04 00				        .byte 4, 0
>bc66		70 bc b1 94 db 94		        .word nt_dot, xt_type, z_type
>bc6c		74 79 70 65			        .text "type"
.bc70						nt_dot:
>bc70		01 00				        .byte 1, 0
>bc72		79 bc f6 85 17 86		        .word nt_u_dot, xt_dot, z_dot
>bc78		2e				        .text "."
.bc79						nt_u_dot:
>bc79		02 00				        .byte 2, 0
>bc7b		83 bc dc 94 e7 94		        .word nt_u_dot_r, xt_u_dot, z_u_dot
>bc81		75 2e				        .text "u."
.bc83						nt_u_dot_r:
>bc83		03 00				        .byte 3, 0
>bc85		8e bc e8 94 09 95		        .word nt_dot_r, xt_u_dot_r, z_u_dot_r
>bc8b		75 2e 72			        .text "u.r"
.bc8e						nt_dot_r:
>bc8e		02 00				        .byte 2, 0
>bc90		98 bc 32 86 5f 86		        .word nt_d_dot, xt_dot_r, z_dot_r
>bc96		2e 72				        .text ".r"
.bc98						nt_d_dot:
>bc98		02 00				        .byte 2, 0
>bc9a		a2 bc fa 9e 18 9f		        .word nt_d_dot_r, xt_d_dot, z_d_dot
>bca0		64 2e				        .text "d."
.bca2						nt_d_dot_r:
>bca2		03 00				        .byte 3, 0
>bca4		ad bc 19 9f 43 9f		        .word nt_m_star_slash, xt_d_dot_r, z_d_dot_r
>bcaa		64 2e 72			        .text "d.r"
.bcad						nt_m_star_slash:
>bcad		03 00				        .byte 3, 0
>bcaf		b8 bc 44 9f aa 9f		        .word nt_ud_dot, xt_m_star_slash, z_m_star_slash
>bcb5		6d 2a 2f			        .text "m*/"
.bcb8						nt_ud_dot:
>bcb8		03 00				        .byte 3, 0
>bcba		c3 bc 15 a0 27 a0		        .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
>bcc0		75 64 2e			        .text "ud."
.bcc3						nt_ud_dot_r:
>bcc3		04 00				        .byte 4, 0
>bcc5		cf bc 28 a0 46 a0		        .word nt_question, xt_ud_dot_r, z_ud_dot_r
>bccb		75 64 2e 72			        .text "ud.r"
.bccf						nt_question:
>bccf		01 00				        .byte 1, 0
>bcd1		d8 bc 3f 99 45 99		        .word nt_false, xt_question, z_question
>bcd7		3f				        .text "?"
.bcd8						nt_false:
>bcd8		05 00				        .byte 5, 0
>bcda		e5 bc 71 9e 77 9e		        .word nt_true, xt_false, z_false
>bce0		66 61 6c 73 65			        .text "false"
.bce5						nt_true:
>bce5		04 00				        .byte 4, 0
>bce7		f1 bc 71 93 79 93		        .word nt_space, xt_true, z_true
>bced		74 72 75 65			        .text "true"
.bcf1						nt_space:
>bcf1		05 00				        .byte 5, 0
>bcf3		fe bc b5 91 ba 91		        .word nt_two_dup, xt_space, z_space
>bcf9		73 70 61 63 65			        .text "space"
.bcfe						nt_two_dup:
>bcfe		04 00				        .byte 4, 0
>bd00		0a bd 9c 93 b3 93		        .word nt_question_dup, xt_two_dup, z_two_dup
>bd06		32 64 75 70			        .text "2dup"
.bd0a						nt_question_dup:
>bd0a		04 00				        .byte 4, 0
>bd0c		16 bd 8a 8e 9d 8e		        .word nt_plus, xt_question_dup, z_question_dup
>bd12		3f 64 75 70			        .text "?dup"
.bd16						nt_plus:
>bd16		01 00				        .byte 1, 0
>bd18		1f bd 26 8e 38 8e		        .word nt_minus, xt_plus, z_plus
>bd1e		2b				        .text "+"
.bd1f						nt_minus:
>bd1f		01 00				        .byte 1, 0
>bd21		28 bd b8 8b ca 8b		        .word nt_one_minus, xt_minus, z_minus
>bd27		2d				        .text "-"
.bd28						nt_one_minus:
>bd28		02 00				        .byte 2, 0
>bd2a		32 bd b0 8c bb 8c		        .word nt_one_plus, xt_one_minus, z_one_minus
>bd30		31 2d				        .text "1-"
.bd32						nt_one_plus:
>bd32		02 00				        .byte 2, 0
>bd34		3c bd bc 8c c5 8c		        .word nt_two_star, xt_one_plus, z_one_plus
>bd3a		31 2b				        .text "1+"
.bd3c						nt_two_star:
>bd3c		02 00				        .byte 2, 0
>bd3e		46 bd 3f 94 46 94		        .word nt_two_slash, xt_two_star, z_two_star
>bd44		32 2a				        .text "2*"
.bd46						nt_two_slash:
>bd46		02 00				        .byte 2, 0
>bd48		50 bd 34 94 3e 94		        .word nt_abs, xt_two_slash, z_two_slash
>bd4e		32 2f				        .text "2/"
.bd50						nt_abs:
>bd50		03 00				        .byte 3, 0
>bd52		5b bd d2 80 e6 80		        .word nt_dabs, xt_abs, z_abs
>bd58		61 62 73			        .text "abs"
.bd5b						nt_dabs:
>bd5b		04 00				        .byte 4, 0
>bd5d		67 bd c0 9e de 9e		        .word nt_and, xt_dabs, z_dabs
>bd63		64 61 62 73			        .text "dabs"
.bd67						nt_and:
>bd67		03 00				        .byte 3, 0
>bd69		72 bd 93 82 a4 82		        .word nt_or, xt_and, z_and
>bd6f		61 6e 64			        .text "and"
.bd72						nt_or:
>bd72		02 00				        .byte 2, 0
>bd74		7c bd c6 8c d7 8c		        .word nt_xor, xt_or, z_or
>bd7a		6f 72				        .text "or"
.bd7c						nt_xor:
>bd7c		03 00				        .byte 3, 0
>bd7e		87 bd 55 96 66 96		        .word nt_rshift, xt_xor, z_xor
>bd84		78 6f 72			        .text "xor"
.bd87						nt_rshift:
>bd87		06 00				        .byte 6, 0
>bd89		95 bd 75 8f 88 8f		        .word nt_lshift, xt_rshift, z_rshift
>bd8f		72 73 68 69 66 74		        .text "rshift"
.bd95						nt_lshift:
>bd95		06 00				        .byte 6, 0
>bd97		a3 bd eb 8a fe 8a		        .word nt_pick, xt_lshift, z_lshift
>bd9d		6c 73 68 69 66 74		        .text "lshift"
.bda3						nt_pick:
>bda3		04 00				        .byte 4, 0    ; underflow check is complicated, leave off here
>bda5		af bd 15 8e 25 8e		        .word nt_char, xt_pick, z_pick
>bdab		70 69 63 6b			        .text "pick"
.bdaf						nt_char:
>bdaf		04 00				        .byte 4, 0
>bdb1		bb bd 56 83 6c 83		        .word nt_bracket_char, xt_char, z_char
>bdb7		63 68 61 72			        .text "char"
.bdbb						nt_bracket_char:
>bdbb		06 03				        .byte 6, CO+IM
>bdbd		c9 bd 10 83 16 83		        .word nt_char_plus, xt_bracket_char, z_bracket_char
>bdc3		5b 63 68 61 72 5d		        .text "[char]"
.bdc9						nt_char_plus:
>bdc9		05 00				        .byte 5, 0
>bdcb		d6 bd bc 8c c5 8c		        .word nt_chars, xt_char_plus, z_char_plus ; same as 1+
>bdd1		63 68 61 72 2b			        .text "char+"
.bdd6						nt_chars:
>bdd6		05 00				        .byte 5, 0      ; deleted during compile
>bdd8		e3 bd 6d 83 70 83		        .word nt_cells, xt_chars, z_chars
>bdde		63 68 61 72 73			        .text "chars"
.bde3						nt_cells:
>bde3		05 00				        .byte 5, 0
>bde5		f0 bd 3f 94 46 94		        .word nt_cell_plus, xt_cells, z_cells  ; same as 2*
>bdeb		63 65 6c 6c 73			        .text "cells"
.bdf0						nt_cell_plus:
>bdf0		05 00				        .byte 5, 0
>bdf2		fd bd 46 83 55 83		        .word nt_here, xt_cell_plus, z_cell_plus
>bdf8		63 65 6c 6c 2b			        .text "cell+"
.bdfd						nt_here:
>bdfd		04 00				        .byte 4, 0
>bdff		09 be e7 88 f1 88		        .word nt_equal, xt_here, z_here
>be05		68 65 72 65			        .text "here"
.be09						nt_equal:
>be09		01 00				        .byte 1, 0
>be0b		12 be 5a 87 75 87		        .word nt_not_equals, xt_equal, z_equal
>be11		3d				        .text "="
.be12						nt_not_equals:
>be12		02 00				        .byte 2, 0
>be14		1c be 15 8c 32 8c		        .word nt_less_than, xt_not_equals, z_not_equals
>be1a		3c 3e				        .text "<>"
.be1c						nt_less_than:
>be1c		01 00				        .byte 1, 0
>be1e		25 be bb 89 cf 89		        .word nt_u_less_than, xt_less_than, z_less_than
>be24		3c				        .text "<"
.be25						nt_u_less_than:
>be25		02 00				        .byte 2, 0
>be27		2f be 20 95 35 95		        .word nt_u_greater_than, xt_u_less_than, z_u_less_than
>be2d		75 3c				        .text "u<"
.be2f						nt_u_greater_than:
>be2f		02 00				        .byte 2, 0
>be31		39 be 0a 95 1f 95		        .word nt_greater_than, xt_u_greater_than, z_u_greater_than
>be37		75 3e				        .text "u>"
.be39						nt_greater_than:
>be39		01 00				        .byte 1, 0
>be3b		42 be d2 88 e6 88		        .word nt_zero_equal, xt_greater_than, z_greater_than
>be41		3e				        .text ">"
.be42						nt_zero_equal:
>be42		02 00				        .byte 2, 0
>be44		4c be 67 96 78 96		        .word nt_zero_unequal, xt_zero_equal, z_zero_equal
>be4a		30 3d				        .text "0="
.be4c						nt_zero_unequal:
>be4c		03 00				        .byte 3, 0
>be4e		57 be 9d 96 ac 96		        .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
>be54		30 3c 3e			        .text "0<>"
.be57						nt_zero_greater:
>be57		02 00				        .byte 2, 0
>be59		61 be 79 96 8c 96		        .word nt_zero_less, xt_zero_greater, z_zero_greater
>be5f		30 3e				        .text "0>"
.be61						nt_zero_less:
>be61		02 00				        .byte 2, 0
>be63		6b be 8d 96 9c 96		        .word nt_min, xt_zero_less, z_zero_less
>be69		30 3c				        .text "0<"
.be6b						nt_min:
>be6b		03 00				        .byte 3, 0
>be6d		76 be 9c 8b b7 8b		        .word nt_max, xt_min, z_min
>be73		6d 69 6e			        .text "min"
.be76						nt_max:
>be76		03 00				        .byte 3, 0
>be78		81 be 80 8b 9b 8b		        .word nt_two_drop, xt_max, z_max
>be7e		6d 61 78			        .text "max"
.be81						nt_two_drop:
>be81		05 00				        .byte 5, 0
>be83		8e be 94 93 9b 93		        .word nt_two_swap, xt_two_drop, z_two_drop
>be89		32 64 72 6f 70			        .text "2drop"
.be8e						nt_two_swap:
>be8e		05 00				        .byte 5, 0
>be90		9b be 6d 94 90 94		        .word nt_two_over, xt_two_swap, z_two_swap
>be96		32 73 77 61 70			        .text "2swap"
.be9b						nt_two_over:
>be9b		05 00				        .byte 5, 0
>be9d		a8 be d6 93 ed 93		        .word nt_two_store, xt_two_over, z_two_over
>bea3		32 6f 76 65 72			        .text "2over"
.bea8						nt_two_store:
>bea8		02 00				        .byte 2, 0
>beaa		b2 be 47 94 6c 94		        .word nt_two_fetch, xt_two_store, z_two_store
>beb0		32 21				        .text "2!"
.beb2						nt_two_fetch:
>beb2		02 00				        .byte 2, 0
>beb4		bc be b4 93 d5 93		        .word nt_two_variable, xt_two_fetch, z_two_fetch
>beba		32 40				        .text "2@"
.bebc						nt_two_variable:
>bebc		09 00				        .byte 9, 0
>bebe		cd be 04 a0 14 a0		        .word nt_two_constant, xt_two_variable, z_two_variable
>bec4		32 76 61 72 69 61 62 6c		        .text "2variable"
>becc		65
.becd						nt_two_constant:
>becd		09 00				        .byte 9, 0
>becf		de be ab 9f c4 9f		        .word nt_two_literal, xt_two_constant, z_two_constant
>bed5		32 63 6f 6e 73 74 61 6e		        .text "2constant"
>bedd		74
.bede						nt_two_literal:
>bede		08 02				        .byte 8, IM
>bee0		ee be c5 9f ea 9f		        .word nt_two_r_fetch, xt_two_literal, z_two_literal
>bee6		32 6c 69 74 65 72 61 6c		        .text "2literal"
.beee						nt_two_r_fetch:
>beee		03 0d				        .byte 3, CO+ST          ; native skips stack juggling
>bef0		f9 be ee 93 14 94		        .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
>bef6		32 72 40			        .text "2r@"
.bef9						nt_two_r_from:
>bef9		03 0d				        .byte 3, CO+ST          ; native skips stack juggling
>befb		04 bf 17 94 31 94		        .word nt_two_to_r, xt_two_r_from, z_two_r_from
>bf01		32 72 3e			        .text "2r>"
.bf04						nt_two_to_r:
>bf04		03 0d				        .byte 3, CO+ST       ; native skips stack juggling
>bf06		0f bf 91 94 ae 94		        .word nt_invert, xt_two_to_r, z_two_to_r
>bf0c		32 3e 72			        .text "2>r"
.bf0f						nt_invert:
>bf0f		06 00				        .byte 6, 0
>bf11		1d bf 30 89 3f 89		        .word nt_negate, xt_invert, z_invert
>bf17		69 6e 76 65 72 74		        .text "invert"
.bf1d						nt_negate:
>bf1d		06 00				        .byte 6, 0
>bf1f		2b bf f6 8b 06 8c		        .word nt_dnegate, xt_negate, z_negate
>bf25		6e 65 67 61 74 65		        .text "negate"
.bf2b						nt_dnegate:
>bf2b		07 00				        .byte 7, 0
>bf2d		3a bf df 9e f9 9e		        .word nt_c_comma, xt_dnegate, z_dnegate
>bf33		64 6e 65 67 61 74 65		        .text "dnegate"
.bf3a						nt_c_comma:
>bf3a		02 00				        .byte 2, 0
>bf3c		44 bf 25 83 2f 83		        .word nt_bounds, xt_c_comma, z_c_comma
>bf42		63 2c				        .text "c,"
.bf44						nt_bounds:
>bf44		06 00				        .byte 6, 0
>bf46		52 bf 98 9a b0 9a		        .word nt_spaces, xt_bounds, z_bounds
>bf4c		62 6f 75 6e 64 73		        .text "bounds"
.bf52						nt_spaces:
>bf52		06 00				        .byte 6, 0
>bf54		60 bf bb 91 d4 91		        .word nt_bl, xt_spaces, z_spaces
>bf5a		73 70 61 63 65 73		        .text "spaces"
.bf60						nt_bl:
>bf60		02 00				        .byte 2, 0
>bf62		6a bf 07 83 0f 83		        .word nt_minus_trailing, xt_bl, z_bl
>bf68		62 6c				        .text "bl"
.bf6a						nt_minus_trailing:
>bf6a		09 00				        .byte 9, 0
>bf6c		7b bf 3b a1 77 a1		        .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
>bf72		2d 74 72 61 69 6c 69 6e		        .text "-trailing"
>bf7a		67
.bf7b						nt_minus_leading:
>bf7b		08 00				        .byte 8, 0
>bf7d		8b bf 22 a1 3a a1		        .word nt_slash_string, xt_minus_leading, z_minus_leading
>bf83		2d 6c 65 61 64 69 6e 67		        .text "-leading"
.bf8b						nt_slash_string:
>bf8b		07 00				        .byte 7, 0
>bf8d		9a bf 17 a2 36 a2		        .word nt_refill, xt_slash_string, z_slash_string
>bf93		2f 73 74 72 69 6e 67		        .text "/string"
.bf9a						nt_refill:
>bf9a		06 00				        .byte 6, 0
>bf9c		a8 bf 07 8f 48 8f		        .word nt_accept, xt_refill, z_refill
>bfa2		72 65 66 69 6c 6c		        .text "refill"
.bfa8						nt_accept:
>bfa8		06 08				        .byte 6, NN
>bfaa		b6 bf e7 80 df 81		        .word nt_input_to_r, xt_accept, z_accept
>bfb0		61 63 63 65 70 74		        .text "accept"
.bfb6						nt_input_to_r:
>bfb6		07 08				        .byte 7, NN
>bfb8		c5 bf 12 9c 27 9c		        .word nt_r_to_input, xt_input_to_r, z_input_to_r
>bfbe		69 6e 70 75 74 3e 72		        .text "input>r"
.bfc5						nt_r_to_input:
>bfc5		07 08				        .byte 7, NN
>bfc7		d4 bf 1f 9e 36 9e		        .word nt_unused, xt_r_to_input, z_r_to_input
>bfcd		72 3e 69 6e 70 75 74		        .text "r>input"
.bfd4						nt_unused:
>bfd4		06 00				        .byte 6, 0
>bfd6		e2 bf d5 95 e4 95		        .word nt_depth, xt_unused, z_unused
>bfdc		75 6e 75 73 65 64		        .text "unused"
.bfe2						nt_depth:
>bfe2		05 00				        .byte 5, 0
>bfe4		ef bf 18 85 26 85		        .word nt_key, xt_depth, z_depth
>bfea		64 65 70 74 68			        .text "depth"
.bfef						nt_key:
>bfef		03 00				        .byte 3, 0
>bff1		fa bf 73 89 7c 89		        .word nt_keyq, xt_key, z_key
>bff7		6b 65 79			        .text "key"
.bffa						nt_keyq:
>bffa		04 00				        .byte 4, 0
>bffc		06 c0 80 89 8e 89		        .word nt_allot, xt_keyq, z_keyq
>c002		6b 65 79 3f			        .text "key?"
.c006						nt_allot:
>c006		05 00				        .byte 5, 0
>c008		13 c0 2a 82 92 82		        .word nt_create, xt_allot, z_allot
>c00e		61 6c 6c 6f 74			        .text "allot"
.c013						nt_create:
>c013		06 00				        .byte 6, 0
>c015		21 c0 f5 83 e4 84		        .word nt_does, xt_create, z_create
>c01b		63 72 65 61 74 65		        .text "create"
.c021						nt_does:
>c021		05 03				        .byte 5, CO+IM
>c023		2e c0 b5 85 c3 85		        .word nt_variable, xt_does, z_does
>c029		64 6f 65 73 3e			        .text "does>"
.c02e						nt_variable:
>c02e		08 00				        .byte 8, 0
>c030		3e c0 e5 95 f0 95		        .word nt_constant, xt_variable, z_variable
>c036		76 61 72 69 61 62 6c 65		        .text "variable"
.c03e						nt_constant:
>c03e		08 00				        .byte 8, 0
>c040		4e c0 c9 83 da 83		        .word nt_value, xt_constant, z_constant
>c046		63 6f 6e 73 74 61 6e 74		        .text "constant"
.c04e						nt_value:
>c04e		05 00				        .byte 5, 0
>c050		5b c0 c9 83 da 83		        .word nt_to, xt_value, z_value          ; same code as CONSTANT
>c056		76 61 6c 75 65			        .text "value"
.c05b						nt_to:
>c05b		02 0a				        .byte 2, NN+IM
>c05d		65 c0 4f 92 8a 92		        .word nt_s_to_d, xt_to, z_to
>c063		74 6f				        .text "to"
.c065						nt_s_to_d:
>c065		03 00				        .byte 3, 0
>c067		70 c0 b6 90 c7 90		        .word nt_d_to_s, xt_s_to_d, z_s_to_d
>c06d		73 3e 64			        .text "s>d"
.c070						nt_d_to_s:
>c070		03 00				        .byte 3, 0
>c072		7b c0 ba 9e bf 9e		        .word nt_d_minus, xt_d_to_s, z_d_to_s
>c078		64 3e 73			        .text "d>s"
.c07b						nt_d_minus:
>c07b		02 00				        .byte 2, 0
>c07d		85 c0 78 9e 98 9e		        .word nt_d_plus, xt_d_minus, z_d_minus
>c083		64 2d				        .text "d-"
.c085						nt_d_plus:
>c085		02 00				        .byte 2, 0
>c087		8f c0 99 9e b9 9e		        .word nt_erase, xt_d_plus, z_d_plus
>c08d		64 2b				        .text "d+"
.c08f						nt_erase:
>c08f		05 00				        .byte 5, 0
>c091		9c c0 83 87 d0 87		        .word nt_blank, xt_erase, z_erase
>c097		65 72 61 73 65			        .text "erase"
.c09c						nt_blank:
>c09c		05 00				        .byte 5, 0
>c09e		a9 c0 76 87 d0 87		        .word nt_fill, xt_blank, z_blank
>c0a4		62 6c 61 6e 6b			        .text "blank"
.c0a9						nt_fill:
>c0a9		04 00				        .byte 4, 0
>c0ab		b5 c0 8e 87 d0 87		        .word nt_find_name, xt_fill, z_fill
>c0b1		66 69 6c 6c			        .text "fill"
.c0b5						nt_find_name:
>c0b5		09 00				        .byte 9, 0
>c0b7		c6 c0 5a 9b a8 9b		        .word nt_tick, xt_find_name, z_find_name
>c0bd		66 69 6e 64 2d 6e 61 6d		        .text "find-name"
>c0c5		65
.c0c6						nt_tick:
>c0c6		01 00				        .byte 1, 0
>c0c8		cf c0 2f 92 4e 92		        .word nt_bracket_tick, xt_tick, z_tick
>c0ce		27				        .text "'"
.c0cf						nt_bracket_tick:
>c0cf		03 03				        .byte 3, CO+IM
>c0d1		da c0 17 83 1d 83		        .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
>c0d7		5b 27 5d			        .text "[']"
.c0da						nt_name_to_int:
>c0da		08 00				        .byte 8, 0
>c0dc		ea c0 ae 9c ca 9c		        .word nt_int_to_name, xt_name_to_int, z_name_to_int
>c0e2		6e 61 6d 65 3e 69 6e 74		        .text "name>int"
.c0ea						nt_int_to_name:
>c0ea		08 00				        .byte 8, 0
>c0ec		fa c0 28 9c 98 9c		        .word nt_name_to_string, xt_int_to_name, z_int_to_name
>c0f2		69 6e 74 3e 6e 61 6d 65		        .text "int>name"
.c0fa						nt_name_to_string:
>c0fa		0b 00				        .byte 11, 0
>c0fc		0d c1 cb 9c e1 9c		        .word nt_to_body, xt_name_to_string, z_name_to_string
>c102		6e 61 6d 65 3e 73 74 72		        .text "name>string"
>c10a		69 6e 67
.c10d						nt_to_body:
>c10d		05 00				        .byte 5, 0
>c10f		1a c1 8b 92 ad 92		        .word nt_defer, xt_to_body, z_to_body
>c115		3e 62 6f 64 79			        .text ">body"
.c11a						nt_defer:
>c11a		05 00				        .byte 5, 0
>c11c		27 c1 ec 84 fe 84		        .word nt_latestxt, xt_defer, z_defer
>c122		64 65 66 65 72			        .text "defer"
.c127						nt_latestxt:
>c127		08 00				        .byte 8, 0
>c129		37 c1 a7 9c ad 9c		        .word nt_latestnt, xt_latestxt, z_latestxt
>c12f		6c 61 74 65 73 74 78 74		        .text "latestxt"
.c137						nt_latestnt:
>c137		08 00				        .byte 8, 0
>c139		47 c1 99 9c a6 9c		        .word nt_parse_name, xt_latestnt, z_latestnt
>c13f		6c 61 74 65 73 74 6e 74		        .text "latestnt"
.c147						nt_parse_name:
>c147		0a 08				        .byte 10, NN
>c149		59 c1 24 8d 14 8e		        .word nt_parse, xt_parse_name, z_parse_name
>c14f		70 61 72 73 65 2d 6e 61		        .text "parse-name"
>c157		6d 65
.c159						nt_parse:
>c159		05 00				        .byte 5, 0
>c15b		66 c1 7f 8d 14 8e		        .word nt_execute_parsing, xt_parse, z_parse
>c161		70 61 72 73 65			        .text "parse"
.c166						nt_execute_parsing:
>c166		0f 00				        .byte 15, 0
>c168		7d c1 33 9b 59 9b		        .word nt_source, xt_execute_parsing, z_execute_parsing
>c16e		65 78 65 63 75 74 65 2d		        .text "execute-parsing"
>c176		70 61 72 73 69 6e 67
.c17d						nt_source:
>c17d		06 00				        .byte 6, 0
>c17f		8b c1 95 91 a9 91		        .word nt_source_id, xt_source, z_source
>c185		73 6f 75 72 63 65		        .text "source"
.c18b						nt_source_id:
>c18b		09 00				        .byte 9, 0
>c18d		9c c1 aa 91 b4 91		        .word nt_colon, xt_source_id, z_source_id
>c193		73 6f 75 72 63 65 2d 69		        .text "source-id"
>c19b		64
.c19c						nt_colon:
>c19c		01 00				        .byte 1, 0
>c19e		a5 c1 71 83 91 83		        .word nt_semicolon, xt_colon, z_colon
>c1a4		3a				        .text ":"
.c1a5						nt_semicolon:
>c1a5		01 03				        .byte 1, CO+IM
>c1a7		ae c1 c8 90 34 91		        .word nt_colon_noname, xt_semicolon, z_semicolon
>c1ad		3b				        .text ";"
.c1ae						nt_colon_noname:
>c1ae		07 00				        .byte 7, 0
>c1b0		bd c1 92 83 ad 83		        .word nt_compile_comma, xt_colon_noname, z_colon_noname
>c1b6		3a 6e 6f 6e 61 6d 65		        .text ":noname"
.c1bd						nt_compile_comma:
>c1bd		08 08				        .byte 8, NN
>c1bf		cd c1 bb 96 6e 97		        .word nt_left_bracket, xt_compile_comma, z_compile_comma
>c1c5		63 6f 6d 70 69 6c 65 2c		        .text "compile,"
.c1cd						nt_left_bracket:
>c1cd		01 03				        .byte 1, IM+CO
>c1cf		d6 c1 a8 89 ac 89		        .word nt_right_bracket, xt_left_bracket, z_left_bracket
>c1d5		5b				        .text "["
.c1d6						nt_right_bracket:
>c1d6		01 02				        .byte 1, IM
>c1d8		df c1 52 8f 58 8f		        .word nt_literal, xt_right_bracket, z_right_bracket
>c1de		5d				        .text "]"
.c1df						nt_literal:
>c1df		07 03				        .byte 7, IM+CO
>c1e1		ee c1 d0 89 0d 8a		        .word nt_sliteral, xt_literal, z_literal
>c1e7		6c 69 74 65 72 61 6c		        .text "literal"
.c1ee						nt_sliteral:
>c1ee		08 03				        .byte 8, CO+IM
>c1f0		fe c1 37 a2 57 a2		        .word nt_dot_quote, xt_sliteral, z_sliteral
>c1f6		73 6c 69 74 65 72 61 6c		        .text "sliteral"
.c1fe						nt_dot_quote:
>c1fe		02 03				        .byte 2, CO+IM
>c200		08 c2 27 86 31 86		        .word nt_s_quote, xt_dot_quote, z_dot_quote
>c206		2e 22				        .text ".", $22
.c208						nt_s_quote:
>c208		02 0a				        .byte 2, IM+NN
>c20a		12 c2 a2 8f 9b 90		        .word nt_s_backslash_quote, xt_s_quote, z_s_quote
>c210		73 22				        .text "s", $22
.c212						nt_s_backslash_quote:
>c212		03 02				        .byte 3, IM
>c214		1d c2 89 8f 92 8f		        .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
>c21a		73 5c 22			        .text "s", $5C, $22
.c21d						nt_postpone:
>c21d		08 03				        .byte 8, IM+CO
>c21f		2d c2 54 8e 89 8e		        .word nt_immediate, xt_postpone, z_postpone
>c225		70 6f 73 74 70 6f 6e 65		        .text "postpone"
.c22d						nt_immediate:
>c22d		09 00				        .byte 9, 0
>c22f		3e c2 24 89 2f 89		        .word nt_compile_only, xt_immediate, z_immediate
>c235		69 6d 6d 65 64 69 61 74		        .text "immediate"
>c23d		65
.c23e						nt_compile_only:
>c23e		0c 00				        .byte 12, 0
>c240		52 c2 bd 83 c8 83		        .word nt_never_native, xt_compile_only, z_compile_only
>c246		63 6f 6d 70 69 6c 65 2d		        .text "compile-only"
>c24e		6f 6e 6c 79
.c252						nt_never_native:
>c252		0c 00				        .byte 12, 0
>c254		66 c2 e7 9c f4 9c		        .word nt_always_native, xt_never_native, z_never_native
>c25a		6e 65 76 65 72 2d 6e 61		        .text "never-native"
>c262		74 69 76 65
.c266						nt_always_native:
>c266		0d 00				        .byte 13, 0
>c268		7b c2 84 9a 91 9a		        .word nt_allow_native, xt_always_native, z_always_native
>c26e		61 6c 77 61 79 73 2d 6e		        .text "always-native"
>c276		61 74 69 76 65
.c27b						nt_allow_native:
>c27b		0c 00				        .byte 12, 0
>c27d		8f c2 78 9a 83 9a		        .word nt_nc_limit, xt_allow_native, z_allow_native
>c283		61 6c 6c 6f 77 2d 6e 61		        .text "allow-native"
>c28b		74 69 76 65
.c28f						nt_nc_limit:
>c28f		08 08				        .byte 8, NN
>c291		9f c2 e2 9c e7 9c		        .word nt_strip_underflow, xt_nc_limit, z_nc_limit
>c297		6e 63 2d 6c 69 6d 69 74		        .text "nc-limit"
.c29f						nt_strip_underflow:
>c29f		0f 08				        .byte 15, NN
>c2a1		b6 c2 37 9e 3c 9e		        .word nt_abort, xt_strip_underflow, z_strip_underflow
>c2a7		73 74 72 69 70 2d 75 6e		        .text "strip-underflow"
>c2af		64 65 72 66 6c 6f 77
.c2b6						nt_abort:
>c2b6		05 00				        .byte 5, 0
>c2b8		c3 c2 5e 80 b2 80		        .word nt_abort_quote, xt_abort, z_abort
>c2be		61 62 6f 72 74			        .text "abort"
.c2c3						nt_abort_quote:
>c2c3		06 0b				        .byte 6, CO+IM+NN
>c2c5		d1 c2 b2 80 bc 80		        .word nt_do, xt_abort_quote, z_abort_quote
>c2cb		61 62 6f 72 74 22		        .text "abort", $22
.c2d1						nt_do:
>c2d1		02 0b				        .byte 2, CO+IM+NN
>c2d3		db c2 51 85 6a 85		        .word nt_question_do, xt_do, z_do
>c2d9		64 6f				        .text "do"
.c2db						nt_question_do:
>c2db		03 0b				        .byte 3, CO+IM+NN
>c2dd		e6 c2 27 85 6a 85		        .word nt_i, xt_question_do, z_question_do
>c2e3		3f 64 6f			        .text "?do"
.c2e6						nt_i:
>c2e6		01 01				        .byte 1, CO
>c2e8		ef c2 0b 89 1f 89		        .word nt_j, xt_i, z_i
>c2ee		69				        .text "i"
.c2ef						nt_j:
>c2ef		01 01				        .byte 1, CO
>c2f1		f8 c2 59 89 72 89		        .word nt_loop, xt_j, z_j
>c2f7		6a				        .text "j"
.c2f8						nt_loop:
>c2f8		04 03				        .byte 4, CO+IM
>c2fa		04 c3 37 8a af 8a		        .word nt_plus_loop, xt_loop, z_loop
>c300		6c 6f 6f 70			        .text "loop"
.c304						nt_plus_loop:
>c304		05 03				        .byte 5, CO+IM
>c306		11 c3 4b 8a af 8a		        .word nt_exit, xt_plus_loop, z_plus_loop
>c30c		2b 6c 6f 6f 70			        .text "+loop"
.c311						nt_exit:
>c311		04 05				        .byte 4, AN+CO
>c313		1d c3 e5 87 e6 87		        .word nt_unloop, xt_exit, z_exit
>c319		65 78 69 74			        .text "exit"
.c31d						nt_unloop:
>c31d		06 01				        .byte 6, CO
>c31f		2b c3 be 95 cd 95		        .word nt_leave, xt_unloop, z_unloop
>c325		75 6e 6c 6f 6f 70		        .text "unloop"
.c32b						nt_leave:
>c32b		05 03				        .byte 5, CO+IM
>c32d		38 c3 92 89 a7 89		        .word nt_recurse, xt_leave, z_leave
>c333		6c 65 61 76 65			        .text "leave"
.c338						nt_recurse:
>c338		07 0b				        .byte 7, CO+IM+NN
>c33a		47 c3 ca 8e 06 8f		        .word nt_quit, xt_recurse, z_recurse
>c340		72 65 63 75 72 73 65		        .text "recurse"
.c347						nt_quit:
>c347		04 00				        .byte 4, 0
>c349		53 c3 60 80 b2 80		        .word nt_begin, xt_quit, z_quit
>c34f		71 75 69 74			        .text "quit"
.c353						nt_begin:
>c353		05 03				        .byte 5, CO+IM
>c355		60 c3 e7 88 f1 88		        .word nt_again, xt_begin, z_begin
>c35b		62 65 67 69 6e			        .text "begin"
.c360						nt_again:
>c360		05 03				        .byte 5, CO+IM
>c362		6d c3 22 82 28 82		        .word nt_state, xt_again, z_again
>c368		61 67 61 69 6e			        .text "again"
.c36d						nt_state:
>c36d		05 00				        .byte 5, 0
>c36f		7a c3 fa 91 04 92		        .word nt_evaluate, xt_state, z_state
>c375		73 74 61 74 65			        .text "state"
.c37a						nt_evaluate:
>c37a		08 00				        .byte 8, 0
>c37c		8a c3 7e 88 d1 88		        .word nt_base, xt_evaluate, z_evaluate
>c382		65 76 61 6c 75 61 74 65		        .text "evaluate"
.c38a						nt_base:
>c38a		04 00				        .byte 4, 0
>c38c		96 c3 fe 82 06 83		        .word nt_digit_question, xt_base, z_base
>c392		62 61 73 65			        .text "base"
.c396						nt_digit_question:
>c396		06 00				        .byte 6, 0
>c398		a4 c3 fe 9a 32 9b		        .word nt_number, xt_digit_question, z_digit_question
>c39e		64 69 67 69 74 3f		        .text "digit?"
.c3a4						nt_number:
>c3a4		06 00				        .byte 6, 0
>c3a6		b2 c3 11 9d 0a 9e		        .word nt_to_number, xt_number, z_number
>c3ac		6e 75 6d 62 65 72		        .text "number"
.c3b2						nt_to_number:
>c3b2		07 00				        .byte 7, 0
>c3b4		c1 c3 b9 92 58 93		        .word nt_hex, xt_to_number, z_to_number
>c3ba		3e 6e 75 6d 62 65 72		        .text ">number"
.c3c1						nt_hex:
>c3c1		03 00				        .byte 3, 0
>c3c3		cc c3 f2 88 f8 88		        .word nt_decimal, xt_hex, z_hex
>c3c9		68 65 78			        .text "hex"
.c3cc						nt_decimal:
>c3cc		07 00				        .byte 7, 0
>c3ce		db c3 e5 84 eb 84		        .word nt_count, xt_decimal, z_decimal
>c3d4		64 65 63 69 6d 61 6c		        .text "decimal"
.c3db						nt_count:
>c3db		05 00				        .byte 5, 0
>c3dd		e8 c3 db 83 ee 83		        .word nt_m_star, xt_count, z_count
>c3e3		63 6f 75 6e 74			        .text "count"
.c3e8						nt_m_star:
>c3e8		02 00				        .byte 2, 0
>c3ea		f2 c3 ff 8a 19 8b		        .word nt_um_star, xt_m_star, z_m_star
>c3f0		6d 2a				        .text "m*"
.c3f2						nt_um_star:
>c3f2		03 00				        .byte 3, 0
>c3f4		fd c3 78 95 bd 95		        .word nt_star, xt_um_star, z_um_star
>c3fa		75 6d 2a			        .text "um*"
.c3fd						nt_star:
>c3fd		01 00				        .byte 1, 0
>c3ff		06 c4 d5 91 dd 91		        .word nt_um_slash_mod, xt_star, z_star
>c405		2a				        .text "*"
.c406						nt_um_slash_mod:
>c406		06 00				        .byte 6, 0
>c408		14 c4 36 95 77 95		        .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
>c40e		75 6d 2f 6d 6f 64		        .text "um/mod"
.c414						nt_sm_slash_rem:
>c414		06 00				        .byte 6, 0
>c416		22 c4 6c 91 94 91		        .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
>c41c		73 6d 2f 72 65 6d		        .text "sm/rem"
.c422						nt_fm_slash_mod:
>c422		06 00				        .byte 6, 0
>c424		30 c4 41 88 77 88		        .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
>c42a		66 6d 2f 6d 6f 64		        .text "fm/mod"
.c430						nt_slash:
>c430		01 00				        .byte 1, 0
>c432		39 c4 4a 91 6b 91		        .word nt_slash_mod, xt_slash, z_slash
>c438		2f				        .text "/"
.c439						nt_slash_mod:
>c439		04 00				        .byte 4, 0
>c43b		45 c4 51 91 6b 91		        .word nt_mod, xt_slash_mod, z_slash_mod
>c441		2f 6d 6f 64			        .text "/mod"
.c445						nt_mod:
>c445		03 00				        .byte 3, 0
>c447		50 c4 cb 8b d3 8b		        .word nt_star_slash_mod, xt_mod, z_mod
>c44d		6d 6f 64			        .text "mod"
.c450						nt_star_slash_mod:
>c450		05 00				        .byte 5, 0
>c452		5d c4 ea 91 f9 91		        .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
>c458		2a 2f 6d 6f 64			        .text "*/mod"
.c45d						nt_star_slash:
>c45d		02 00				        .byte 2, 0
>c45f		67 c4 de 91 e9 91		        .word nt_backslash, xt_star_slash, z_star_slash
>c465		2a 2f				        .text "*/"
.c467						nt_backslash:
>c467		01 02				        .byte 1, IM
>c469		70 c4 d3 82 fd 82		        .word nt_move, xt_backslash, z_backslash
>c46f		5c				        .byte '\'
.c470						nt_move:
>c470		04 08				        .byte 4, NN
>c472		7c c4 d4 8b f5 8b		        .word nt_cmove_up, xt_move, z_move
>c478		6d 6f 76 65			        .text "move"
.c47c						nt_cmove_up:
>c47c		06 00				        .byte 6, 0
>c47e		8a c4 82 a0 bc a0		        .word nt_cmove, xt_cmove_up, z_cmove_up
>c484		63 6d 6f 76 65 3e		        .text "cmove>"
.c48a						nt_cmove:
>c48a		05 00				        .byte 5, 0
>c48c		97 c4 47 a0 81 a0		        .word nt_pad, xt_cmove, z_cmove
>c492		63 6d 6f 76 65			        .text "cmove"
.c497						nt_pad:
>c497		03 00				        .byte 3, 0
>c499		a2 c4 e6 8c f5 8c		        .word nt_cleave, xt_pad, z_pad
>c49f		70 61 64			        .text "pad"
.c4a2						nt_cleave:
>c4a2		06 00				        .byte 6, 0
>c4a4		b0 c4 b1 9a fd 9a		        .word nt_hexstore, xt_cleave, z_cleave
>c4aa		63 6c 65 61 76 65		        .text "cleave"
.c4b0						nt_hexstore:
>c4b0		08 00				        .byte 8, 0
>c4b2		c0 c4 b4 9b 06 9c		        .word nt_within, xt_hexstore, z_hexstore
>c4b8		68 65 78 73 74 6f 72 65		        .text "hexstore"
.c4c0						nt_within:
>c4c0		06 00				        .byte 6, 0
>c4c2		ce c4 fb 95 10 96		        .word nt_to_in, xt_within, z_within
>c4c8		77 69 74 68 69 6e		        .text "within"
.c4ce						nt_to_in:
>c4ce		03 00				        .byte 3, 0
>c4d0		d9 c4 ae 92 b8 92		        .word nt_less_number_sign, xt_to_in, z_to_in
>c4d6		3e 69 6e			        .text ">in"
.c4d9						nt_less_number_sign:
>c4d9		02 00				        .byte 2, 0
>c4db		e3 c4 ad 89 ba 89		        .word nt_number_sign, xt_less_number_sign, z_less_number_sign
>c4e1		3c 23				        .text "<#"
.c4e3						nt_number_sign:
>c4e3		01 00				        .byte 1, 0
>c4e5		ec c4 33 8c 63 8c		        .word nt_number_sign_s, xt_number_sign, z_number_sign
>c4eb		23				        .text "#"
.c4ec						nt_number_sign_s:
>c4ec		02 00				        .byte 2, 0
>c4ee		f6 c4 86 8c 96 8c		        .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
>c4f4		23 73				        .text "#s"
.c4f6						nt_number_sign_greater:
>c4f6		02 00				        .byte 2, 0
>c4f8		00 c5 64 8c 85 8c		        .word nt_hold, xt_number_sign_greater, z_number_sign_greater
>c4fe		23 3e				        .text "#>"
.c500						nt_hold:
>c500		04 00				        .byte 4, 0
>c502		0c c5 f9 88 0a 89		        .word nt_sign, xt_hold, z_hold
>c508		68 6f 6c 64			        .text "hold"
.c50c						nt_sign:
>c50c		04 00				        .byte 4, 0
>c50e		18 c5 35 91 49 91		        .word nt_output, xt_sign, z_sign
>c514		73 69 67 6e			        .text "sign"
.c518						nt_output:
>c518		06 00				        .byte 6, 0
>c51a		26 c5 14 9e 1e 9e		        .word nt_input, xt_output, z_output
>c520		6f 75 74 70 75 74		        .text "output"
.c526						nt_input:
>c526		05 00				        .byte 5, 0
>c528		33 c5 07 9c 11 9c		        .word nt_havekey, xt_input, z_input
>c52e		69 6e 70 75 74			        .text "input"
.c533						nt_havekey:
>c533		07 00				        .byte 7, 0
>c535		42 c5 a9 9b b3 9b		        .word nt_cr, xt_havekey, z_havekey
>c53b		68 61 76 65 6b 65 79		        .text "havekey"
.c542						nt_cr:
>c542		02 00				        .byte 2, 0
>c544		4c c5 ef 83 f4 83		        .word nt_page, xt_cr, z_cr
>c54a		63 72				        .text "cr"
.c54c						nt_page:
>c54c		04 00				        .byte 4, 0
>c54e		58 c5 f6 8c 13 8d		        .word nt_at_xy, xt_page, z_page
>c554		70 61 67 65			        .text "page"
.c558						nt_at_xy:
>c558		05 00				        .byte 5, 0
>c55a		65 c5 a5 82 d2 82		        .word nt_marker, xt_at_xy, z_at_xy
>c560		61 74 2d 78 79			        .text "at-xy"
.c565						nt_marker:
>c565		06 02				        .byte 6, IM
>c567		73 c5 1a 8b 4a 8b		        .word nt_words, xt_marker, z_marker
>c56d		6d 61 72 6b 65 72		        .text "marker"
.c573						nt_words:
>c573		05 00				        .byte 5, 0
>c575		80 c5 1b 9a 77 9a		        .word nt_wordsize, xt_words, z_words
>c57b		77 6f 72 64 73			        .text "words"
.c580						nt_wordsize:
>c580		08 00				        .byte 8, 0
>c582		90 c5 50 9e 70 9e		        .word nt_aligned, xt_wordsize, z_wordsize
>c588		77 6f 72 64 73 69 7a 65		        .text "wordsize"
.c590						nt_aligned:
>c590		07 00				        .byte 7, 0
>c592		9f c5 29 82 29 82		        .word nt_align, xt_aligned, z_aligned   ; same code as ALIGN
>c598		61 6c 69 67 6e 65 64		        .text "aligned"
.c59f						nt_align:
>c59f		05 00				        .byte 5, 0
>c5a1		ac c5 29 82 29 82		        .word nt_bell, xt_align, z_align
>c5a7		61 6c 69 67 6e			        .text "align"
.c5ac						nt_bell:
>c5ac		04 00				        .byte 4, 0
>c5ae		b8 c5 92 9a 97 9a		        .word nt_dump, xt_bell, z_bell
>c5b4		62 65 6c 6c			        .text "bell"
.c5b8						nt_dump:
>c5b8		04 00				        .byte 4, 0
>c5ba		c4 c5 c1 98 3e 99		        .word nt_dot_s, xt_dump, z_dump
>c5c0		64 75 6d 70			        .text "dump"
.c5c4						nt_dot_s:
>c5c4		02 00				        .byte 2, 0
>c5c6		ce c5 7d 98 c0 98		        .word +, xt_dot_s, z_dot_s
>c5cc		2e 73				        .text ".s"
.c5ce						+
.c5ce						nt_disasm:
>c5ce		06 00				        .byte 6, 0
>c5d0		dc c5 85 a2 8b a2		        .word +, xt_disasm, z_disasm
>c5d6		64 69 73 61 73 6d		        .text "disasm"
.c5dc						+
.c5dc						nt_compare:
>c5dc		07 00				        .byte 7, 0
>c5de		eb c5 bd a0 21 a1		        .word nt_search, xt_compare, z_compare
>c5e4		63 6f 6d 70 61 72 65		        .text "compare"
.c5eb						nt_search:
>c5eb		06 08				        .byte 6, NN
>c5ed		f9 c5 78 a1 16 a2		        .word +, xt_search, z_search
>c5f3		73 65 61 72 63 68		        .text "search"
.c5f9						+
.c5f9						nt_environment_q:
>c5f9		0c 00				        .byte 12, 0
>c5fb		0d c6 ae 86 1f 87		        .word +, xt_environment_q, z_environment_q
>c601		65 6e 76 69 72 6f 6e 6d		        .text "environment?"
>c609		65 6e 74 3f
.c60d						+
.c60d						nt_find:
>c60d		04 00				        .byte 4, 0
>c60f		19 c6 f9 87 40 88		        .word nt_word, xt_find, z_find
>c615		66 69 6e 64			        .text "find"
.c619						nt_word:
>c619		04 00				        .byte 4, 0
>c61b		25 c6 11 96 54 96		        .word nt_paren, xt_word, z_word
>c621		77 6f 72 64			        .text "word"
.c625						nt_paren:
>c625		01 02				        .byte 1, IM
>c627		2e c6 14 8d 23 8d		        .word nt_dot_paren, xt_paren, z_paren
>c62d		28				        .text "("
.c62e						nt_dot_paren:
>c62e		02 02				        .byte 2, IM
>c630		38 c6 18 86 26 86		        .word nt_if, xt_dot_paren, z_dot_paren
>c636		2e 28				        .text ".("
.c638						nt_if:
>c638		02 0b				        .byte 2, IM+CO+NN
>c63a		42 c6 20 89 23 89		        .word nt_then, xt_if, z_if
>c640		69 66				        .text "if"
.c642						nt_then:
>c642		04 0b				        .byte 4, IM+CO+NN
>c644		4e c6 7f 86 8b 86		        .word nt_else, xt_then, z_then
>c64a		74 68 65 6e			        .text "then"
.c64e						nt_else:
>c64e		04 0b				        .byte 4, IM+CO+NN
>c650		5a c6 74 86 8b 86		        .word nt_repeat, xt_else, z_else
>c656		65 6c 73 65			        .text "else"
.c65a						nt_repeat:
>c65a		06 0b				        .byte 6, IM+CO+NN
>c65c		68 c6 49 8f 52 8f		        .word nt_until, xt_repeat, z_repeat
>c662		72 65 70 65 61 74		        .text "repeat"
.c668						nt_until:
>c668		05 0b				        .byte 5, IM+CO+NN
>c66a		75 c6 ce 95 d4 95		        .word nt_while, xt_until, z_until
>c670		75 6e 74 69 6c			        .text "until"
.c675						nt_while:
>c675		05 0b				        .byte 5, IM+CO+NN
>c677		82 c6 f1 95 fa 95		        .word nt_case, xt_while, z_while
>c67d		77 68 69 6c 65			        .text "while"
.c682						nt_case:
>c682		04 0b				        .byte 4, IM+CO+NN
>c684		8e c6 71 9e 77 9e		        .word nt_of, xt_case, z_case    ; shares code with ZERO
>c68a		63 61 73 65			        .text "case"
.c68e						nt_of:
>c68e		02 0b				        .byte 2, IM+CO+NN
>c690		98 c6 97 8c af 8c		        .word nt_endof, xt_of, z_of
>c696		6f 66				        .text "of"
.c698						nt_endof:
>c698		05 0b				        .byte 5, IM+CO+NN
>c69a		a5 c6 74 86 8b 86		        .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
>c6a0		65 6e 64 6f 66			        .text "endof"
.c6a5						nt_endcase:
>c6a5		07 0b				        .byte 7, IM+CO+NN
>c6a7		b4 c6 96 86 ad 86		        .word nt_defer_fetch, xt_endcase, z_endcase
>c6ad		65 6e 64 63 61 73 65		        .text "endcase"
.c6b4						nt_defer_fetch:
>c6b4		06 00				        .byte 6, 0
>c6b6		c2 c6 04 85 0d 85		        .word nt_defer_store, xt_defer_fetch, z_defer_fetch
>c6bc		64 65 66 65 72 40		        .text "defer@"
.c6c2						nt_defer_store:
>c6c2		06 00				        .byte 6, 0
>c6c4		d0 c6 0e 85 17 85		        .word nt_is, xt_defer_store, z_defer_store
>c6ca		64 65 66 65 72 21		        .text "defer!"
.c6d0						nt_is:
>c6d0		02 02				        .byte 2, IM
>c6d2		da c6 40 89 58 89		        .word nt_action_of, xt_is, z_is
>c6d8		69 73				        .text "is"
.c6da						nt_action_of:
>c6da		09 02				        .byte 9, IM
>c6dc		eb c6 09 82 21 82		        .word nt_useraddr, xt_action_of, z_action_of
>c6e2		61 63 74 69 6f 6e 2d 6f		        .text "action-of"
>c6ea		66
.c6eb						nt_useraddr:
>c6eb		08 00				        .byte 8, 0
>c6ed		fb c6 45 9e 4f 9e		        .word nt_buffer_colon, xt_useraddr, z_useraddr
>c6f3		75 73 65 72 61 64 64 72		        .text "useraddr"
.c6fb						nt_buffer_colon:
>c6fb		07 00				        .byte 7, 0
>c6fd		0a c7 1e 83 24 83		        .word +, xt_buffer_colon, z_buffer_colon
>c703		62 75 66 66 65 72 3a		        .text "buffer:"
.c70a						+
.c70a						nt_buffstatus:
>c70a		0a 00				        .byte 10, 0
>c70c		1c c7 0f b0 14 b0		        .word nt_buffblocknum, xt_buffstatus, z_buffstatus
>c712		62 75 66 66 73 74 61 74		        .text "buffstatus"
>c71a		75 73
.c71c						nt_buffblocknum:
>c71c		0c 00				        .byte 12, 0
>c71e		30 c7 d9 af de af		        .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
>c724		62 75 66 66 62 6c 6f 63		        .text "buffblocknum"
>c72c		6b 6e 75 6d
.c730						nt_blkbuffer:
>c730		09 00				        .byte 9, 0
>c732		41 c7 29 ae 36 ae		        .word nt_scr, xt_blkbuffer, z_blkbuffer
>c738		62 6c 6b 62 75 66 66 65		        .text "blkbuffer"
>c740		72
.c741						nt_scr:
>c741		03 08				        .byte 3, NN
>c743		4c c7 91 b0 96 b0		        .word nt_blk, xt_scr, z_scr
>c749		73 63 72			        .text "scr"
.c74c						nt_blk:
>c74c		03 08				        .byte 3, NN
>c74e		57 c7 24 ae 29 ae		        .word nt_block_write, xt_blk, z_blk
>c754		62 6c 6b			        .text "blk"
.c757						nt_block_write:
>c757		0b 08				        .byte 11, NN
>c759		6a c7 c6 af d4 af		        .word nt_block_write_vector, xt_block_write, z_block_write
>c75f		62 6c 6f 63 6b 2d 77 72		        .text "block-write"
>c767		69 74 65
.c76a						nt_block_write_vector:
>c76a		12 08				        .byte 18, NN
>c76c		84 c7 d4 af d9 af		        .word nt_block_read, xt_block_write_vector, z_block_write_vector
>c772		62 6c 6f 63 6b 2d 77 72		        .text "block-write-vector"
>c77a		69 74 65 2d 76 65 63 74 6f 72
.c784						nt_block_read:
>c784		0a 08				        .byte 10, NN
>c786		96 c7 ae af bc af		        .word nt_block_read_vector, xt_block_read, z_block_read
>c78c		62 6c 6f 63 6b 2d 72 65		        .text "block-read"
>c794		61 64
.c796						nt_block_read_vector:
>c796		11 08				        .byte 17, NN
>c798		af c7 bc af c1 af		        .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
>c79e		62 6c 6f 63 6b 2d 72 65		        .text "block-read-vector"
>c7a6		61 64 2d 76 65 63 74 6f 72
.c7af						nt_save_buffers:
>c7af		0c 00				        .byte 12, 0
>c7b1		c3 c7 76 b0 90 b0		        .word nt_block, xt_save_buffers, z_save_buffers
>c7b7		73 61 76 65 2d 62 75 66		        .text "save-buffers"
>c7bf		66 65 72 73
.c7c3						nt_block:
>c7c3		05 00				        .byte 5, 0
>c7c5		d0 c7 37 ae 89 ae		        .word nt_update, xt_block, z_block
>c7cb		62 6c 6f 63 6b			        .text "block"
.c7d0						nt_update:
>c7d0		06 00				        .byte 6, 0
>c7d2		de c7 db b0 e3 b0		        .word nt_buffer, xt_update, z_update
>c7d8		75 70 64 61 74 65		        .text "update"
.c7de						nt_buffer:
>c7de		06 00				        .byte 6, 0
>c7e0		ec c7 de af 0e b0		        .word nt_empty_buffers, xt_buffer, z_buffer
>c7e6		62 75 66 66 65 72		        .text "buffer"
.c7ec						nt_empty_buffers:
>c7ec		0d 00				        .byte 13, 0
>c7ee		01 c8 14 b0 1a b0		        .word nt_flush, xt_empty_buffers, z_empty_buffers
>c7f4		65 6d 70 74 79 2d 62 75		        .text "empty-buffers"
>c7fc		66 66 65 72 73
.c801						nt_flush:
>c801		05 00				        .byte 5, 0
>c803		0e c8 1b b0 24 b0		        .word nt_load, xt_flush, z_flush
>c809		66 6c 75 73 68			        .text "flush"
.c80e						nt_load:
>c80e		04 00				        .byte 4, 0
>c810		1a c8 32 b0 75 b0		        .word nt_thru, xt_load, z_load
>c816		6c 6f 61 64			        .text "load"
.c81a						nt_thru:
>c81a		04 00				        .byte 4, 0
>c81c		26 c8 96 b0 da b0		        .word +, xt_thru, z_thru
>c822		74 68 72 75			        .text "thru"
.c826						+
.c826						nt_list:
>c826		04 00				        .byte 4, 0
>c828		32 c8 25 b0 31 b0		        .word +, xt_list, z_list
>c82e		6c 69 73 74			        .text "list"
.c832						+
.c832						nt_block_ramdrive_init:
>c832		13 00				        .byte 19, 0
>c834		4d c8 8a ae ad af		        .word +, xt_block_ramdrive_init, z_block_ramdrive_init
>c83a		62 6c 6f 63 6b 2d 72 61		        .text "block-ramdrive-init"
>c842		6d 64 72 69 76 65 2d 69 6e 69 74
.c84d						+
.c84d						nt_definitions:
>c84d		0b 00				        .byte 11, 0
>c84f		60 c8 15 b2 1d b2		        .word nt_wordlist, xt_definitions, z_definitions
>c855		64 65 66 69 6e 69 74 69		        .text "definitions"
>c85d		6f 6e 73
.c860						nt_wordlist:
>c860		08 00				        .byte 8, 0
>c862		70 c8 80 b3 96 b3		        .word nt_search_wordlist, xt_wordlist, z_wordlist
>c868		77 6f 72 64 6c 69 73 74		        .text "wordlist"
.c870						nt_search_wordlist:
>c870		0f 00				        .byte 15, 0
>c872		87 c8 b9 b2 2c b3		        .word nt_set_current, xt_search_wordlist, z_search_wordlist
>c878		73 65 61 72 63 68 2d 77		        .text "search-wordlist"
>c880		6f 72 64 6c 69 73 74
.c887						nt_set_current:
>c887		0b 00				        .byte 11, 0
>c889		9a c8 2d b3 38 b3		        .word nt_get_current, xt_set_current, z_set_current
>c88f		73 65 74 2d 63 75 72 72		        .text "set-current"
>c897		65 6e 74
.c89a						nt_get_current:
>c89a		0b 00				        .byte 11, 0
>c89c		ad c8 25 b2 2f b2		        .word nt_set_order, xt_get_current, z_get_current
>c8a2		67 65 74 2d 63 75 72 72		        .text "get-current"
>c8aa		65 6e 74
.c8ad						nt_set_order:
>c8ad		09 00				        .byte 9, 0
>c8af		be c8 39 b3 6c b3		        .word nt_get_order, xt_set_order, z_set_order
>c8b5		73 65 74 2d 6f 72 64 65		        .text "set-order"
>c8bd		72
.c8be						nt_get_order:
>c8be		09 00				        .byte 9, 0
>c8c0		cf c8 30 b2 58 b2		        .word nt_root_wordlist, xt_get_order, z_get_order
>c8c6		67 65 74 2d 6f 72 64 65		        .text "get-order"
>c8ce		72
.c8cf						nt_root_wordlist:
>c8cf		0d 00				        .byte 13, 0
>c8d1		e4 c8 b0 b2 b8 b2		        .word +, xt_root_wordlist, z_root_wordlist
>c8d7		72 6f 6f 74 2d 77 6f 72		        .text "root-wordlist"
>c8df		64 6c 69 73 74
.c8e4						+
.c8e4						nt_assembler_wordlist:
>c8e4		12 00				        .byte 18, 0
>c8e6		fe c8 3c 9e 44 9e		        .word +, xt_assembler_wordlist, z_assembler_wordlist
>c8ec		61 73 73 65 6d 62 6c 65		        .text "assembler-wordlist"
>c8f4		72 2d 77 6f 72 64 6c 69 73 74
.c8fe						+
.c8fe						nt_editor_wordlist:
>c8fe		0f 00				        .byte 15, 0
>c900		15 c9 0b 9e 13 9e		        .word +, xt_editor_wordlist, z_editor_wordlist
>c906		65 64 69 74 6f 72 2d 77		        .text "editor-wordlist"
>c90e		6f 72 64 6c 69 73 74
.c915						+
.c915						nt_forth_wordlist:
>c915		0e 00				        .byte 14, 0
>c917		2b c9 71 9e 77 9e		        .word nt_only, xt_forth_wordlist, z_forth_wordlist
>c91d		66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>c925		72 64 6c 69 73 74
.c92b						nt_only:
>c92b		04 00				        .byte 4, 0
>c92d		37 c9 59 b2 5f b2		        .word nt_also, xt_only, z_only
>c933		6f 6e 6c 79			        .text "only"
.c937						nt_also:
>c937		04 00				        .byte 4, 0
>c939		43 c9 05 b2 14 b2		        .word nt_previous, xt_also, z_also
>c93f		61 6c 73 6f			        .text "also"
.c943						nt_previous:
>c943		08 00				        .byte 8, 0
>c945		53 c9 a3 b2 af b2		        .word nt_to_order, xt_previous, z_previous
>c94b		70 72 65 76 69 6f 75 73		        .text "previous"
.c953						nt_to_order:
>c953		06 00				        .byte 6, 0
>c955		61 c9 6d b3 7f b3		        .word nt_order, xt_to_order, z_to_order
>c95b		3e 6f 72 64 65 72		        .text ">order"
.c961						nt_order:
>c961		05 00				        .byte 5, 0
>c963		6e c9 60 b2 8a b2		        .word nt_forth, xt_order, z_order
>c969		6f 72 64 65 72			        .text "order"
.c96e						nt_forth:
>c96e		05 00				        .byte 5, 0
>c970		7b c9 1e b2 24 b2		        .word +, xt_forth, z_forth
>c976		66 6f 72 74 68			        .text "forth"
.c97b						+
>c97b		03 08				nt_see: .byte 3, NN
>c97d		86 c9 46 99 1a 9a		        .word +, xt_see, z_see
>c983		73 65 65			        .text "see"
.c986						+
.c986						nt_ed:
>c986		03 08				        .byte 3, NN
>c988		91 c9 31 a8 34 a8		        .word +, xt_ed, z_ed
>c98e		65 64 3a			        .text "ed:"
.c991						+
.c991						nt_cold:
>c991		04 00				        .byte 4, 0
>c993		9d c9 00 80 b2 80		        .word nt_bye, xt_cold, z_cold
>c999		63 6f 6c 64			        .text "cold"
.c99d						nt_bye:
>c99d		03				        .byte 3         ; length of word strings
>c99e		00				        .byte 0         ; status byte
>c99f		00 00				        .word 0000      ; next word in Dictionary, 0000 signals end
>c9a1		7a 98				        .word xt_bye    ; start of code block (xt of this word)
>c9a3		7d 98				        .word z_bye     ; end of code (RTS)
>c9a5		62 79 65			        .text "bye"     ; word name, always lower case, not zero-terminated
.c9a8						root_dictionary_start:
.c9a8						nt_root_set_order:
>c9a8		09 00				        .byte 9, 0
>c9aa		b9 c9 39 b3 6c b3		        .word nt_root_forth, xt_set_order, z_set_order
>c9b0		73 65 74 2d 6f 72 64 65		        .text "set-order"
>c9b8		72
.c9b9						nt_root_forth:
>c9b9		05 00				        .byte 5, 0
>c9bb		c6 c9 1e b2 24 b2		        .word nt_root_forth_wordlist, xt_forth, z_forth
>c9c1		66 6f 72 74 68			        .text "forth"
.c9c6						nt_root_forth_wordlist:
>c9c6		0e 00				        .byte 14, 0
>c9c8		dc c9 71 9e 77 9e		        .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
>c9ce		66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>c9d6		72 64 6c 69 73 74
.c9dc						nt_root_words:
>c9dc		05 00				        .byte 5, 0
>c9de		00 00 1b 9a 77 9a		        .word 0000, xt_words, z_words
>c9e4		77 6f 72 64 73			        .text "words"
.c9e9						editor_dictionary_start:
.c9e9						nt_editor_o:
>c9e9		01 00				        .byte 1, 0
>c9eb		f2 c9 bf b1 04 b2		        .word nt_editor_line, xt_editor_o, z_editor_o
>c9f1		6f				        .text "o"
.c9f2						nt_editor_line:
>c9f2		04 00				        .byte 4, 0
>c9f4		fe c9 a6 b1 be b1		        .word nt_editor_l, xt_editor_line, z_editor_line
>c9fa		6c 69 6e 65			        .text "line"
.c9fe						nt_editor_l:
>c9fe		01 00				        .byte 1, 0
>ca00		07 ca 30 b1 a5 b1		        .word nt_editor_el, xt_editor_l, z_editor_l
>ca06		6c				        .text "l"
.ca07						nt_editor_el:
>ca07		02 00				        .byte 2, 0
>ca09		11 ca 1e b1 2f b1		        .word nt_editor_erase_screen, xt_editor_el, z_editor_el
>ca0f		65 6c				        .text "el"
.ca11						nt_editor_erase_screen:
>ca11		0c 00				        .byte 12, 0
>ca13		25 ca 0c b1 1d b1		        .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
>ca19		65 72 61 73 65 2d 73 63		        .text "erase-screen"
>ca21		72 65 65 6e
.ca25						nt_editor_enter_screen:
>ca25		0c 00				        .byte 12, 0
>ca27		00 00 f0 b0 0b b1		        .word 0000, xt_editor_enter_screen, z_editor_enter_screen
>ca2d		65 6e 74 65 72 2d 73 63		        .text "enter-screen"
>ca35		72 65 65 6e
.ca39						assembler_dictionary_start:
.ca39						nt_asm_adc_h:
>ca39		05 0a						.byte 5, IM+NN
>ca3b		46 ca				                .word nt_asm_adc_x
>ca3d		86 a4 8b a4					.word xt_asm_adc_h, z_asm_adc_h
>ca41		61 64 63 2e 23					.text "adc.#"
.ca46						nt_asm_adc_x:
>ca46		05 0a						.byte 5, IM+NN
>ca48		53 ca				                .word nt_asm_adc_y
>ca4a		8b a4 90 a4					.word xt_asm_adc_x, z_asm_adc_x
>ca4e		61 64 63 2e 78					.text "adc.x"
.ca53						nt_asm_adc_y:
>ca53		05 0a						.byte 5, IM+NN
>ca55		60 ca				                .word nt_asm_adc_z
>ca57		90 a4 95 a4					.word xt_asm_adc_y, z_asm_adc_y
>ca5b		61 64 63 2e 79					.text "adc.y"
.ca60						nt_asm_adc_z:
>ca60		05 0a						.byte 5, IM+NN
>ca62		6d ca				                .word nt_asm_adc_zi
>ca64		95 a4 9a a4					.word xt_asm_adc_z, z_asm_adc_z
>ca68		61 64 63 2e 7a					.text "adc.z"
.ca6d						nt_asm_adc_zi:
>ca6d		06 0a						.byte 6, IM+NN
>ca6f		7b ca				                .word nt_asm_adc_ziy
>ca71		9a a4 9f a4					.word xt_asm_adc_zi, z_asm_adc_zi
>ca75		61 64 63 2e 7a 69				.text "adc.zi"
.ca7b						nt_asm_adc_ziy:
>ca7b		07 0a						.byte 7, IM+NN
>ca7d		8a ca				                .word nt_asm_adc_zx
>ca7f		9f a4 a4 a4					.word xt_asm_adc_ziy, z_asm_adc_ziy
>ca83		61 64 63 2e 7a 69 79				.text "adc.ziy"
.ca8a						nt_asm_adc_zx:
>ca8a		06 0a						.byte 6, IM+NN
>ca8c		98 ca				                .word nt_asm_adc_zxi
>ca8e		a4 a4 a9 a4					.word xt_asm_adc_zx, z_asm_adc_zx
>ca92		61 64 63 2e 7a 78				.text "adc.zx"
.ca98						nt_asm_adc_zxi:
>ca98		07 0a						.byte 7, IM+NN
>ca9a		a7 ca				                .word nt_asm_and
>ca9c		a9 a4 ae a4					.word xt_asm_adc_zxi, z_asm_adc_zxi
>caa0		61 64 63 2e 7a 78 69				.text "adc.zxi"
.caa7						nt_asm_and:
>caa7		04 0a						.byte 4, IM+NN
>caa9		b3 ca				                .word nt_asm_and_h
>caab		ae a4 b3 a4					.word xt_asm_and, z_asm_and
>caaf		61 6e 64 2e					.text "and."
.cab3						nt_asm_and_h:
>cab3		05 0a						.byte 5, IM+NN
>cab5		c0 ca				                .word nt_asm_and_x
>cab7		b3 a4 b8 a4					.word xt_asm_and_h, z_asm_and_h
>cabb		61 6e 64 2e 23					.text "and.#"
.cac0						nt_asm_and_x:
>cac0		05 0a						.byte 5, IM+NN
>cac2		cd ca				                .word nt_asm_and_y
>cac4		b8 a4 bd a4					.word xt_asm_and_x, z_asm_and_x
>cac8		61 6e 64 2e 78					.text "and.x"
.cacd						nt_asm_and_y:
>cacd		05 0a						.byte 5, IM+NN
>cacf		da ca				                .word nt_asm_and_z
>cad1		bd a4 c2 a4					.word xt_asm_and_y, z_asm_and_y
>cad5		61 6e 64 2e 79					.text "and.y"
.cada						nt_asm_and_z:
>cada		05 0a						.byte 5, IM+NN
>cadc		e7 ca				                .word nt_asm_and_zi
>cade		c2 a4 c7 a4					.word xt_asm_and_z, z_asm_and_z
>cae2		61 6e 64 2e 7a					.text "and.z"
.cae7						nt_asm_and_zi:
>cae7		06 0a						.byte 6, IM+NN
>cae9		f5 ca				                .word nt_asm_and_ziy
>caeb		c7 a4 cc a4					.word xt_asm_and_zi, z_asm_and_zi
>caef		61 6e 64 2e 7a 69				.text "and.zi"
.caf5						nt_asm_and_ziy:
>caf5		07 0a						.byte 7, IM+NN
>caf7		04 cb				                .word nt_asm_and_zx
>caf9		cc a4 d1 a4					.word xt_asm_and_ziy, z_asm_and_ziy
>cafd		61 6e 64 2e 7a 69 79				.text "and.ziy"
.cb04						nt_asm_and_zx:
>cb04		06 0a						.byte 6, IM+NN
>cb06		12 cb				                .word nt_asm_and_zxi
>cb08		d1 a4 d6 a4					.word xt_asm_and_zx, z_asm_and_zx
>cb0c		61 6e 64 2e 7a 78				.text "and.zx"
.cb12						nt_asm_and_zxi:
>cb12		07 0a						.byte 7, IM+NN
>cb14		21 cb				                .word nt_asm_asl
>cb16		d6 a4 db a4					.word xt_asm_and_zxi, z_asm_and_zxi
>cb1a		61 6e 64 2e 7a 78 69				.text "and.zxi"
.cb21						nt_asm_asl:
>cb21		03 0a						.byte 3, IM+NN
>cb23		2c cb				                .word nt_asm_asl_a
>cb25		db a4 e0 a4					.word xt_asm_asl, z_asm_asl
>cb29		61 73 6c					.text "asl"
.cb2c						nt_asm_asl_a:
>cb2c		05 0a						.byte 5, IM+NN
>cb2e		39 cb				                .word nt_asm_asl_x
>cb30		e0 a4 e5 a4					.word xt_asm_asl_a, z_asm_asl_a
>cb34		61 73 6c 2e 61					.text "asl.a"
.cb39						nt_asm_asl_x:
>cb39		05 0a						.byte 5, IM+NN
>cb3b		46 cb				                .word nt_asm_asl_z
>cb3d		e5 a4 ea a4					.word xt_asm_asl_x, z_asm_asl_x
>cb41		61 73 6c 2e 78					.text "asl.x"
.cb46						nt_asm_asl_z:
>cb46		05 0a						.byte 5, IM+NN
>cb48		53 cb				                .word nt_asm_asl_zx
>cb4a		ea a4 ef a4					.word xt_asm_asl_z, z_asm_asl_z
>cb4e		61 73 6c 2e 7a					.text "asl.z"
.cb53						nt_asm_asl_zx:
>cb53		06 0a						.byte 6, IM+NN
>cb55		61 cb				                .word nt_asm_bcc
>cb57		ef a4 f4 a4					.word xt_asm_asl_zx, z_asm_asl_zx
>cb5b		61 73 6c 2e 7a 78				.text "asl.zx"
.cb61						nt_asm_bcc:
>cb61		03 0a						.byte 3, IM+NN
>cb63		6c cb				                .word nt_asm_bcs
>cb65		f4 a4 f9 a4					.word xt_asm_bcc, z_asm_bcc
>cb69		62 63 63					.text "bcc"
.cb6c						nt_asm_bcs:
>cb6c		03 0a						.byte 3, IM+NN
>cb6e		77 cb				                .word nt_asm_beq
>cb70		f9 a4 00 a5					.word xt_asm_bcs, z_asm_bcs
>cb74		62 63 73					.text "bcs"
.cb77						nt_asm_beq:
>cb77		03 0a						.byte 3, IM+NN
>cb79		82 cb				                .word nt_asm_bit
>cb7b		00 a5 05 a5					.word xt_asm_beq, z_asm_beq
>cb7f		62 65 71					.text "beq"
.cb82						nt_asm_bit:
>cb82		03 0a						.byte 3, IM+NN
>cb84		8d cb				                .word nt_asm_bit_h
>cb86		05 a5 0a a5					.word xt_asm_bit, z_asm_bit
>cb8a		62 69 74					.text "bit"
.cb8d						nt_asm_bit_h:
>cb8d		05 0a						.byte 5, IM+NN
>cb8f		9a cb				                .word nt_asm_bit_x
>cb91		0a a5 0f a5					.word xt_asm_bit_h, z_asm_bit_h
>cb95		62 69 74 2e 23					.text "bit.#"
.cb9a						nt_asm_bit_x:
>cb9a		05 0a						.byte 5, IM+NN
>cb9c		a7 cb				                .word nt_asm_bit_z
>cb9e		0f a5 14 a5					.word xt_asm_bit_x, z_asm_bit_x
>cba2		62 69 74 2e 78					.text "bit.x"
.cba7						nt_asm_bit_z:
>cba7		05 0a						.byte 5, IM+NN
>cba9		b4 cb				                .word nt_asm_bit_zx
>cbab		14 a5 19 a5					.word xt_asm_bit_z, z_asm_bit_z
>cbaf		62 69 74 2e 7a					.text "bit.z"
.cbb4						nt_asm_bit_zx:
>cbb4		06 0a						.byte 6, IM+NN
>cbb6		c2 cb				                .word nt_asm_bmi
>cbb8		19 a5 1e a5					.word xt_asm_bit_zx, z_asm_bit_zx
>cbbc		62 69 74 2e 7a 78				.text "bit.zx"
.cbc2						nt_asm_bmi:
>cbc2		03 0a						.byte 3, IM+NN
>cbc4		cd cb				                .word nt_asm_bne
>cbc6		1e a5 23 a5					.word xt_asm_bmi, z_asm_bmi
>cbca		62 6d 69					.text "bmi"
.cbcd						nt_asm_bne:
>cbcd		03 0a						.byte 3, IM+NN
>cbcf		d8 cb				                .word nt_asm_bpl
>cbd1		23 a5 28 a5					.word xt_asm_bne, z_asm_bne
>cbd5		62 6e 65					.text "bne"
.cbd8						nt_asm_bpl:
>cbd8		03 0a						.byte 3, IM+NN
>cbda		e3 cb				                .word nt_asm_bra
>cbdc		28 a5 2d a5					.word xt_asm_bpl, z_asm_bpl
>cbe0		62 70 6c					.text "bpl"
.cbe3						nt_asm_bra:
>cbe3		03 0a						.byte 3, IM+NN
>cbe5		ee cb				                .word nt_asm_brk
>cbe7		2d a5 32 a5					.word xt_asm_bra, z_asm_bra
>cbeb		62 72 61					.text "bra"
.cbee						nt_asm_brk:
>cbee		03 0a						.byte 3, IM+NN
>cbf0		f9 cb				                .word nt_asm_bvc
>cbf2		32 a5 37 a5					.word xt_asm_brk, z_asm_brk
>cbf6		62 72 6b					.text "brk"
.cbf9						nt_asm_bvc:
>cbf9		03 0a						.byte 3, IM+NN
>cbfb		04 cc				                .word nt_asm_bvs
>cbfd		37 a5 3c a5					.word xt_asm_bvc, z_asm_bvc
>cc01		62 76 63					.text "bvc"
.cc04						nt_asm_bvs:
>cc04		03 0a						.byte 3, IM+NN
>cc06		0f cc				                .word nt_asm_clc
>cc08		3c a5 41 a5					.word xt_asm_bvs, z_asm_bvs
>cc0c		62 76 73					.text "bvs"
.cc0f						nt_asm_clc:
>cc0f		03 0a						.byte 3, IM+NN
>cc11		1a cc				                .word nt_asm_cld
>cc13		41 a5 46 a5					.word xt_asm_clc, z_asm_clc
>cc17		63 6c 63					.text "clc"
.cc1a						nt_asm_cld:
>cc1a		03 0a						.byte 3, IM+NN
>cc1c		25 cc				                .word nt_asm_cli
>cc1e		46 a5 4b a5					.word xt_asm_cld, z_asm_cld
>cc22		63 6c 64					.text "cld"
.cc25						nt_asm_cli:
>cc25		03 0a						.byte 3, IM+NN
>cc27		30 cc				                .word nt_asm_clv
>cc29		4b a5 50 a5					.word xt_asm_cli, z_asm_cli
>cc2d		63 6c 69					.text "cli"
.cc30						nt_asm_clv:
>cc30		03 0a						.byte 3, IM+NN
>cc32		3b cc				                .word nt_asm_cmp
>cc34		50 a5 55 a5					.word xt_asm_clv, z_asm_clv
>cc38		63 6c 76					.text "clv"
.cc3b						nt_asm_cmp:
>cc3b		03 0a						.byte 3, IM+NN
>cc3d		46 cc				                .word nt_asm_cmp_h
>cc3f		55 a5 5a a5					.word xt_asm_cmp, z_asm_cmp
>cc43		63 6d 70					.text "cmp"
.cc46						nt_asm_cmp_h:
>cc46		05 0a						.byte 5, IM+NN
>cc48		53 cc				                .word nt_asm_cmp_x
>cc4a		5a a5 5f a5					.word xt_asm_cmp_h, z_asm_cmp_h
>cc4e		63 6d 70 2e 23					.text "cmp.#"
.cc53						nt_asm_cmp_x:
>cc53		05 0a						.byte 5, IM+NN
>cc55		60 cc				                .word nt_asm_cmp_y
>cc57		5f a5 64 a5					.word xt_asm_cmp_x, z_asm_cmp_x
>cc5b		63 6d 70 2e 78					.text "cmp.x"
.cc60						nt_asm_cmp_y:
>cc60		05 0a						.byte 5, IM+NN
>cc62		6d cc				                .word nt_asm_cmp_z
>cc64		64 a5 69 a5					.word xt_asm_cmp_y, z_asm_cmp_y
>cc68		63 6d 70 2e 79					.text "cmp.y"
.cc6d						nt_asm_cmp_z:
>cc6d		05 0a						.byte 5, IM+NN
>cc6f		7a cc				                .word nt_asm_cmp_zi
>cc71		69 a5 6e a5					.word xt_asm_cmp_z, z_asm_cmp_z
>cc75		63 6d 70 2e 7a					.text "cmp.z"
.cc7a						nt_asm_cmp_zi:
>cc7a		06 0a						.byte 6, IM+NN
>cc7c		88 cc				                .word nt_asm_cmp_ziy
>cc7e		6e a5 73 a5					.word xt_asm_cmp_zi, z_asm_cmp_zi
>cc82		63 6d 70 2e 7a 69				.text "cmp.zi"
.cc88						nt_asm_cmp_ziy:
>cc88		07 0a						.byte 7, IM+NN
>cc8a		97 cc				                .word nt_asm_cmp_zx
>cc8c		73 a5 78 a5					.word xt_asm_cmp_ziy, z_asm_cmp_ziy
>cc90		63 6d 70 2e 7a 69 79				.text "cmp.ziy"
.cc97						nt_asm_cmp_zx:
>cc97		06 0a						.byte 6, IM+NN
>cc99		a5 cc				                .word nt_asm_cmp_zxi
>cc9b		78 a5 7d a5					.word xt_asm_cmp_zx, z_asm_cmp_zx
>cc9f		63 6d 70 2e 7a 78				.text "cmp.zx"
.cca5						nt_asm_cmp_zxi:
>cca5		07 0a						.byte 7, IM+NN
>cca7		b4 cc				                .word nt_asm_cpx
>cca9		7d a5 82 a5					.word xt_asm_cmp_zxi, z_asm_cmp_zxi
>ccad		63 6d 70 2e 7a 78 69				.text "cmp.zxi"
.ccb4						nt_asm_cpx:
>ccb4		03 0a						.byte 3, IM+NN
>ccb6		bf cc				                .word nt_asm_cpx_h
>ccb8		82 a5 87 a5					.word xt_asm_cpx, z_asm_cpx
>ccbc		63 70 78					.text "cpx"
.ccbf						nt_asm_cpx_h:
>ccbf		05 0a						.byte 5, IM+NN
>ccc1		cc cc				                .word nt_asm_cpx_z
>ccc3		87 a5 8c a5					.word xt_asm_cpx_h, z_asm_cpx_h
>ccc7		63 70 78 2e 23					.text "cpx.#"
.cccc						nt_asm_cpx_z:
>cccc		05 0a						.byte 5, IM+NN
>ccce		d9 cc				                .word nt_asm_cpy
>ccd0		8c a5 91 a5					.word xt_asm_cpx_z, z_asm_cpx_z
>ccd4		63 70 78 2e 7a					.text "cpx.z"
.ccd9						nt_asm_cpy:
>ccd9		03 0a						.byte 3, IM+NN
>ccdb		e4 cc				                .word nt_asm_cpy_h
>ccdd		91 a5 98 a5					.word xt_asm_cpy, z_asm_cpy
>cce1		63 70 79					.text "cpy"
.cce4						nt_asm_cpy_h:
>cce4		05 0a						.byte 5, IM+NN
>cce6		f1 cc				                .word nt_asm_cpy_z
>cce8		98 a5 9d a5					.word xt_asm_cpy_h, z_asm_cpy_h
>ccec		63 70 79 2e 23					.text "cpy.#"
.ccf1						nt_asm_cpy_z:
>ccf1		05 0a						.byte 5, IM+NN
>ccf3		fe cc				                .word nt_asm_dec
>ccf5		9d a5 a2 a5					.word xt_asm_cpy_z, z_asm_cpy_z
>ccf9		63 70 79 2e 7a					.text "cpy.z"
.ccfe						nt_asm_dec:
>ccfe		03 0a						.byte 3, IM+NN
>cd00		09 cd				                .word nt_asm_dec_a
>cd02		a2 a5 a7 a5					.word xt_asm_dec, z_asm_dec
>cd06		64 65 63					.text "dec"
.cd09						nt_asm_dec_a:
>cd09		05 0a						.byte 5, IM+NN
>cd0b		16 cd				                .word nt_asm_dec_x
>cd0d		a7 a5 ac a5					.word xt_asm_dec_a, z_asm_dec_a
>cd11		64 65 63 2e 61					.text "dec.a"
.cd16						nt_asm_dec_x:
>cd16		05 0a						.byte 5, IM+NN
>cd18		23 cd				                .word nt_asm_dec_z
>cd1a		ac a5 b1 a5					.word xt_asm_dec_x, z_asm_dec_x
>cd1e		64 65 63 2e 78					.text "dec.x"
.cd23						nt_asm_dec_z:
>cd23		05 0a						.byte 5, IM+NN
>cd25		30 cd				                .word nt_asm_dec_zx
>cd27		b1 a5 b6 a5					.word xt_asm_dec_z, z_asm_dec_z
>cd2b		64 65 63 2e 7a					.text "dec.z"
.cd30						nt_asm_dec_zx:
>cd30		06 0a						.byte 6, IM+NN
>cd32		3e cd				                .word nt_asm_dex
>cd34		b6 a5 bb a5					.word xt_asm_dec_zx, z_asm_dec_zx
>cd38		64 65 63 2e 7a 78				.text "dec.zx"
.cd3e						nt_asm_dex:
>cd3e		03 0a						.byte 3, IM+NN
>cd40		49 cd				                .word nt_asm_dey
>cd42		bb a5 c0 a5					.word xt_asm_dex, z_asm_dex
>cd46		64 65 78					.text "dex"
.cd49						nt_asm_dey:
>cd49		03 0a						.byte 3, IM+NN
>cd4b		54 cd				                .word nt_asm_eor
>cd4d		c0 a5 c5 a5					.word xt_asm_dey, z_asm_dey
>cd51		64 65 79					.text "dey"
.cd54						nt_asm_eor:
>cd54		03 0a						.byte 3, IM+NN
>cd56		5f cd				                .word nt_asm_eor_h
>cd58		c5 a5 ca a5					.word xt_asm_eor, z_asm_eor
>cd5c		65 6f 72					.text "eor"
.cd5f						nt_asm_eor_h:
>cd5f		05 0a						.byte 5, IM+NN
>cd61		6c cd				                .word nt_asm_eor_x
>cd63		ca a5 cf a5					.word xt_asm_eor_h, z_asm_eor_h
>cd67		65 6f 72 2e 23					.text "eor.#"
.cd6c						nt_asm_eor_x:
>cd6c		05 0a						.byte 5, IM+NN
>cd6e		79 cd				                .word nt_asm_eor_y
>cd70		cf a5 d4 a5					.word xt_asm_eor_x, z_asm_eor_x
>cd74		65 6f 72 2e 78					.text "eor.x"
.cd79						nt_asm_eor_y:
>cd79		05 0a						.byte 5, IM+NN
>cd7b		86 cd				                .word nt_asm_eor_z
>cd7d		d4 a5 d9 a5					.word xt_asm_eor_y, z_asm_eor_y
>cd81		65 6f 72 2e 79					.text "eor.y"
.cd86						nt_asm_eor_z:
>cd86		05 0a						.byte 5, IM+NN
>cd88		93 cd				                .word nt_asm_eor_zi
>cd8a		d9 a5 de a5					.word xt_asm_eor_z, z_asm_eor_z
>cd8e		65 6f 72 2e 7a					.text "eor.z"
.cd93						nt_asm_eor_zi:
>cd93		06 0a						.byte 6, IM+NN
>cd95		a1 cd				                .word nt_asm_eor_ziy
>cd97		de a5 e3 a5					.word xt_asm_eor_zi, z_asm_eor_zi
>cd9b		65 6f 72 2e 7a 69				.text "eor.zi"
.cda1						nt_asm_eor_ziy:
>cda1		07 0a						.byte 7, IM+NN
>cda3		b0 cd				                .word nt_asm_eor_zx
>cda5		e3 a5 e8 a5					.word xt_asm_eor_ziy, z_asm_eor_ziy
>cda9		65 6f 72 2e 7a 69 79				.text "eor.ziy"
.cdb0						nt_asm_eor_zx:
>cdb0		06 0a						.byte 6, IM+NN
>cdb2		be cd				                .word nt_asm_eor_zxi
>cdb4		e8 a5 ed a5					.word xt_asm_eor_zx, z_asm_eor_zx
>cdb8		65 6f 72 2e 7a 78				.text "eor.zx"
.cdbe						nt_asm_eor_zxi:
>cdbe		07 0a						.byte 7, IM+NN
>cdc0		cd cd				                .word nt_asm_inc
>cdc2		ed a5 f2 a5					.word xt_asm_eor_zxi, z_asm_eor_zxi
>cdc6		65 6f 72 2e 7a 78 69				.text "eor.zxi"
.cdcd						nt_asm_inc:
>cdcd		03 0a						.byte 3, IM+NN
>cdcf		d8 cd				                .word nt_asm_inc_a
>cdd1		f2 a5 f7 a5					.word xt_asm_inc, z_asm_inc
>cdd5		69 6e 63					.text "inc"
.cdd8						nt_asm_inc_a:
>cdd8		05 0a						.byte 5, IM+NN
>cdda		e5 cd				                .word nt_asm_inc_x
>cddc		f7 a5 fc a5					.word xt_asm_inc_a, z_asm_inc_a
>cde0		69 6e 63 2e 61					.text "inc.a"
.cde5						nt_asm_inc_x:
>cde5		05 0a						.byte 5, IM+NN
>cde7		f2 cd				                .word nt_asm_inc_z
>cde9		fc a5 01 a6					.word xt_asm_inc_x, z_asm_inc_x
>cded		69 6e 63 2e 78					.text "inc.x"
.cdf2						nt_asm_inc_z:
>cdf2		05 0a						.byte 5, IM+NN
>cdf4		ff cd				                .word nt_asm_inc_zx
>cdf6		01 a6 06 a6					.word xt_asm_inc_z, z_asm_inc_z
>cdfa		69 6e 63 2e 7a					.text "inc.z"
.cdff						nt_asm_inc_zx:
>cdff		06 0a						.byte 6, IM+NN
>ce01		0d ce				                .word nt_asm_inx
>ce03		06 a6 0b a6					.word xt_asm_inc_zx, z_asm_inc_zx
>ce07		69 6e 63 2e 7a 78				.text "inc.zx"
.ce0d						nt_asm_inx:
>ce0d		03 0a						.byte 3, IM+NN
>ce0f		18 ce				                .word nt_asm_iny
>ce11		0b a6 10 a6					.word xt_asm_inx, z_asm_inx
>ce15		69 6e 78					.text "inx"
.ce18						nt_asm_iny:
>ce18		03 0a						.byte 3, IM+NN
>ce1a		23 ce				                .word nt_asm_jmp
>ce1c		10 a6 15 a6					.word xt_asm_iny, z_asm_iny
>ce20		69 6e 79					.text "iny"
.ce23						nt_asm_jmp:
>ce23		03 0a						.byte 3, IM+NN
>ce25		2e ce				                .word nt_asm_jmp_i
>ce27		15 a6 18 a6					.word xt_asm_jmp, z_asm_jmp
>ce2b		6a 6d 70					.text "jmp"
.ce2e						nt_asm_jmp_i:
>ce2e		05 0a						.byte 5, IM+NN
>ce30		3b ce				                .word nt_asm_jmp_xi
>ce32		18 a6 1d a6					.word xt_asm_jmp_i, z_asm_jmp_i
>ce36		6a 6d 70 2e 69					.text "jmp.i"
.ce3b						nt_asm_jmp_xi:
>ce3b		06 0a						.byte 6, IM+NN
>ce3d		49 ce				                .word nt_asm_jsr
>ce3f		1d a6 22 a6					.word xt_asm_jmp_xi, z_asm_jmp_xi
>ce43		6a 6d 70 2e 78 69				.text "jmp.xi"
.ce49						nt_asm_jsr:
>ce49		03 0a						.byte 3, IM+NN
>ce4b		54 ce				                .word nt_asm_lda
>ce4d		22 a6 27 a6					.word xt_asm_jsr, z_asm_jsr
>ce51		6a 73 72					.text "jsr"
.ce54						nt_asm_lda:
>ce54		03 0a						.byte 3, IM+NN
>ce56		5f ce				                .word nt_asm_lda_h
>ce58		27 a6 2c a6					.word xt_asm_lda, z_asm_lda
>ce5c		6c 64 61					.text "lda"
.ce5f						nt_asm_lda_h:
>ce5f		05 0a						.byte 5, IM+NN
>ce61		6c ce				                .word nt_asm_lda_x
>ce63		2c a6 31 a6					.word xt_asm_lda_h, z_asm_lda_h
>ce67		6c 64 61 2e 23					.text "lda.#"
.ce6c						nt_asm_lda_x:
>ce6c		05 0a						.byte 5, IM+NN
>ce6e		79 ce				                .word nt_asm_lda_y
>ce70		31 a6 36 a6					.word xt_asm_lda_x, z_asm_lda_x
>ce74		6c 64 61 2e 78					.text "lda.x"
.ce79						nt_asm_lda_y:
>ce79		05 0a						.byte 5, IM+NN
>ce7b		86 ce				                .word nt_asm_lda_z
>ce7d		36 a6 3b a6					.word xt_asm_lda_y, z_asm_lda_y
>ce81		6c 64 61 2e 79					.text "lda.y"
.ce86						nt_asm_lda_z:
>ce86		05 0a						.byte 5, IM+NN
>ce88		93 ce				                .word nt_asm_lda_zi
>ce8a		3b a6 40 a6					.word xt_asm_lda_z, z_asm_lda_z
>ce8e		6c 64 61 2e 7a					.text "lda.z"
.ce93						nt_asm_lda_zi:
>ce93		06 0a						.byte 6, IM+NN
>ce95		a1 ce				                .word nt_asm_lda_ziy
>ce97		40 a6 45 a6					.word xt_asm_lda_zi, z_asm_lda_zi
>ce9b		6c 64 61 2e 7a 69				.text "lda.zi"
.cea1						nt_asm_lda_ziy:
>cea1		07 0a						.byte 7, IM+NN
>cea3		b0 ce				                .word nt_asm_lda_zx
>cea5		45 a6 4a a6					.word xt_asm_lda_ziy, z_asm_lda_ziy
>cea9		6c 64 61 2e 7a 69 79				.text "lda.ziy"
.ceb0						nt_asm_lda_zx:
>ceb0		06 0a						.byte 6, IM+NN
>ceb2		be ce				                .word nt_asm_lda_zxi
>ceb4		4a a6 4f a6					.word xt_asm_lda_zx, z_asm_lda_zx
>ceb8		6c 64 61 2e 7a 78				.text "lda.zx"
.cebe						nt_asm_lda_zxi:
>cebe		07 0a						.byte 7, IM+NN
>cec0		cd ce				                .word nt_asm_ldx
>cec2		4f a6 54 a6					.word xt_asm_lda_zxi, z_asm_lda_zxi
>cec6		6c 64 61 2e 7a 78 69				.text "lda.zxi"
.cecd						nt_asm_ldx:
>cecd		03 0a						.byte 3, IM+NN
>cecf		d8 ce				                .word nt_asm_ldx_h
>ced1		54 a6 59 a6					.word xt_asm_ldx, z_asm_ldx
>ced5		6c 64 78					.text "ldx"
.ced8						nt_asm_ldx_h:
>ced8		05 0a						.byte 5, IM+NN
>ceda		e5 ce				                .word nt_asm_ldx_y
>cedc		59 a6 5e a6					.word xt_asm_ldx_h, z_asm_ldx_h
>cee0		6c 64 78 2e 23					.text "ldx.#"
.cee5						nt_asm_ldx_y:
>cee5		05 0a						.byte 5, IM+NN
>cee7		f2 ce				                .word nt_asm_ldx_z
>cee9		5e a6 63 a6					.word xt_asm_ldx_y, z_asm_ldx_y
>ceed		6c 64 78 2e 79					.text "ldx.y"
.cef2						nt_asm_ldx_z:
>cef2		05 0a						.byte 5, IM+NN
>cef4		ff ce				                .word nt_asm_ldx_zy
>cef6		63 a6 68 a6					.word xt_asm_ldx_z, z_asm_ldx_z
>cefa		6c 64 78 2e 7a					.text "ldx.z"
.ceff						nt_asm_ldx_zy:
>ceff		06 0a						.byte 6, IM+NN
>cf01		0d cf				                .word nt_asm_ldy
>cf03		68 a6 6d a6					.word xt_asm_ldx_zy, z_asm_ldx_zy
>cf07		6c 64 78 2e 7a 79				.text "ldx.zy"
.cf0d						nt_asm_ldy:
>cf0d		03 0a						.byte 3, IM+NN
>cf0f		18 cf				                .word nt_asm_ldy_h
>cf11		6d a6 72 a6					.word xt_asm_ldy, z_asm_ldy
>cf15		6c 64 79					.text "ldy"
.cf18						nt_asm_ldy_h:
>cf18		05 0a						.byte 5, IM+NN
>cf1a		25 cf				                .word nt_asm_ldy_x
>cf1c		72 a6 77 a6					.word xt_asm_ldy_h, z_asm_ldy_h
>cf20		6c 64 79 2e 23					.text "ldy.#"
.cf25						nt_asm_ldy_x:
>cf25		05 0a						.byte 5, IM+NN
>cf27		32 cf				                .word nt_asm_ldy_z
>cf29		77 a6 7c a6					.word xt_asm_ldy_x, z_asm_ldy_x
>cf2d		6c 64 79 2e 78					.text "ldy.x"
.cf32						nt_asm_ldy_z:
>cf32		05 0a						.byte 5, IM+NN
>cf34		3f cf				                .word nt_asm_ldy_zx
>cf36		7c a6 81 a6					.word xt_asm_ldy_z, z_asm_ldy_z
>cf3a		6c 64 79 2e 7a					.text "ldy.z"
.cf3f						nt_asm_ldy_zx:
>cf3f		06 0a						.byte 6, IM+NN
>cf41		4d cf				                .word nt_asm_lsr
>cf43		81 a6 86 a6					.word xt_asm_ldy_zx, z_asm_ldy_zx
>cf47		6c 64 79 2e 7a 78				.text "ldy.zx"
.cf4d						nt_asm_lsr:
>cf4d		03 0a						.byte 3, IM+NN
>cf4f		58 cf				                .word nt_asm_lsr_a
>cf51		86 a6 8b a6					.word xt_asm_lsr, z_asm_lsr
>cf55		6c 73 72					.text "lsr"
.cf58						nt_asm_lsr_a:
>cf58		05 0a						.byte 5, IM+NN
>cf5a		65 cf				                .word nt_asm_lsr_x
>cf5c		8b a6 90 a6					.word xt_asm_lsr_a, z_asm_lsr_a
>cf60		6c 73 72 2e 61					.text "lsr.a"
.cf65						nt_asm_lsr_x:
>cf65		05 0a						.byte 5, IM+NN
>cf67		72 cf				                .word nt_asm_lsr_z
>cf69		90 a6 95 a6					.word xt_asm_lsr_x, z_asm_lsr_x
>cf6d		6c 73 72 2e 78					.text "lsr.x"
.cf72						nt_asm_lsr_z:
>cf72		05 0a						.byte 5, IM+NN
>cf74		7f cf				                .word nt_asm_lsr_zx
>cf76		95 a6 9a a6					.word xt_asm_lsr_z, z_asm_lsr_z
>cf7a		6c 73 72 2e 7a					.text "lsr.z"
.cf7f						nt_asm_lsr_zx:
>cf7f		06 0a						.byte 6, IM+NN
>cf81		8d cf				                .word nt_asm_nop
>cf83		9a a6 9f a6					.word xt_asm_lsr_zx, z_asm_lsr_zx
>cf87		6c 73 72 2e 7a 78				.text "lsr.zx"
.cf8d						nt_asm_nop:
>cf8d		03 0a						.byte 3, IM+NN
>cf8f		98 cf				                .word nt_asm_ora
>cf91		9f a6 a4 a6					.word xt_asm_nop, z_asm_nop
>cf95		6e 6f 70					.text "nop"
.cf98						nt_asm_ora:
>cf98		03 0a						.byte 3, IM+NN
>cf9a		a3 cf				                .word nt_asm_ora_h
>cf9c		a4 a6 a9 a6					.word xt_asm_ora, z_asm_ora
>cfa0		6f 72 61					.text "ora"
.cfa3						nt_asm_ora_h:
>cfa3		05 0a						.byte 5, IM+NN
>cfa5		b0 cf				                .word nt_asm_ora_x
>cfa7		a9 a6 ae a6					.word xt_asm_ora_h, z_asm_ora_h
>cfab		6f 72 61 2e 23					.text "ora.#"
.cfb0						nt_asm_ora_x:
>cfb0		05 0a						.byte 5, IM+NN
>cfb2		bd cf				                .word nt_asm_ora_y
>cfb4		ae a6 b3 a6					.word xt_asm_ora_x, z_asm_ora_x
>cfb8		6f 72 61 2e 78					.text "ora.x"
.cfbd						nt_asm_ora_y:
>cfbd		05 0a						.byte 5, IM+NN
>cfbf		ca cf				                .word nt_asm_ora_z
>cfc1		b3 a6 b8 a6					.word xt_asm_ora_y, z_asm_ora_y
>cfc5		6f 72 61 2e 79					.text "ora.y"
.cfca						nt_asm_ora_z:
>cfca		05 0a						.byte 5, IM+NN
>cfcc		d7 cf				                .word nt_asm_ora_zi
>cfce		b8 a6 bd a6					.word xt_asm_ora_z, z_asm_ora_z
>cfd2		6f 72 61 2e 7a					.text "ora.z"
.cfd7						nt_asm_ora_zi:
>cfd7		06 0a						.byte 6, IM+NN
>cfd9		e5 cf				                .word nt_asm_ora_ziy
>cfdb		bd a6 c4 a6					.word xt_asm_ora_zi, z_asm_ora_zi
>cfdf		6f 72 61 2e 7a 69				.text "ora.zi"
.cfe5						nt_asm_ora_ziy:
>cfe5		07 0a						.byte 7, IM+NN
>cfe7		f4 cf				                .word nt_asm_ora_zx
>cfe9		c4 a6 c9 a6					.word xt_asm_ora_ziy, z_asm_ora_ziy
>cfed		6f 72 61 2e 7a 69 79				.text "ora.ziy"
.cff4						nt_asm_ora_zx:
>cff4		06 0a						.byte 6, IM+NN
>cff6		02 d0				                .word nt_asm_ora_zxi
>cff8		c9 a6 ce a6					.word xt_asm_ora_zx, z_asm_ora_zx
>cffc		6f 72 61 2e 7a 78				.text "ora.zx"
.d002						nt_asm_ora_zxi:
>d002		07 0a						.byte 7, IM+NN
>d004		11 d0				                .word nt_asm_pha
>d006		ce a6 d3 a6					.word xt_asm_ora_zxi, z_asm_ora_zxi
>d00a		6f 72 61 2e 7a 78 69				.text "ora.zxi"
.d011						nt_asm_pha:
>d011		03 0a						.byte 3, IM+NN
>d013		1c d0				                .word nt_asm_php
>d015		d3 a6 d8 a6					.word xt_asm_pha, z_asm_pha
>d019		70 68 61					.text "pha"
.d01c						nt_asm_php:
>d01c		03 0a						.byte 3, IM+NN
>d01e		27 d0				                .word nt_asm_phx
>d020		d8 a6 dd a6					.word xt_asm_php, z_asm_php
>d024		70 68 70					.text "php"
.d027						nt_asm_phx:
>d027		03 0a						.byte 3, IM+NN
>d029		32 d0				                .word nt_asm_phy
>d02b		dd a6 e2 a6					.word xt_asm_phx, z_asm_phx
>d02f		70 68 78					.text "phx"
.d032						nt_asm_phy:
>d032		03 0a						.byte 3, IM+NN
>d034		3d d0				                .word nt_asm_pla
>d036		e2 a6 e7 a6					.word xt_asm_phy, z_asm_phy
>d03a		70 68 79					.text "phy"
.d03d						nt_asm_pla:
>d03d		03 0a						.byte 3, IM+NN
>d03f		48 d0				                .word nt_asm_plp
>d041		e7 a6 ec a6					.word xt_asm_pla, z_asm_pla
>d045		70 6c 61					.text "pla"
.d048						nt_asm_plp:
>d048		03 0a						.byte 3, IM+NN
>d04a		53 d0				                .word nt_asm_plx
>d04c		ec a6 f1 a6					.word xt_asm_plp, z_asm_plp
>d050		70 6c 70					.text "plp"
.d053						nt_asm_plx:
>d053		03 0a						.byte 3, IM+NN
>d055		5e d0				                .word nt_asm_ply
>d057		f1 a6 f6 a6					.word xt_asm_plx, z_asm_plx
>d05b		70 6c 78					.text "plx"
.d05e						nt_asm_ply:
>d05e		03 0a						.byte 3, IM+NN
>d060		69 d0				                .word nt_asm_rol
>d062		f6 a6 fb a6					.word xt_asm_ply, z_asm_ply
>d066		70 6c 79					.text "ply"
.d069						nt_asm_rol:
>d069		03 0a						.byte 3, IM+NN
>d06b		74 d0				                .word nt_asm_rol_a
>d06d		fb a6 00 a7					.word xt_asm_rol, z_asm_rol
>d071		72 6f 6c					.text "rol"
.d074						nt_asm_rol_a:
>d074		05 0a						.byte 5, IM+NN
>d076		81 d0				                .word nt_asm_rol_x
>d078		00 a7 05 a7					.word xt_asm_rol_a, z_asm_rol_a
>d07c		72 6f 6c 2e 61					.text "rol.a"
.d081						nt_asm_rol_x:
>d081		05 0a						.byte 5, IM+NN
>d083		8e d0				                .word nt_asm_rol_z
>d085		05 a7 0a a7					.word xt_asm_rol_x, z_asm_rol_x
>d089		72 6f 6c 2e 78					.text "rol.x"
.d08e						nt_asm_rol_z:
>d08e		05 0a						.byte 5, IM+NN
>d090		9b d0				                .word nt_asm_rol_zx
>d092		0a a7 0f a7					.word xt_asm_rol_z, z_asm_rol_z
>d096		72 6f 6c 2e 7a					.text "rol.z"
.d09b						nt_asm_rol_zx:
>d09b		06 0a						.byte 6, IM+NN
>d09d		a9 d0				                .word nt_asm_ror
>d09f		0f a7 14 a7					.word xt_asm_rol_zx, z_asm_rol_zx
>d0a3		72 6f 6c 2e 7a 78				.text "rol.zx"
.d0a9						nt_asm_ror:
>d0a9		03 0a						.byte 3, IM+NN
>d0ab		b4 d0				                .word nt_asm_ror_a
>d0ad		14 a7 19 a7					.word xt_asm_ror, z_asm_ror
>d0b1		72 6f 72					.text "ror"
.d0b4						nt_asm_ror_a:
>d0b4		05 0a						.byte 5, IM+NN
>d0b6		c1 d0				                .word nt_asm_ror_x
>d0b8		19 a7 1e a7					.word xt_asm_ror_a, z_asm_ror_a
>d0bc		72 6f 72 2e 61					.text "ror.a"
.d0c1						nt_asm_ror_x:
>d0c1		05 0a						.byte 5, IM+NN
>d0c3		ce d0				                .word nt_asm_ror_z
>d0c5		1e a7 23 a7					.word xt_asm_ror_x, z_asm_ror_x
>d0c9		72 6f 72 2e 78					.text "ror.x"
.d0ce						nt_asm_ror_z:
>d0ce		05 0a						.byte 5, IM+NN
>d0d0		db d0				                .word nt_asm_ror_zx
>d0d2		23 a7 28 a7					.word xt_asm_ror_z, z_asm_ror_z
>d0d6		72 6f 72 2e 7a					.text "ror.z"
.d0db						nt_asm_ror_zx:
>d0db		06 0a						.byte 6, IM+NN
>d0dd		e9 d0				                .word nt_asm_rti
>d0df		28 a7 2d a7					.word xt_asm_ror_zx, z_asm_ror_zx
>d0e3		72 6f 72 2e 7a 78				.text "ror.zx"
.d0e9						nt_asm_rti:
>d0e9		03 0a						.byte 3, IM+NN
>d0eb		f4 d0				                .word nt_asm_rts
>d0ed		2d a7 32 a7					.word xt_asm_rti, z_asm_rti
>d0f1		72 74 69					.text "rti"
.d0f4						nt_asm_rts:
>d0f4		03 0a						.byte 3, IM+NN
>d0f6		ff d0				                .word nt_asm_sbc
>d0f8		32 a7 37 a7					.word xt_asm_rts, z_asm_rts
>d0fc		72 74 73					.text "rts"
.d0ff						nt_asm_sbc:
>d0ff		03 0a						.byte 3, IM+NN
>d101		0a d1				                .word nt_asm_sbc_h
>d103		37 a7 3c a7					.word xt_asm_sbc, z_asm_sbc
>d107		73 62 63					.text "sbc"
.d10a						nt_asm_sbc_h:
>d10a		05 0a						.byte 5, IM+NN
>d10c		17 d1				                .word nt_asm_sbc_x
>d10e		3c a7 41 a7					.word xt_asm_sbc_h, z_asm_sbc_h
>d112		73 62 63 2e 23					.text "sbc.#"
.d117						nt_asm_sbc_x:
>d117		05 0a						.byte 5, IM+NN
>d119		24 d1				                .word nt_asm_sbc_y
>d11b		41 a7 46 a7					.word xt_asm_sbc_x, z_asm_sbc_x
>d11f		73 62 63 2e 78					.text "sbc.x"
.d124						nt_asm_sbc_y:
>d124		05 0a						.byte 5, IM+NN
>d126		31 d1				                .word nt_asm_sbc_z
>d128		46 a7 4b a7					.word xt_asm_sbc_y, z_asm_sbc_y
>d12c		73 62 63 2e 79					.text "sbc.y"
.d131						nt_asm_sbc_z:
>d131		05 0a						.byte 5, IM+NN
>d133		3e d1				                .word nt_asm_sbc_zi
>d135		4b a7 50 a7					.word xt_asm_sbc_z, z_asm_sbc_z
>d139		73 62 63 2e 7a					.text "sbc.z"
.d13e						nt_asm_sbc_zi:
>d13e		06 0a						.byte 6, IM+NN
>d140		4c d1				                .word nt_asm_sbc_ziy
>d142		50 a7 55 a7					.word xt_asm_sbc_zi, z_asm_sbc_zi
>d146		73 62 63 2e 7a 69				.text "sbc.zi"
.d14c						nt_asm_sbc_ziy:
>d14c		07 0a						.byte 7, IM+NN
>d14e		5b d1				                .word nt_asm_sbc_zx
>d150		55 a7 5a a7					.word xt_asm_sbc_ziy, z_asm_sbc_ziy
>d154		73 62 63 2e 7a 69 79				.text "sbc.ziy"
.d15b						nt_asm_sbc_zx:
>d15b		06 0a						.byte 6, IM+NN
>d15d		69 d1				                .word nt_asm_sbc_zxi
>d15f		5a a7 5f a7					.word xt_asm_sbc_zx, z_asm_sbc_zx
>d163		73 62 63 2e 7a 78				.text "sbc.zx"
.d169						nt_asm_sbc_zxi:
>d169		07 0a						.byte 7, IM+NN
>d16b		78 d1				                .word nt_asm_sec
>d16d		5f a7 63 a7					.word xt_asm_sbc_zxi, z_asm_sbc_zxi
>d171		73 62 63 2e 7a 78 69				.text "sbc.zxi"
.d178						nt_asm_sec:
>d178		03 0a						.byte 3, IM+NN
>d17a		83 d1				                .word nt_asm_sed
>d17c		63 a7 67 a7					.word xt_asm_sec, z_asm_sec
>d180		73 65 63					.text "sec"
.d183						nt_asm_sed:
>d183		03 0a						.byte 3, IM+NN
>d185		8e d1				                .word nt_asm_sei
>d187		67 a7 6b a7					.word xt_asm_sed, z_asm_sed
>d18b		73 65 64					.text "sed"
.d18e						nt_asm_sei:
>d18e		03 0a						.byte 3, IM+NN
>d190		99 d1				                .word nt_asm_sta
>d192		6b a7 6f a7					.word xt_asm_sei, z_asm_sei
>d196		73 65 69					.text "sei"
.d199						nt_asm_sta:
>d199		03 0a						.byte 3, IM+NN
>d19b		a4 d1				                .word nt_asm_sta_x
>d19d		6f a7 73 a7					.word xt_asm_sta, z_asm_sta
>d1a1		73 74 61					.text "sta"
.d1a4						nt_asm_sta_x:
>d1a4		05 0a						.byte 5, IM+NN
>d1a6		b1 d1				                .word nt_asm_sta_y
>d1a8		73 a7 77 a7					.word xt_asm_sta_x, z_asm_sta_x
>d1ac		73 74 61 2e 78					.text "sta.x"
.d1b1						nt_asm_sta_y:
>d1b1		05 0a						.byte 5, IM+NN
>d1b3		be d1				                .word nt_asm_sta_z
>d1b5		77 a7 7b a7					.word xt_asm_sta_y, z_asm_sta_y
>d1b9		73 74 61 2e 79					.text "sta.y"
.d1be						nt_asm_sta_z:
>d1be		05 0a						.byte 5, IM+NN
>d1c0		cb d1				                .word nt_asm_sta_zi
>d1c2		7b a7 7f a7					.word xt_asm_sta_z, z_asm_sta_z
>d1c6		73 74 61 2e 7a					.text "sta.z"
.d1cb						nt_asm_sta_zi:
>d1cb		06 0a						.byte 6, IM+NN
>d1cd		d9 d1				                .word nt_asm_sta_ziy
>d1cf		7f a7 83 a7					.word xt_asm_sta_zi, z_asm_sta_zi
>d1d3		73 74 61 2e 7a 69				.text "sta.zi"
.d1d9						nt_asm_sta_ziy:
>d1d9		07 0a						.byte 7, IM+NN
>d1db		e8 d1				                .word nt_asm_sta_zx
>d1dd		83 a7 87 a7					.word xt_asm_sta_ziy, z_asm_sta_ziy
>d1e1		73 74 61 2e 7a 69 79				.text "sta.ziy"
.d1e8						nt_asm_sta_zx:
>d1e8		06 0a						.byte 6, IM+NN
>d1ea		f6 d1				                .word nt_asm_sta_zxi
>d1ec		87 a7 8b a7					.word xt_asm_sta_zx, z_asm_sta_zx
>d1f0		73 74 61 2e 7a 78				.text "sta.zx"
.d1f6						nt_asm_sta_zxi:
>d1f6		07 0a						.byte 7, IM+NN
>d1f8		05 d2				                .word nt_asm_stx
>d1fa		8b a7 8f a7					.word xt_asm_sta_zxi, z_asm_sta_zxi
>d1fe		73 74 61 2e 7a 78 69				.text "sta.zxi"
.d205						nt_asm_stx:
>d205		03 0a						.byte 3, IM+NN
>d207		10 d2				                .word nt_asm_stx_z
>d209		8f a7 93 a7					.word xt_asm_stx, z_asm_stx
>d20d		73 74 78					.text "stx"
.d210						nt_asm_stx_z:
>d210		05 0a						.byte 5, IM+NN
>d212		1d d2				                .word nt_asm_stx_zy
>d214		93 a7 97 a7					.word xt_asm_stx_z, z_asm_stx_z
>d218		73 74 78 2e 7a					.text "stx.z"
.d21d						nt_asm_stx_zy:
>d21d		06 0a						.byte 6, IM+NN
>d21f		2b d2				                .word nt_asm_sty
>d221		97 a7 9b a7					.word xt_asm_stx_zy, z_asm_stx_zy
>d225		73 74 78 2e 7a 79				.text "stx.zy"
.d22b						nt_asm_sty:
>d22b		03 0a						.byte 3, IM+NN
>d22d		36 d2				                .word nt_asm_sty_z
>d22f		9b a7 9f a7					.word xt_asm_sty, z_asm_sty
>d233		73 74 79					.text "sty"
.d236						nt_asm_sty_z:
>d236		05 0a						.byte 5, IM+NN
>d238		43 d2				                .word nt_asm_sty_zx
>d23a		9f a7 a3 a7					.word xt_asm_sty_z, z_asm_sty_z
>d23e		73 74 79 2e 7a					.text "sty.z"
.d243						nt_asm_sty_zx:
>d243		06 0a						.byte 6, IM+NN
>d245		51 d2				                .word nt_asm_stz
>d247		a3 a7 a7 a7					.word xt_asm_sty_zx, z_asm_sty_zx
>d24b		73 74 79 2e 7a 78				.text "sty.zx"
.d251						nt_asm_stz:
>d251		03 0a						.byte 3, IM+NN
>d253		5c d2				                .word nt_asm_stz_x
>d255		a7 a7 ab a7					.word xt_asm_stz, z_asm_stz
>d259		73 74 7a					.text "stz"
.d25c						nt_asm_stz_x:
>d25c		05 0a						.byte 5, IM+NN
>d25e		69 d2				                .word nt_asm_stz_z
>d260		ab a7 af a7					.word xt_asm_stz_x, z_asm_stz_x
>d264		73 74 7a 2e 78					.text "stz.x"
.d269						nt_asm_stz_z:
>d269		05 0a						.byte 5, IM+NN
>d26b		76 d2				                .word nt_asm_stz_zx
>d26d		af a7 b3 a7					.word xt_asm_stz_z, z_asm_stz_z
>d271		73 74 7a 2e 7a					.text "stz.z"
.d276						nt_asm_stz_zx:
>d276		06 0a						.byte 6, IM+NN
>d278		84 d2				                .word nt_asm_tax
>d27a		b3 a7 b7 a7					.word xt_asm_stz_zx, z_asm_stz_zx
>d27e		73 74 7a 2e 7a 78				.text "stz.zx"
.d284						nt_asm_tax:
>d284		03 0a						.byte 3, IM+NN
>d286		8f d2				                .word nt_asm_tay
>d288		b7 a7 bb a7					.word xt_asm_tax, z_asm_tax
>d28c		74 61 78					.text "tax"
.d28f						nt_asm_tay:
>d28f		03 0a						.byte 3, IM+NN
>d291		9a d2				                .word nt_asm_trb
>d293		bb a7 bf a7					.word xt_asm_tay, z_asm_tay
>d297		74 61 79					.text "tay"
.d29a						nt_asm_trb:
>d29a		03 0a						.byte 3, IM+NN
>d29c		a5 d2				                .word nt_asm_trb_z
>d29e		bf a7 c3 a7					.word xt_asm_trb, z_asm_trb
>d2a2		74 72 62					.text "trb"
.d2a5						nt_asm_trb_z:
>d2a5		05 0a						.byte 5, IM+NN
>d2a7		b2 d2				                .word nt_asm_tsb
>d2a9		c3 a7 c7 a7					.word xt_asm_trb_z, z_asm_trb_z
>d2ad		74 72 62 2e 7a					.text "trb.z"
.d2b2						nt_asm_tsb:
>d2b2		03 0a						.byte 3, IM+NN
>d2b4		bd d2				                .word nt_asm_tsb_z
>d2b6		c7 a7 cb a7					.word xt_asm_tsb, z_asm_tsb
>d2ba		74 73 62					.text "tsb"
.d2bd						nt_asm_tsb_z:
>d2bd		05 0a						.byte 5, IM+NN
>d2bf		ca d2				                .word nt_asm_tsx
>d2c1		cb a7 cf a7					.word xt_asm_tsb_z, z_asm_tsb_z
>d2c5		74 73 62 2e 7a					.text "tsb.z"
.d2ca						nt_asm_tsx:
>d2ca		03 0a						.byte 3, IM+NN
>d2cc		d5 d2				                .word nt_asm_txa
>d2ce		cf a7 d3 a7					.word xt_asm_tsx, z_asm_tsx
>d2d2		74 73 78					.text "tsx"
.d2d5						nt_asm_txa:
>d2d5		03 0a						.byte 3, IM+NN
>d2d7		e0 d2				                .word nt_asm_txs
>d2d9		d3 a7 d7 a7					.word xt_asm_txa, z_asm_txa
>d2dd		74 78 61					.text "txa"
.d2e0						nt_asm_txs:
>d2e0		03 0a						.byte 3, IM+NN
>d2e2		eb d2				                .word nt_asm_tya
>d2e4		d7 a7 db a7					.word xt_asm_txs, z_asm_txs
>d2e8		74 78 73					.text "txs"
.d2eb						nt_asm_tya:
>d2eb		03 0a						.byte 3, IM+NN
>d2ed		f6 d2				                .word nt_asm_arrow
>d2ef		db a7 df a7					.word xt_asm_tya, z_asm_tya
>d2f3		74 79 61					.text "tya"
.d2f6						nt_asm_arrow:
>d2f6		03 02				                .byte 3, IM
>d2f8		01 d3				                .word nt_asm_back_jump
>d2fa		e7 88 f1 88			                .word xt_asm_arrow, z_asm_arrow
>d2fe		2d 2d 3e			                .text "-->"
.d301						nt_asm_back_jump:
>d301		02 02				                .byte 2, IM
>d303		0b d3				                .word nt_asm_back_branch
>d305		27 a8 27 a8			                .word xt_asm_back_jump, z_asm_back_jump
>d309		3c 6a				                .text "<j"
.d30b						nt_asm_back_branch:
>d30b		02 02				                .byte 2, IM
>d30d		15 d3				                .word nt_asm_push_a
>d30f		28 a8 30 a8			                .word xt_asm_back_branch, z_asm_back_branch
>d313		3c 62				                .text "<b"
.d315						nt_asm_push_a:
>d315		06 0a				                .byte 6, IM+NN
>d317		00 00				                .word 0000
>d319		19 a8 26 a8			                .word xt_asm_push_a, z_asm_push_a
>d31d		70 75 73 68 2d 61		                .text "push-a"

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../strings.asm

>d323		30 31 32 33 34 35 36 37		alpha36:  .text "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
>d32b		38 39 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e
>d33b		4f 50 51 52 53 54 55 56 57 58 59 5a
=0						ix := 0
=0						str_ok             = ix         ; referenced by QUIT via state=0
=1						ix += 1
=1						str_compile        = ix         ; referenced by QUIT via state=1
=2						ix += 1
=2						str_redefined      = ix
=3						ix += 1
=3						str_wid_forth      = ix
=4						ix += 1
=4						str_wid_editor     = ix
=5						ix += 1
=5						str_wid_assembler  = ix
=6						ix += 1
=6						str_wid_root       = ix
=7						ix += 1
=7						str_see_nt         = ix
=8						ix += 1
=8						str_see_xt         = ix
=9						ix += 1
=9						str_see_size       = ix
=10						ix += 1
=10						str_see_cfapfa     = ix
=11						ix += 1
=11						str_disasm_sdc     = ix
=12						ix += 1
=12						str_disasm_lit     = ix
=13						ix += 1
=13						str_disasm_0bra    = ix
=14						ix += 1
=14						str_disasm_loop    = ix
=15						ix += 1
=15						str_disasm_do      = ix
=16						ix += 1
.d347						string_table:
>d347		67 d3 6a d3 73 d3		        .word s_ok, s_compiled, s_redefined                     ; 0-2
>d34d		8e d3 87 d3 7d d3 94 d3		        .word s_wid_forth, s_wid_editor, s_wid_asm, s_wid_root  ; 3-6
>d355		99 d3 9d d3 a1 d3 b1 d3		        .word s_see_nt, s_see_xt, s_see_size, s_see_cfapfa            ; 7-10
>d35d		da d3 ec d3 f4 d3 fc d3		        .word s_disasm_sdc, s_disasm_lit, s_disasm_0bra, s_disasm_loop, s_disasm_do ; 11-15
>d365		01 d4
>d367		20 6f eb			s_ok:         .shift " ok"              ; note space at beginning
>d36a		20 63 6f 6d 70 69 6c 65		s_compiled:   .shift " compiled"        ; note space at beginning
>d372		e4
>d373		72 65 64 65 66 69 6e 65		s_redefined:  .shift "redefined "       ; note space at end
>d37b		64 a0
>d37d		41 73 73 65 6d 62 6c 65		s_wid_asm:    .shift "Assembler "       ; Wordlist ID 2, note space at end
>d385		72 a0
>d387		45 64 69 74 6f 72 a0		s_wid_editor: .shift "Editor "     ; Wordlist ID 1, note space at end
>d38e		46 6f 72 74 68 a0		s_wid_forth:  .shift "Forth "      ; Wordlist ID 0, note space at end
>d394		52 6f 6f 74 a0			s_wid_root:   .shift "Root "       ; Wordlist ID 3, note space at end
>d399		6e 74 3a a0			s_see_nt:     .shift "nt: "
>d39d		78 74 3a a0			s_see_xt:     .shift "xt: "
>d3a1		73 69 7a 65 20 28 64 65		s_see_size:   .shift "size (decimal): "
>d3a9		63 69 6d 61 6c 29 3a a0
>d3b1		43 46 41 20 33 20 20 50		s_see_cfapfa: .shift "CFA 3  PFA "
>d3b9		46 41 a0
>d3bc		66 6c 61 67 73 3a 20 43		see_flags_template:     .shift "flags: CO",0,"IM",0,"AN",0,"NN",0,"HC",0,"| UF",0,"ST",0
>d3c4		4f 00 49 4d 00 41 4e 00 4e 4e 00 48 43 00 7c 20
>d3d4		55 46 00 53 54 80
>d3da		20 53 54 41 43 4b 20 44		s_disasm_sdc: .shift " STACK DEPTH CHECK"
>d3e2		45 50 54 48 20 43 48 45 43 cb
>d3ec		4c 49 54 45 52 41 4c a0		s_disasm_lit: .shift "LITERAL "
>d3f4		30 42 52 41 4e 43 48 a0		s_disasm_0bra: .shift "0BRANCH "
>d3fc		4c 4f 4f 50 a0			s_disasm_loop: .shift "LOOP "
>d401		44 4f a0			s_disasm_do: .shift "DO "
=0						err_allot        = 0
=1						err_badsource    = 1
=2						err_compileonly  = 2
=3						err_defer        = 3
=4						err_divzero      = 4
=5						err_noname       = 5
=6						err_refill       = 6
=7						err_state        = 7
=8						err_syntax       = 8
=9						err_underflow    = 9
=10						err_negallot     = 10
=11						err_wordlist     = 11
=12						err_blockwords   = 12
=13						err_returnstack  = 13
=14						err_toolong      = 14
.d404						error_table:
>d404		22 d4 42 d4 61 d4 81 d4		        .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
>d40c		9d d4 ad d4 bc d4 e9 d4		        .word es_divzero, es_noname, es_refill, es_state        ;  4-7
>d414		00 d5 20 d5 34 d5 4f d5		        .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
>d41c		65 d5 a3 d5 b0 d5		        .word es_blockwords, es_returnstack, es_toolong         ; 12-14
>d422		41 4c 4c 4f 54 20 75 73		es_allot:       .shift "ALLOT using all available memory"
>d42a		69 6e 67 20 61 6c 6c 20 61 76 61 69 6c 61 62 6c
>d43a		65 20 6d 65 6d 6f 72 f9
>d442		49 6c 6c 65 67 61 6c 20		es_badsource:   .shift "Illegal SOURCE-ID during REFILL"
>d44a		53 4f 55 52 43 45 2d 49 44 20 64 75 72 69 6e 67
>d45a		20 52 45 46 49 4c cc
>d461		49 6e 74 65 72 70 72 65		es_compileonly: .shift "Interpreting a compile-only word"
>d469		74 69 6e 67 20 61 20 63 6f 6d 70 69 6c 65 2d 6f
>d479		6e 6c 79 20 77 6f 72 e4
>d481		44 45 46 45 52 65 64 20		es_defer:       .shift "DEFERed word not defined yet"
>d489		77 6f 72 64 20 6e 6f 74 20 64 65 66 69 6e 65 64
>d499		20 79 65 f4
>d49d		44 69 76 69 73 69 6f 6e		es_divzero:     .shift "Division by zero"
>d4a5		20 62 79 20 7a 65 72 ef
>d4ad		50 61 72 73 69 6e 67 20		es_noname:      .shift "Parsing failure"
>d4b5		66 61 69 6c 75 72 e5
>d4bc		51 55 49 54 20 63 6f 75		es_refill:      .shift "QUIT could not get input (REFILL returned -1)"
>d4c4		6c 64 20 6e 6f 74 20 67 65 74 20 69 6e 70 75 74
>d4d4		20 28 52 45 46 49 4c 4c 20 72 65 74 75 72 6e 65
>d4e4		64 20 2d 31 a9
>d4e9		41 6c 72 65 61 64 79 20		es_state:       .shift "Already in compile mode"
>d4f1		69 6e 20 63 6f 6d 70 69 6c 65 20 6d 6f 64 e5
>d500		55 6e 64 65 66 69 6e 65		es_syntax:      .shift "Undefined word or invalid number"
>d508		64 20 77 6f 72 64 20 6f 72 20 69 6e 76 61 6c 69
>d518		64 20 6e 75 6d 62 65 f2
>d520		44 61 74 61 20 73 74 61		es_underflow:   .shift "Data stack underflow"
>d528		63 6b 20 75 6e 64 65 72 66 6c 6f f7
>d534		4d 61 78 20 6d 65 6d 6f		es_negallot:    .shift "Max memory freed with ALLOT"
>d53c		72 79 20 66 72 65 65 64 20 77 69 74 68 20 41 4c
>d54c		4c 4f d4
>d54f		4e 6f 20 77 6f 72 64 6c		es_wordlist:    .shift "No wordlists available"
>d557		69 73 74 73 20 61 76 61 69 6c 61 62 6c e5
>d565		50 6c 65 61 73 65 20 61		es_blockwords:  .shift "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR"
>d56d		73 73 69 67 6e 20 76 65 63 74 6f 72 73 20 42 4c
>d57d		4f 43 4b 2d 52 45 41 44 2d 56 45 43 54 4f 52 20
>d58d		61 6e 64 20 42 4c 4f 43 4b 2d 57 52 49 54 45 2d
>d59d		56 45 43 54 4f d2
>d5a3		52 65 74 75 72 6e 20 73		es_returnstack: .shift "Return stack:"
>d5ab		74 61 63 6b ba
>d5b0		4e 61 6d 65 20 74 6f 6f		es_toolong:     .shift "Name too long (max 31)"
>d5b8		20 6c 6f 6e 67 20 28 6d 61 78 20 33 31 a9
>d5c6		2f 43 4f 55 4e 54 45 44		envs_cs:        .text "/COUNTED-STRING"
>d5ce		2d 53 54 52 49 4e 47
>d5d5		2f 48 4f 4c 44			envs_hold:      .text "/HOLD"
>d5da		2f 50 41 44			envs_pad:       .text "/PAD"
>d5de		41 44 44 52 45 53 53 2d		envs_aub:       .text "ADDRESS-UNIT-BITS"
>d5e6		55 4e 49 54 2d 42 49 54 53
>d5ef		46 4c 4f 4f 52 45 44		envs_floored:   .text "FLOORED"
>d5f6		4d 41 58 2d 43 48 41 52		envs_max_char:  .text "MAX-CHAR"
>d5fe		4d 41 58 2d 4e			envs_max_n:     .text "MAX-N"
>d603		4d 41 58 2d 55			envs_max_u:     .text "MAX-U"
>d608		52 45 54 55 52 4e 2d 53		envs_rsc:       .text "RETURN-STACK-CELLS"
>d610		54 41 43 4b 2d 43 45 4c 4c 53
>d61a		53 54 41 43 4b 2d 43 45		envs_sc:        .text "STACK-CELLS"
>d622		4c 4c 53
>d625		57 4f 52 44 4c 49 53 54		envs_wl:        .text "WORDLISTS"
>d62d		53
>d62e		4d 41 58 2d 44			envs_max_d:     .text "MAX-D"
>d633		4d 41 58 2d 55 44		envs_max_ud:    .text "MAX-UD"
.d639						envs_eot:

;******  Return to file: platform/../taliforth.asm

.d639						doconst:
.d639		ca		dex		                dex             ; make room for constant
.d63a		ca		dex		                dex
.d63b		68		pla		                pla             ; LSB of return address
.d63c		85 25		sta $25		                sta tmp1
.d63e		68		pla		                pla             ; MSB of return address
.d63f		85 26		sta $26		                sta tmp1+1
.d641		a0 01		ldy #$01	                ldy #1
.d643		b1 25		lda ($25),y	                lda (tmp1),y
.d645		95 00		sta $00,x	                sta 0,x
.d647		c8		iny		                iny
.d648		b1 25		lda ($25),y	                lda (tmp1),y
.d64a		95 01		sta $01,x	                sta 1,x
.d64c		60		rts		                rts
.d64d						dodefer:
.d64d		68		pla		                pla             ; LSB
.d64e		85 25		sta $25		                sta tmp1
.d650		68		pla		                pla             ; MSB
.d651		85 26		sta $26		                sta tmp1+1
.d653		a0 01		ldy #$01	                ldy #1
.d655		b1 25		lda ($25),y	                lda (tmp1),y
.d657		85 27		sta $27		                sta tmp2
.d659		c8		iny		                iny
.d65a		b1 25		lda ($25),y	                lda (tmp1),y
.d65c		85 28		sta $28		                sta tmp2+1
.d65e		6c 27 00	jmp ($0027)	                jmp (tmp2)      ; This is actually a jump to the new target
.d661						dodoes:
.d661		7a		ply		                ply             ; LSB
.d662		68		pla		                pla             ; MSB
.d663		c8		iny		                iny
.d664		d0 01		bne $d667	                bne +
.d666		1a		inc a		                ina
.d667						+
.d667		84 27		sty $27		                sty tmp2
.d669		85 28		sta $28		                sta tmp2+1
.d66b		ca		dex		                dex
.d66c		ca		dex		                dex
.d66d		7a		ply		                ply
.d66e		68		pla		                pla
.d66f		c8		iny		                iny
.d670		d0 01		bne $d673	                bne +
.d672		1a		inc a		                ina
.d673						+
.d673		94 00		sty $00,x	                sty 0,x         ; LSB
.d675		95 01		sta $01,x	                sta 1,x         ; MSB
.d677		6c 27 00	jmp ($0027)	                jmp (tmp2)
.d67a						dovar:
.d67a		7a		ply		                ply             ; LSB
.d67b		68		pla		                pla             ; MSB
.d67c		c8		iny		                iny
.d67d		d0 01		bne $d680	                bne +
.d67f		1a		inc a		                ina
.d680						+
.d680		ca		dex		                dex
.d681		ca		dex		                dex
.d682		95 01		sta $01,x	                sta 1,x
.d684		98		tya		                tya
.d685		95 00		sta $00,x	                sta 0,x
.d687		60		rts		                rts
.d688						push_upvar_tos:
.d688		ca		dex		                dex
.d689		ca		dex		                dex
.d68a		18		clc		                clc
.d68b		65 08		adc $08		                adc up
.d68d		95 00		sta $00,x	                sta 0,x
.d68f		a5 09		lda $09		                lda up+1
.d691		90 01		bcc $d694	                bcc +
.d693		1a		inc a		                ina
.d694						+
.d694		95 01		sta $01,x	                sta 1,x
.d696		60		rts		                rts
.d697						byte_to_ascii:
.d697		48		pha		                pha
.d698		4a		lsr a		                lsr             ; convert high nibble first
.d699		4a		lsr a		                lsr
.d69a		4a		lsr a		                lsr
.d69b		4a		lsr a		                lsr
.d69c		20 a0 d6	jsr $d6a0	                jsr _nibble_to_ascii
.d69f		68		pla		                pla
.d6a0						_nibble_to_ascii:
.d6a0		29 0f		and #$0f	                and #$F
.d6a2		09 30		ora #$30	                ora #'0'
.d6a4		c9 3a		cmp #$3a	                cmp #'9'+1
.d6a6		90 02		bcc $d6aa	                bcc +
.d6a8		69 06		adc #$06	                adc #6
.d6aa		4c 93 86	jmp $8693	+               jmp emit_a
.d6ad		60		rts		                rts
.d6ae						find_header_name:
.d6ae		b5 02		lda $02,x	                lda 2,x                 ; Copy mystery string to tmp2
.d6b0		85 27		sta $27		                sta tmp2
.d6b2		b5 03		lda $03,x	                lda 3,x
.d6b4		85 28		sta $28		                sta tmp2+1
.d6b6						_loop:
.d6b6		b2 25		lda ($25)	                lda (tmp1)
.d6b8		d5 00		cmp $00,x	                cmp 0,x
.d6ba		d0 3a		bne $d6f6	                bne _next_entry
.d6bc		b2 27		lda ($27)	                lda (tmp2)      ; first character of mystery string
.d6be		a0 08		ldy #$08	                ldy #8
.d6c0		51 25		eor ($25),y	                eor (tmp1),y    ; flag any mismatched bits
.d6c2		29 df		and #$df	                and #%11011111  ; but ignore upper/lower case bit
.d6c4		d0 30		bne $d6f6	                bne _next_entry ; definitely not equal if any bits differ
.d6c6		a5 25		lda $25		                lda tmp1
.d6c8		48		pha		                pha             ; Save original address on the stack
.d6c9		18		clc		                clc
.d6ca		69 08		adc #$08	                adc #8
.d6cc		85 25		sta $25		                sta tmp1
.d6ce		a5 26		lda $26		                lda tmp1+1
.d6d0		48		pha		                pha
.d6d1		90 03		bcc $d6d6	                bcc +
.d6d3		1a		inc a		                ina
.d6d4		85 26		sta $26		                sta tmp1+1
.d6d6						+
.d6d6		b4 00		ldy $00,x	                ldy 0,x         ; index is length of string minus 1
.d6d8		88		dey		                dey
.d6d9						_next_char:
.d6d9		b1 27		lda ($27),y	                lda (tmp2),y    ; last char of mystery string
.d6db		c9 5b		cmp #$5b	                cmp #'Z'+1
.d6dd		b0 06		bcs $d6e5	                bcs _check_char
.d6df		c9 41		cmp #$41	                cmp #'A'
.d6e1		90 02		bcc $d6e5	                bcc _check_char
.d6e3		09 20		ora #$20	                ora #$20
.d6e5						_check_char:
.d6e5		d1 25		cmp ($25),y	                cmp (tmp1),y    ; last char of word we're testing against
.d6e7		d0 03		bne $d6ec	                bne _reset_tmp1
.d6e9		88		dey		                dey
.d6ea		10 ed		bpl $d6d9	                bpl _next_char
.d6ec						_reset_tmp1:
.d6ec		68		pla		                pla
.d6ed		85 26		sta $26		                sta tmp1+1
.d6ef		68		pla		                pla
.d6f0		85 25		sta $25		                sta tmp1
.d6f2		98		tya		                tya             ; leave A = $FF on success
.d6f3		c8		iny		                iny             ; if Y was $FF, we succeeded
.d6f4		f0 11		beq $d707	                beq _done
.d6f6						_next_entry:
.d6f6		a0 02		ldy #$02	                ldy #2
.d6f8		b1 25		lda ($25),y	                lda (tmp1),y
.d6fa		48		pha		                pha
.d6fb		c8		iny		                iny
.d6fc		b1 25		lda ($25),y	                lda (tmp1),y
.d6fe		85 26		sta $26		                sta tmp1+1
.d700		68		pla		                pla
.d701		85 25		sta $25		                sta tmp1
.d703		05 26		ora $26		                ora tmp1+1
.d705		d0 af		bne $d6b6	                bne _loop
.d707		c9 00		cmp #$00	_done:          cmp #0      ; A is 0 on failure and $FF on success
.d709		60		rts		                rts         ; so cmp #0 sets Z on failure and clears on success
.d70a						compare_16bit:
.d70a		b5 00		lda $00,x	                lda 0,x                 ; LSB of TOS
.d70c		d5 02		cmp $02,x	                cmp 2,x                 ; LSB of NOS
.d70e		f0 08		beq $d718	                beq _equal
.d710		b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d712		f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d714		70 08		bvs $d71e	                bvs _overflow
.d716		80 08		bra $d720	                bra _not_equal
.d718						_equal:
.d718		b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d71a		f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d71c		50 04		bvc $d722	                bvc _done
.d71e						_overflow:
.d71e		49 80		eor #$80	                eor #$80                ; complement negative flag
.d720						_not_equal:
.d720		09 01		ora #$01	                ora #1                  ; set Z=0 since we're not equal
.d722						_done:
.d722		60		rts		                rts
.d723						current_to_dp:
.d723		a0 08		ldy #$08	                ldy #current_offset
.d725		b1 08		lda ($08),y	                lda (up),y      ; current is a byte variable
.d727		0a		asl a		                asl             ; turn it into an offset (in cells)
.d728		18		clc		                clc
.d729		69 0a		adc #$0a	                adc #wordlists_offset   ; add offset to wordlists base.
.d72b		a8		tay		                tay
.d72c		b1 08		lda ($08),y	                lda (up),y              ; get the dp for that wordlist.
.d72e		85 02		sta $02		                sta dp
.d730		c8		iny		                iny
.d731		b1 08		lda ($08),y	                lda (up),y
.d733		85 03		sta $03		                sta dp+1
.d735		60		rts		                rts
.d736						dp_to_current:
.d736		a0 08		ldy #$08	                ldy #current_offset
.d738		b1 08		lda ($08),y	                lda (up),y      ; current is a byte variable
.d73a		0a		asl a		                asl             ; turn it into an offset (in cells)
.d73b		18		clc		                clc
.d73c		69 0a		adc #$0a	                adc #wordlists_offset   ; add offset to wordlists base.
.d73e		a8		tay		                tay
.d73f		a5 02		lda $02		                lda dp
.d741		91 08		sta ($08),y	                sta (up),y              ; get the dp for that wordlist.
.d743		c8		iny		                iny
.d744		a5 03		lda $03		                lda dp+1
.d746		91 08		sta ($08),y	                sta (up),y
.d748		60		rts		                rts
.d749						interpret:
.d749						_loop:
.d749		20 24 8d	jsr $8d24	                jsr w_parse_name       ; ( "string" -- addr u )
.d74c		b5 00		lda $00,x	                lda 0,x
.d74e		15 01		ora $01,x	                ora 1,x
.d750		f0 5a		beq $d7ac	                beq _line_done
.d752		20 9f 93	jsr $939f	                jsr w_two_dup          ; ( addr u -- addr u addr u )
.d755		20 5d 9b	jsr $9b5d	                jsr w_find_name        ; ( addr u addr u -- addr u nt|0 )
.d758		b5 00		lda $00,x	                lda 0,x
.d75a		15 01		ora $01,x	                ora 1,x
.d75c		d0 19		bne $d777	                bne _got_name_token
.d75e		e8		inx		                inx                     ; ( addr u 0 -- addr u )
.d75f		e8		inx		                inx
.d760		20 14 9d	jsr $9d14	                jsr w_number           ; ( addr u -- u|d )
.d763		a5 1a		lda $1a		                lda state
.d765		f0 e2		beq $d749	                beq _loop
.d767		a9 20		lda #$20	                lda #%00100000
.d769		24 1c		bit $1c		                bit status
.d76b		d0 05		bne $d772	                bne _double_number
.d76d		20 d3 89	jsr $89d3	                jsr w_literal
.d770		80 d7		bra $d749	                bra _loop
.d772						_double_number:
.d772		20 c8 9f	jsr $9fc8	                jsr w_two_literal
.d775		80 d2		bra $d749	                bra _loop
.d777						_got_name_token:
.d777		b5 00		lda $00,x	                lda 0,x
.d779		95 04		sta $04,x	                sta 4,x
.d77b		b5 01		lda $01,x	                lda 1,x
.d77d		95 05		sta $05,x	                sta 5,x
.d77f		e8		inx		                inx
.d780		e8		inx		                inx
.d781		e8		inx		                inx
.d782		e8		inx		                inx                     ; ( nt )
.d783		20 69 86	jsr $8669	                jsr w_dup
.d786		20 bf 8c	jsr $8cbf	                jsr w_one_plus
.d789		a1 00		lda ($00,x)	                lda (0,x)
.d78b		e8		inx		                inx
.d78c		e8		inx		                inx
.d78d		a4 1a		ldy $1a		                ldy state
.d78f		d0 12		bne $d7a3	                bne _compile
.d791		29 01		and #$01	                and #CO                 ; mask everything but Compile Only bit
.d793		f0 05		beq $d79a	                beq _interpret
.d795		a9 02		lda #$02	                lda #err_compileonly
.d797		4c e0 d7	jmp $d7e0	                jmp error
.d79a						_interpret:
.d79a		20 b1 9c	jsr $9cb1	                jsr w_name_to_int      ; ( nt - xt )
.d79d		20 d4 87	jsr $87d4	                jsr w_execute
.d7a0		4c 49 d7	jmp $d749	                jmp _loop
.d7a3						_compile:
.d7a3		29 02		and #$02	                and #IM                 ; Mask all but IM bit
.d7a5		d0 f3		bne $d79a	                bne _interpret          ; IMMEDIATE word, execute right now
.d7a7		20 ad 96	jsr $96ad	                jsr compile_nt_comma
.d7aa		80 9d		bra $d749	                bra _loop
.d7ac						_line_done:
.d7ac		e8		inx		                inx
.d7ad		e8		inx		                inx
.d7ae		e8		inx		                inx
.d7af		e8		inx		                inx
.d7b0		60		rts		                rts
.d7b1						is_printable:
.d7b1		c9 20		cmp #$20	                cmp #AscSP              ; $20
.d7b3		90 07		bcc $d7bc	                bcc _done
.d7b5		c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.d7b7		b0 02		bcs $d7bb	                bcs _failed
.d7b9		38		sec		                sec
>d7ba		24				                .byte OpBITzp
.d7bb						_failed:
.d7bb		18		clc		                clc
.d7bc						_done:
.d7bc		60		rts		                rts
.d7bd						is_whitespace:
.d7bd		c9 00		cmp #$00	                cmp #00         ; explicit comparison to leave Y untouched
.d7bf		90 08		bcc $d7c9	                bcc _done
.d7c1		c9 21		cmp #$21	                cmp #AscSP+1
.d7c3		b0 03		bcs $d7c8	                bcs _failed
.d7c5		38		sec		                sec
.d7c6		80 01		bra $d7c9	                bra _done
.d7c8						_failed:
.d7c8		18		clc		                clc
.d7c9						_done:
.d7c9		60		rts		                rts
.d7ca						underflow_1:
.d7ca		e0 77		cpx #$77	                cpx #dsp0-1
.d7cc		10 10		bpl $d7de	                bpl underflow_error
.d7ce		60		rts		                rts
.d7cf						underflow_2:
.d7cf		e0 75		cpx #$75	                cpx #dsp0-3
.d7d1		10 0b		bpl $d7de	                bpl underflow_error
.d7d3		60		rts		                rts
.d7d4						underflow_3:
.d7d4		e0 73		cpx #$73	                cpx #dsp0-5
.d7d6		10 06		bpl $d7de	                bpl underflow_error
.d7d8		60		rts		                rts
.d7d9						underflow_4:
.d7d9		e0 71		cpx #$71	                cpx #dsp0-7
.d7db		10 01		bpl $d7de	                bpl underflow_error
.d7dd		60		rts		                rts
.d7de						underflow_error:
.d7de		a9 09		lda #$09	                lda #err_underflow      ; fall through to error
.d7e0						error:
.d7e0		48		pha		                pha                     ; save error
.d7e1		20 23 d8	jsr $d823	                jsr print_error
.d7e4		20 ef 83	jsr $83ef	                jsr w_cr
.d7e7		68		pla		                pla
.d7e8		c9 09		cmp #$09	                cmp #err_underflow      ; should we display return stack?
.d7ea		d0 17		bne $d803	                bne _no_underflow
.d7ec		a9 0d		lda #$0d	                lda #err_returnstack
.d7ee		20 23 d8	jsr $d823	                jsr print_error
.d7f1		ba		tsx		                tsx
.d7f2						-
.d7f2		e8		inx		                inx
.d7f3		f0 0b		beq $d800	                beq +
.d7f5		20 b5 91	jsr $91b5	                jsr w_space
.d7f8		bd 00 01	lda $0100,x	                lda $100,x
.d7fb		20 97 d6	jsr $d697	                jsr byte_to_ascii
.d7fe		80 f2		bra $d7f2	                bra -
.d800						+
.d800		20 ef 83	jsr $83ef	                jsr w_cr
.d803						_no_underflow:
.d803		4c 5e 80	jmp $805e	                jmp w_abort            ; no jsr, as we clobber return stack
.d806						print_string_no_lf:
.d806		0a		asl a		                asl
.d807		a8		tay		                tay
.d808		b9 47 d3	lda $d347,y	                lda string_table,y
.d80b		85 29		sta $29		                sta tmp3                ; LSB
.d80d		b9 48 d3	lda $d348,y	                lda string_table+1,y
.d810		85 2a		sta $2a		                sta tmp3+1              ; MSB
.d812						print_common:
.d812		a0 00		ldy #$00	                ldy #0
.d814						_loop:
.d814		b1 29		lda ($29),y	                lda (tmp3),y
.d816		10 04		bpl $d81c	                bpl +                           ; strings are high-bit terminated
.d818		29 7f		and #$7f	                and #$7f                        ; last character, clear high bit
.d81a		a0 ff		ldy #$ff	                ldy #$ff                        ; flag end of loop
.d81c						+
.d81c		20 93 86	jsr $8693	                jsr emit_a                      ; allows vectoring via output
.d81f		c8		iny		                iny
.d820		d0 f2		bne $d814	                bne _loop
.d822		60		rts		                rts
.d823						print_error:
.d823		0a		asl a		                asl
.d824		a8		tay		                tay
.d825		b9 04 d4	lda $d404,y	                lda error_table,y
.d828		85 29		sta $29		                sta tmp3                        ; LSB
.d82a		c8		iny		                iny
.d82b		b9 04 d4	lda $d404,y	                lda error_table,y
.d82e		85 2a		sta $2a		                sta tmp3+1                      ; MSB
.d830		80 e0		bra $d812	                bra print_common
.d832						print_u:
.d832		20 71 9e	jsr $9e71	                jsr w_zero                     ; 0
.d835		20 ad 89	jsr $89ad	                jsr w_less_number_sign         ; <#
.d838		20 89 8c	jsr $8c89	                jsr w_number_sign_s            ; #S
.d83b		20 67 8c	jsr $8c67	                jsr w_number_sign_greater      ; #>
.d83e		4c b4 94	jmp $94b4	                jmp w_type                     ; JSR/RTS because never compiled
.d841						code_end:

;******  Return to file: platform/simulator.asm

=$f000						io_start = $f000                ; virtual hardware addresses for the simulators
>f000						                .byte ?
>f001						io_putc:        .byte ?         ; $f001     write byte to stdout
>f002						                .byte ?
>f003						io_kbhit:       .byte ?         ; $f003     read non-zero on key ready (c65 only)
>f004						io_getc:        .byte ?         ; $f004     non-blocking read input character (0 if no key)
>f005						                .byte ?
>f006						io_clk_start:   .byte ?         ; $f006     *read* to start cycle counter
>f007						io_clk_stop:    .byte ?         ; $f007     *read* to stop the cycle counter
>f008						io_clk_cycles:  .word ?,?       ; $f008-b   32-bit cycle count in NUXI order
>f00c						                .word ?,?
.f010						kernel_init:
.f010		78		sei		                sei             ; Disable interrupts
.f011		a2 00		ldx #$00	                ldx #0
.f013		bd 40 f0	lda $f040,x	-               lda s_kernel_id,x
.f016		f0 06		beq $f01e	                beq _done
.f018		20 22 f0	jsr $f022	                jsr kernel_putc
.f01b		e8		inx		                inx
.f01c		80 f5		bra $f013	                bra -
.f01e						_done:
.f01e		4c 00 80	jmp $8000	                jmp forth
.f021						kernel_bye:
.f021		00		brk #		                brk
.f022						kernel_putc:
.f022		8d 01 f0	sta $f001	                sta io_putc
.f025		60		rts		                rts

;******  Return to file: platform/platform-py65mon.asm

=$f002						io_bufc = io_putc+1
.f026						kernel_getc:
.f026		ad 02 f0	lda $f002	                lda io_bufc             ; first check the buffer
.f029		9c 02 f0	stz $f002	                stz io_bufc
.f02c		d0 05		bne $f033	                bne _done
.f02e						_loop:
.f02e		ad 04 f0	lda $f004	                lda io_getc
.f031		f0 fb		beq $f02e	                beq _loop
.f033						_done:
.f033		60		rts		                rts
.f034						kernel_kbhit:
.f034		ad 02 f0	lda $f002	                lda io_bufc             ; do we already have a character?
.f037		d0 06		bne $f03f	                bne _done
.f039		ad 04 f0	lda $f004	                lda io_getc             ; otherwise check and buffer the result
.f03c		8d 02 f0	sta $f002	                sta io_bufc
.f03f						_done:
.f03f		60		rts		                rts
.f040						s_kernel_id:
>f040		54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 default kernel for py65mon (04. Dec 2022)", AscLF, 0
>f048		74 68 20 32 20 64 65 66 61 75 6c 74 20 6b 65 72
>f058		6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f 6e 20
>f068		28 30 34 2e 20 44 65 63 20 32 30 32 32 29 0a 00
>fffa		10 f0				v_nmi   .word kernel_init
>fffc		10 f0				v_reset .word kernel_init
>fffe		10 f0				v_irq   .word kernel_init

;******  End of listing
