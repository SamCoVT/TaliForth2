
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output taliforth-py65mon.bin platform/platform-py65mon.asm
; Mon Mar 18 05:39:30 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-py65mon.asm

=$0000					ram_start = $0000          ; start of installed 32 KiB of RAM
=32767					ram_end   = $8000-1        ; end of installed RAM
=$0000					zpage     = ram_start      ; begin of Zero Page ($0000-$00ff)
=$7f					zpage_end = $7F            ; end of Zero Page used ($0000-$007f)
=$0100					stack0    = $0100          ; begin of Return Stack ($0100-$01ff)
=31744					hist_buff = ram_end-$03ff  ; begin of history buffers
=$0000					user0     = zpage            ; TaliForth2 system variables
=$ff					rsp0      = $ff              ; initial Return Stack Pointer (65c02 stack)
=$ff					bsize     = $ff              ; size of input/output buffers
=512					buffer0   = stack0+$100      ; input buffer ($0200-$027f)
=768					cp0       = buffer0+bsize+1  ; Dictionary starts after last buffer
=31744					cp_end    = hist_buff        ; Last RAM byte available for code
=$ff					padoffset = $ff              ; offset from CP to PAD (holds number strings)
=					TALI_OPTIONAL_WORDS := [ "ed", "editor", "ramdrive", "block", "environment?", "assembler", "disassembler", "wordlist" ]
=["lf"]					TALI_OPTION_CR_EOL := [ "lf" ]
=1					TALI_OPTION_HISTORY := 1
=0					TALI_OPTION_TERSE := 0

;******  Processing file: platform/../taliforth.asm

.8000					code0:

;******  Processing file: platform/../definitions.asm

=0					cp        = user0+0   ; Compiler Pointer
=2					dp        = user0+2   ; Dictionary Pointer
=4					workword  = user0+4   ; nt (not xt!) of word being compiled, except in
=6					insrc     = user0+6   ; input Source for SOURCE-ID
=8					cib       = user0+8   ; address of current input buffer
=10					ciblen    = user0+10  ; length of current input buffer
=12					toin      = user0+12  ; pointer to CIB (>IN in Forth)
=14					ip        = user0+14  ; Instruction Pointer (current xt)
=16					output    = user0+16  ; vector for EMIT
=18					input     = user0+18  ; vector for KEY
=20					havekey   = user0+20  ; vector for KEY?
=22					state     = user0+22  ; STATE: -1 compile, 0 interpret
=24					base      = user0+24  ; number radix, default decimal
=26					nc_limit  = user0+26  ; limit for Native Compile size
=28					uf_strip  = user0+28  ; flag to strip underflow detection code
=30					up        = user0+30  ; User Pointer (Address of user variables)
=32					status    = user0+32  ; internal status information
=34					tmpbranch = user0+34  ; temporary storage for 0BRANCH, BRANCH only
=36					tmp1      = user0+36  ; temporary storage
=38					tmp2      = user0+38  ; temporary storage
=40					tmp3      = user0+40  ; temporary storage (especially for print)
=42					tmpdsp    = user0+42  ; temporary DSP (X) storage (two bytes)
=44					tmptos    = user0+44  ; temporary TOS storage
=46					editor1   = user0+46  ; temporary for editors
=48					editor2   = user0+48  ; temporary for editors
=50					editor3   = user0+50  ; temporary for editors
=52					tohold    = user0+52  ; pointer for formatted output
=54					scratch   = user0+54  ; 8 byte scratchpad (see UM/MOD)
=120					dsp0      = zpage_end-7    ; initial Data Stack Pointer
=0					blk_offset = 0        ; BLK : UP + 0
=2					scr_offset = 2        ; SCR : UP + 2
=4					current_offset = 4    ; CURRENT (byte) : UP + 4 (Compilation wordlist)
=5					num_wordlists_offset = 5
=6					wordlists_offset = 6  ; WORDLISTS (cells) : UP + 6 to UP + 29
=30					num_order_offset = 30 ; #ORDER (byte) : UP + 30
=31					search_order_offset = 31
=12					max_wordlists = 12    ; Maximum number of wordlists supported
=40					blkbuffer_offset    = 40   ; Address of buffer
=42					buffblocknum_offset = 42   ; Block number current in buffer
=44					buffstatus_offset   = 44   ; Status of buffer (bit 0 = used, bit 1 = dirty)
=46					blockread_offset    = 46   ; Vector to block reading routine
=48					blockwrite_offset   = 48   ; Vector to block writing routine
=$03					AscCC   = $03  ; break (CTRL-c)
=$07					AscBELL = $07  ; bell sound
=$08					AscBS   = $08  ; backspace
=$0a					AscLF   = $0a  ; line feed
=$0d					AscCR   = $0d  ; carriage return
=$1b					AscESC  = $1b  ; escape
=$20					AscSP   = $20  ; space
=$7f					AscDEL  = $7f  ; delete (CTRL-h)
=$10					AscCP   = $10  ; CTRL-p (used to recall previous input history)
=$0e					AscCN   = $0e  ; CTRL-n (used to recall next input history)
=1					CO = 1  ; Compile Only
=2					AN = 2  ; Always Native Compile
=4					IM = 4  ; Immediate Word
=8					NN = 8  ; Never Native Compile
=16					UF = 16 ; Includes Underflow Check (RESERVED)
=32					HC = 32 ; Word has Code Field Area (CFA)
=79					MAX_LINE_LENGTH  = 79      ; assumes 80 character lines

;******  Return to file: platform/../taliforth.asm

.8000					forth:

;******  Processing file: platform/../native_words.asm

.8000					xt_cold:
.8000	d8		cld		                cld
.8001	a9 27		lda #$27	                lda #<kernel_putc
.8003	85 10		sta $10		                sta output
.8005	a9 f0		lda #$f0	                lda #>kernel_putc
.8007	85 11		sta $11		                sta output+1
.8009	a2 21		ldx #$21	                ldx #cold_zp_table_end-cold_zp_table-1
.800b					_load_zp_loop:
.800b	bd ad 80	lda $80ad,x	                lda cold_zp_table,x
.800e	95 00		sta $00,x	                sta zpage,x
.8010	ca		dex		                dex
.8011	d0 f8		bne $800b	                bne _load_zp_loop
.8013	ad ad 80	lda $80ad	                lda cold_zp_table
.8016	85 00		sta $00		                sta zpage
.8018	a2 ff		ldx #$ff	                ldx #rsp0
.801a	9a		txs		                txs
.801b	a2 78		ldx #$78	                ldx #dsp0
.801d	a0 33		ldy #$33	                ldy #cold_user_table_end-cold_user_table-1
.801f	a9 00		lda #$00	                lda #0
.8021					_load_user_vars_loop:
.8021	b9 cf 80	lda $80cf,y	                lda cold_user_table,y
.8024	91 1e		sta ($1e),y	                sta (up),y
.8026	88		dey		                dey
.8027	d0 f8		bne $8021	                bne _load_user_vars_loop
.8029	ad cf 80	lda $80cf	                lda cold_user_table
.802c	92 1e		sta ($1e)	                sta (up)
.802e	20 6f 89	jsr $896f	                jsr xt_cr
.8031	ca		dex		                dex
.8032	ca		dex		                dex
.8033	ca		dex		                dex
.8034	ca		dex		                dex
.8035	a9 7e		lda #$7e	                lda #<forth_words_start
.8037	95 02		sta $02,x	                sta 2,x
.8039	a9 bb		lda #$bb	                lda #>forth_words_start
.803b	95 03		sta $03,x	                sta 3,x
.803d	a9 d3		lda #$d3	                lda #<(user_words_end-forth_words_start)
.803f	95 00		sta $00,x	                sta 0,x
.8041	a9 00		lda #$00	                lda #>(user_words_end-forth_words_start)
.8043	95 01		sta $01,x	                sta 1,x
.8045	20 e1 90	jsr $90e1	                jsr xt_evaluate
.8048	9c 00 7c	stz $7c00	                stz hist_buff
.804b	9c 80 7c	stz $7c80	                stz hist_buff+$80
.804e	9c 00 7d	stz $7d00	                stz hist_buff+$100
.8051	9c 80 7d	stz $7d80	                stz hist_buff+$180
.8054	9c 00 7e	stz $7e00	                stz hist_buff+$200
.8057	9c 80 7e	stz $7e80	                stz hist_buff+$280
.805a	9c 00 7f	stz $7f00	                stz hist_buff+$300
.805d	9c 80 7f	stz $7f80	                stz hist_buff+$380
.8060					xt_abort:
.8060	a2 78		ldx #$78	                ldx #dsp0
.8062					xt_quit:
.8062	8a		txa		                txa             ; Save the DSP that we just defined
.8063	a2 ff		ldx #$ff	                ldx #rsp0
.8065	9a		txs		                txs
.8066	aa		tax		                tax             ; Restore the DSP. Dude, seriously.
.8067	64 0e		stz $0e		                stz ip
.8069	64 0f		stz $0f		                stz ip+1
.806b	64 06		stz $06		                stz insrc
.806d	64 07		stz $07		                stz insrc+1
.806f	a9 00		lda #$00	                lda #0
.8071	a0 00		ldy #$00	                ldy #blk_offset
.8073	91 1e		sta ($1e),y	                sta (up),y
.8075	c8		iny		                iny
.8076	91 1e		sta ($1e),y	                sta (up),y
.8078	64 16		stz $16		                stz state
.807a	64 17		stz $17		                stz state+1
.807c					_get_line:
.807c	a9 00		lda #$00	                lda #<buffer0   ; input buffer, this is paranoid
.807e	85 08		sta $08		                sta cib
.8080	a9 02		lda #$02	                lda #>buffer0
.8082	85 09		sta $09		                sta cib+1
.8084	64 0a		stz $0a		                stz ciblen
.8086	64 0b		stz $0b		                stz ciblen+1
.8088	20 1b 9b	jsr $9b1b	                jsr xt_refill           ; ( -- f )
.808b	b5 00		lda $00,x	                lda 0,x
.808d	d0 05		bne $8094	                bne _success
.808f	a9 06		lda #$06	                lda #err_refill
.8091	4c 4e d8	jmp $d84e	                jmp error
.8094					_success:
.8094	e8		inx		                inx                     ; drop
.8095	e8		inx		                inx
.8096	20 93 d7	jsr $d793	                jsr interpret
.8099	e0 78		cpx #$78	                cpx #dsp0
.809b	f0 05		beq $80a2	                beq _stack_ok
.809d	90 03		bcc $80a2	                bcc _stack_ok           ; DSP must always be smaller than DSP0
.809f	4c 4c d8	jmp $d84c	                jmp underflow_error
.80a2					_stack_ok:
.80a2	a5 16		lda $16		                lda state
.80a4	f0 02		beq $80a8	                beq _print
.80a6	a9 01		lda #$01	                lda #1                  ; number for "compile" string
.80a8					_print:
.80a8	20 9f d8	jsr $d89f	                jsr print_string
.80ab	80 cf		bra $807c	                bra _get_line
.80ad					z_cold:
.80ad					z_abort:
.80ad					z_quit:
.80ad					cold_zp_table:
>80ad	00 08				        .word cp0+256+1024      ; cp moved to make room for user vars and
>80af	51 bc				        .word dictionary_start  ; dp
>80b1	00 00				        .word 0                 ; workword
>80b3	00 00				        .word 0                 ; insrc (SOURCE-ID is 0 for keyboard)
>80b5	00 02				        .word buffer0           ; cib
>80b7	00 00				        .word 0                 ; ciblen
>80b9	00 00				        .word 0                 ; toin
>80bb	00 00				        .word 0                 ; ip
>80bd	27 f0				        .word kernel_putc       ; output
>80bf	21 f0				        .word kernel_getc       ; input
>80c1	00 00				        .word 0                 ; havekey
>80c3	00 00				        .word 0                 ; state (0 = interpret)
>80c5	0a 00				        .word 10                ; base
>80c7	14 00				        .word 20                ; nc-limit
>80c9	00 00				        .word 0                 ; uf_strip (off by default)
>80cb	00 03				        .word cp0               ; up (user vars put right at beginning of
>80cd	00 00				        .word 0                 ; status
.80cf					cold_zp_table_end:
.80cf					cold_user_table:
>80cf	00 00				        .word 0                         ;  0 BLK
>80d1	00 00				        .word 0                         ;  2 SCR
>80d3	00				        .byte 0                         ;  4 CURRENT = FORTH-WORDLIST
>80d4	04				        .byte 4                         ;  5 #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
>80d5	51 bc				        .word dictionary_start          ;  6 FORTH-WORDLIST
>80d7	99 ca				        .word editor_dictionary_start   ;  8 EDITOR-WORDLIST
>80d9	e9 ca				        .word assembler_dictionary_start ; a ASSEMBLER-WORDLIST
>80db	58 ca				        .word root_dictionary_start     ;  c ROOT-WORDLIST
>80dd	00 00 00 00 00 00 00 00		        .word 0,0,0,0,0,0,0,0           ;  e User wordlists
>80e5	00 00 00 00 00 00 00 00
>80ed	01				        .byte 1                         ; 1e #ORDER
>80ee	00 00 00 00 00 00 00 00		        .byte 0,0,0,0,0,0,0,0,0         ; 1f search-order
>80f6	00
>80f7	00 04				        .word cp0+256                   ; 28 Address of buffer (right after USER vars)
>80f9	00 00				        .word 0                         ; 2a block in buffer
>80fb	00 00				        .word 0                         ; 2c buffer status (not in use)
>80fd	67 85				        .word xt_block_word_error       ; 2e block-read vector
>80ff	67 85				        .word xt_block_word_error       ; 30 block-write vector
>8101	00 00				        .word 0                         ; 32 'COLD
.8103					cold_user_table_end:
.8103					xt_abort_quote:
.8103	20 72 9d	jsr $9d72	                jsr xt_s_quote          ; S"
.8106	a0 81		ldy #$81	                ldy #>abort_quote_runtime
.8108	a9 0e		lda #$0e	                lda #<abort_quote_runtime
.810a	20 ce d6	jsr $d6ce	                jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
.810d	60		rts		z_abort_quote:  rts
.810e					abort_quote_runtime:
.810e	b5 04		lda $04,x	                lda 4,x
.8110	15 05		ora $05,x	                ora 5,x
.8112	f0 09		beq $811d	                beq _done       ; if FALSE, we're done
.8114	20 f7 a4	jsr $a4f7	                jsr xt_type
.8117	20 6f 89	jsr $896f	                jsr xt_cr
.811a	4c 60 80	jmp $8060	                jmp xt_abort    ; not JSR, so never come back
.811d					_done:
.811d	8a		txa		                txa
.811e	18		clc		                clc
.811f	69 06		adc #$06	                adc #6
.8121	aa		tax		                tax
.8122	60		rts		                rts
.8123					xt_abs:
.8123	20 38 d8	jsr $d838	                jsr underflow_1
.8126	b5 01		lda $01,x	                lda 1,x
.8128	10 0d		bpl $8137	                bpl _done       ; positive number, easy money!
.812a	38		sec		                sec
.812b	a9 00		lda #$00	                lda #0
.812d	f5 00		sbc $00,x	                sbc 0,x         ; LSB
.812f	95 00		sta $00,x	                sta 0,x
.8131	a9 00		lda #$00	                lda #0          ; MSB
.8133	f5 01		sbc $01,x	                sbc 1,x
.8135	95 01		sta $01,x	                sta 1,x
.8137					_done:
.8137	60		rts		z_abs:          rts
.8138					xt_accept:
.8138	20 3d d8	jsr $d83d	                jsr underflow_2
.813b	b5 00		lda $00,x	                lda 0,x
.813d	15 01		ora $01,x	                ora 1,x
.813f	d0 09		bne $814a	                bne _not_zero
.8141	e8		inx		                inx
.8142	e8		inx		                inx
.8143	74 00		stz $00,x	                stz 0,x
.8145	74 01		stz $01,x	                stz 1,x
.8147	4c 16 82	jmp $8216	                jmp accept_done
.814a					_not_zero:
.814a	b5 00		lda $00,x	                lda 0,x         ; number of chars to get in tmp2 ...
.814c	85 26		sta $26		                sta tmp2
.814e	64 27		stz $27		                stz tmp2+1      ; ... but we only accept max 255 chars
.8150	b5 02		lda $02,x	                lda 2,x         ; address of buffer is NOS, to tmp1
.8152	85 24		sta $24		                sta tmp1
.8154	b5 03		lda $03,x	                lda 3,x
.8156	85 25		sta $25		                sta tmp1+1
.8158	e8		inx		                inx
.8159	e8		inx		                inx
.815a	a0 00		ldy #$00	                ldy #0
.815c	a5 20		lda $20		                lda status
.815e	29 f7		and #$f7	                and #$f7
.8160	1a		inc a		               ina
.8161	09 08		ora #$08	                ora #$08
.8163	85 20		sta $20		                sta status
.8165					accept_loop:
.8165	20 44 93	jsr $9344	                jsr key_a
.8168	c9 0a		cmp #$0a	                cmp #AscLF
.816a	f0 20		beq $818c	                beq _eol
.816c	c9 0d		cmp #$0d	                cmp #AscCR
.816e	f0 1c		beq $818c	                beq _eol
.8170	c9 08		cmp #$08	                cmp #AscBS
.8172	f0 22		beq $8196	                beq _backspace
.8174	c9 7f		cmp #$7f	                cmp #AscDEL     ; (CTRL-h)
.8176	f0 1e		beq $8196	                beq _backspace
.8178	c9 10		cmp #$10	                cmp #AscCP
.817a	f0 36		beq $81b2	                beq _ctrl_p
.817c	c9 0e		cmp #$0e	                cmp #AscCN
.817e	f0 44		beq $81c4	                beq _ctrl_n
.8180	91 24		sta ($24),y	                sta (tmp1),y
.8182	c8		iny		                iny
.8183	20 02 8e	jsr $8e02	                jsr emit_a
.8186	c4 26		cpy $26		                cpy tmp2        ; reached character limit?
.8188	d0 db		bne $8165	                bne accept_loop       ; fall through if buffer limit reached
.818a	80 03		bra $818f	                bra _buffer_full
.818c					_eol:
.818c	20 12 a1	jsr $a112	                jsr xt_space    ; print final space
.818f					_buffer_full:
.818f	94 00		sty $00,x	                sty 0,x         ; Y contains number of chars accepted already
.8191	74 01		stz $01,x	                stz 1,x         ; we only accept 256 chars
.8193	4c 16 82	jmp $8216	                jmp accept_done
.8196					_backspace:
.8196	c0 00		cpy #$00	                cpy #0          ; buffer empty?
.8198	d0 06		bne $81a0	                bne +
.819a	a9 07		lda #$07	                lda #AscBELL    ; complain and don't delete beyond the start of line
.819c	20 02 8e	jsr $8e02	                jsr emit_a
.819f	c8		iny		                iny
.81a0					+
.81a0	88		dey		                dey
.81a1	a9 08		lda #$08	                lda #AscBS      ; move back one
.81a3	20 02 8e	jsr $8e02	                jsr emit_a
.81a6	a9 20		lda #$20	                lda #AscSP      ; print a space (rubout)
.81a8	20 02 8e	jsr $8e02	                jsr emit_a
.81ab	a9 08		lda #$08	                lda #AscBS      ; move back over space
.81ad	20 02 8e	jsr $8e02	                jsr emit_a
.81b0	80 b3		bra $8165	                bra accept_loop
.81b2					_ctrl_p:
.81b2	a5 20		lda $20		                lda status
.81b4	29 07		and #$07	                and #7
.81b6	d0 08		bne $81c0	                bne _ctrl_p_dec
.81b8	a5 20		lda $20		                lda status
.81ba	09 07		ora #$07	                ora #7
.81bc	85 20		sta $20		                sta status
.81be	80 11		bra $81d1	                bra _recall_history
.81c0					_ctrl_p_dec:
.81c0	c6 20		dec $20		                dec status
.81c2	80 0d		bra $81d1	                bra _recall_history
.81c4					_ctrl_n:
.81c4	a9 08		lda #$08	                lda #$8
.81c6	24 20		bit $20		                bit status
.81c8	d0 07		bne $81d1	                bne _recall_history
.81ca	a5 20		lda $20		                lda status
.81cc	29 f7		and #$f7	                and #$f7
.81ce	1a		inc a		               ina
.81cf	85 20		sta $20		                sta status
.81d1					_recall_history:
.81d1	a9 08		lda #$08	                lda #%00001000
.81d3	14 20		trb $20		                trb status
.81d5	20 31 82	jsr $8231	                jsr accept_total_recall
.81d8	a9 0d		lda #$0d	                lda #AscCR
.81da	20 02 8e	jsr $8e02	                jsr emit_a
.81dd					input_clear:
.81dd	c0 00		cpy #$00	                cpy #0
.81df	f0 08		beq $81e9	                beq input_cleared
.81e1	a9 20		lda #$20	                lda #AscSP
.81e3	20 02 8e	jsr $8e02	                jsr emit_a
.81e6	88		dey		                dey
.81e7	80 f4		bra $81dd	                bra input_clear
.81e9					input_cleared:
.81e9	a9 0d		lda #$0d	                lda #AscCR
.81eb	20 02 8e	jsr $8e02	                jsr emit_a
.81ee	b1 28		lda ($28),y	                lda (tmp3),y
.81f0	85 21		sta $21		                sta status+1
.81f2	e6 28		inc $28		                inc tmp3
.81f4	d0 02		bne $81f8	                bne +           ; Increment the upper byte on carry.
.81f6	e6 29		inc $29		                inc tmp3+1
.81f8					+
.81f8	a9 0d		lda #$0d	                lda #AscCR
.81fa	20 02 8e	jsr $8e02	                jsr emit_a
.81fd					_history_loop:
.81fd	c4 21		cpy $21		                cpy status+1
.81ff	d0 03		bne $8204	                bne +
.8201	4c 65 81	jmp $8165	                jmp accept_loop       ; Needs a long jump
.8204					+
.8204	c4 26		cpy $26		                cpy tmp2
.8206	f0 0a		beq $8212	                beq _hist_filled_buffer
.8208	b1 28		lda ($28),y	                lda (tmp3),y
.820a	91 24		sta ($24),y	                sta (tmp1),y
.820c	20 02 8e	jsr $8e02	                jsr emit_a
.820f	c8		iny		                iny
.8210	80 eb		bra $81fd	                bra _history_loop
.8212					_hist_filled_buffer:
.8212	88		dey		                dey
.8213	4c 65 81	jmp $8165	                jmp accept_loop
.8216					accept_done:
.8216	20 31 82	jsr $8231	                jsr accept_total_recall
.8219	85 21		sta $21		                sta status+1
.821b	a0 00		ldy #$00	                ldy #0
.821d	91 28		sta ($28),y	                sta (tmp3),y
.821f	e6 28		inc $28		                inc tmp3
.8221	d0 02		bne $8225	                bne +           ; Increment the upper byte on carry.
.8223	e6 29		inc $29		                inc tmp3+1
.8225					+
.8225					_save_history_loop:
.8225	c4 21		cpy $21		                cpy status+1
.8227	f0 07		beq $8230	                beq _save_history_done
.8229	b1 24		lda ($24),y	                lda (tmp1),y
.822b	91 28		sta ($28),y	                sta (tmp3),y
.822d	c8		iny		                iny
.822e	80 f5		bra $8225	                bra _save_history_loop
.8230					_save_history_done:
.8230					z_accept:
.8230	60		rts		                rts
.8231					accept_total_recall:
.8231	a9 00		lda #$00	                lda #<hist_buff
.8233	85 28		sta $28		                sta tmp3
.8235	a9 7c		lda #$7c	                lda #>hist_buff
.8237	85 29		sta $29		                sta tmp3+1
.8239	a5 20		lda $20		                lda status
.823b	6a		ror a		                ror
.823c	29 03		and #$03	                and #3
.823e	18		clc		                clc
.823f	65 29		adc $29		                adc tmp3+1
.8241	85 29		sta $29		                sta tmp3+1
.8243	a5 20		lda $20		                lda status
.8245	6a		ror a		                ror             ; Rotate through carry into msb.
.8246	6a		ror a		                ror
.8247	29 80		and #$80	                and #$80
.8249	18		clc		                clc
.824a	65 28		adc $28		                adc tmp3
.824c	85 28		sta $28		                sta tmp3
.824e	90 02		bcc $8252	                bcc +           ; Increment the upper byte on carry.
.8250	e6 29		inc $29		                inc tmp3+1
.8252					+
.8252	98		tya		                tya
.8253	c9 80		cmp #$80	                cmp #$80
.8255	90 02		bcc $8259	                bcc +
.8257	a9 7f		lda #$7f	                lda #$7F
.8259					+
.8259	60		rts		                rts
.825a					xt_action_of:
.825a	a5 16		lda $16		                lda state
.825c	05 17		ora $17		                ora state+1
.825e	f0 0c		beq $826c	                beq _interpreting
.8260					_compiling:
.8260	20 aa 85	jsr $85aa	                jsr xt_bracket_tick
.8263	a0 8a		ldy #$8a	                ldy #>xt_defer_fetch
.8265	a9 eb		lda #$eb	                lda #<xt_defer_fetch
.8267	20 ce d6	jsr $d6ce	                jsr cmpl_subroutine
.826a	80 06		bra $8272	                bra _done
.826c					_interpreting:
.826c	20 05 a2	jsr $a205	                jsr xt_tick
.826f	20 eb 8a	jsr $8aeb	                jsr xt_defer_fetch
.8272					_done:
.8272	60		rts		z_action_of:           rts
.8273					xt_again:
.8273	20 38 d8	jsr $d838	                jsr underflow_1
.8276	a0 00		ldy #$00	                ldy #0
.8278	a9 4c		lda #$4c	                lda #$4C        ; JMP
.827a	91 00		sta ($00),y	                sta (cp),y
.827c	c8		iny		                iny
.827d	b5 00		lda $00,x	                lda 0,x         ; LSB of address
.827f	91 00		sta ($00),y	                sta (cp),y
.8281	c8		iny		                iny
.8282	b5 01		lda $01,x	                lda 1,x         ; MSB of address
.8284	91 00		sta ($00),y	                sta (cp),y
.8286	c8		iny		                iny
.8287	98		tya		                tya
.8288	18		clc		                clc
.8289	65 00		adc $00		                adc cp
.828b	85 00		sta $00		                sta cp
.828d	90 02		bcc $8291	                bcc _done
.828f	e6 01		inc $01		                inc cp+1
.8291					_done:
.8291	e8		inx		                inx
.8292	e8		inx		                inx
.8293	60		rts		z_again:        rts
.8294					xt_align:
.8294					xt_aligned:
.8294					z_align:
.8294	60		rts		z_aligned:      rts             ; stripped out during native compile
.8295					xt_allot:
.8295	20 38 d8	jsr $d838	                jsr underflow_1
.8298	b5 01		lda $01,x	                lda 1,x
.829a	30 22		bmi $82be	                bmi _release
.829c	18		clc		                clc
.829d	a5 00		lda $00		                lda cp
.829f	75 00		adc $00,x	                adc 0,x
.82a1	85 00		sta $00		                sta cp
.82a3	a5 01		lda $01		                lda cp+1
.82a5	75 01		adc $01,x	                adc 1,x
.82a7	85 01		sta $01		                sta cp+1
.82a9	a0 00		ldy #$00	                ldy #<cp_end
.82ab	c4 00		cpy $00		                cpy cp
.82ad	a9 7c		lda #$7c	                lda #>cp_end
.82af	e5 01		sbc $01		                sbc cp+1
.82b1	b0 48		bcs $82fb	                bcs _done               ; we're fine.
.82b3	84 00		sty $00		                sty cp                  ; still #<cp_end
.82b5	a9 7c		lda #$7c	                lda #>cp_end
.82b7	85 01		sta $01		                sta cp+1
.82b9	a9 00		lda #$00	                lda #err_allot
.82bb	4c 4e d8	jmp $d84e	                jmp error
.82be					_release:
.82be	ca		dex		                dex
.82bf	ca		dex		                dex
.82c0	a5 00		lda $00		                lda cp
.82c2	95 00		sta $00,x	                sta 0,x
.82c4	a5 01		lda $01		                lda cp+1
.82c6	95 01		sta $01,x	                sta 1,x
.82c8	20 06 9a	jsr $9a06	                jsr xt_plus                     ; new CP is now TOS
.82cb	ca		dex		                dex
.82cc	ca		dex		                dex                             ; new CP now NOS
.82cd	a9 00		lda #$00	                lda #<cp0
.82cf	95 00		sta $00,x	                sta 0,x
.82d1	a9 03		lda #$03	                lda #>cp0
.82d3	95 01		sta $01,x	                sta 1,x                         ; CP0 is TOS
.82d5	20 52 d7	jsr $d752	                jsr compare_16bit               ; still ( CP CP0 )
.82d8	f0 17		beq $82f1	                beq _nega_done
.82da	30 15		bmi $82f1	                bmi _nega_done
.82dc	a9 00		lda #$00	                lda #<cp0
.82de	85 00		sta $00		                sta cp
.82e0	a9 03		lda #$03	                lda #>cp0
.82e2	85 01		sta $01		                sta cp+1
.82e4	a9 51		lda #$51	                lda #<dictionary_start
.82e6	85 02		sta $02		                sta dp
.82e8	a9 bc		lda #$bc	                lda #>dictionary_start
.82ea	85 03		sta $03		                sta dp+1
.82ec	a9 0a		lda #$0a	                lda #err_negallot
.82ee	4c 4e d8	jmp $d84e	                jmp error
.82f1					_nega_done:
.82f1	b5 02		lda $02,x	                lda 2,x
.82f3	85 00		sta $00		                sta cp
.82f5	b5 03		lda $03,x	                lda 3,x
.82f7	85 01		sta $01		                sta cp+1
.82f9	e8		inx		                inx
.82fa	e8		inx		                inx                     ; drop through to _done
.82fb					_done:
.82fb	e8		inx		                inx
.82fc	e8		inx		                inx
.82fd					z_allot:
.82fd	60		rts		                rts
.82fe					xt_allow_native:
.82fe	20 6d d7	jsr $d76d	                jsr current_to_dp
.8301	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.8303	b1 02		lda ($02),y	                lda (dp),y
.8305	29 f5		and #$f5	                and #$ff-NN-AN  ; AN and NN flag is clear.
.8307	91 02		sta ($02),y	                sta (dp),y
.8309					z_allow_native:
.8309	60		rts		                rts
.830a					xt_also:
.830a	20 40 91	jsr $9140	                jsr xt_get_order
.830d	20 b6 98	jsr $98b6	                jsr xt_over
.8310	20 a2 a1	jsr $a1a2	                jsr xt_swap
.8313	20 40 98	jsr $9840	                jsr xt_one_plus
.8316	20 3e 9d	jsr $9d3e	                jsr xt_set_order
.8319	60		rts		z_also:         rts
.831a					xt_always_native:
.831a	20 6d d7	jsr $d76d	                jsr current_to_dp
.831d	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.831f	b1 02		lda ($02),y	                lda (dp),y
.8321	09 02		ora #$02	                ora #AN         ; Make sure AN flag is set
.8323	29 f7		and #$f7	                and #$ff-NN     ; and NN flag is clear.
.8325	91 02		sta ($02),y	                sta (dp),y
.8327					z_always_native:
.8327	60		rts		                rts
.8328					xt_and:
.8328	20 3d d8	jsr $d83d	                jsr underflow_2
.832b	b5 00		lda $00,x	                lda 0,x
.832d	35 02		and $02,x	                and 2,x
.832f	95 02		sta $02,x	                sta 2,x
.8331	b5 01		lda $01,x	                lda 1,x
.8333	35 03		and $03,x	                and 3,x
.8335	95 03		sta $03,x	                sta 3,x
.8337	e8		inx		                inx
.8338	e8		inx		                inx
.8339	60		rts		z_and:          rts
.833a					xt_at_xy:
.833a	20 3d d8	jsr $d83d	                jsr underflow_2
.833d	a5 18		lda $18		                lda base
.833f	48		pha		                pha
.8340	a9 0a		lda #$0a	                lda #10
.8342	85 18		sta $18		                sta base
.8344	a9 1b		lda #$1b	                lda #AscESC
.8346	20 02 8e	jsr $8e02	                jsr emit_a
.8349	a9 5b		lda #$5b	                lda #$5B        ; ASCII for "["
.834b	20 02 8e	jsr $8e02	                jsr emit_a
.834e	20 40 98	jsr $9840	                jsr xt_one_plus ; AT-XY is zero based, but ANSI is 1 based
.8351	20 a5 d8	jsr $d8a5	                jsr print_u
.8354	a9 3b		lda #$3b	                lda #$3B        ; ASCII for ";"
.8356	20 02 8e	jsr $8e02	                jsr emit_a
.8359	20 40 98	jsr $9840	                jsr xt_one_plus ; AT-XY is zero based, but ANSI is 1 based
.835c	20 a5 d8	jsr $d8a5	                jsr print_u
.835f	a9 48		lda #$48	                lda #'H'
.8361	20 02 8e	jsr $8e02	                jsr emit_a
.8364	68		pla		                pla
.8365	85 18		sta $18		                sta base
.8367	60		rts		z_at_xy:        rts
.8368					xt_backslash:
.8368	a0 00		ldy #$00	                ldy #blk_offset
.836a	b1 1e		lda ($1e),y	                lda (up),y
.836c	c8		iny		                iny
.836d	11 1e		ora ($1e),y	                ora (up),y
.836f	f0 19		beq $838a	                beq backslash_not_block
.8371	a5 0c		lda $0c		                lda toin
.8373	29 3f		and #$3f	                and #$3F
.8375	f0 1b		beq $8392	                beq z_backslash
.8377	c9 01		cmp #$01	                cmp #$01
.8379	f0 17		beq $8392	                beq z_backslash
.837b	a5 0c		lda $0c		                lda toin
.837d	29 c0		and #$c0	                and #$C0        ; Clear lower bits to move to beginning of line.
.837f	18		clc		                clc             ; Add $40 (64 decimal) to move to next line.
.8380	69 40		adc #$40	                adc #$40
.8382	85 0c		sta $0c		                sta toin
.8384	90 0c		bcc $8392	                bcc z_backslash
.8386	e6 0d		inc $0d		                inc toin+1
.8388	80 08		bra $8392	                bra z_backslash
.838a					backslash_not_block:
.838a	a5 0a		lda $0a		                lda ciblen
.838c	85 0c		sta $0c		                sta toin
.838e	a5 0b		lda $0b		                lda ciblen+1
.8390	85 0d		sta $0d		                sta toin+1
.8392	60		rts		z_backslash:    rts
.8393					xt_base:
.8393	ca		dex		                dex
.8394	ca		dex		                dex
.8395	a9 18		lda #$18	                lda #<base
.8397	95 00		sta $00,x	                sta 0,x         ; LSB
.8399	74 01		stz $01,x	                stz 1,x         ; MSB is always 0
.839b	60		rts		z_base:         rts
.839c					xt_begin:
.839c	20 7e 91	jsr $917e	                jsr xt_here
.839f	60		rts		z_begin:        rts
.83a0					xt_bell:
.83a0	a9 07		lda #$07	                lda #7          ; ASCII value for BELl
.83a2	20 02 8e	jsr $8e02	                jsr emit_a
.83a5	60		rts		z_bell:         rts
.83a6					xt_bl:
.83a6	ca		dex		                dex
.83a7	ca		dex		                dex
.83a8	a9 20		lda #$20	                lda #AscSP
.83aa	95 00		sta $00,x	                sta 0,x
.83ac	74 01		stz $01,x	                stz 1,x
.83ae	60		rts		z_bl:           rts
.83af					xt_blk:
.83af	ca		dex		                dex
.83b0	ca		dex		                dex
.83b1	18		clc		                clc
.83b2	a5 1e		lda $1e		                lda up
.83b4	69 00		adc #$00	                adc #blk_offset ; Add offset
.83b6	95 00		sta $00,x	                sta 0,x
.83b8	a5 1f		lda $1f		                lda up+1
.83ba	69 00		adc #$00	                adc #0          ; Adding carry
.83bc	95 01		sta $01,x	                sta 1,x
.83be	60		rts		z_blk:          rts
.83bf					xt_blkbuffer:
.83bf	ca		dex		                dex
.83c0	ca		dex		                dex
.83c1	a0 28		ldy #$28	                ldy #blkbuffer_offset
.83c3	b1 1e		lda ($1e),y	                lda (up),y
.83c5	95 00		sta $00,x	                sta 0,x
.83c7	c8		iny		                iny             ; Move along to the next byte
.83c8	b1 1e		lda ($1e),y	                lda (up),y
.83ca	95 01		sta $01,x	                sta 1,x
.83cc	60		rts		z_blkbuffer:    rts
.83cd					xt_block:
.83cd	a0 2a		ldy #$2a	                ldy #buffblocknum_offset
.83cf	b1 1e		lda ($1e),y	                lda (up),y
.83d1	d5 00		cmp $00,x	                cmp 0,x
.83d3	d0 0f		bne $83e4	                bne _not_in_buffer
.83d5	c8		iny		                iny
.83d6	b1 1e		lda ($1e),y	                lda (up),y
.83d8	d5 01		cmp $01,x	                cmp 1,x
.83da	d0 08		bne $83e4	                bne _not_in_buffer
.83dc	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.83de	b1 1e		lda ($1e),y	                lda (up),y
.83e0	29 01		and #$01	                and #1          ; Check the in-use flag (bit 0)
.83e2	d0 30		bne $8414	                bne _done       ; It's already in the buffer and in use.
.83e4					_not_in_buffer:
.83e4	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.83e6	b1 1e		lda ($1e),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.83e8	c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.83ea	d0 0c		bne $83f8	                bne _buffer_available ; Unused or not dirty = available
.83ec	20 bf 83	jsr $83bf	                jsr xt_blkbuffer
.83ef	20 b1 85	jsr $85b1	                jsr xt_buffblocknum
.83f2	20 8c 8f	jsr $8f8c	                jsr xt_fetch
.83f5	20 6c 85	jsr $856c	                jsr xt_block_write
.83f8					_buffer_available:
.83f8	a0 2a		ldy #$2a	                ldy #buffblocknum_offset
.83fa	b5 00		lda $00,x	                lda 0,x
.83fc	91 1e		sta ($1e),y	                sta (up),y
.83fe	c8		iny		                iny
.83ff	b5 01		lda $01,x	                lda 1,x
.8401	91 1e		sta ($1e),y	                sta (up),y
.8403	20 bf 83	jsr $83bf	                jsr xt_blkbuffer
.8406	20 a2 a1	jsr $a1a2	                jsr xt_swap
.8409	20 49 85	jsr $8549	                jsr xt_block_read
.840c	a9 01		lda #$01	                lda #1
.840e	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.8410	91 1e		sta ($1e),y	                sta (up),y
.8412	ca		dex		                dex
.8413	ca		dex		                dex
.8414					_done:
.8414	a0 28		ldy #$28	                ldy #blkbuffer_offset
.8416	b1 1e		lda ($1e),y	                lda (up),y
.8418	95 00		sta $00,x	                sta 0,x
.841a	c8		iny		                iny
.841b	b1 1e		lda ($1e),y	                lda (up),y
.841d	95 01		sta $01,x	                sta 1,x
.841f	60		rts		z_block:        rts
.8420					xt_block_ramdrive_init:
.8420	20 38 d8	jsr $d838	                jsr underflow_1
.8423	4c 3e 85	jmp $853e	                jmp _after_ramdrive_code
.8426					_ramdrive_code:
>8426	62 61 73 65 20 40 20 73		        .text "base @ swap decimal"
>842e	77 61 70 20 64 65 63 69 6d 61 6c
>8439	20 31 30 32 34 20 2a		        .text " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
>8440	20 64 75 70			        .text " dup"    ; ( Save a copy for formatting it at the end )
>8444	20 62 75 66 66 65 72 3a		        .text " buffer: ramdrive" ; ( Create ramdrive )
>844c	20 72 61 6d 64 72 69 76 65
>8455	20 3a 20 62 6c 6f 63 6b		        .text " : block-read-ramdrive"  ; ( addr u -- )
>845d	2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65
>846b	20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + swap 1024 move ;"
>8473	65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>8483	73 77 61 70 20 31 30 32 34 20 6d 6f 76 65 20 3b
>8493	20 3a 20 62 6c 6f 63 6b		        .text " : block-write-ramdrive" ; ( addr u -- )
>849b	2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65
>84aa	20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + 1024 move ;"
>84b2	65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>84c2	31 30 32 34 20 6d 6f 76 65 20 3b
>84cd	20 27 20 62 6c 6f 63 6b		        .text " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
>84d5	2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65 20 62
>84e5	6c 6f 63 6b 2d 72 65 61 64 2d 76 65 63 74 6f 72
>84f5	20 21
>84f7	20 27 20 62 6c 6f 63 6b		        .text " ' block-write-ramdrive block-write-vector !"
>84ff	2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65 20
>850f	62 6c 6f 63 6b 2d 77 72 69 74 65 2d 76 65 63 74
>851f	6f 72 20 21
>8523	20 72 61 6d 64 72 69 76		        .text " ramdrive swap blank base !"
>852b	65 20 73 77 61 70 20 62 6c 61 6e 6b 20 62 61 73
>853b	65 20 21
.853e					_after_ramdrive_code:
.853e	20 9d a0	jsr $a09d	                jsr sliteral_runtime
>8541	26 84 18 01			.word _ramdrive_code, _after_ramdrive_code-_ramdrive_code
.8545	20 e1 90	jsr $90e1	                jsr xt_evaluate
.8548					z_block_ramdrive_init:
.8548	60		rts		                rts
.8549					xt_block_read:
.8549	a0 2e		ldy #$2e	                ldy #blockread_offset
.854b	b1 1e		lda ($1e),y	                lda (up),y
.854d	85 24		sta $24		                sta tmp1
.854f	c8		iny		                iny
.8550	b1 1e		lda ($1e),y	                lda (up),y
.8552	85 25		sta $25		                sta tmp1+1
.8554	6c 24 00	jmp ($0024)	                jmp (tmp1)
.8557					z_block_read:
.8557					xt_block_read_vector:
.8557	ca		dex		                dex
.8558	ca		dex		                dex
.8559	18		clc		                clc
.855a	a5 1e		lda $1e		                lda up
.855c	69 2e		adc #$2e	                adc #blockread_offset
.855e	95 00		sta $00,x	                sta 0,x
.8560	a5 1f		lda $1f		                lda up+1
.8562	69 00		adc #$00	                adc #0          ; Add carry
.8564	95 01		sta $01,x	                sta 1,x
.8566					z_block_read_vector:
.8566	60		rts		                rts
.8567					xt_block_word_error:
.8567	a9 0c		lda #$0c	                lda #err_blockwords
.8569	4c 4e d8	jmp $d84e	                jmp error       ; no RTS needed
.856c					z_block_word_error:
.856c					xt_block_write:
.856c	a0 30		ldy #$30	                ldy #blockwrite_offset
.856e	b1 1e		lda ($1e),y	                lda (up),y
.8570	85 24		sta $24		                sta tmp1
.8572	c8		iny		                iny
.8573	b1 1e		lda ($1e),y	                lda (up),y
.8575	85 25		sta $25		                sta tmp1+1
.8577	6c 24 00	jmp ($0024)	                jmp (tmp1)
.857a					z_block_write:
.857a					xt_block_write_vector:
.857a	ca		dex		                dex
.857b	ca		dex		                dex
.857c	18		clc		                clc
.857d	a5 1e		lda $1e		                lda up
.857f	69 30		adc #$30	                adc #blockwrite_offset
.8581	95 00		sta $00,x	                sta 0,x
.8583	a5 1f		lda $1f		                lda up+1
.8585	69 00		adc #$00	                adc #0          ; Add carry
.8587	95 01		sta $01,x	                sta 1,x
.8589					z_block_write_vector:
.8589	60		rts		                rts
.858a					xt_bounds:
.858a	20 3d d8	jsr $d83d	                jsr underflow_2
.858d	18		clc		                clc
.858e	b5 00		lda $00,x	                lda 0,x                 ; LSB u
.8590	b4 02		ldy $02,x	                ldy 2,x                 ; LSB addr
.8592	75 02		adc $02,x	                adc 2,x
.8594	95 02		sta $02,x	                sta 2,x                 ; LSB addr+u
.8596	94 00		sty $00,x	                sty 0,x
.8598	b5 01		lda $01,x	                lda 1,x                 ; MSB u
.859a	b4 03		ldy $03,x	                ldy 3,x                 ; MSB addr
.859c	75 03		adc $03,x	                adc 3,x
.859e	95 03		sta $03,x	                sta 3,x                 ; MSB addr+u
.85a0	94 01		sty $01,x	                sty 1,x
.85a2	60		rts		z_bounds:       rts
.85a3					xt_bracket_char:
.85a3	20 3d 86	jsr $863d	                jsr xt_char
.85a6	20 96 93	jsr $9396	                jsr xt_literal
.85a9	60		rts		z_bracket_char: rts
.85aa					xt_bracket_tick:
.85aa	20 05 a2	jsr $a205	                jsr xt_tick
.85ad	20 96 93	jsr $9396	                jsr xt_literal
.85b0	60		rts		z_bracket_tick: rts
.85b1					xt_buffblocknum:
.85b1	ca		dex		                dex
.85b2	ca		dex		                dex
.85b3	18		clc		                clc
.85b4	a5 1e		lda $1e		                lda up
.85b6	69 2a		adc #$2a	                adc #buffblocknum_offset        ; Add offset
.85b8	95 00		sta $00,x	                sta 0,x
.85ba	a5 1f		lda $1f		                lda up+1
.85bc	69 00		adc #$00	                adc #0                          ; Adding carry
.85be	95 01		sta $01,x	                sta 1,x
.85c0	60		rts		z_buffblocknum: rts
.85c1					xt_buffer:
.85c1	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.85c3	b1 1e		lda ($1e),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.85c5	c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.85c7	d0 0c		bne $85d5	                bne _buffer_available ; Unused or not dirty = available
.85c9	20 bf 83	jsr $83bf	                jsr xt_blkbuffer
.85cc	20 b1 85	jsr $85b1	                jsr xt_buffblocknum
.85cf	20 8c 8f	jsr $8f8c	                jsr xt_fetch
.85d2	20 6c 85	jsr $856c	                jsr xt_block_write
.85d5					_buffer_available:
.85d5	a0 2a		ldy #$2a	                ldy #buffblocknum_offset
.85d7	b5 00		lda $00,x	                lda 0,x
.85d9	91 1e		sta ($1e),y	                sta (up),y
.85db	c8		iny		                iny
.85dc	b5 01		lda $01,x	                lda 1,x
.85de	91 1e		sta ($1e),y	                sta (up),y
.85e0	a9 01		lda #$01	                lda #1
.85e2	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.85e4	91 1e		sta ($1e),y	                sta (up),y
.85e6					_done:
.85e6	a0 28		ldy #$28	                ldy #blkbuffer_offset
.85e8	b1 1e		lda ($1e),y	                lda (up),y
.85ea	95 00		sta $00,x	                sta 0,x
.85ec	c8		iny		                iny
.85ed	b1 1e		lda ($1e),y	                lda (up),y
.85ef	95 01		sta $01,x	                sta 1,x
.85f1	60		rts		z_buffer:       rts
.85f2					xt_buffer_colon:
.85f2	20 75 89	jsr $8975	                jsr xt_create
.85f5	20 95 82	jsr $8295	                jsr xt_allot
.85f8	60		rts		z_buffer_colon: rts
.85f9					xt_buffstatus:
.85f9	ca		dex		                dex
.85fa	ca		dex		                dex
.85fb	18		clc		                clc
.85fc	a5 1e		lda $1e		                lda up
.85fe	69 2c		adc #$2c	                adc #buffstatus_offset  ; Add offset
.8600	95 00		sta $00,x	                sta 0,x
.8602	a5 1f		lda $1f		                lda up+1
.8604	69 00		adc #$00	                adc #0                  ; Adding carry
.8606	95 01		sta $01,x	                sta 1,x
.8608	60		rts		z_buffstatus:   rts
.8609					xt_bye:
.8609	4c 2b f0	jmp $f02b	                jmp platform_bye
.860c					z_bye:
.860c					xt_c_comma:
.860c	20 38 d8	jsr $d838	                jsr underflow_1
.860f	b5 00		lda $00,x	                lda 0,x
.8611	20 de d6	jsr $d6de	                jsr cmpl_a
.8614	e8		inx		                inx
.8615	e8		inx		                inx
.8616	60		rts		z_c_comma:      rts
.8617					xt_c_fetch:
.8617	20 38 d8	jsr $d838	                jsr underflow_1
.861a	a1 00		lda ($00,x)	                lda (0,x)
.861c	95 00		sta $00,x	                sta 0,x
.861e	74 01		stz $01,x	                stz 1,x         ; Ignore LSB
.8620	60		rts		z_c_fetch:      rts
.8621					xt_c_store:
.8621	20 3d d8	jsr $d83d	                jsr underflow_2
.8624	b5 02		lda $02,x	                lda 2,x
.8626	81 00		sta ($00,x)	                sta (0,x)
.8628	e8		inx		                inx
.8629	e8		inx		                inx
.862a	e8		inx		                inx
.862b	e8		inx		                inx
.862c	60		rts		z_c_store:      rts
.862d					xt_cell_plus:
.862d	20 38 d8	jsr $d838	                jsr underflow_1
.8630	f6 00		inc $00,x	                inc 0,x
.8632	d0 02		bne $8636	                bne +
.8634	f6 01		inc $01,x	                inc 1,x
.8636					+
.8636	f6 00		inc $00,x	                inc 0,x
.8638	d0 02		bne $863c	                bne _done
.863a	f6 01		inc $01,x	                inc 1,x
.863c					_done:
.863c	60		rts		z_cell_plus:    rts
.863d					xt_char:
.863d	20 02 99	jsr $9902	                jsr xt_parse_name
.8640	b5 00		lda $00,x	                lda 0,x
.8642	15 01		ora $01,x	                ora 1,x
.8644	d0 05		bne $864b	                bne _not_empty
.8646	a9 05		lda #$05	                lda #err_noname
.8648	4c 4e d8	jmp $d84e	                jmp error
.864b					_not_empty:
.864b	e8		inx		                inx             ; drop number of characters, leave addr
.864c	e8		inx		                inx
.864d	a1 00		lda ($00,x)	                lda (0,x)       ; get character (equivalent to C@)
.864f	95 00		sta $00,x	                sta 0,x
.8651	74 01		stz $01,x	                stz 1,x         ; MSB is always zero
.8653	60		rts		z_char:         rts
.8654					xt_chars:
.8654	20 38 d8	jsr $d838	                jsr underflow_1
.8657	60		rts		z_chars:        rts
.8658					xt_cleave:
.8658	20 3d d8	jsr $d83d	                jsr underflow_2
.865b	20 86 95	jsr $9586	                jsr xt_minus_leading    ; -LEADING ( addr u )
.865e	20 6e 92	jsr $926e	                jsr xt_input_to_r       ; save old imput state
.8661	b5 00		lda $00,x	                lda 0,x         ; u is new ciblen
.8663	85 0a		sta $0a		                sta ciblen
.8665	b5 01		lda $01,x	                lda 1,x
.8667	85 0b		sta $0b		                sta ciblen+1
.8669	b5 02		lda $02,x	                lda 2,x         ; addr is new cib
.866b	85 08		sta $08		                sta cib
.866d	b5 03		lda $03,x	                lda 3,x
.866f	85 09		sta $09		                sta cib+1
.8671	64 0c		stz $0c		                stz toin        ; >IN pointer is zero
.8673	64 0d		stz $0d		                stz toin+1
.8675	20 02 99	jsr $9902	                jsr xt_parse_name       ; ( addr u addr-s u-s )
.8678	b5 00		lda $00,x	                lda 0,x
.867a	15 01		ora $01,x	                ora 1,x
.867c	f0 23		beq $86a1	                beq _done
.867e	b5 04		lda $04,x	                lda 4,x         ; LSB of original u
.8680	38		sec		                sec
.8681	f5 00		sbc $00,x	                sbc 0,x
.8683	95 04		sta $04,x	                sta 4,x
.8685	b5 05		lda $05,x	                lda 5,x         ; MSB of original u
.8687	f5 01		sbc $01,x	                sbc 1,x
.8689	95 05		sta $05,x	                sta 5,x
.868b	b5 06		lda $06,x	                lda 6,x         ; LSB of original addr
.868d	18		clc		                clc
.868e	75 00		adc $00,x	                adc 0,x
.8690	95 06		sta $06,x	                sta 6,x
.8692	b5 07		lda $07,x	                lda 7,x         ; MSB of original addr
.8694	75 01		adc $01,x	                adc 1,x
.8696	95 07		sta $07,x	                sta 7,x
.8698	20 72 a4	jsr $a472	                jsr xt_two_swap         ; ( addr-s u-s addr u )
.869b	20 86 95	jsr $9586	                jsr xt_minus_leading
.869e	20 72 a4	jsr $a472	                jsr xt_two_swap         ; ( addr u addr-s u-s )
.86a1					_done:
.86a1	20 c6 9a	jsr $9ac6	                jsr xt_r_to_input
.86a4	60		rts		z_cleave:       rts
.86a5					xt_cmove:
.86a5	20 42 d8	jsr $d842	                jsr underflow_3
.86a8	b5 02		lda $02,x	                lda 2,x
.86aa	85 26		sta $26		                sta tmp2        ; use tmp2 because easier to remember
.86ac	b5 03		lda $03,x	                lda 3,x
.86ae	85 27		sta $27		                sta tmp2+1
.86b0	b5 04		lda $04,x	                lda 4,x
.86b2	85 24		sta $24		                sta tmp1        ; use tmp1 because easier to remember
.86b4	b5 05		lda $05,x	                lda 5,x
.86b6	85 25		sta $25		                sta tmp1+1
.86b8	a0 00		ldy #$00	                ldy #0
.86ba	b5 01		lda $01,x	                lda 1,x         ; number of whole pages to move
.86bc	f0 0f		beq $86cd	                beq _dopartial
.86be					_page:
.86be	b1 24		lda ($24),y	                lda (tmp1),y
.86c0	91 26		sta ($26),y	                sta (tmp2),y
.86c2	c8		iny		                iny
.86c3	d0 f9		bne $86be	                bne _page
.86c5	e6 25		inc $25		                inc tmp1+1
.86c7	e6 27		inc $27		                inc tmp2+1
.86c9	d6 01		dec $01,x	                dec 1,x
.86cb	d0 f1		bne $86be	                bne _page
.86cd					_dopartial:
.86cd	b5 00		lda $00,x	                lda 0,x         ; length of last page
.86cf	f0 09		beq $86da	                beq _done
.86d1					_partial:
.86d1	b1 24		lda ($24),y	                lda (tmp1),y
.86d3	91 26		sta ($26),y	                sta (tmp2),y
.86d5	c8		iny		                iny
.86d6	d6 00		dec $00,x	                dec 0,x
.86d8	d0 f7		bne $86d1	                bne _partial
.86da					_done:
.86da	8a		txa		                txa
.86db	18		clc		                clc
.86dc	69 06		adc #$06	                adc #6
.86de	aa		tax		                tax
.86df	60		rts		z_cmove:        rts
.86e0					xt_cmove_up:
.86e0	20 42 d8	jsr $d842	                jsr underflow_3
.86e3	b5 02		lda $02,x	                lda 2,x
.86e5	85 26		sta $26		                sta tmp2        ; use tmp2 because easier to remember
.86e7	b5 03		lda $03,x	                lda 3,x
.86e9	18		clc		                clc
.86ea	75 01		adc $01,x	                adc 1,x
.86ec	85 27		sta $27		                sta tmp2+1      ; point to last page of destination
.86ee	b5 04		lda $04,x	                lda 4,x
.86f0	85 24		sta $24		                sta tmp1        ; use tmp1 because easier to remember
.86f2	b5 05		lda $05,x	                lda 5,x
.86f4	18		clc		                clc
.86f5	75 01		adc $01,x	                adc 1,x
.86f7	85 25		sta $25		                sta tmp1+1      ; point to last page of source
.86f9	f6 01		inc $01,x	                inc 1,x         ; allows us to use bne with dec 1,x below
.86fb	b4 00		ldy $00,x	                ldy 0,x         ; length of last page
.86fd	f0 0e		beq $870d	                beq _nopartial
.86ff					_outerloop:
.86ff	88		dey		                dey
.8700	f0 07		beq $8709	                beq _finishpage
.8702					_innerloop:
.8702	b1 24		lda ($24),y	                lda (tmp1),y
.8704	91 26		sta ($26),y	                sta (tmp2),y
.8706	88		dey		                dey
.8707	d0 f9		bne $8702	                bne _innerloop
.8709					_finishpage:
.8709	b2 24		lda ($24)	                lda (tmp1)      ; handle y = 0 separately
.870b	92 26		sta ($26)	                sta (tmp2)
.870d					_nopartial:
.870d	c6 25		dec $25		                dec tmp1+1      ; back up to previous pages
.870f	c6 27		dec $27		                dec tmp2+1
.8711	d6 01		dec $01,x	                dec 1,x
.8713	d0 ea		bne $86ff	                bne _outerloop
.8715					_done:
.8715	8a		txa		                txa
.8716	18		clc		                clc
.8717	69 06		adc #$06	                adc #6
.8719	aa		tax		                tax
.871a	60		rts		z_cmove_up:     rts
.871b					xt_colon:
.871b	a5 16		lda $16		                lda state
.871d	05 17		ora $17		                ora state+1
.871f	f0 05		beq $8726	                beq +
.8721	a9 07		lda #$07	                lda #err_state
.8723	4c 4e d8	jmp $d84e	                jmp error
.8726					+
.8726	c6 16		dec $16		                dec state
.8728	c6 17		dec $17		                dec state+1
.872a	a9 40		lda #$40	                lda #%01000000
.872c	04 20		tsb $20		                tsb status
.872e	20 6d d7	jsr $d76d	                jsr current_to_dp
.8731	a5 03		lda $03		                lda dp+1            ; CREATE uses a lot of variables
.8733	48		pha		                pha
.8734	a5 02		lda $02		                lda dp
.8736	48		pha		                pha
.8737	a9 80		lda #$80	                lda #%10000000
.8739	04 20		tsb $20		                tsb status
.873b	20 75 89	jsr $8975	                jsr xt_create
.873e	20 6d d7	jsr $d76d	                jsr current_to_dp   ; This might be able to be omitted
.8741	a5 02		lda $02		                lda dp
.8743	85 04		sta $04		                sta workword
.8745	a5 03		lda $03		                lda dp+1
.8747	85 05		sta $05		                sta workword+1
.8749	68		pla		                pla
.874a	85 02		sta $02		                sta dp
.874c	68		pla		                pla
.874d	85 03		sta $03		                sta dp+1
.874f	20 80 d7	jsr $d780	                jsr dp_to_current
.8752	a5 00		lda $00		                lda cp
.8754	38		sec		                sec
.8755	e9 03		sbc #$03	                sbc #3
.8757	85 00		sta $00		                sta cp
.8759	b0 02		bcs $875d	                bcs _done
.875b	c6 01		dec $01		                dec cp+1
.875d					_done:
.875d	60		rts		z_colon:        rts
.875e					xt_colon_noname:
.875e	a5 16		lda $16		                lda state
.8760	05 17		ora $17		                ora state+1
.8762	f0 05		beq $8769	                beq +
.8764	a9 07		lda #$07	                lda #err_state
.8766	4c 4e d8	jmp $d84e	                jmp error
.8769					+
.8769	c6 16		dec $16		                dec state
.876b	c6 17		dec $17		                dec state+1
.876d	a9 40		lda #$40	                lda #%01000000
.876f	14 20		trb $20		                trb status
.8771	a5 00		lda $00		                lda cp
.8773	85 04		sta $04		                sta workword
.8775	a5 01		lda $01		                lda cp+1
.8777	85 05		sta $05		                sta workword+1
.8779					_done:
.8779	60		rts		z_colon_noname:        rts
.877a					xt_comma:
.877a	20 38 d8	jsr $d838	                jsr underflow_1
.877d	b5 00		lda $00,x	                lda 0,x
.877f	92 00		sta ($00)	                sta (cp)
.8781	e6 00		inc $00		                inc cp
.8783	d0 02		bne $8787	                bne +
.8785	e6 01		inc $01		                inc cp+1
.8787					+
.8787	b5 01		lda $01,x	                lda 1,x
.8789	92 00		sta ($00)	                sta (cp)
.878b	e6 00		inc $00		                inc cp
.878d	d0 02		bne $8791	                bne _done
.878f	e6 01		inc $01		                inc cp+1
.8791					_done:
.8791	e8		inx		                inx
.8792	e8		inx		                inx
.8793	60		rts		z_comma:        rts
.8794					xt_compare:
.8794	20 47 d8	jsr $d847	                jsr underflow_4
.8797	b5 02		lda $02,x	                lda 2,x
.8799	85 26		sta $26		                sta tmp2
.879b	b5 03		lda $03,x	                lda 3,x
.879d	85 27		sta $27		                sta tmp2+1
.879f	b5 06		lda $06,x	                lda 6,x
.87a1	85 24		sta $24		                sta tmp1
.87a3	b5 07		lda $07,x	                lda 7,x
.87a5	85 25		sta $25		                sta tmp1+1
.87a7					_compare_loop:
.87a7	b5 04		lda $04,x	                lda 4,x
.87a9	15 05		ora $05,x	                ora 5,x
.87ab	f0 2c		beq $87d9	                beq _str1_done
.87ad	b5 00		lda $00,x	                lda 0,x
.87af	15 01		ora $01,x	                ora 1,x
.87b1	f0 3a		beq $87ed	                beq _greater    ; Str2 empty first
.87b3					_check_letter:
.87b3	b2 24		lda ($24)	                lda (tmp1)
.87b5	d2 26		cmp ($26)	                cmp (tmp2)
.87b7	90 26		bcc $87df	                bcc _less
.87b9	d0 32		bne $87ed	                bne _greater
.87bb					_next_letter:
.87bb	e6 24		inc $24		                inc tmp1
.87bd	d0 02		bne $87c1	                bne +
.87bf	e6 25		inc $25		                inc tmp1+1
.87c1					+
.87c1	e6 26		inc $26		                inc tmp2
.87c3	d0 02		bne $87c7	                bne +
.87c5	e6 27		inc $27		                inc tmp2+1
.87c7					+
.87c7	b5 04		lda $04,x	                lda 4,x
.87c9	d0 02		bne $87cd	                bne +
.87cb	d6 05		dec $05,x	                dec 5,x
.87cd					+
.87cd	d6 04		dec $04,x	                dec 4,x
.87cf	b5 00		lda $00,x	                lda 0,x
.87d1	d0 02		bne $87d5	                bne +
.87d3	d6 01		dec $01,x	                dec 1,x
.87d5					+
.87d5	d6 00		dec $00,x	                dec 0,x
.87d7	80 ce		bra $87a7	                bra _compare_loop
.87d9					_str1_done:
.87d9	b5 00		lda $00,x	                lda 0,x
.87db	15 01		ora $01,x	                ora 1,x
.87dd	f0 08		beq $87e7	                beq _equal      ; Both out of letters
.87df					_less:
.87df	a9 ff		lda #$ff	                lda #$FF
.87e1	95 06		sta $06,x	                sta 6,x
.87e3	95 07		sta $07,x	                sta 7,x
.87e5	80 0c		bra $87f3	                bra _done
.87e7					_equal:
.87e7	74 06		stz $06,x	                stz 6,x
.87e9	74 07		stz $07,x	                stz 7,x
.87eb	80 06		bra $87f3	                bra _done
.87ed					_greater:
.87ed	a9 01		lda #$01	                lda #1
.87ef	95 06		sta $06,x	                sta 6,x
.87f1	74 07		stz $07,x	                stz 7,x
.87f3					_done:
.87f3	8a		txa		                txa
.87f4	18		clc		                clc
.87f5	69 06		adc #$06	                adc #6
.87f7	aa		tax		                tax
.87f8	60		rts		z_compare:      rts
.87f9					xt_compile_comma:
.87f9	20 38 d8	jsr $d838	                jsr underflow_1
.87fc	b5 01		lda $01,x	                lda 1,x                 ; MSB
.87fe	48		pha		                pha
.87ff	b5 00		lda $00,x	                lda 0,x
.8801	48		pha		                pha                     ; LSB
.8802	20 84 92	jsr $9284	                jsr xt_int_to_name      ; ( xt -- nt )
.8805	b5 00		lda $00,x	                lda 0,x
.8807	15 01		ora $01,x	                ora 1,x
.8809	d0 03		bne $880e	                bne _check_nt
.880b	4c f6 88	jmp $88f6	                jmp _compile_as_jump
.880e					_check_nt:
.880e	b5 00		lda $00,x	                lda 0,x
.8810	85 2c		sta $2c		                sta tmptos
.8812	b5 01		lda $01,x	                lda 1,x
.8814	85 2d		sta $2d		                sta tmptos+1
.8816	f6 00		inc $00,x	                inc 0,x
.8818	d0 02		bne $881c	                bne +
.881a	f6 01		inc $01,x	                inc 1,x                 ; ( nt -- nt+1 )
.881c					+
.881c	a1 00		lda ($00,x)	                lda (0,x)
.881e	85 28		sta $28		                sta tmp3                ; keep copy of status byte for NN
.8820	29 02		and #$02	                and #AN                 ; mask all but Always Native (AN) bit
.8822	f0 0d		beq $8831	                beq _compile_check
.8824	a5 2c		lda $2c		                lda tmptos
.8826	95 00		sta $00,x	                sta 0,x
.8828	a5 2d		lda $2d		                lda tmptos+1
.882a	95 01		sta $01,x	                sta 1,x
.882c	20 69 a7	jsr $a769	                jsr xt_wordsize         ; ( nt -- u )
.882f	80 27		bra $8858	                bra _compile_as_code
.8831					_compile_check:
.8831	a5 28		lda $28		                lda tmp3
.8833	29 08		and #$08	                and #NN
.8835	f0 03		beq $883a	                beq _check_size_limit
.8837	4c f6 88	jmp $88f6	                jmp _compile_as_jump    ; too far for BRA
.883a					_check_size_limit:
.883a	a5 2c		lda $2c		                lda tmptos
.883c	95 00		sta $00,x	                sta 0,x
.883e	a5 2d		lda $2d		                lda tmptos+1
.8840	95 01		sta $01,x	                sta 1,x
.8842	20 69 a7	jsr $a769	                jsr xt_wordsize         ; ( nt -- u )
.8845	b5 01		lda $01,x	                lda 1,x
.8847	c5 1b		cmp $1b		                cmp nc_limit+1
.8849	90 0d		bcc $8858	                bcc _compile_as_code    ; user-defined limit MSB
.884b	d0 08		bne $8855	                bne _jumpto_compile_as_jump
.884d	b5 00		lda $00,x	                lda 0,x
.884f	c5 1a		cmp $1a		                cmp nc_limit            ; user-defined limit LSB
.8851	90 05		bcc $8858	                bcc _compile_as_code    ; Allow native compiling for less
.8853	f0 03		beq $8858	                beq _compile_as_code    ; than or equal to the limit.
.8855					_jumpto_compile_as_jump:
.8855	4c f6 88	jmp $88f6	                jmp _compile_as_jump    ; too far for BRA
.8858					_compile_as_code:
.8858	ca		dex		                dex
.8859	ca		dex		                dex                     ; ( -- u ? )
.885a	ca		dex		                dex
.885b	ca		dex		                dex                     ; ( -- u ? ? )
.885c	b5 04		lda $04,x	                lda 4,x
.885e	95 00		sta $00,x	                sta 0,x                 ; LSB of u
.8860	b5 05		lda $05,x	                lda 5,x
.8862	95 01		sta $01,x	                sta 1,x                 ; ( -- u ? u )
.8864	68		pla		                pla
.8865	95 04		sta $04,x	                sta 4,x                 ; LSB of xt
.8867	68		pla		                pla
.8868	95 05		sta $05,x	                sta 5,x                 ; ( -- xt ? u )
.886a	a5 00		lda $00		                lda cp                  ; LSB of cp
.886c	95 02		sta $02,x	                sta 2,x
.886e	a5 01		lda $01		                lda cp+1
.8870	95 03		sta $03,x	                sta 3,x                 ; ( -- xt cp u )
.8872	a0 00		ldy #$00	                ldy #0
.8874					_strip_loop:
.8874	b9 e4 88	lda $88e4,y	                lda _strip_table,y      ; LSB of first word
.8877	d5 04		cmp $04,x	                cmp 4,x                 ; LSB of xt
.8879	d0 07		bne $8882	                bne _next_entry
.887b	b9 e5 88	lda $88e5,y	                lda _strip_table+1,y
.887e	d5 05		cmp $05,x	                cmp 5,x
.8880	f0 0c		beq $888e	                beq _found_entry
.8882					_next_entry:
.8882	b9 e4 88	lda $88e4,y	                lda _strip_table,y      ; pointing to LSB
.8885	19 e5 88	ora $88e5,y	                ora _strip_table+1,y    ; get MSB
.8888	f0 22		beq $88ac	                beq _underflow_strip    ; table done, let's get out of here
.888a	c8		iny		                iny
.888b	c8		iny		                iny
.888c	80 e6		bra $8874	                bra _strip_loop
.888e					_found_entry:
.888e	98		tya		                tya
.888f	4a		lsr a		                lsr
.8890	a8		tay		                tay
.8891	b9 f0 88	lda $88f0,y	                lda _strip_size,y
.8894	85 2c		sta $2c		                sta tmptos              ; save a copy
.8896	18		clc		                clc
.8897	75 04		adc $04,x	                adc 4,x
.8899	95 04		sta $04,x	                sta 4,x
.889b	90 02		bcc $889f	                bcc+
.889d	f6 05		inc $05,x	                inc 5,x                 ; we just care about the carry
.889f					+
.889f	06 2c		asl $2c		                asl tmptos
.88a1	38		sec		                sec
.88a2	b5 00		lda $00,x	                lda 0,x
.88a4	e5 2c		sbc $2c		                sbc tmptos
.88a6	95 00		sta $00,x	                sta 0,x
.88a8	b0 02		bcs $88ac	                bcs +
.88aa	d6 01		dec $01,x	                dec 1,x                 ; we just care about the borrow
.88ac					+
.88ac					_underflow_strip:
.88ac	a5 1c		lda $1c		                lda uf_strip
.88ae	05 1d		ora $1d		                ora uf_strip+1
.88b0	f0 1c		beq $88ce	                beq _specials_done
.88b2	a5 28		lda $28		                lda tmp3
.88b4	29 10		and #$10	                and #UF
.88b6	f0 16		beq $88ce	                beq _specials_done
.88b8	18		clc		                clc
.88b9	b5 04		lda $04,x	                lda 4,x
.88bb	69 03		adc #$03	                adc #3
.88bd	95 04		sta $04,x	                sta 4,x
.88bf	90 02		bcc $88c3	                bcc +
.88c1	f6 05		inc $05,x	                inc 5,x                  ; we just care about the carry
.88c3					+
.88c3	38		sec		                sec
.88c4	b5 00		lda $00,x	                lda 0,x
.88c6	e9 03		sbc #$03	                sbc #3
.88c8	95 00		sta $00,x	                sta 0,x
.88ca	b0 02		bcs $88ce	                bcs +
.88cc	d6 01		dec $01,x	                dec 1,x                  ; we just care about the borrow
.88ce					+
.88ce					_specials_done:
.88ce	b5 01		lda $01,x	                lda 1,x                 ; MSB
.88d0	48		pha		                pha
.88d1	b5 00		lda $00,x	                lda 0,x                 ; LSB
.88d3	48		pha		                pha
.88d4	20 e5 95	jsr $95e5	                jsr xt_move
.88d7	18		clc		                clc
.88d8	68		pla		                pla                     ; LSB
.88d9	65 00		adc $00		                adc cp
.88db	85 00		sta $00		                sta cp
.88dd	68		pla		                pla                     ; MSB
.88de	65 01		adc $01		                adc cp+1
.88e0	85 01		sta $01		                sta cp+1
.88e2	80 2c		bra $8910	                bra _done
.88e4					_strip_table:
>88e4	b5 9a a0 9a 64 a3		                .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
>88ea	96 a4 1c a4 00 00		                .word xt_two_to_r, xt_two_r_from, 0000  ; 2>R, 2R>, EOL
.88f0					_strip_size:
>88f0	04 04 04 06 06 00		                .byte 4, 4, 4, 6, 6, 0          ; R>, R@, >R, 2>R, 2R>, EOL
.88f6					_compile_as_jump:
.88f6	a9 20		lda #$20	                lda #$20
.88f8	92 00		sta ($00)	                sta (cp)
.88fa	a0 01		ldy #$01	                ldy #1
.88fc	68		pla		                pla             ; LSB
.88fd	91 00		sta ($00),y	                sta (cp),y
.88ff	c8		iny		                iny
.8900	68		pla		                pla             ; MSB
.8901	91 00		sta ($00),y	                sta (cp),y
.8903	a9 03		lda #$03	                lda #3
.8905	18		clc		                clc
.8906	65 00		adc $00		                adc cp
.8908	85 00		sta $00		                sta cp
.890a	90 02		bcc $890e	                bcc +
.890c	e6 01		inc $01		                inc cp+1
.890e					+
.890e	e8		inx		                inx             ; drop xt
.890f	e8		inx		                inx
.8910					_done:
.8910					z_compile_comma:
.8910	60		rts		                rts
.8911					xt_compile_only:
.8911	20 6d d7	jsr $d76d	                jsr current_to_dp
.8914	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.8916	b1 02		lda ($02),y	                lda (dp),y
.8918	09 01		ora #$01	                ora #CO        ; make sure bit 7 is set
.891a	91 02		sta ($02),y	                sta (dp),y
.891c	60		rts		z_compile_only: rts
.891d					xt_value:
.891d					xt_constant:
.891d	20 38 d8	jsr $d838	                jsr underflow_1
.8920	20 75 89	jsr $8975	                jsr xt_create
.8923	38		sec		                sec
.8924	a5 00		lda $00		                lda cp
.8926	e9 02		sbc #$02	                sbc #2
.8928	85 24		sta $24		                sta tmp1
.892a	a5 01		lda $01		                lda cp+1
.892c	e9 00		sbc #$00	                sbc #0
.892e	85 25		sta $25		                sta tmp1+1
.8930	a9 e7		lda #$e7	                lda #<doconst           ; LSB of DOCONST
.8932	92 24		sta ($24)	                sta (tmp1)
.8934	a0 01		ldy #$01	                ldy #1
.8936	a9 d6		lda #$d6	                lda #>doconst           ; MSB of DOCONST
.8938	91 24		sta ($24),y	                sta (tmp1),y
.893a	20 7a 87	jsr $877a	                jsr xt_comma            ; drop through to adjust_z
.893d					adjust_z:
.893d	20 47 93	jsr $9347	                jsr xt_latestnt         ; gives us ( -- nt )
.8940	b5 00		lda $00,x	                lda 0,x
.8942	85 24		sta $24		                sta tmp1
.8944	b5 01		lda $01,x	                lda 1,x
.8946	85 25		sta $25		                sta tmp1+1
.8948	a0 06		ldy #$06	                ldy #6
.894a	b1 24		lda ($24),y	                lda (tmp1),y
.894c	18		clc		                clc
.894d	69 02		adc #$02	                adc #2
.894f	91 24		sta ($24),y	                sta (tmp1),y
.8951	c8		iny		                iny
.8952	b1 24		lda ($24),y	                lda (tmp1),y
.8954	69 00		adc #$00	                adc #0                  ; only need carry
.8956	91 24		sta ($24),y	                sta (tmp1),y
.8958	e8		inx		                inx
.8959	e8		inx		                inx
.895a					z_value:
.895a	60		rts		z_constant:     rts
.895b					xt_count:
.895b	20 38 d8	jsr $d838	                jsr underflow_1
.895e	a1 00		lda ($00,x)	                lda (0,x)       ; Get number of characters (255 max)
.8960	a8		tay		                tay
.8961	f6 00		inc $00,x	                inc 0,x         ; LSB
.8963	d0 02		bne $8967	                bne +
.8965	f6 01		inc $01,x	                inc 1,x         ; MSB
.8967	98		tya		+               tya
.8968	ca		dex		                dex
.8969	ca		dex		                dex
.896a	95 00		sta $00,x	                sta 0,x         ; LSB
.896c	74 01		stz $01,x	                stz 1,x         ; MSB, always zero
.896e	60		rts		z_count:        rts
.896f					xt_cr:
.896f	a9 0a		lda #$0a	                lda #AscLF
.8971	20 02 8e	jsr $8e02	                jsr emit_a
.8974	60		rts		z_cr:           rts
.8975					xt_create:
.8975	20 02 99	jsr $9902	                jsr xt_parse_name       ; ( addr u )
.8978	b5 00		lda $00,x	                lda 0,x
.897a	15 01		ora $01,x	                ora 1,x
.897c	d0 05		bne $8983	                bne _got_name
.897e	a9 05		lda #$05	                lda #err_noname
.8980	4c 4e d8	jmp $d84e	                jmp error
.8983					_got_name:
.8983	74 01		stz $01,x	                stz 1,x
.8985	20 ac a3	jsr $a3ac	                jsr xt_two_dup          ; ( addr u addr u )
.8988	20 e7 8f	jsr $8fe7	                jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
.898b	b5 00		lda $00,x	                lda 0,x
.898d	15 01		ora $01,x	                ora 1,x
.898f	f0 1e		beq $89af	                beq _new_name           ; We haven't seen this one before.
.8991	e8		inx		                inx                     ; Drop flag (nt) from find-name.
.8992	e8		inx		                inx
.8993	24 20		bit $20		                bit status
.8995	10 08		bpl $899f	                bpl _redefined_name     ; Bit 7 is zero, so print the message.
.8997	a9 80		lda #$80	                lda #$80                ; Set bit 7 to indicate dup
.8999	05 20		ora $20		                ora status
.899b	85 20		sta $20		                sta status
.899d	80 18		bra $89b7	                bra _process_name
.899f					_redefined_name:
.899f	a9 02		lda #$02	                lda #str_redefined
.89a1	20 74 d8	jsr $d874	                jsr print_string_no_lf
.89a4	20 ac a3	jsr $a3ac	                jsr xt_two_dup           ; ( addr u addr u )
.89a7	20 f7 a4	jsr $a4f7	                jsr xt_type
.89aa	20 12 a1	jsr $a112	                jsr xt_space
.89ad	80 08		bra $89b7	                bra _process_name
.89af					_new_name:
.89af	e8		inx		                inx                     ; Drop flag (0) from find-name.
.89b0	e8		inx		                inx
.89b1	a9 7f		lda #$7f	                lda #$7F                ; Clear bit 0 of status to indicate new word.
.89b3	25 20		and $20		                and status
.89b5	85 20		sta $20		                sta status
.89b7					_process_name:
.89b7	b5 00		lda $00,x	                lda 0,x
.89b9	85 26		sta $26		                sta tmp2                ; store length of string in tmp2
.89bb	a5 00		lda $00		                lda cp
.89bd	85 24		sta $24		                sta tmp1
.89bf	a5 01		lda $01		                lda cp+1
.89c1	85 25		sta $25		                sta tmp1+1
.89c3	b5 00		lda $00,x	                lda 0,x
.89c5	18		clc		                clc
.89c6	69 08		adc #$08	                adc #8
.89c8	85 28		sta $28		                sta tmp3                ; total header length
.89ca	18		clc		                clc
.89cb	69 03		adc #$03	                adc #3
.89cd	95 00		sta $00,x	                sta 0,x
.89cf	74 01		stz $01,x	                stz 1,x         ; max header size is 255 chars
.89d1	20 95 82	jsr $8295	                jsr xt_allot    ; ( addr )
.89d4	20 6d d7	jsr $d76d	                jsr current_to_dp
.89d7	a0 00		ldy #$00	                ldy #0
.89d9	a5 26		lda $26		                lda tmp2
.89db	91 24		sta ($24),y	                sta (tmp1),y
.89dd	a9 08		lda #$08	                lda #NN
.89df	09 20		ora #$20	                ora #HC
.89e1	c8		iny		                iny
.89e2	91 24		sta ($24),y	                sta (tmp1),y
.89e4	c8		iny		                iny
.89e5	a5 02		lda $02		                lda dp
.89e7	91 24		sta ($24),y	                sta (tmp1),y
.89e9	c8		iny		                iny
.89ea	a5 03		lda $03		                lda dp+1
.89ec	91 24		sta ($24),y	                sta (tmp1),y
.89ee	c8		iny		                iny
.89ef	a5 25		lda $25		                lda tmp1+1
.89f1	85 03		sta $03		                sta dp+1
.89f3	a5 24		lda $24		                lda tmp1
.89f5	85 02		sta $02		                sta dp
.89f7	18		clc		                clc
.89f8	65 28		adc $28		                adc tmp3        ; add total header length
.89fa	91 24		sta ($24),y	                sta (tmp1),y
.89fc	48		pha		                pha             ; we need this in the next step
.89fd	c8		iny		                iny
.89fe	a5 25		lda $25		                lda tmp1+1
.8a00	69 00		adc #$00	                adc #0          ; only need the carry
.8a02	91 24		sta ($24),y	                sta (tmp1),y
.8a04	c8		iny		                iny
.8a05	68		pla		                pla             ; LSB of "z_" address
.8a06	18		clc		                clc
.8a07	69 03		adc #$03	                adc #3
.8a09	91 24		sta ($24),y	                sta (tmp1),y
.8a0b	88		dey		                dey             ; get the MSB of xt back
.8a0c	b1 24		lda ($24),y	                lda (tmp1),y
.8a0e	69 00		adc #$00	                adc #0          ; only need the carry
.8a10	c8		iny		                iny
.8a11	c8		iny		                iny
.8a12	91 24		sta ($24),y	                sta (tmp1),y
.8a14	c8		iny		                iny
.8a15	b5 00		lda $00,x	                lda 0,x
.8a17	38		sec		                sec
.8a18	e9 08		sbc #$08	                sbc #8
.8a1a	85 2c		sta $2c		                sta tmptos
.8a1c	b5 01		lda $01,x	                lda 1,x
.8a1e	e9 00		sbc #$00	                sbc #0          ; only need carry
.8a20	85 2d		sta $2d		                sta tmptos+1
.8a22					_name_loop:
.8a22	b1 2c		lda ($2c),y	                lda (tmptos),y
.8a24	c9 5b		cmp #$5b	                cmp #$5B         ; ASCII '[' (one past Z)
.8a26	b0 07		bcs $8a2f	                bcs _store_name
.8a28	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.8a2a	90 03		bcc $8a2f	                bcc _store_name
.8a2c	18		clc		                clc
.8a2d	69 20		adc #$20	                adc #$20
.8a2f					_store_name:
.8a2f	91 24		sta ($24),y	                sta (tmp1),y
.8a31	c8		iny		                iny
.8a32	c6 26		dec $26		                dec tmp2
.8a34	d0 ec		bne $8a22	                bne _name_loop
.8a36	a9 20		lda #$20	                lda #$20        ; opcode of JSR
.8a38	91 24		sta ($24),y	                sta (tmp1),y
.8a3a	c8		iny		                iny
.8a3b	a9 2d		lda #$2d	                lda #<dovar
.8a3d	91 24		sta ($24),y	                sta (tmp1),y
.8a3f	c8		iny		                iny
.8a40	a9 d7		lda #$d7	                lda #>dovar
.8a42	91 24		sta ($24),y	                sta (tmp1),y
.8a44	20 80 d7	jsr $d780	                jsr dp_to_current
.8a47	e8		inx		                inx
.8a48	e8		inx		                inx
.8a49	60		rts		z_create:       rts
.8a4a					xt_d_minus:
.8a4a	20 47 d8	jsr $d847	                jsr underflow_4 ; two double numbers
.8a4d	38		sec		                sec
.8a4e	b5 06		lda $06,x	                lda 6,x         ; LSB of lower word
.8a50	f5 02		sbc $02,x	                sbc 2,x
.8a52	95 06		sta $06,x	                sta 6,x
.8a54	b5 07		lda $07,x	                lda 7,x         ; MSB of lower word
.8a56	f5 03		sbc $03,x	                sbc 3,x
.8a58	95 07		sta $07,x	                sta 7,x
.8a5a	b5 04		lda $04,x	                lda 4,x         ; LSB of upper word
.8a5c	f5 00		sbc $00,x	                sbc 0,x
.8a5e	95 04		sta $04,x	                sta 4,x
.8a60	b5 05		lda $05,x	                lda 5,x         ; MSB of upper word
.8a62	f5 01		sbc $01,x	                sbc 1,x
.8a64	95 05		sta $05,x	                sta 5,x
.8a66	e8		inx		                inx
.8a67	e8		inx		                inx
.8a68	e8		inx		                inx
.8a69	e8		inx		                inx
.8a6a	60		rts		z_d_minus:      rts
.8a6b					xt_d_plus:
.8a6b	20 47 d8	jsr $d847	                jsr underflow_4 ; two double numbers
.8a6e	18		clc		                clc
.8a6f	b5 02		lda $02,x	                lda 2,x         ; LSB of lower word
.8a71	75 06		adc $06,x	                adc 6,x
.8a73	95 06		sta $06,x	                sta 6,x
.8a75	b5 03		lda $03,x	                lda 3,x         ; MSB of lower word
.8a77	75 07		adc $07,x	                adc 7,x
.8a79	95 07		sta $07,x	                sta 7,x
.8a7b	b5 00		lda $00,x	                lda 0,x         ; LSB of upper word
.8a7d	75 04		adc $04,x	                adc 4,x
.8a7f	95 04		sta $04,x	                sta 4,x
.8a81	b5 01		lda $01,x	                lda 1,x         ; MSB of upper word
.8a83	75 05		adc $05,x	                adc 5,x
.8a85	95 05		sta $05,x	                sta 5,x
.8a87	e8		inx		                inx
.8a88	e8		inx		                inx
.8a89	e8		inx		                inx
.8a8a	e8		inx		                inx
.8a8b	60		rts		z_d_plus:       rts
.8a8c					xt_d_to_s:
.8a8c	20 3d d8	jsr $d83d	                jsr underflow_2
.8a8f	e8		inx		                inx
.8a90	e8		inx		                inx
.8a91	60		rts		z_d_to_s:       rts
.8a92					xt_dabs:
.8a92	20 3d d8	jsr $d83d	                jsr underflow_2 ; double number
.8a95	b5 01		lda $01,x	                lda 1,x         ; MSB of high cell
.8a97	10 17		bpl $8ab0	                bpl _done       ; positive, we get off light
.8a99	a0 00		ldy #$00	                ldy #0
.8a9b	38		sec		                sec
.8a9c	98		tya		                tya
.8a9d	f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.8a9f	95 02		sta $02,x	                sta 2,x
.8aa1	98		tya		                tya
.8aa2	f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.8aa4	95 03		sta $03,x	                sta 3,x
.8aa6	98		tya		                tya
.8aa7	f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.8aa9	95 00		sta $00,x	                sta 0,x
.8aab	98		tya		                tya
.8aac	f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.8aae	95 01		sta $01,x	                sta 1,x
.8ab0					_done:
.8ab0	60		rts		z_dabs:         rts
.8ab1					xt_decimal:
.8ab1	a9 0a		lda #$0a	                lda #10
.8ab3	85 18		sta $18		                sta base
.8ab5	64 19		stz $19		                stz base+1              ; paranoid
.8ab7	60		rts		z_decimal:      rts
.8ab8					xt_defer:
.8ab8	20 75 89	jsr $8975	                jsr xt_create
.8abb	a5 00		lda $00		                lda cp          ; LSB
.8abd	38		sec		                sec
.8abe	e9 02		sbc #$02	                sbc #2
.8ac0	85 24		sta $24		                sta tmp1
.8ac2	a5 01		lda $01		                lda cp+1        ; MSB
.8ac4	e9 00		sbc #$00	                sbc #0          ; we only care about the borrow
.8ac6	85 25		sta $25		                sta tmp1+1
.8ac8	a0 00		ldy #$00	                ldy #0
.8aca	a9 fb		lda #$fb	                lda #<dodefer   ; LSB
.8acc	91 24		sta ($24),y	                sta (tmp1),y
.8ace	c8		iny		                iny
.8acf	a9 d6		lda #$d6	                lda #>dodefer   ; MSB
.8ad1	91 24		sta ($24),y	                sta (tmp1),y
.8ad3	a9 0f		lda #$0f	                lda #<defer_error
.8ad5	92 00		sta ($00)	                sta (cp)
.8ad7	e6 00		inc $00		                inc cp
.8ad9	d0 02		bne $8add	                bne +
.8adb	e6 01		inc $01		                inc cp+1
.8add					+
.8add	a9 d7		lda #$d7	                lda #>defer_error
.8adf	92 00		sta ($00)	                sta (cp)
.8ae1	e6 00		inc $00		                inc cp
.8ae3	d0 02		bne $8ae7	                bne +
.8ae5	e6 01		inc $01		                inc cp+1
.8ae7					+
.8ae7	20 3d 89	jsr $893d	                jsr adjust_z    ; adjust header to correct length
.8aea	60		rts		z_defer:        rts
.8aeb					xt_defer_fetch:
.8aeb	20 81 a2	jsr $a281	                jsr xt_to_body
.8aee	20 8c 8f	jsr $8f8c	                jsr xt_fetch
.8af1	60		rts		z_defer_fetch:  rts
.8af2					xt_defer_store:
.8af2	20 81 a2	jsr $a281	                jsr xt_to_body
.8af5	20 81 a1	jsr $a181	                jsr xt_store
.8af8	60		rts		z_defer_store:  rts
.8af9					xt_definitions:
.8af9	a0 1f		ldy #$1f	                ldy #search_order_offset    ; Transfer byte variable
.8afb	b1 1e		lda ($1e),y	                lda (up),y                  ; SEARCH_ORDER[0] to
.8afd	a0 04		ldy #$04	                ldy #current_offset         ; byte variable CURRENT.
.8aff	91 1e		sta ($1e),y	                sta (up),y
.8b01	60		rts		z_definitions:  rts
.8b02					xt_depth:
.8b02	a9 78		lda #$78	                lda #dsp0
.8b04	86 2a		stx $2a		                stx tmpdsp
.8b06	38		sec		                sec
.8b07	e5 2a		sbc $2a		                sbc tmpdsp
.8b09	4a		lsr a		                lsr
.8b0a	ca		dex		                dex
.8b0b	ca		dex		                dex
.8b0c	95 00		sta $00,x	                sta 0,x
.8b0e	74 01		stz $01,x	                stz 1,x
.8b10	60		rts		z_depth:        rts
.8b11					xt_digit_question:
.8b11	20 38 d8	jsr $d838	                jsr underflow_1
.8b14	ca		dex		                dex
.8b15	ca		dex		                dex
.8b16	74 00		stz $00,x	                stz 0,x                 ; default flag is failure
.8b18	74 01		stz $01,x	                stz 1,x
.8b1a	74 03		stz $03,x	                stz 3,x                 ; paranoid
.8b1c	b5 02		lda $02,x	                lda 2,x
.8b1e	c9 30		cmp #$30	                cmp #'0'
.8b20	90 23		bcc $8b45	                bcc _done               ; failure flag already set
.8b22	c9 3a		cmp #$3a	                cmp #'9'+1               ; this is actually ":"
.8b24	90 12		bcc $8b38	                bcc _checkbase
.8b26	c9 41		cmp #$41	                cmp #'A'
.8b28	90 1b		bcc $8b45	                bcc _done               ; failure flag is already set
.8b2a	c9 61		cmp #$61	                cmp #'a'
.8b2c	90 07		bcc $8b35	                bcc _case_done          ; not lower case, too low
.8b2e	c9 7b		cmp #$7b	                cmp #'z'+1
.8b30	b0 03		bcs $8b35	                bcs _case_done          ; not lower case, too high
.8b32	18		clc		                clc                     ; just right
.8b33	69 e0		adc #$e0	                adc #$e0                ; offset to upper case (wraps)
.8b35					_case_done:
.8b35	38		sec		                sec
.8b36	e9 07		sbc #$07	                sbc #7                  ; fall through to _checkbase
.8b38					_checkbase:
.8b38	38		sec		                sec
.8b39	e9 30		sbc #$30	                sbc #'0'                 ; this is also the conversion step
.8b3b	c5 18		cmp $18		                cmp base
.8b3d	b0 06		bcs $8b45	                bcs _done               ; already have false flag
.8b3f	95 02		sta $02,x	                sta 2,x                 ; put number in NOS
.8b41	d6 00		dec $00,x	                dec 0,x                 ; set success flag
.8b43	d6 01		dec $01,x	                dec 1,x
.8b45					_done:
.8b45					z_digit_question:
.8b45	60		rts		                rts
.8b46					xt_disasm:
.8b46	20 3d d8	jsr $d83d	                jsr underflow_2
.8b49	20 cb ac	jsr $accb	                jsr disassembler
.8b4c	60		rts		z_disasm:       rts
.8b4d					xt_dnegate:
.8b4d	20 3d d8	jsr $d83d	                jsr underflow_2 ; double number
.8b50	a0 00		ldy #$00	     		ldy #0
.8b52	38		sec		                sec
.8b53	98		tya		                tya
.8b54	f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.8b56	95 02		sta $02,x	                sta 2,x
.8b58	98		tya		                tya
.8b59	f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.8b5b	95 03		sta $03,x	                sta 3,x
.8b5d	98		tya		                tya
.8b5e	f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.8b60	95 00		sta $00,x	                sta 0,x
.8b62	98		tya		                tya
.8b63	f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.8b65	95 01		sta $01,x	                sta 1,x
.8b67	60		rts		z_dnegate:      rts
.8b68					xt_question_do:
.8b68	a9 ff		lda #$ff	                lda #$ff                ; -1 is ?DO, jump to common code
.8b6a	85 24		sta $24		                sta tmp1
.8b6c	80 02		bra $8b70	                bra do_common           ; skip flag for DO
.8b6e					xt_do:
.8b6e	64 24		stz $24		                stz tmp1                ; 0 is DO, drop through to DO_COMMON
.8b70					do_common:
.8b70	ca		dex		                dex
.8b71	ca		dex		                dex
.8b72	a5 00		lda $00		                lda cp
.8b74	95 00		sta $00,x	                sta 0,x                 ; LSB
.8b76	a5 01		lda $01		                lda cp+1
.8b78	95 01		sta $01,x	                sta 1,x                 ; MSB   ( limit start here )
.8b7a	a9 05		lda #$05	                lda #5                  ; we don't really care about the value,
.8b7c	a8		tay		                tay                     ; so we use 5 to be tricky
.8b7d					_loop:
.8b7d	91 00		sta ($00),y	                sta (CP),y
.8b7f	88		dey		                dey
.8b80	10 fb		bpl $8b7d	                bpl _loop
.8b82	1a		inc a		                ina             ; we used 5 as a dummy value, this is why
.8b83	18		clc		                clc
.8b84	65 00		adc $00		                adc CP
.8b86	85 00		sta $00		                sta CP
.8b88	90 02		bcc $8b8c	                bcc +
.8b8a	e6 01		inc $01		                inc CP+1
.8b8c					+
.8b8c	a5 24		lda $24		                lda tmp1
.8b8e	f0 17		beq $8ba7	                beq _compile_do
.8b90	a0 14		ldy #$14	                ldy #question_do_runtime_end-question_do_runtime
.8b92	5a		phy		                phy             ; save counter to calculate new CP
.8b93					-
.8b93	b9 ed 8b	lda $8bed,y	                lda question_do_runtime,y
.8b96	91 00		sta ($00),y	                sta (cp),y
.8b98	88		dey		                dey
.8b99	10 f8		bpl $8b93	                bpl -
.8b9b	68		pla		                pla             ; retrieve counter
.8b9c	18		clc		                clc
.8b9d	65 00		adc $00		                adc cp
.8b9f	85 00		sta $00		                sta cp
.8ba1	a5 01		lda $01		                lda cp+1
.8ba3	69 00		adc #$00	                adc #0          ; only care about carry
.8ba5	85 01		sta $01		                sta cp+1        ; fall through to _compile_do
.8ba7					_compile_do:
.8ba7	a0 24		ldy #$24	                ldy #do_runtime_end-do_runtime  ; counter
.8ba9	5a		phy		                phy             ; save counter to calculate new CP
.8baa					-
.8baa	b9 c9 8b	lda $8bc9,y	                lda do_runtime,y
.8bad	91 00		sta ($00),y	                sta (cp),y
.8baf	88		dey		                dey
.8bb0	10 f8		bpl $8baa	                bpl -
.8bb2	68		pla		                pla             ; retrieve counter
.8bb3	18		clc		                clc
.8bb4	65 00		adc $00		                adc cp
.8bb6	85 00		sta $00		                sta cp
.8bb8	a5 01		lda $01		                lda cp+1
.8bba	69 00		adc #$00	                adc #0          ; only care about carry
.8bbc	85 01		sta $01		                sta cp+1
.8bbe	ca		dex		                dex
.8bbf	ca		dex		                dex
.8bc0	a5 00		lda $00		                lda CP          ; LSB
.8bc2	95 00		sta $00,x	                sta 0,x
.8bc4	a5 01		lda $01		                lda CP+1        ; MSB
.8bc6	95 01		sta $01,x	                sta 1,x
.8bc8					z_question_do:
.8bc8	60		rts		z_do:           rts
.8bc9					do_runtime:
.8bc9	38		sec		                sec
.8bca	a9 00		lda #$00	                lda #0
.8bcc	f5 02		sbc $02,x	                sbc 2,x         ; LSB of limit
.8bce	95 02		sta $02,x	                sta 2,x         ; save FUFA for later use
.8bd0	a9 80		lda #$80	                lda #$80
.8bd2	f5 03		sbc $03,x	                sbc 3,x         ; MSB of limit
.8bd4	95 03		sta $03,x	                sta 3,x         ; save FUFA for later use
.8bd6	48		pha		                pha             ; FUFA replaces limit on R stack
.8bd7	b5 02		lda $02,x	                lda 2,x         ; LSB of limit
.8bd9	48		pha		                pha
.8bda	18		clc		                clc
.8bdb	b5 00		lda $00,x	                lda 0,x         ; LSB of original index
.8bdd	75 02		adc $02,x	                adc 2,x         ; add LSB of FUFA
.8bdf	95 00		sta $00,x	                sta 0,x
.8be1	b5 01		lda $01,x	                lda 1,x         ; MSB of orginal index
.8be3	75 03		adc $03,x	                adc 3,x         ; add MSB of FUFA
.8be5	48		pha		                pha
.8be6	b5 00		lda $00,x	                lda 0,x         ; LSB of index
.8be8	48		pha		                pha
.8be9	e8		inx		                inx
.8bea	e8		inx		                inx
.8beb	e8		inx		                inx
.8bec	e8		inx		                inx             ; no RTS because this is copied into code
.8bed					do_runtime_end:
.8bed					question_do_runtime:
.8bed	20 ac a3	jsr $a3ac	                jsr xt_two_dup          ; ( n1 n2 n1 n2 )
.8bf0	20 da 8e	jsr $8eda	                jsr xt_equal            ; ( -- n1 n2 f )
.8bf3	b5 00		lda $00,x	                lda 0,x
.8bf5	15 01		ora $01,x	                ora 1,x
.8bf7	f0 06		beq $8bff	                beq _do_do
.8bf9	8a		txa		                txa
.8bfa	18		clc		                clc
.8bfb	69 06		adc #$06	                adc #6
.8bfd	aa		tax		                tax
.8bfe	60		rts		                rts
.8bff					_do_do:
.8bff	e8		inx		                inx             ; clear flag from EQUAL off stack
.8c00	e8		inx		                inx             ; no RTS because this is copied into code
.8c01					question_do_runtime_end:
.8c01					xt_does:
.8c01	a0 8c		ldy #$8c	                ldy #>does_runtime
.8c03	a9 10		lda #$10	                lda #<does_runtime
.8c05	20 ce d6	jsr $d6ce	                jsr cmpl_subroutine
.8c08	a0 d7		ldy #$d7	                ldy #>dodoes
.8c0a	a9 14		lda #$14	                lda #<dodoes
.8c0c	20 ce d6	jsr $d6ce	                jsr cmpl_subroutine
.8c0f	60		rts		z_does:         rts
.8c10					does_runtime:
.8c10	7a		ply		                ply             ; LSB
.8c11	68		pla		                pla             ; MSB
.8c12	c8		iny		                iny
.8c13	d0 01		bne $8c16	                bne +
.8c15	1a		inc a		                ina
.8c16					+
.8c16	84 24		sty $24		                sty tmp1
.8c18	85 25		sta $25		                sta tmp1+1
.8c1a	20 6d d7	jsr $d76d	                jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
.8c1d	a5 02		lda $02		                lda dp
.8c1f	18		clc		                clc
.8c20	69 04		adc #$04	                adc #4
.8c22	85 26		sta $26		                sta tmp2
.8c24	a5 03		lda $03		                lda dp+1
.8c26	69 00		adc #$00	                adc #0          ; we only care about the carry
.8c28	85 27		sta $27		                sta tmp2+1
.8c2a	b2 26		lda ($26)	                lda (tmp2)
.8c2c	18		clc		                clc
.8c2d	69 01		adc #$01	                adc #1
.8c2f	85 28		sta $28		                sta tmp3
.8c31	a0 01		ldy #$01	                ldy #1
.8c33	b1 26		lda ($26),y	                lda (tmp2),y
.8c35	69 00		adc #$00	                adc #0          ; we only care about the carry
.8c37	85 29		sta $29		                sta tmp3+1
.8c39	a5 24		lda $24		                lda tmp1        ; LSB
.8c3b	92 28		sta ($28)	                sta (tmp3)
.8c3d	a5 25		lda $25		                lda tmp1+1
.8c3f	91 28		sta ($28),y	                sta (tmp3),y    ; Y is still 1
.8c41	60		rts		                rts
.8c42					xt_dot:
.8c42	20 38 d8	jsr $d838	                jsr underflow_1
.8c45	20 bb 8d	jsr $8dbb	                jsr xt_dup                      ; ( n n )
.8c48	20 23 81	jsr $8123	                jsr xt_abs                      ; ( n u )
.8c4b	20 9c a7	jsr $a79c	                jsr xt_zero                     ; ( n u 0 )
.8c4e	20 66 93	jsr $9366	                jsr xt_less_number_sign         ; ( n u 0 )
.8c51	20 01 98	jsr $9801	                jsr xt_number_sign_s            ; ( n ud )
.8c54	20 7a 9b	jsr $9b7a	                jsr xt_rot                      ; ( ud n )
.8c57	20 db 9f	jsr $9fdb	                jsr xt_sign                     ; ( ud )
.8c5a	20 df 97	jsr $97df	                jsr xt_number_sign_greater      ; ( addr u )
.8c5d	20 f7 a4	jsr $a4f7	                jsr xt_type
.8c60	20 12 a1	jsr $a112	                jsr xt_space
.8c63	60		rts		z_dot:          rts
.8c64					xt_dot_paren:
.8c64	ca		dex		                dex
.8c65	ca		dex		                dex
.8c66	a9 29		lda #$29	                lda #41     ; Right parenthesis
.8c68	95 00		sta $00,x	                sta 0,x
.8c6a	74 01		stz $01,x	                stz 1,x
.8c6c	20 5d 99	jsr $995d	                jsr xt_parse
.8c6f	20 f7 a4	jsr $a4f7	                jsr xt_type
.8c72	60		rts		z_dot_paren:    rts
.8c73					xt_dot_quote:
.8c73	20 72 9d	jsr $9d72	                jsr xt_s_quote
.8c76	a0 a4		ldy #$a4	                ldy #>xt_type
.8c78	a9 f7		lda #$f7	                lda #<xt_type
.8c7a	20 ce d6	jsr $d6ce	                jsr cmpl_subroutine
.8c7d	60		rts		z_dot_quote:    rts
.8c7e					xt_dot_r:
.8c7e	20 3d d8	jsr $d83d	                jsr underflow_2
.8c81	20 64 a3	jsr $a364	                jsr xt_to_r
.8c84	20 bb 8d	jsr $8dbb	                jsr xt_dup
.8c87	20 23 81	jsr $8123	                jsr xt_abs
.8c8a	20 9c a7	jsr $a79c	                jsr xt_zero
.8c8d	20 66 93	jsr $9366	                jsr xt_less_number_sign
.8c90	20 01 98	jsr $9801	                jsr xt_number_sign_s
.8c93	20 7a 9b	jsr $9b7a	                jsr xt_rot
.8c96	20 db 9f	jsr $9fdb	                jsr xt_sign
.8c99	20 df 97	jsr $97df	                jsr xt_number_sign_greater
.8c9c	20 b5 9a	jsr $9ab5	                jsr xt_r_from
.8c9f	20 b6 98	jsr $98b6	                jsr xt_over
.8ca2	20 73 95	jsr $9573	                jsr xt_minus
.8ca5	20 18 a1	jsr $a118	                jsr xt_spaces
.8ca8	20 f7 a4	jsr $a4f7	                jsr xt_type
.8cab	60		rts		z_dot_r:        rts
.8cac					xt_dot_s:
.8cac	20 02 8b	jsr $8b02	                jsr xt_depth    ; ( -- u )
.8caf	a9 3c		lda #$3c	                lda #$3c        ; ASCII for "<"
.8cb1	20 02 8e	jsr $8e02	                jsr emit_a
.8cb4	b5 00		lda $00,x	                lda 0,x
.8cb6	48		pha		                pha
.8cb7	ca		dex		                dex             ; DUP
.8cb8	ca		dex		                dex
.8cb9	95 00		sta $00,x	                sta 0,x
.8cbb	74 01		stz $01,x	                stz 1,x
.8cbd	20 a5 d8	jsr $d8a5	                jsr print_u
.8cc0	a9 3e		lda #$3e	                lda #$3e        ; ASCII for ">"
.8cc2	20 02 8e	jsr $8e02	                jsr emit_a
.8cc5	a9 20		lda #$20	                lda #AscSP      ; ASCII for SPACE
.8cc7	20 02 8e	jsr $8e02	                jsr emit_a
.8cca	e8		inx		                inx
.8ccb	e8		inx		                inx
.8ccc	e0 78		cpx #$78	                cpx #dsp0
.8cce	f0 1e		beq $8cee	                beq _done
.8cd0					_have_stack:
.8cd0	7a		ply		                ply
.8cd1	a9 77		lda #$77	                lda #dsp0-1     ; go up one to avoid garbage
.8cd3	85 28		sta $28		                sta tmp3
.8cd5	64 29		stz $29		                stz tmp3+1      ; must be zero page on the 65c02
.8cd7					_loop:
.8cd7	ca		dex		                dex
.8cd8	ca		dex		                dex
.8cd9	b2 28		lda ($28)	                lda (tmp3)
.8cdb	95 01		sta $01,x	                sta 1,x
.8cdd	c6 28		dec $28		                dec tmp3
.8cdf	b2 28		lda ($28)	                lda (tmp3)
.8ce1	95 00		sta $00,x	                sta 0,x
.8ce3	c6 28		dec $28		                dec tmp3
.8ce5	5a		phy		                phy
.8ce6	20 42 8c	jsr $8c42	                jsr xt_dot
.8ce9	7a		ply		                ply
.8cea	88		dey		                dey
.8ceb	d0 ea		bne $8cd7	                bne _loop
.8ced	48		pha		                pha             ; dummy to balance stack
.8cee					_done:
.8cee	68		pla		                pla
.8cef	60		rts		z_dot_s:        rts
.8cf0					xt_d_dot:
.8cf0	20 3d d8	jsr $d83d	                jsr underflow_2
.8cf3	20 81 a3	jsr $a381	                jsr xt_tuck
.8cf6	20 92 8a	jsr $8a92	                jsr xt_dabs
.8cf9	20 66 93	jsr $9366	                jsr xt_less_number_sign
.8cfc	20 01 98	jsr $9801	                jsr xt_number_sign_s
.8cff	20 7a 9b	jsr $9b7a	                jsr xt_rot
.8d02	20 db 9f	jsr $9fdb	                jsr xt_sign
.8d05	20 df 97	jsr $97df	                jsr xt_number_sign_greater
.8d08	20 f7 a4	jsr $a4f7	                jsr xt_type
.8d0b	20 12 a1	jsr $a112	                jsr xt_space
.8d0e	60		rts		z_d_dot:        rts
.8d0f					xt_d_dot_r:
.8d0f	20 42 d8	jsr $d842	                jsr underflow_3
.8d12	20 64 a3	jsr $a364	                jsr xt_to_r
.8d15	20 81 a3	jsr $a381	                jsr xt_tuck
.8d18	20 92 8a	jsr $8a92	                jsr xt_dabs
.8d1b	20 66 93	jsr $9366	                jsr xt_less_number_sign
.8d1e	20 01 98	jsr $9801	                jsr xt_number_sign_s
.8d21	20 7a 9b	jsr $9b7a	                jsr xt_rot
.8d24	20 db 9f	jsr $9fdb	                jsr xt_sign
.8d27	20 df 97	jsr $97df	                jsr xt_number_sign_greater
.8d2a	20 b5 9a	jsr $9ab5	                jsr xt_r_from
.8d2d	20 b6 98	jsr $98b6	                jsr xt_over
.8d30	20 73 95	jsr $9573	                jsr xt_minus
.8d33	20 18 a1	jsr $a118	                jsr xt_spaces
.8d36	20 f7 a4	jsr $a4f7	                jsr xt_type
.8d39	60		rts		z_d_dot_r:      rts
.8d3a					xt_drop:
.8d3a	20 38 d8	jsr $d838	                jsr underflow_1
.8d3d	e8		inx		                inx
.8d3e	e8		inx		                inx
.8d3f	60		rts		z_drop:         rts
.8d40					xt_dump:
.8d40	20 3d d8	jsr $d83d	                jsr underflow_2
.8d43					_row:
.8d43	a0 10		ldy #$10	                ldy #16
.8d45	64 26		stz $26		                stz tmp2
.8d47	20 6f 89	jsr $896f	                jsr xt_cr
.8d4a	b5 03		lda $03,x	                lda 3,x
.8d4c	20 3b d7	jsr $d73b	                jsr byte_to_ascii
.8d4f	b5 02		lda $02,x	                lda 2,x
.8d51	20 3b d7	jsr $d73b	                jsr byte_to_ascii
.8d54	20 12 a1	jsr $a112	                jsr xt_space
.8d57	20 12 a1	jsr $a112	                jsr xt_space
.8d5a					_loop:
.8d5a	b5 00		lda $00,x	                lda 0,x
.8d5c	15 01		ora $01,x	                ora 1,x
.8d5e	f0 39		beq $8d99	                beq _all_printed
.8d60	a1 02		lda ($02,x)	                lda (2,x)
.8d62	48		pha		                pha                     ; byte_to_ascii destroys A
.8d63	20 3b d7	jsr $d73b	                jsr byte_to_ascii
.8d66	20 12 a1	jsr $a112	                jsr xt_space
.8d69	68		pla		                pla
.8d6a	20 1e d8	jsr $d81e	                jsr is_printable
.8d6d	b0 02		bcs $8d71	                bcs _printable
.8d6f	a9 2e		lda #$2e	                lda #'.'                 ; Print dot if not printable
.8d71					_printable:
.8d71	5a		phy		                phy                     ; save counter
.8d72	a4 26		ldy $26		                ldy tmp2
.8d74	91 00		sta ($00),y	                sta (cp),y
.8d76	e6 26		inc $26		                inc tmp2
.8d78	7a		ply		                ply
.8d79	c0 09		cpy #$09	                cpy #9
.8d7b	d0 03		bne $8d80	                bne _next_char
.8d7d	20 12 a1	jsr $a112	                jsr xt_space
.8d80					_next_char:
.8d80	f6 02		inc $02,x	                inc 2,x
.8d82	d0 02		bne $8d86	                bne _counter
.8d84	f6 03		inc $03,x	                inc 3,x
.8d86					_counter:
.8d86	b5 00		lda $00,x	                lda 0,x
.8d88	d0 02		bne $8d8c	                bne +
.8d8a	d6 01		dec $01,x	                dec 1,x
.8d8c					+
.8d8c	d6 00		dec $00,x	                dec 0,x
.8d8e	88		dey		                dey
.8d8f	d0 c9		bne $8d5a	                bne _loop               ; next byte
.8d91	20 12 a1	jsr $a112	                jsr xt_space
.8d94	20 a7 8d	jsr $8da7	                jsr dump_print_ascii
.8d97	80 aa		bra $8d43	                bra _row                ; new row
.8d99					_all_printed:
.8d99	a5 26		lda $26		                lda tmp2
.8d9b	f0 06		beq $8da3	                beq _done
.8d9d	20 12 a1	jsr $a112	                jsr xt_space
.8da0	20 a7 8d	jsr $8da7	                jsr dump_print_ascii
.8da3					_done:
.8da3	20 a4 a3	jsr $a3a4	                jsr xt_two_drop         ; one byte less than 4x INX
.8da6	60		rts		z_dump:         rts
.8da7					dump_print_ascii:
.8da7	a0 00		ldy #$00	                ldy #0
.8da9					_ascii_loop:
.8da9	b1 00		lda ($00),y	                lda (cp),y
.8dab	20 02 8e	jsr $8e02	                jsr emit_a
.8dae	c8		iny		                iny
.8daf	c0 08		cpy #$08	                cpy #8
.8db1	d0 03		bne $8db6	                bne +
.8db3	20 12 a1	jsr $a112	                jsr xt_space
.8db6					+
.8db6	c6 26		dec $26		                dec tmp2
.8db8	d0 ef		bne $8da9	                bne _ascii_loop
.8dba	60		rts		                rts
.8dbb					xt_dup:
.8dbb	20 38 d8	jsr $d838	                jsr underflow_1
.8dbe	ca		dex		                dex
.8dbf	ca		dex		                dex
.8dc0	b5 02		lda $02,x	                lda 2,x         ; LSB
.8dc2	95 00		sta $00,x	                sta 0,x
.8dc4	b5 03		lda $03,x	                lda 3,x         ; MSB
.8dc6	95 01		sta $01,x	                sta 1,x
.8dc8	60		rts		z_dup:          rts
.8dc9					xt_ed:
.8dc9	20 8f b5	jsr $b58f	                jsr ed6502      ; kept in separate file
.8dcc	60		rts		z_ed:           rts
.8dcd					xt_else:
.8dcd					xt_endof:
.8dcd	a0 8d		ldy #$8d	                ldy #>branch_runtime
.8dcf	a9 e7		lda #$e7	                lda #<branch_runtime
.8dd1	20 ce d6	jsr $d6ce	                jsr cmpl_subroutine
.8dd4	20 7e 91	jsr $917e	                jsr xt_here
.8dd7	20 9c a7	jsr $a79c	                jsr xt_zero
.8dda	20 7a 87	jsr $877a	                jsr xt_comma
.8ddd	20 7e 91	jsr $917e	                jsr xt_here
.8de0	20 7a 9b	jsr $9b7a	                jsr xt_rot
.8de3	20 81 a1	jsr $a181	                jsr xt_store
.8de6					z_else:
.8de6					z_endof:
.8de6	60		rts		                rts
.8de7					branch_runtime:
.8de7	68		pla		                pla
.8de8	85 22		sta $22		                sta tmpbranch
.8dea	68		pla		                pla
.8deb	85 23		sta $23		                sta tmpbranch+1
.8ded	a0 01		ldy #$01	                ldy #1
.8def	b1 22		lda ($22),y	                lda (tmpbranch),y  ; LSB
.8df1	85 24		sta $24		                sta tmp1
.8df3	c8		iny		                iny
.8df4	b1 22		lda ($22),y	                lda (tmpbranch),y  ; MSB
.8df6	85 25		sta $25		                sta tmp1+1
.8df8	6c 24 00	jmp ($0024)	                jmp (tmp1)
.8dfb					xt_emit:
.8dfb	20 38 d8	jsr $d838	                jsr underflow_1
.8dfe	b5 00		lda $00,x	                lda 0,x
.8e00	e8		inx		                inx
.8e01	e8		inx		                inx
.8e02					emit_a:
.8e02	6c 10 00	jmp ($0010)	                jmp (output)            ; JSR/RTS
.8e05					z_emit:
.8e05					xt_empty_buffers:
.8e05	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.8e07	a9 00		lda #$00	                lda #0
.8e09	91 1e		sta ($1e),y	                sta (up),y      ; Only LSB is used.
.8e0b					z_empty_buffers:
.8e0b	60		rts		                rts
.8e0c					xt_endcase:
.8e0c	a0 8d		ldy #$8d	                ldy #>xt_drop
.8e0e	a9 3a		lda #$3a	                lda #<xt_drop
.8e10	20 ce d6	jsr $d6ce	                jsr cmpl_subroutine
.8e13					_endcase_loop:
.8e13	b5 00		lda $00,x	                lda 0,x
.8e15	15 01		ora $01,x	                ora 1,x
.8e17	f0 05		beq $8e1e	                beq _done
.8e19	20 b6 a1	jsr $a1b6	                jsr xt_then
.8e1c	80 f5		bra $8e13	                bra _endcase_loop
.8e1e					_done:
.8e1e	e8		inx		                inx
.8e1f	e8		inx		                inx
.8e20	60		rts		z_endcase:      rts
.8e21					xt_environment_q:
.8e21	20 38 d8	jsr $d838	                jsr underflow_1
.8e24	a0 00		ldy #$00	                ldy #00                 ; counter for table
.8e26	5a		phy		                phy
.8e27					_table_loop:
.8e27	20 ac a3	jsr $a3ac	                jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
.8e2a	ca		dex		                dex
.8e2b	ca		dex		                dex                     ; ( addr u addr u ? )
.8e2c	b9 9e 8e	lda $8e9e,y	                lda env_table_single,y
.8e2f	95 00		sta $00,x	                sta 0,x
.8e31	c8		iny		                iny
.8e32	b9 9e 8e	lda $8e9e,y	                lda env_table_single,y
.8e35	95 01		sta $01,x	                sta 1,x                 ; ( addr u addr u addr-t )
.8e37	c8		iny		                iny
.8e38	15 00		ora $00,x	                ora 0,x
.8e3a	f0 4d		beq $8e89	                beq _table_done
.8e3c	5a		phy		                phy                     ; save Y, which is used by COUNT
.8e3d	20 5b 89	jsr $895b	                jsr xt_count            ; ( addr u addr u addr-s u-s )
.8e40	20 94 87	jsr $8794	                jsr xt_compare          ; ( addr u f )
.8e43	7a		ply		                ply
.8e44	b5 00		lda $00,x	                lda 0,x
.8e46	15 01		ora $01,x	                ora 1,x
.8e48	f0 04		beq $8e4e	                beq _got_result
.8e4a	e8		inx		                inx                     ; DROP, now ( addr u )
.8e4b	e8		inx		                inx
.8e4c	80 d9		bra $8e27	                bra _table_loop
.8e4e					_got_result:
.8e4e	e8		inx		                inx                     ; drop flag, now ( addr u )
.8e4f	e8		inx		                inx
.8e50	88		dey		                dey                     ; go back to index we had
.8e51	88		dey		                dey
.8e52	68		pla		                pla
.8e53	d0 0d		bne $8e62	                bne _double_result
.8e55	b9 bc 8e	lda $8ebc,y	                lda env_results_single,y
.8e58	95 02		sta $02,x	                sta 2,x
.8e5a	c8		iny		                iny
.8e5b	b9 bc 8e	lda $8ebc,y	                lda env_results_single,y
.8e5e	95 03		sta $03,x	                sta 3,x                 ; ( res u )
.8e60	80 1f		bra $8e81	                bra _set_flag
.8e62					_double_result:
.8e62	ca		dex		                dex                     ; ( addr u ? )
.8e63	ca		dex		                dex
.8e64	98		tya		                tya
.8e65	38		sec		                sec
.8e66	e9 18		sbc #$18	                sbc #24
.8e68	0a		asl a		                asl
.8e69	a8		tay		                tay
.8e6a	b9 d2 8e	lda $8ed2,y	                lda env_results_double,y
.8e6d	95 02		sta $02,x	                sta 2,x
.8e6f	c8		iny		                iny
.8e70	b9 d2 8e	lda $8ed2,y	                lda env_results_double,y
.8e73	95 03		sta $03,x	                sta 3,x                 ; ( res u ? )
.8e75	c8		iny		                iny
.8e76	b9 d2 8e	lda $8ed2,y	                lda env_results_double,y
.8e79	95 04		sta $04,x	                sta 4,x
.8e7b	c8		iny		                iny
.8e7c	b9 d2 8e	lda $8ed2,y	                lda env_results_double,y
.8e7f	95 05		sta $05,x	                sta 5,x                 ; ( res res ? )
.8e81					_set_flag:
.8e81	a9 ff		lda #$ff	                lda #$ff
.8e83	95 00		sta $00,x	                sta 0,x
.8e85	95 01		sta $01,x	                sta 1,x                 ; ( res f )
.8e87	80 14		bra $8e9d	                bra _done
.8e89					_table_done:
.8e89	68		pla		                pla
.8e8a	d0 09		bne $8e95	                bne _no_match
.8e8c	1a		inc a		                ina
.8e8d	48		pha		                pha
.8e8e	8a		txa		                txa
.8e8f	18		clc		                clc
.8e90	69 06		adc #$06	                adc #6                  ; skip six bytes
.8e92	aa		tax		                tax                     ; ( addr u )
.8e93	80 92		bra $8e27	                bra _table_loop
.8e95					_no_match:
.8e95	8a		txa		                txa
.8e96	18		clc		                clc
.8e97	69 0a		adc #$0a	                adc #10
.8e99	aa		tax		                tax                     ; ( addr ) - not ( 0 ) !
.8e9a	20 85 8f	jsr $8f85	                jsr xt_false
.8e9d					_done:
.8e9d					z_environment_q:
.8e9d	60		rts		                rts
.8e9e					env_table_single:
>8e9e	4e d6 5e d6 64 d6 69 d6		        .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
>8ea6	7b d6
>8ea8	83 d6 8c d6 92 d6 98 d6		        .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
>8eb0	ab d6 b7 d6 00 00		        .word envs_sc, envs_wl, 0000
.8eb6					env_table_double:
>8eb6	c1 d6 c7 d6 00 00		        .word envs_max_d, envs_max_ud, 0000
.8ebc					env_results_single:
>8ebc	ff 7f				        .word $7FFF     ; /COUNTED-STRING
>8ebe	ff 00				        .word $00FF     ; /HOLD
>8ec0	54 00				        .word $0054     ; /PAD (this is 84 decimal)
>8ec2	08 00				        .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
>8ec4	00 00				        .word 0000      ; FLOORED ("FALSE", we have symmetric)
>8ec6	ff 00				        .word $00FF     ; MAX-CHAR
>8ec8	ff 7f				        .word $7FFF     ; MAX-N
>8eca	ff ff				        .word $FFFF     ; MAX-U
>8ecc	80 00				        .word $0080     ; RETURN-STACK-CELLS
>8ece	20 00				        .word $0020     ; STACK-CELLS (from definitions.asm)
>8ed0	09 00				        .word $0009     ; WORDLISTS
.8ed2					env_results_double:
>8ed2	ff 7f ff ff			        .word $7FFF, $FFFF      ; MAX-D
>8ed6	ff ff ff ff			        .word $FFFF, $FFFF      ; MAX-UD
.8eda					xt_equal:
.8eda	20 3d d8	jsr $d83d	                jsr underflow_2
.8edd	b5 00		lda $00,x	                lda 0,x                 ; LSB
.8edf	d5 02		cmp $02,x	                cmp 2,x
.8ee1	d0 0a		bne $8eed	                bne _false
.8ee3	b5 01		lda $01,x	                lda 1,x                 ; MSB
.8ee5	d5 03		cmp $03,x	                cmp 3,x
.8ee7	d0 04		bne $8eed	                bne _false
.8ee9	a9 ff		lda #$ff	                lda #$ff
.8eeb	80 02		bra $8eef	                bra _done
.8eed	a9 00		lda #$00	_false:         lda #0                  ; drop thru to done
.8eef	95 02		sta $02,x	_done:          sta 2,x
.8ef1	95 03		sta $03,x	                sta 3,x
.8ef3	e8		inx		                inx
.8ef4	e8		inx		                inx
.8ef5	60		rts		z_equal:        rts
.8ef6					xt_blank:
.8ef6	ca		dex		                dex
.8ef7	ca		dex		                dex
.8ef8	a9 20		lda #$20	                lda #AscSP
.8efa	95 00		sta $00,x	                sta 0,x
.8efc	74 01		stz $01,x	                stz 1,x
.8efe	80 06		bra $8f06	                bra xt_fill     ; skip over code for ERASE
.8f00					xt_erase:
.8f00	ca		dex		                dex
.8f01	ca		dex		                dex
.8f02	74 00		stz $00,x	                stz 0,x
.8f04	74 01		stz $01,x	                stz 1,x
.8f06					xt_fill:
.8f06	20 42 d8	jsr $d842	                jsr underflow_3
.8f09	b5 04		lda $04,x	                lda 4,x         ; LSB
.8f0b	85 24		sta $24		                sta tmp1
.8f0d	b5 05		lda $05,x	                lda 5,x
.8f0f	85 25		sta $25		                sta tmp1+1
.8f11	b5 02		lda $02,x	                lda 2,x
.8f13	85 26		sta $26		                sta tmp2
.8f15	b5 03		lda $03,x	                lda 3,x
.8f17	85 27		sta $27		                sta tmp2+1
.8f19	b5 00		lda $00,x	                lda 0,x
.8f1b	a8		tay		                tay
.8f1c					_loop:
.8f1c	a9 7f		lda #$7f	                lda #>ram_end           ; MSB
.8f1e	c5 25		cmp $25		                cmp tmp1+1
.8f20	90 21		bcc $8f43	                bcc _done               ; RAM_END < TMP1, so leave
.8f22	d0 06		bne $8f2a	                bne _check_counter      ; RAM_END is not smaller and not equal
.8f24	a9 ff		lda #$ff	                lda #<ram_end           ; LSB, because MSBs were equal
.8f26	c5 24		cmp $24		                cmp tmp1
.8f28	90 19		bcc $8f43	                bcc _done               ; RAM_END < TMP1, so leave
.8f2a					_check_counter:
.8f2a	a5 26		lda $26		                lda tmp2
.8f2c	05 27		ora $27		                ora tmp2+1
.8f2e	f0 13		beq $8f43	                beq _done
.8f30	98		tya		                tya
.8f31	92 24		sta ($24)	                sta (tmp1)
.8f33	a5 26		lda $26		                lda tmp2
.8f35	d0 02		bne $8f39	                bne +
.8f37	c6 27		dec $27		                dec tmp2+1
.8f39	c6 26		dec $26		+               dec tmp2
.8f3b	e6 24		inc $24		                inc tmp1
.8f3d	d0 dd		bne $8f1c	                bne _loop
.8f3f	e6 25		inc $25		                inc tmp1+1
.8f41	80 d9		bra $8f1c	                bra _loop
.8f43					_done:
.8f43	8a		txa		                txa
.8f44	18		clc		                clc
.8f45	69 06		adc #$06	                adc #6
.8f47	aa		tax		                tax
.8f48					z_blank:
.8f48					z_erase:
.8f48	60		rts		z_fill:         rts
.8f49					xt_execute:
.8f49	20 38 d8	jsr $d838	                jsr underflow_1
.8f4c	20 50 8f	jsr $8f50	                jsr doexecute   ; do not combine to JMP (native coding)
.8f4f	60		rts		z_execute:      rts
.8f50					doexecute:
.8f50	b5 00		lda $00,x	                lda 0,x
.8f52	85 0e		sta $0e		                sta ip
.8f54	b5 01		lda $01,x	                lda 1,x
.8f56	85 0f		sta $0f		                sta ip+1
.8f58	e8		inx		                inx
.8f59	e8		inx		                inx
.8f5a	6c 0e 00	jmp ($000e)	                jmp (ip)
.8f5d					xt_execute_parsing:
.8f5d	20 42 d8	jsr $d842	                jsr underflow_3
.8f60	20 6e 92	jsr $926e	                jsr xt_input_to_r       ; save normal input for later
.8f63	20 91 96	jsr $9691	                jsr xt_not_rote         ; -ROT ( xt addr u )
.8f66	b5 00		lda $00,x	                lda 0,x                 ; TOS is new ciblen
.8f68	85 0a		sta $0a		                sta ciblen
.8f6a	b5 01		lda $01,x	                lda 1,x
.8f6c	85 0b		sta $0b		                sta ciblen+1
.8f6e	b5 02		lda $02,x	                lda 2,x                 ; NOS is new cib
.8f70	85 08		sta $08		                sta cib
.8f72	b5 03		lda $03,x	                lda 3,x
.8f74	85 09		sta $09		                sta cib+1
.8f76	64 0c		stz $0c		                stz toin                ; Set >IN to zero
.8f78	64 0d		stz $0d		                stz toin+1
.8f7a	20 a4 a3	jsr $a3a4	                jsr xt_two_drop         ; 2DROP ( xt )
.8f7d	20 49 8f	jsr $8f49	                jsr xt_execute
.8f80	20 c6 9a	jsr $9ac6	                jsr xt_r_to_input
.8f83					z_execute_parsing:
.8f83	60		rts		                rts
.8f84					xt_exit:
.8f84	60		rts		                rts             ; keep before z_exit
.8f85					z_exit:
.8f85					xt_false:
.8f85	ca		dex		                dex
.8f86	ca		dex		                dex
.8f87	74 00		stz $00,x	                stz 0,x
.8f89	74 01		stz $01,x	                stz 1,x
.8f8b	60		rts		z_false:        rts
.8f8c					xt_fetch:
.8f8c	20 38 d8	jsr $d838	                jsr underflow_1
.8f8f	a1 00		lda ($00,x)	                lda (0,x)               ; LSB
.8f91	a8		tay		                tay
.8f92	f6 00		inc $00,x	                inc 0,x
.8f94	d0 02		bne $8f98	                bne +
.8f96	f6 01		inc $01,x	                inc 1,x
.8f98					+
.8f98	a1 00		lda ($00,x)	                lda (0,x)               ; MSB
.8f9a	95 01		sta $01,x	                sta 1,x
.8f9c	94 00		sty $00,x	                sty 0,x
.8f9e	60		rts		z_fetch:        rts
.8f9f					xt_find:
.8f9f	20 38 d8	jsr $d838	                jsr underflow_1
.8fa2	b5 01		lda $01,x	                lda 1,x                 ; MSB
.8fa4	48		pha		                pha
.8fa5	b5 00		lda $00,x	                lda 0,x                 ; LSB
.8fa7	48		pha		                pha
.8fa8	20 5b 89	jsr $895b	                jsr xt_count            ; ( caddr -- addr u )
.8fab	20 e7 8f	jsr $8fe7	                jsr xt_find_name        ; ( addr u -- nt | 0 )
.8fae	b5 00		lda $00,x	                lda 0,x
.8fb0	15 01		ora $01,x	                ora 1,x
.8fb2	d0 0b		bne $8fbf	                bne _found_word
.8fb4	20 85 8f	jsr $8f85	                jsr xt_false            ; ( 0 0 )
.8fb7	68		pla		                pla                     ; LSB of address
.8fb8	95 02		sta $02,x	                sta 2,x
.8fba	68		pla		                pla
.8fbb	95 03		sta $03,x	                sta 3,x                 ; MSB of address
.8fbd	80 27		bra $8fe6	                bra _done               ; ( addr 0 )
.8fbf					_found_word:
.8fbf	68		pla		                pla
.8fc0	68		pla		                pla
.8fc1	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; ( nt nt )
.8fc4	20 04 96	jsr $9604	                jsr xt_name_to_int      ; ( nt xt )
.8fc7	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; ( xt nt )
.8fca	a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.8fcc	f6 00		inc $00,x	                inc 0,x
.8fce	d0 02		bne $8fd2	                bne +
.8fd0	f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.8fd2					+
.8fd2	a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.8fd4	29 04		and #$04	                and #IM
.8fd6	d0 08		bne $8fe0	                bne _immediate          ; bit set, we're immediate
.8fd8	a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.8fda	95 00		sta $00,x	                sta 0,x
.8fdc	95 01		sta $01,x	                sta 1,x
.8fde	80 06		bra $8fe6	                bra _done
.8fe0					_immediate:
.8fe0	a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.8fe2	95 00		sta $00,x	                sta 0,x
.8fe4	74 01		stz $01,x	                stz 1,x
.8fe6					_done:
.8fe6	60		rts		z_find:         rts
.8fe7					xt_find_name:
.8fe7	20 3d d8	jsr $d83d	                jsr underflow_2
.8fea	b5 00		lda $00,x	                lda 0,x
.8fec	15 01		ora $01,x	                ora 1,x
.8fee	d0 03		bne $8ff3	                bne _nonempty
.8ff0	4c 8c 90	jmp $908c	                jmp _fail_done
.8ff3					_nonempty:
.8ff3	64 28		stz $28		                stz tmp3                ; Start at the beginning
.8ff5					_wordlist_loop:
.8ff5	a0 1e		ldy #$1e	                ldy #num_order_offset   ; Compare to byte variable #ORDER
.8ff7	a5 28		lda $28		                lda tmp3
.8ff9	d1 1e		cmp ($1e),y	                cmp (up),y              ; Check to see if we are done
.8ffb	d0 03		bne $9000	                bne _have_string
.8ffd	4c 8c 90	jmp $908c	                jmp _fail_done
.9000					_have_string:
.9000	18		clc		                clc             ; SEARCH-ORDER is array of bytes.
.9001	69 1f		adc #$1f	                adc #search_order_offset
.9003	a8		tay		                tay
.9004	b1 1e		lda ($1e),y	                lda (up),y      ; Get the id byte, which is the offset
.9006	0a		asl a		                asl                     ; Turn offset into cells offset.
.9007	18		clc		                clc
.9008	69 06		adc #$06	                adc #wordlists_offset
.900a	a8		tay		                tay
.900b	b1 1e		lda ($1e),y	                lda (up),y
.900d	85 24		sta $24		                sta tmp1
.900f	c8		iny		                iny
.9010	b1 1e		lda ($1e),y	                lda (up),y
.9012	85 25		sta $25		                sta tmp1+1
.9014	b5 02		lda $02,x	                lda 2,x                 ; Address of mystery string
.9016	85 26		sta $26		                sta tmp2
.9018	b5 03		lda $03,x	                lda 3,x
.901a	85 27		sta $27		                sta tmp2+1
.901c					_loop:
.901c	b2 24		lda ($24)	                lda (tmp1)
.901e	d5 00		cmp $00,x	                cmp 0,x
.9020	d0 54		bne $9076	                bne _next_entry
.9022					_compare_string:
.9022	b2 26		lda ($26)	                lda (tmp2)      ; first character of mystery string
.9024	c9 5b		cmp #$5b	                cmp #$5B        ; ASCII '[' (one past Z)
.9026	b0 07		bcs $902f	                bcs _compare_first
.9028	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.902a	90 03		bcc $902f	                bcc _compare_first
.902c	18		clc		                clc
.902d	69 20		adc #$20	                adc #$20
.902f					_compare_first:
.902f	a0 08		ldy #$08	                ldy #8          ; Offset in nt to name
.9031	d1 24		cmp ($24),y	                cmp (tmp1),y    ; first character of current word
.9033	d0 41		bne $9076	                bne _next_entry
.9035	b5 00		lda $00,x	                lda 0,x
.9037	3a		dec a		                dea
.9038	f0 2c		beq $9066	                beq _success
.903a	a5 24		lda $24		                lda tmp1
.903c	48		pha		                pha             ; Preserve tmp1 on the return stack.
.903d	18		clc		                clc
.903e	69 08		adc #$08	                adc #8
.9040	85 24		sta $24		                sta tmp1        ; Reusing tmp1 temporarily for string check.
.9042	a5 25		lda $25		                lda tmp1+1
.9044	48		pha		                pha             ; Preserve tmp1+1 on the return stack.
.9045	69 00		adc #$00	                adc #0          ; we only need the carry
.9047	85 25		sta $25		                sta tmp1+1
.9049	b4 00		ldy $00,x	                ldy 0,x         ; index is length of string minus 1
.904b	88		dey		                dey
.904c					_string_loop:
.904c	b1 26		lda ($26),y	                lda (tmp2),y    ; last char of mystery string
.904e	c9 5b		cmp #$5b	                cmp #$5B         ; ASCII '[' (one past Z)
.9050	b0 07		bcs $9059	                bcs _check_char
.9052	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.9054	90 03		bcc $9059	                bcc _check_char
.9056	18		clc		                clc
.9057	69 20		adc #$20	                adc #$20
.9059					_check_char:
.9059	d1 24		cmp ($24),y	                cmp (tmp1),y    ; last char of word we're testing against
.905b	d0 13		bne $9070	                bne _next_entry_tmp1
.905d	88		dey		                dey
.905e	d0 ec		bne $904c	                bne _string_loop
.9060					_success_tmp1:
.9060	68		pla		                pla             ; Restore tmp1 from the return stack.
.9061	85 25		sta $25		                sta tmp1+1
.9063	68		pla		                pla
.9064	85 24		sta $24		                sta tmp1
.9066					_success:
.9066	a5 24		lda $24		                lda tmp1
.9068	95 02		sta $02,x	                sta 2,x
.906a	a5 25		lda $25		                lda tmp1+1
.906c	95 03		sta $03,x	                sta 3,x
.906e	80 20		bra $9090	                bra _done
.9070					_next_entry_tmp1:
.9070	68		pla		                pla             ; Restore tmp1 from the return stack.
.9071	85 25		sta $25		                sta tmp1+1
.9073	68		pla		                pla
.9074	85 24		sta $24		                sta tmp1
.9076					_next_entry:
.9076	a0 02		ldy #$02	                ldy #2
.9078	b1 24		lda ($24),y	                lda (tmp1),y
.907a	48		pha		                pha
.907b	c8		iny		                iny
.907c	b1 24		lda ($24),y	                lda (tmp1),y
.907e	85 25		sta $25		                sta tmp1+1
.9080	68		pla		                pla
.9081	85 24		sta $24		                sta tmp1
.9083	05 25		ora $25		                ora tmp1+1
.9085	d0 95		bne $901c	                bne _loop
.9087	e6 28		inc $28		                inc tmp3
.9089	4c f5 8f	jmp $8ff5	                jmp _wordlist_loop
.908c					_fail_done:
.908c	74 02		stz $02,x	                stz 2,x         ; failure flag
.908e	74 03		stz $03,x	                stz 3,x
.9090					_done:
.9090	e8		inx		                inx
.9091	e8		inx		                inx
.9092	60		rts		z_find_name:    rts
.9093					xt_flush:
.9093	20 b2 9e	jsr $9eb2	                jsr xt_save_buffers
.9096	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.9098	a9 00		lda #$00	                lda #0
.909a	91 1e		sta ($1e),y	                sta (up),y      ; Only LSB is used.
.909c					z_flush:
.909c	60		rts		                rts
.909d					xt_fm_slash_mod:
.909d	20 42 d8	jsr $d842	                jsr underflow_3
.90a0	64 26		stz $26		                stz tmp2        ; default: n is positive
.90a2	b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.90a4	10 0e		bpl $90b4	                bpl _check_d
.90a6	e6 26		inc $26		                inc tmp2        ; set flag to negative for n1
.90a8	20 46 96	jsr $9646	                jsr xt_negate   ; NEGATE
.90ab	20 64 a3	jsr $a364	                jsr xt_to_r     ; >R
.90ae	20 4d 8b	jsr $8b4d	                jsr xt_dnegate  ; DNEGATE
.90b1	20 b5 9a	jsr $9ab5	                jsr xt_r_from   ; R>
.90b4					_check_d:
.90b4	b5 03		lda $03,x	                lda 3,x         ; MSB of high word of d
.90b6	10 0d		bpl $90c5	                bpl _multiply
.90b8	18		clc		                clc
.90b9	b5 00		lda $00,x	                lda 0,x         ; LSB of n1
.90bb	75 02		adc $02,x	                adc 2,x         ; LSB of dh
.90bd	95 02		sta $02,x	                sta 2,x
.90bf	b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.90c1	75 03		adc $03,x	                adc 3,x         ; MSB of dh
.90c3	95 03		sta $03,x	                sta 3,x
.90c5					_multiply:
.90c5	20 ae a5	jsr $a5ae	                jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
.90c8	a5 26		lda $26		                lda tmp2
.90ca	f0 07		beq $90d3	                beq _done
.90cc	e8		inx		                inx             ; pretend that we SWAP
.90cd	e8		inx		                inx
.90ce	20 46 96	jsr $9646	                jsr xt_negate
.90d1	ca		dex		                dex
.90d2	ca		dex		                dex
.90d3					_done:
.90d3	60		rts		z_fm_slash_mod: rts
.90d4					xt_forth:
.90d4	a0 1f		ldy #$1f	                ldy #search_order_offset
.90d6	a9 00		lda #$00	                lda #0          ; The WID for Forth is 0.
.90d8	91 1e		sta ($1e),y	                sta (up),y
.90da					z_forth:
.90da	60		rts		                rts
.90db					load_evaluate:
.90db	a9 ff		lda #$ff	                lda #$FF
.90dd	85 24		sta $24		                sta tmp1
.90df	80 11		bra $90f2	                bra load_evaluate_start
.90e1					xt_evaluate:
.90e1	20 3d d8	jsr $d83d	                jsr underflow_2
.90e4	64 24		stz $24		                stz tmp1
.90e6	b5 00		lda $00,x	                lda 0,x
.90e8	15 01		ora $01,x	                ora 1,x
.90ea	d0 06		bne $90f2	                bne evaluate_got_work
.90ec	e8		inx		                inx
.90ed	e8		inx		                inx
.90ee	e8		inx		                inx
.90ef	e8		inx		                inx
.90f0	80 42		bra $9134	                bra evaluate_done
.90f2					load_evaluate_start:
.90f2					evaluate_got_work:
.90f2	a0 01		ldy #$01	                ldy #blk_offset+1
.90f4	b1 1e		lda ($1e),y	                lda (up),y
.90f6	48		pha		                pha
.90f7	88		dey		                dey
.90f8	b1 1e		lda ($1e),y	                lda (up),y
.90fa	48		pha		                pha
.90fb	a5 24		lda $24		                lda tmp1
.90fd	d0 05		bne $9104	                bne _nozero
.90ff	91 1e		sta ($1e),y	                sta (up),y
.9101	c8		iny		                iny
.9102	91 1e		sta ($1e),y	                sta (up),y
.9104					_nozero:
.9104	20 6e 92	jsr $926e	                jsr xt_input_to_r
.9107	a9 ff		lda #$ff	                lda #$ff
.9109	85 06		sta $06		                sta insrc
.910b	85 07		sta $07		                sta insrc+1
.910d	64 0c		stz $0c		                stz toin
.910f	64 0d		stz $0d		                stz toin+1
.9111	b5 00		lda $00,x	                lda 0,x
.9113	85 0a		sta $0a		                sta ciblen
.9115	b5 01		lda $01,x	                lda 1,x
.9117	85 0b		sta $0b		                sta ciblen+1
.9119	b5 02		lda $02,x	                lda 2,x
.911b	85 08		sta $08		                sta cib
.911d	b5 03		lda $03,x	                lda 3,x
.911f	85 09		sta $09		                sta cib+1
.9121	e8		inx		                inx             ; A clean stack is a clean mind
.9122	e8		inx		                inx
.9123	e8		inx		                inx
.9124	e8		inx		                inx
.9125	20 93 d7	jsr $d793	                jsr interpret   ; ( -- )
.9128	20 c6 9a	jsr $9ac6	                jsr xt_r_to_input
.912b	a0 00		ldy #$00	                ldy #blk_offset
.912d	68		pla		                pla
.912e	91 1e		sta ($1e),y	                sta (up),y
.9130	c8		iny		                iny
.9131	68		pla		                pla
.9132	91 1e		sta ($1e),y	                sta (up),y
.9134					evaluate_done:
.9134	60		rts		z_evaluate:     rts
.9135					xt_get_current:
.9135	ca		dex		                dex
.9136	ca		dex		                dex
.9137	a0 04		ldy #$04	                ldy #current_offset
.9139	b1 1e		lda ($1e),y	                lda (up),y
.913b	95 00		sta $00,x	                sta 0,x         ; CURRENT is a byte variable
.913d	74 01		stz $01,x	                stz 1,x         ; so the MSB is zero.
.913f	60		rts		z_get_current:  rts
.9140					xt_get_order:
.9140	a0 1e		ldy #$1e	                ldy #num_order_offset
.9142	b1 1e		lda ($1e),y	                lda (up),y
.9144	85 24		sta $24		                sta tmp1
.9146	f0 16		beq $915e	                beq _done       ; If zero, there are no wordlists.
.9148					_loop:
.9148	c6 24		dec $24		                dec tmp1        ; Count down by bytes.
.914a	a9 1f		lda #$1f	                lda #search_order_offset
.914c	18		clc		                clc
.914d	65 24		adc $24		                adc tmp1
.914f	a8		tay		                tay
.9150	ca		dex		                dex
.9151	ca		dex		                dex
.9152	b1 1e		lda ($1e),y	                lda (up),y
.9154	95 00		sta $00,x	                sta 0,x         ; Search order array is bytes, so
.9156	74 01		stz $01,x	                stz 1,x         ; put a zero in the high byte.
.9158	a9 00		lda #$00	                lda #0
.915a	c5 24		cmp $24		                cmp tmp1
.915c	d0 ea		bne $9148	                bne _loop
.915e					_done:
.915e	ca		dex		                dex
.915f	ca		dex		                dex
.9160	a0 1e		ldy #$1e	                ldy #num_order_offset
.9162	b1 1e		lda ($1e),y	                lda (up),y
.9164	95 00		sta $00,x	                sta 0,x
.9166	74 01		stz $01,x	                stz 1,x         ; We only support 8 wordlists.
.9168	60		rts		z_get_order:    rts
.9169					xt_greater_than:
.9169	20 3d d8	jsr $d83d	                jsr underflow_2
.916c	a0 00		ldy #$00	                ldy #0          ; default false
.916e	20 52 d7	jsr $d752	                jsr compare_16bit
.9171	f0 03		beq $9176	                beq _false
.9173	10 01		bpl $9176	                bpl _false
.9175	88		dey		                dey
.9176					_false:
.9176	98		tya		                tya
.9177	e8		inx		                inx
.9178	e8		inx		                inx
.9179	95 00		sta $00,x	                sta 0,x
.917b	95 01		sta $01,x	                sta 1,x
.917d	60		rts		z_greater_than: rts
.917e					xt_here:
.917e					xt_asm_arrow:
.917e	ca		dex		                dex
.917f	ca		dex		                dex
.9180	a5 00		lda $00		                lda cp
.9182	95 00		sta $00,x	                sta 0,x
.9184	a5 01		lda $01		                lda cp+1
.9186	95 01		sta $01,x	                sta 1,x
.9188					z_asm_arrow:
.9188	60		rts		z_here:         rts
.9189					xt_hex:
.9189	a9 10		lda #$10	                lda #16
.918b	85 18		sta $18		                sta base
.918d	64 19		stz $19		                stz base+1              ; paranoid
.918f	60		rts		z_hex:          rts
.9190					xt_hexstore:
.9190	20 42 d8	jsr $d842	                jsr underflow_3
.9193	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; Save copy of original address
.9196	20 96 a4	jsr $a496	                jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
.9199					_loop:
.9199	b5 00		lda $00,x	                lda 0,x
.919b	15 01		ora $01,x	                ora 1,x
.919d	f0 36		beq $91d5	                beq _done
.919f	20 58 86	jsr $8658	                jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.91a2	20 96 a4	jsr $a496	                jsr xt_two_to_r
.91a5	20 9c a7	jsr $a79c	                jsr xt_zero
.91a8	20 9c a7	jsr $a79c	                jsr xt_zero
.91ab	20 1c a4	jsr $a41c	                jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.91ae	20 b1 a2	jsr $a2b1	                jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.91b1	b5 00		lda $00,x	                lda 0,x
.91b3	15 01		ora $01,x	                ora 1,x
.91b5	d0 17		bne $91ce	                bne _have_chars_left
.91b7	20 a4 a3	jsr $a3a4	                jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
.91ba	20 8c 8a	jsr $8a8c	                jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
.91bd	20 a0 9a	jsr $9aa0	                jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.91c0	20 21 86	jsr $8621	                jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
.91c3	20 b5 9a	jsr $9ab5	                jsr xt_r_from           ; R>
.91c6	20 40 98	jsr $9840	                jsr xt_one_plus         ; 1+
.91c9	20 64 a3	jsr $a364	                jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.91cc	80 cb		bra $9199	                bra _loop
.91ce					_have_chars_left:
.91ce	8a		txa		                txa
.91cf	18		clc		                clc
.91d0	69 08		adc #$08	                adc #8
.91d2	aa		tax		                tax
.91d3	80 c4		bra $9199	                bra _loop
.91d5					_done:
.91d5	e8		inx		                inx
.91d6	e8		inx		                inx
.91d7	e8		inx		                inx
.91d8	e8		inx		                inx                     ; 2DROP
.91d9	20 1c a4	jsr $a41c	                jsr xt_two_r_from       ; ( addr2+n addr2 )
.91dc	20 a2 a1	jsr $a1a2	                jsr xt_swap
.91df	20 73 95	jsr $9573	                jsr xt_minus            ; ( n )
.91e2	60		rts		z_hexstore:     rts
.91e3					xt_hold:
.91e3	20 38 d8	jsr $d838	                jsr underflow_1
.91e6	a5 34		lda $34		                lda tohold
.91e8	d0 02		bne $91ec	                bne +
.91ea	c6 35		dec $35		                dec tohold+1
.91ec					+
.91ec	c6 34		dec $34		                dec tohold
.91ee	b5 00		lda $00,x	                lda 0,x
.91f0	92 34		sta ($34)	                sta (tohold)
.91f2	e8		inx		                inx
.91f3	e8		inx		                inx
.91f4	60		rts		z_hold:         rts
.91f5					xt_i:
.91f5	ca		dex		                dex
.91f6	ca		dex		                dex
.91f7	86 2a		stx $2a		                stx tmpdsp
.91f9	ba		tsx		                tsx
.91fa	38		sec		                sec
.91fb	bd 01 01	lda $0101,x	                lda $0101,x     ; LSB
.91fe	fd 03 01	sbc $0103,x	                sbc $0103,x
.9201	a8		tay		                tay
.9202	bd 02 01	lda $0102,x	                lda $0102,x     ; MSB
.9205	fd 04 01	sbc $0104,x	                sbc $0104,x
.9208	a6 2a		ldx $2a		                ldx tmpdsp
.920a	95 01		sta $01,x	                sta 1,x         ; MSB of de-fudged index
.920c	94 00		sty $00,x	                sty 0,x         ; LSB of de-fudged index
.920e	60		rts		z_i:            rts
.920f					xt_if:
.920f	a0 92		ldy #$92	                ldy #>zero_branch_runtime
.9211	a9 20		lda #$20	                lda #<zero_branch_runtime
.9213	20 ce d6	jsr $d6ce	                jsr cmpl_subroutine
.9216	20 7e 91	jsr $917e	                jsr xt_here
.9219	20 9c a7	jsr $a79c	                jsr xt_zero
.921c	20 7a 87	jsr $877a	                jsr xt_comma
.921f	60		rts		z_if:           rts
.9220					zero_branch_runtime:
.9220	68		pla		                pla
.9221	85 22		sta $22		                sta tmpbranch
.9223	68		pla		                pla
.9224	85 23		sta $23		                sta tmpbranch+1
.9226	b5 00		lda $00,x	                lda 0,x
.9228	15 01		ora $01,x	                ora 1,x
.922a	f0 0f		beq $923b	                beq _zero
.922c	a5 22		lda $22		                lda tmpbranch   ; LSB
.922e	18		clc		                clc
.922f	69 02		adc #$02	                adc #2
.9231	85 24		sta $24		                sta tmp1
.9233	a5 23		lda $23		                lda tmpbranch+1 ; MSB
.9235	69 00		adc #$00	                adc #0          ; For carry
.9237	85 25		sta $25		                sta tmp1+1
.9239	80 13		bra $924e	                bra _done
.923b					_zero:
.923b	a0 01		ldy #$01	                ldy #1
.923d	b1 22		lda ($22),y	                lda (tmpbranch),y
.923f	85 24		sta $24		                sta tmp1
.9241	c8		iny		                iny
.9242	b1 22		lda ($22),y	                lda (tmpbranch),y
.9244	85 25		sta $25		                sta tmp1+1
.9246	a5 24		lda $24		                lda tmp1
.9248	d0 02		bne $924c	                bne +
.924a	c6 25		dec $25		                dec tmp1+1
.924c					+
.924c	c6 24		dec $24		                dec tmp1
.924e					_done:
.924e	a5 25		lda $25		                lda tmp1+1
.9250	48		pha		                pha             ; MSB first
.9251	a5 24		lda $24		                lda tmp1
.9253	48		pha		                pha
.9254	e8		inx		                inx
.9255	e8		inx		                inx
.9256	60		rts		                rts
.9257					xt_immediate:
.9257	20 6d d7	jsr $d76d	                jsr current_to_dp
.925a	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.925c	b1 02		lda ($02),y	                lda (dp),y
.925e	09 04		ora #$04	                ora #IM        ; make sure bit 7 is set
.9260	91 02		sta ($02),y	                sta (dp),y
.9262	60		rts		z_immediate:    rts
.9263					xt_input:
.9263	ca		dex		                dex
.9264	ca		dex		                dex
.9265	a9 12		lda #$12	                lda #<input
.9267	95 00		sta $00,x	                sta 0,x
.9269	a9 00		lda #$00	                lda #>input
.926b	95 01		sta $01,x	                sta 1,x
.926d	60		rts		z_input:        rts
.926e					xt_input_to_r:
.926e	68		pla		                pla
.926f	85 24		sta $24		                sta tmp1
.9271	68		pla		                pla
.9272	85 25		sta $25		                sta tmp1+1
.9274	a0 07		ldy #$07	                ldy #7
.9276					_loop:
.9276	b9 06 00	lda $0006,y	                lda insrc,y     ; insrc+7 is toin+1
.9279	48		pha		                pha
.927a	88		dey		                dey
.927b	10 f9		bpl $9276	                bpl _loop
.927d	a5 25		lda $25		                lda tmp1+1
.927f	48		pha		                pha
.9280	a5 24		lda $24		                lda tmp1
.9282	48		pha		                pha
.9283	60		rts		z_input_to_r: 	rts
.9284					xt_int_to_name:
.9284	20 38 d8	jsr $d838	                jsr underflow_1
.9287	ca		dex		                dex
.9288	ca		dex		                dex
.9289	74 00		stz $00,x	                stz 0,x
.928b	74 01		stz $01,x	                stz 1,x
.928d					_wordlist_loop:
.928d	b5 00		lda $00,x	                lda 0,x                 ; Get the current wordlist.
.928f	0a		asl a		                asl                     ; Turn offset into cells offset.
.9290	18		clc		                clc
.9291	69 06		adc #$06	                adc #wordlists_offset
.9293	a8		tay		                tay
.9294	b1 1e		lda ($1e),y	                lda (up),y              ; Save the DP for this wordlist
.9296	85 26		sta $26		                sta tmp2                ; into tmp2
.9298	c8		iny		                iny
.9299	b1 1e		lda ($1e),y	                lda (up),y
.929b	85 27		sta $27		                sta tmp2+1
.929d	a5 26		lda $26		                lda tmp2
.929f	05 27		ora $27		                ora tmp2+1
.92a1	f0 38		beq $92db	                beq _next_wordlist
.92a3	b5 02		lda $02,x	                lda 2,x         ; Target xt is now behind wordlist id.
.92a5	85 28		sta $28		                sta tmp3        ; Save target xt in tmp3
.92a7	b5 03		lda $03,x	                lda 3,x
.92a9	85 29		sta $29		                sta tmp3+1
.92ab					_loop:
.92ab	a0 04		ldy #$04	                ldy #4          ; xt is four bytes down
.92ad	b1 26		lda ($26),y	                lda (tmp2),y    ; LSB of xt of current nt
.92af	c5 28		cmp $28		                cmp tmp3
.92b1	d0 07		bne $92ba	                bne _no_match
.92b3	c8		iny		                iny
.92b4	b1 26		lda ($26),y	                lda (tmp2),y    ; MSB of xt of current nt
.92b6	c5 29		cmp $29		                cmp tmp3+1
.92b8	f0 32		beq $92ec	                beq _match
.92ba					_no_match:
.92ba	18		clc		                clc
.92bb	a5 26		lda $26		                lda tmp2
.92bd	69 02		adc #$02	                adc #2
.92bf	85 26		sta $26		                sta tmp2
.92c1	a5 27		lda $27		                lda tmp2+1
.92c3	69 00		adc #$00	                adc #0          ; only care about carry
.92c5	85 27		sta $27		                sta tmp2+1
.92c7	a0 00		ldy #$00	                ldy #0
.92c9	b1 26		lda ($26),y	                lda (tmp2),y
.92cb	48		pha		                pha
.92cc	c8		iny		                iny
.92cd	11 26		ora ($26),y	                ora (tmp2),y
.92cf	f0 09		beq $92da	                beq _zero
.92d1	b1 26		lda ($26),y	                lda (tmp2),y
.92d3	85 27		sta $27		                sta tmp2+1
.92d5	68		pla		                pla
.92d6	85 26		sta $26		                sta tmp2
.92d8	80 d1		bra $92ab	                bra _loop
.92da					_zero:
.92da	68		pla		                pla             ; Leftover from above loop
.92db					_next_wordlist:
.92db	b5 00		lda $00,x	                lda 0,x
.92dd	1a		inc a		                ina
.92de	95 00		sta $00,x	                sta 0,x
.92e0	c9 0c		cmp #$0c	                cmp #max_wordlists
.92e2	d0 a9		bne $928d	                bne _wordlist_loop
.92e4	e8		inx		                inx
.92e5	e8		inx		                inx
.92e6	74 00		stz $00,x	                stz 0,x
.92e8	74 01		stz $01,x	                stz 1,x
.92ea	80 0a		bra $92f6	                bra z_int_to_name
.92ec					_match:
.92ec	e8		inx		                inx
.92ed	e8		inx		                inx
.92ee	a5 26		lda $26		                lda tmp2
.92f0	95 00		sta $00,x	                sta 0,x
.92f2	a5 27		lda $27		                lda tmp2+1
.92f4	95 01		sta $01,x	                sta 1,x
.92f6	60		rts		z_int_to_name:  rts
.92f7					xt_invert:
.92f7	20 38 d8	jsr $d838	                jsr underflow_1
.92fa	a9 ff		lda #$ff	                lda #$FF
.92fc	55 00		eor $00,x	                eor 0,x         ; LSB
.92fe	95 00		sta $00,x	                sta 0,x
.9300	a9 ff		lda #$ff	                lda #$FF
.9302	55 01		eor $01,x	                eor 1,x         ; MSB
.9304	95 01		sta $01,x	                sta 1,x
.9306	60		rts		z_invert:       rts
.9307					xt_is:
.9307	a5 16		lda $16		                lda state
.9309	05 17		ora $17		                ora state+1
.930b	f0 0c		beq $9319	                beq _interpreting
.930d					_compiling:
.930d	20 aa 85	jsr $85aa	                jsr xt_bracket_tick
.9310	a0 8a		ldy #$8a	                ldy #>xt_defer_store
.9312	a9 f2		lda #$f2	                lda #<xt_defer_store
.9314	20 ce d6	jsr $d6ce	                jsr cmpl_subroutine
.9317	80 06		bra $931f	                bra _done
.9319					_interpreting:
.9319	20 05 a2	jsr $a205	                jsr xt_tick
.931c	20 f2 8a	jsr $8af2	                jsr xt_defer_store
.931f					_done:
.931f	60		rts		z_is:           rts
.9320					xt_j:
.9320	ca		dex		                dex
.9321	ca		dex		                dex
.9322	86 2a		stx $2a		                stx tmpdsp
.9324	ba		tsx		                tsx
.9325	38		sec		                sec
.9326	bd 07 01	lda $0107,x	                lda $0107,x     ; LSB
.9329	fd 09 01	sbc $0109,x	                sbc $0109,x
.932c	a8		tay		                tay
.932d	bd 08 01	lda $0108,x	                lda $0108,x     ; MSB
.9330	fd 0a 01	sbc $010a,x	                sbc $010A,x
.9333	a6 2a		ldx $2a		                ldx tmpdsp
.9335	95 01		sta $01,x	                sta 1,x         ; MSB of de-fudged index
.9337	94 00		sty $00,x	                sty 0,x         ; LSB of de-fudged index
.9339	60		rts		z_j:            rts
.933a					xt_key:
.933a	20 44 93	jsr $9344	                jsr key_a               ; returns char in A
.933d	ca		dex		                dex
.933e	ca		dex		                dex
.933f	95 00		sta $00,x	                sta 0,x
.9341	74 01		stz $01,x	                stz 1,x
.9343	60		rts		z_key:          rts
.9344					key_a:
.9344	6c 12 00	jmp ($0012)	                jmp (input)             ; JSR/RTS
.9347					xt_latestnt:
.9347	ca		dex		                dex
.9348	ca		dex		                dex
.9349	20 6d d7	jsr $d76d	                jsr current_to_dp
.934c	a5 02		lda $02		                lda dp
.934e	95 00		sta $00,x	                sta 0,x
.9350	a5 03		lda $03		                lda dp+1
.9352	95 01		sta $01,x	                sta 1,x
.9354	60		rts		z_latestnt:     rts
.9355					xt_latestxt:
.9355	20 47 93	jsr $9347	                jsr xt_latestnt         ; ( nt )
.9358	20 04 96	jsr $9604	                jsr xt_name_to_int      ; ( xt )
.935b	60		rts		z_latestxt:     rts
.935c					xt_leave:
.935c	68		pla		                pla
.935d	68		pla		                pla
.935e	68		pla		                pla
.935f	68		pla		                pla
.9360	60		rts		                rts             ; this must be compiled, so keep before z_leave
.9361					z_leave:
.9361					xt_left_bracket:
.9361	64 16		stz $16		                stz state
.9363	64 17		stz $17		                stz state+1
.9365	60		rts		z_left_bracket: rts
.9366					xt_less_number_sign:
.9366	20 c4 98	jsr $98c4	                jsr xt_pad      ; ( addr )
.9369	b5 00		lda $00,x	                lda 0,x
.936b	85 34		sta $34		                sta tohold
.936d	b5 01		lda $01,x	                lda 1,x
.936f	85 35		sta $35		                sta tohold+1
.9371	e8		inx		                inx
.9372	e8		inx		                inx
.9373					z_less_number_sign:
.9373	60		rts		                rts
.9374					xt_less_than:
.9374	20 3d d8	jsr $d83d	                jsr underflow_2
.9377	a0 00		ldy #$00	                ldy #0          ; default false
.9379	20 52 d7	jsr $d752	                jsr compare_16bit
.937c	f0 03		beq $9381	                beq _false
.937e	30 01		bmi $9381	                bmi _false
.9380	88		dey		                dey
.9381					_false:
.9381	98		tya		                tya
.9382	e8		inx		                inx
.9383	e8		inx		                inx
.9384	95 00		sta $00,x	                sta 0,x
.9386	95 01		sta $01,x	                sta 1,x
.9388	60		rts		z_less_than:    rts
.9389					xt_list:
.9389	20 38 d8	jsr $d838	                jsr underflow_1
.938c	20 cd 9e	jsr $9ecd	                jsr xt_scr
.938f	20 81 a1	jsr $a181	                jsr xt_store
.9392	20 3a a8	jsr $a83a	                jsr xt_editor_l
.9395	60		rts		z_list:         rts
.9396					xt_literal:
.9396	20 38 d8	jsr $d838	                jsr underflow_1
.9399	a0 93		ldy #$93	                ldy #>literal_runtime
.939b	a9 a4		lda #$a4	                lda #<literal_runtime
.939d	20 ce d6	jsr $d6ce	                jsr cmpl_subroutine
.93a0	20 7a 87	jsr $877a	                jsr xt_comma
.93a3	60		rts		z_literal:      rts
.93a4					literal_runtime:
.93a4	ca		dex		                dex
.93a5	ca		dex		                dex
.93a6	68		pla		                pla             ; LSB
.93a7	85 24		sta $24		                sta tmp1
.93a9	68		pla		                pla             ; MSB
.93aa	85 25		sta $25		                sta tmp1+1
.93ac	a0 01		ldy #$01	                ldy #1
.93ae	b1 24		lda ($24),y	                lda (tmp1),y    ; LSB
.93b0	95 00		sta $00,x	                sta 0,x
.93b2	c8		iny		                iny
.93b3	b1 24		lda ($24),y	                lda (tmp1),y    ; MSB
.93b5	95 01		sta $01,x	                sta 1,x
.93b7	98		tya		                tya
.93b8	18		clc		                clc
.93b9	65 24		adc $24		                adc tmp1
.93bb	a8		tay		                tay
.93bc	a5 25		lda $25		                lda tmp1+1
.93be	69 00		adc #$00	                adc #0
.93c0	48		pha		                pha
.93c1	5a		phy		                phy
.93c2	60		rts		                rts
.93c3					byte_runtime:
.93c3	ca		dex		                dex             ; make space on the stack
.93c4	ca		dex		                dex
.93c5	68		pla		                pla             ; LSB
.93c6	7a		ply		                ply             ; MSB
.93c7	1a		inc a		                ina             ; inc return addr and store in tmp1
.93c8	d0 01		bne $93cb	                bne +
.93ca	c8		iny		                iny
.93cb	5a		phy		+               phy
.93cc	48		pha		                pha
.93cd	85 24		sta $24		                sta tmp1
.93cf	84 25		sty $25		                sty tmp1+1
.93d1	a0 00		ldy #$00	                ldy #0
.93d3	b1 24		lda ($24),y	                lda (tmp1),y    ; LSB
.93d5	95 00		sta $00,x	                sta 0,x
.93d7	74 01		stz $01,x	                stz 1,x         ; MSB is zero
.93d9	60		rts		                rts
.93da					xt_load:
.93da	20 38 d8	jsr $d838	                jsr underflow_1
.93dd	a0 01		ldy #$01	                ldy #blk_offset+1
.93df	b1 1e		lda ($1e),y	                lda (up),y
.93e1	48		pha		                pha
.93e2	88		dey		                dey
.93e3	b1 1e		lda ($1e),y	                lda (up),y
.93e5	48		pha		                pha
.93e6	b5 00		lda $00,x	                lda 0,x
.93e8	91 1e		sta ($1e),y	                sta (up),y
.93ea	c8		iny		                iny
.93eb	b5 01		lda $01,x	                lda 1,x
.93ed	91 1e		sta ($1e),y	                sta (up),y
.93ef	20 cd 83	jsr $83cd	                jsr xt_block
.93f2	ca		dex		                dex
.93f3	ca		dex		                dex
.93f4	a9 04		lda #$04	                lda #4
.93f6	95 01		sta $01,x	                sta 1,x
.93f8	74 00		stz $00,x	                stz 0,x
.93fa	20 db 90	jsr $90db	                jsr load_evaluate
.93fd	a0 00		ldy #$00	                ldy #blk_offset
.93ff	68		pla		                pla
.9400	91 1e		sta ($1e),y	                sta (up),y
.9402	c8		iny		                iny
.9403	68		pla		                pla
.9404	91 1e		sta ($1e),y	                sta (up),y
.9406	88		dey		                dey
.9407	11 1e		ora ($1e),y	                ora (up),y
.9409	f0 12		beq $941d	                beq _done
.940b	ca		dex		                dex
.940c	ca		dex		                dex
.940d	a0 00		ldy #$00	                ldy #blk_offset
.940f	b1 1e		lda ($1e),y	                lda (up),y
.9411	95 00		sta $00,x	                sta 0,x
.9413	c8		iny		                iny
.9414	b1 1e		lda ($1e),y	                lda (up),y
.9416	95 01		sta $01,x	                sta 1,x
.9418	20 cd 83	jsr $83cd	                jsr xt_block
.941b	e8		inx		                inx
.941c	e8		inx		                inx
.941d					_done:
.941d	60		rts		z_load:         rts
.941e					xt_loop:
.941e	a0 98		ldy #$98	                ldy #>xt_one
.9420	a9 2b		lda #$2b	                lda #<xt_one
.9422	20 ce d6	jsr $d6ce	                jsr cmpl_subroutine     ; drop through to +LOOP
.9425					xt_plus_loop:
.9425	a0 11		ldy #$11	                ldy #plus_loop_runtime_end-plus_loop_runtime
.9427	5a		phy		                phy             ; save counter to adjust CP
.9428					-
.9428	b9 8c 94	lda $948c,y	                lda plus_loop_runtime,y
.942b	91 00		sta ($00),y	                sta (cp),y
.942d	88		dey		                dey
.942e	10 f8		bpl $9428	                bpl -
.9430	68		pla		                pla
.9431	18		clc		                clc
.9432	65 00		adc $00		                adc cp
.9434	85 00		sta $00		                sta cp
.9436	a5 01		lda $01		                lda cp+1
.9438	69 00		adc #$00	                adc #0          ; only need carry
.943a	85 01		sta $01		                sta cp+1
.943c	20 7a 87	jsr $877a	                jsr xt_comma
.943f	a9 68		lda #$68	                lda #$68                ; opcode for PLA
.9441	a0 06		ldy #$06	                ldy #6
.9443					-
.9443	91 00		sta ($00),y	                sta (cp),y
.9445	88		dey		                dey
.9446	10 fb		bpl $9443	                bpl -
.9448	a9 06		lda #$06	                lda #6
.944a	18		clc		                clc
.944b	65 00		adc $00		                adc cp
.944d	85 00		sta $00		                sta cp
.944f	a5 01		lda $01		                lda cp+1
.9451	69 00		adc #$00	                adc #0                  ; only need carry
.9453	85 01		sta $01		                sta cp+1
.9455	b5 00		lda $00,x	                lda 0,x
.9457	85 24		sta $24		                sta tmp1
.9459	b5 01		lda $01,x	                lda 1,x
.945b	85 25		sta $25		                sta tmp1+1
.945d	e8		inx		                inx
.945e	e8		inx		                inx
.945f	a5 00		lda $00		                lda cp
.9461	38		sec		                sec
.9462	e9 01		sbc #$01	                sbc #1
.9464	85 26		sta $26		                sta tmp2
.9466	a5 01		lda $01		                lda cp+1
.9468	e9 00		sbc #$00	                sbc #0
.946a	85 27		sta $27		                sta tmp2+1
.946c	a0 00		ldy #$00	                ldy #0
.946e	a9 a9		lda #$a9	                lda #$A9        ; opcode for LDA immediate
.9470	91 24		sta ($24),y	                sta (tmp1),y
.9472	c8		iny		                iny
.9473	a5 27		lda $27		                lda tmp2+1      ; MSB
.9475	91 24		sta ($24),y	                sta (tmp1),y
.9477	c8		iny		                iny
.9478	a9 48		lda #$48	                lda #$48        ; Opcode for PHA
.947a	91 24		sta ($24),y	                sta (tmp1),y
.947c	c8		iny		                iny
.947d	a9 a9		lda #$a9	                lda #$A9        ; opcode for LDA immediate
.947f	91 24		sta ($24),y	                sta (tmp1),y
.9481	c8		iny		                iny
.9482	a5 26		lda $26		                lda tmp2        ; LSB
.9484	91 24		sta ($24),y	                sta (tmp1),y
.9486	c8		iny		                iny
.9487	a9 48		lda #$48	                lda #$48        ; Opcode for PHA
.9489	91 24		sta ($24),y	                sta (tmp1),y
.948b					z_loop:
.948b	60		rts		z_plus_loop:    rts
.948c					plus_loop_runtime:
.948c	18		clc		                clc
.948d	68		pla		                pla             ; LSB of index
.948e	75 00		adc $00,x	                adc 0,x         ; LSB of step
.9490	a8		tay		                tay             ; temporary storage of LSB
.9491	b8		clv		                clv
.9492	68		pla		                pla             ; MSB of index
.9493	75 01		adc $01,x	                adc 1,x         ; MSB of step
.9495	48		pha		                pha             ; put MSB of index back on stack
.9496	98		tya		                tya             ; put LSB of index back on stack
.9497	48		pha		                pha
.9498	e8		inx		                inx             ; dump step from TOS
.9499	e8		inx		                inx
.949a	70 03		bvs $949f	                bvs _hack+3     ; skip over JMP instruction
.949c					_hack:
>949c	4c				                .byte $4C
.949d					plus_loop_runtime_end:
.949d					xt_lshift:
.949d	20 3d d8	jsr $d83d	                jsr underflow_2
.94a0	b5 00		lda $00,x	                lda 0,x
.94a2	29 0f		and #$0f	                and #%00001111
.94a4	f0 08		beq $94ae	                beq _done
.94a6	a8		tay		                tay
.94a7					_loop:
.94a7	16 02		asl $02,x	                asl 2,x
.94a9	36 03		rol $03,x	                rol 3,x
.94ab	88		dey		                dey
.94ac	d0 f9		bne $94a7	                bne _loop
.94ae					_done:
.94ae	e8		inx		                inx
.94af	e8		inx		                inx
.94b0	60		rts		z_lshift:       rts
.94b1					xt_m_star:
.94b1	20 3d d8	jsr $d83d	                jsr underflow_2
.94b4	b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.94b6	55 03		eor $03,x	                eor 3,x         ; MSB of n2
.94b8	48		pha		                pha
.94b9	20 23 81	jsr $8123	                jsr xt_abs
.94bc	20 a2 a1	jsr $a1a2	                jsr xt_swap
.94bf	20 23 81	jsr $8123	                jsr xt_abs
.94c2	20 f0 a5	jsr $a5f0	                jsr xt_um_star          ; ( d )
.94c5	68		pla		                pla
.94c6	10 03		bpl $94cb	                bpl _done
.94c8	20 4d 8b	jsr $8b4d	                jsr xt_dnegate
.94cb					_done:
.94cb	60		rts		z_m_star:       rts
.94cc					xt_marker:
.94cc	20 6d d7	jsr $d76d	                jsr current_to_dp
.94cf	a5 02		lda $02		                lda dp
.94d1	48		pha		                pha
.94d2	a5 03		lda $03		                lda dp+1
.94d4	48		pha		                pha
.94d5	a5 00		lda $00		                lda cp
.94d7	48		pha		                pha
.94d8	a5 01		lda $01		                lda cp+1
.94da	48		pha		                pha
.94db	20 75 89	jsr $8975	                jsr xt_create
.94de	a5 00		lda $00		                lda cp          ; LSB
.94e0	38		sec		                sec
.94e1	e9 02		sbc #$02	                sbc #2
.94e3	85 00		sta $00		                sta cp
.94e5	a5 01		lda $01		                lda cp+1        ; MSB
.94e7	e9 00		sbc #$00	                sbc #0          ; we only care about the borrow
.94e9	85 01		sta $01		                sta cp+1
.94eb	a0 95		ldy #$95	                ldy #>marker_runtime
.94ed	a9 0a		lda #$0a	                lda #<marker_runtime
.94ef	20 da d6	jsr $d6da	                jsr cmpl_word
.94f2	7a		ply		                ply                     ; MSB
.94f3	68		pla		                pla                     ; LSB
.94f4	20 da d6	jsr $d6da	                jsr cmpl_word
.94f7	7a		ply		                ply                     ; MSB
.94f8	68		pla		                pla                     ; LSB
.94f9	20 da d6	jsr $d6da	                jsr cmpl_word
.94fc	a0 04		ldy #$04	                ldy #4                  ; Start at CURRENT
.94fe					_marker_loop:
.94fe	b1 1e		lda ($1e),y	                lda (up),y
.9500	20 de d6	jsr $d6de	                jsr cmpl_a
.9503	c8		iny		                iny
.9504	98		tya		                tya
.9505	c9 28		cmp #$28	                cmp #40                 ; One past the end of the search order.
.9507	d0 f5		bne $94fe	                bne _marker_loop
.9509	60		rts		z_marker:       rts
.950a					marker_runtime:
.950a	68		pla		                pla
.950b	85 24		sta $24		                sta tmp1        ; LSB of address
.950d	68		pla		                pla
.950e	85 25		sta $25		                sta tmp1+1      ; MSB of address
.9510	e6 24		inc $24		                inc tmp1
.9512	d0 02		bne $9516	                bne +
.9514	e6 25		inc $25		                inc tmp1+1
.9516					+
.9516	a0 00		ldy #$00	                ldy #0
.9518	b1 24		lda ($24),y	                lda (tmp1),y
.951a	85 00		sta $00		                sta cp
.951c	c8		iny		                iny
.951d	b1 24		lda ($24),y	                lda (tmp1),y
.951f	85 01		sta $01		                sta cp+1
.9521	c8		iny		                iny
.9522	b1 24		lda ($24),y	                lda (tmp1),y
.9524	85 02		sta $02		                sta dp
.9526	c8		iny		                iny
.9527	b1 24		lda ($24),y	                lda (tmp1),y
.9529	85 03		sta $03		                sta dp+1
.952b	a0 04		ldy #$04	                ldy #4
.952d					_marker_restore_loop:
.952d	b1 24		lda ($24),y	                lda (tmp1), y
.952f	91 1e		sta ($1e),y	                sta (up), y
.9531	c8		iny		                iny
.9532	98		tya		                tya
.9533	c9 28		cmp #$28	                cmp #40                 ; One past the end of the search order.
.9535	d0 f6		bne $952d	                bne _marker_restore_loop
.9537	20 80 d7	jsr $d780	                jsr dp_to_current       ; Move the CURRENT DP back.
.953a	60		rts		                rts
.953b					xt_max:
.953b	20 3d d8	jsr $d83d	                jsr underflow_2
.953e	b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.9540	d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets the carry
.9542	b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.9544	f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.9546	50 02		bvc $954a	                bvc _no_overflow
.9548	49 80		eor #$80	                eor #$80        ; complement negative flag
.954a					_no_overflow:
.954a	30 08		bmi $9554	                bmi _keep_nos
.954c	b5 00		lda $00,x	                lda 0,x
.954e	95 02		sta $02,x	                sta 2,x
.9550	b5 01		lda $01,x	                lda 1,x
.9552	95 03		sta $03,x	                sta 3,x
.9554					_keep_nos:
.9554	e8		inx		                inx
.9555	e8		inx		                inx
.9556	60		rts		z_max:          rts
.9557					xt_min:
.9557	20 3d d8	jsr $d83d	                jsr underflow_2
.955a	b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.955c	d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets carry
.955e	b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.9560	f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.9562	50 02		bvc $9566	                bvc _no_overflow
.9564	49 80		eor #$80	                eor #$80
.9566					_no_overflow:
.9566	10 08		bpl $9570	                bpl _keep_nos
.9568	b5 00		lda $00,x	                lda 0,x
.956a	95 02		sta $02,x	                sta 2,x
.956c	b5 01		lda $01,x	                lda 1,x
.956e	95 03		sta $03,x	                sta 3,x
.9570					_keep_nos:
.9570	e8		inx		                inx
.9571	e8		inx		                inx
.9572	60		rts		z_min:          rts
.9573					xt_minus:
.9573	20 3d d8	jsr $d83d	                jsr underflow_2
.9576	38		sec		                sec
.9577	b5 02		lda $02,x	                lda 2,x         ; LSB
.9579	f5 00		sbc $00,x	                sbc 0,x
.957b	95 02		sta $02,x	                sta 2,x
.957d	b5 03		lda $03,x	                lda 3,x         ; MSB
.957f	f5 01		sbc $01,x	                sbc 1,x
.9581	95 03		sta $03,x	                sta 3,x
.9583	e8		inx		                inx
.9584	e8		inx		                inx
.9585	60		rts		z_minus:        rts
.9586					xt_minus_leading:
.9586	20 3d d8	jsr $d83d	                jsr underflow_2
.9589					_loop:
.9589	b5 00		lda $00,x	                lda 0,x
.958b	15 01		ora $01,x	                ora 1,x
.958d	f0 0f		beq $959e	                beq _done
.958f	a1 02		lda ($02,x)	                lda (2,x)               ; get first character
.9591	20 2b d8	jsr $d82b	                jsr is_whitespace
.9594	90 08		bcc $959e	                bcc _done
.9596	20 2b 98	jsr $982b	                jsr xt_one              ; ( addr u 1 )
.9599	20 0d a0	jsr $a00d	                jsr xt_slash_string     ; ( addr+ u-1 )
.959c	80 eb		bra $9589	                bra _loop
.959e					_done:
.959e					z_minus_leading:
.959e	60		rts		                rts
.959f					xt_minus_trailing:
.959f	20 3d d8	jsr $d83d	                jsr underflow_2
.95a2	b5 00		lda $00,x	                lda 0,x         ; LSB of n
.95a4	15 01		ora $01,x	                ora 1,x         ; MSB of n
.95a6	f0 33		beq $95db	                beq _done
.95a8	18		clc		                clc
.95a9	b5 02		lda $02,x	                lda 2,x         ; LSB of addr
.95ab	75 00		adc $00,x	                adc 0,x
.95ad	85 24		sta $24		                sta tmp1
.95af	b5 03		lda $03,x	                lda 3,x         ; MSB of addr
.95b1	75 01		adc $01,x	                adc 1,x
.95b3	85 25		sta $25		                sta tmp1+1
.95b5	a5 24		lda $24		                lda tmp1
.95b7	d0 02		bne $95bb	                bne +
.95b9	c6 25		dec $25		                dec tmp1+1
.95bb					+
.95bb	c6 24		dec $24		                dec tmp1
.95bd					_loop:
.95bd	b2 24		lda ($24)	                lda (tmp1)
.95bf	c9 20		cmp #$20	                cmp #AscSP
.95c1	d0 18		bne $95db	                bne _done
.95c3	a5 24		lda $24		                lda tmp1
.95c5	d0 02		bne $95c9	                bne +
.95c7	c6 25		dec $25		                dec tmp1+1
.95c9					+
.95c9	c6 24		dec $24		                dec tmp1
.95cb	b5 00		lda $00,x	                lda 0,x
.95cd	d0 02		bne $95d1	                bne +
.95cf	d6 01		dec $01,x	                dec 1,x
.95d1					+
.95d1	d6 00		dec $00,x	                dec 0,x
.95d3	b5 00		lda $00,x	                lda 0,x
.95d5	15 01		ora $01,x	                ora 1,x
.95d7	f0 02		beq $95db	                beq _done       ; Count has reached zero - we're done!
.95d9	80 e2		bra $95bd	                bra _loop
.95db					_done:
.95db					z_minus_trailing:
.95db	60		rts		                rts
.95dc					xt_mod:
.95dc	20 3d d8	jsr $d83d	                jsr underflow_2
.95df	20 f5 9f	jsr $9ff5	                jsr xt_slash_mod
.95e2	e8		inx		                inx             ; DROP
.95e3	e8		inx		                inx
.95e4					z_mod:
.95e4	60		rts		                rts
.95e5					xt_move:
.95e5	b5 03		lda $03,x	                lda 3,x                 ; MSB of addr2
.95e7	d5 05		cmp $05,x	                cmp 5,x                 ; MSB of addr1
.95e9	f0 05		beq $95f0	                beq _lsb                ; wasn't helpful, move to LSB
.95eb	b0 0e		bcs $95fb	                bcs _to_move_up         ; we want CMOVE>
.95ed	4c a5 86	jmp $86a5	                jmp xt_cmove            ; JSR/RTS
.95f0					_lsb:
.95f0	b5 02		lda $02,x	                lda 2,x                 ; LSB of addr2
.95f2	d5 04		cmp $04,x	                cmp 4,x                 ; LSB of addr1
.95f4	f0 08		beq $95fe	                beq _equal              ; LSB is equal as well
.95f6	b0 03		bcs $95fb	                bcs _to_move_up         ; we want CMOVE>
.95f8	4c a5 86	jmp $86a5	                jmp xt_cmove            ; JSR/RTS
.95fb					_to_move_up:
.95fb	4c e0 86	jmp $86e0	                jmp xt_cmove_up         ; JSR/RTS
.95fe					_equal:
.95fe	8a		txa		                txa
.95ff	18		clc		                clc
.9600	69 06		adc #$06	                adc #6
.9602	aa		tax		                tax
.9603	60		rts		z_move:         rts
.9604					xt_name_to_int:
.9604	20 38 d8	jsr $d838	                jsr underflow_1
.9607	b5 00		lda $00,x	                lda 0,x
.9609	18		clc		                clc
.960a	69 04		adc #$04	                adc #4
.960c	85 28		sta $28		                sta tmp3
.960e	b5 01		lda $01,x	                lda 1,x
.9610	90 01		bcc $9613	                bcc _done
.9612	1a		inc a		                ina
.9613					_done:
.9613	85 29		sta $29		                sta tmp3+1
.9615	a0 00		ldy #$00	                ldy #0
.9617	b1 28		lda ($28),y	                lda (tmp3),y
.9619	95 00		sta $00,x	                sta 0,x
.961b	c8		iny		                iny
.961c	b1 28		lda ($28),y	                lda (tmp3),y
.961e	95 01		sta $01,x	                sta 1,x
.9620	60		rts		z_name_to_int:  rts
.9621					xt_name_to_string:
.9621	20 38 d8	jsr $d838	                jsr underflow_1
.9624	ca		dex		                dex
.9625	ca		dex		                dex
.9626	a1 02		lda ($02,x)	                lda (2,x)
.9628	95 00		sta $00,x	                sta 0,x
.962a	74 01		stz $01,x	                stz 1,x
.962c	b5 02		lda $02,x	                lda 2,x         ; LSB
.962e	18		clc		                clc
.962f	69 08		adc #$08	                adc #8
.9631	a8		tay		                tay
.9632	b5 03		lda $03,x	                lda 3,x         ; MSB
.9634	69 00		adc #$00	                adc #0          ; just need carry
.9636	95 03		sta $03,x	                sta 3,x
.9638	94 02		sty $02,x	                sty 2,x
.963a					z_name_to_string:
.963a	60		rts		                rts
.963b					xt_nc_limit:
.963b	ca		dex		                dex
.963c	ca		dex		                dex
.963d	a9 1a		lda #$1a	                lda #<nc_limit
.963f	95 00		sta $00,x	                sta 0,x
.9641	a9 00		lda #$00	                lda #>nc_limit
.9643	95 01		sta $01,x	                sta 1,x
.9645	60		rts		z_nc_limit:     rts
.9646					xt_negate:
.9646	20 38 d8	jsr $d838	                jsr underflow_1
.9649	a9 00		lda #$00	        	lda #0
.964b	38		sec		                sec
.964c	f5 00		sbc $00,x	                sbc 0,x         ; LSB
.964e	95 00		sta $00,x	                sta 0,x
.9650	a9 00		lda #$00	                lda #0
.9652	f5 01		sbc $01,x	                sbc 1,x         ; MSB
.9654	95 01		sta $01,x	                sta 1,x
.9656	60		rts		z_negate:       rts
.9657					xt_never_native:
.9657	20 6d d7	jsr $d76d	                jsr current_to_dp
.965a	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.965c	b1 02		lda ($02),y	                lda (dp),y
.965e	09 08		ora #$08	                ora #NN         ; Make sure NN flag is set
.9660	29 fd		and #$fd	                and #$ff-AN     ; and AN flag is clear.
.9662	91 02		sta ($02),y	                sta (dp),y
.9664					z_never_native:
.9664	60		rts		                rts
.9665					xt_nip:
.9665	20 3d d8	jsr $d83d	                jsr underflow_2
.9668	b5 00		lda $00,x	                lda 0,x         ; LSB
.966a	95 02		sta $02,x	                sta 2,x
.966c	b5 01		lda $01,x	                lda 1,x         ; MSB
.966e	95 03		sta $03,x	                sta 3,x
.9670	e8		inx		                inx
.9671	e8		inx		                inx
.9672	60		rts		z_nip:          rts
.9673					xt_not_equals:
.9673	20 3d d8	jsr $d83d	                jsr underflow_2
.9676	a0 00		ldy #$00	                ldy #0                  ; default is true
.9678	b5 00		lda $00,x	                lda 0,x                 ; LSB
.967a	d5 02		cmp $02,x	                cmp 2,x
.967c	d0 0a		bne $9688	                bne _not_equal
.967e	b5 01		lda $01,x	                lda 1,x                 ; MSB
.9680	d5 03		cmp $03,x	                cmp 3,x
.9682	d0 04		bne $9688	                bne _not_equal
.9684	a9 ff		lda #$ff	                lda #$FF
.9686	80 01		bra $9689	                bra _done
.9688					_not_equal:
.9688	88		dey		                dey                     ; drop thru to done
.9689					_done:
.9689	98		tya		                tya
.968a	e8		inx		                inx
.968b	e8		inx		                inx
.968c	95 00		sta $00,x	                sta 0,x
.968e	95 01		sta $01,x	                sta 1,x
.9690	60		rts		z_not_equals:   rts
.9691					xt_not_rote:
.9691	20 42 d8	jsr $d842	                jsr underflow_3
.9694	b4 01		ldy $01,x	                ldy 1,x         ; MSB first
.9696	b5 03		lda $03,x	                lda 3,x
.9698	95 01		sta $01,x	                sta 1,x
.969a	b5 05		lda $05,x	                lda 5,x
.969c	95 03		sta $03,x	                sta 3,x
.969e	94 05		sty $05,x	                sty 5,x
.96a0	b4 00		ldy $00,x	                ldy 0,x         ; LSB second
.96a2	b5 02		lda $02,x	                lda 2,x
.96a4	95 00		sta $00,x	                sta 0,x
.96a6	b5 04		lda $04,x	                lda 4,x
.96a8	95 02		sta $02,x	                sta 2,x
.96aa	94 04		sty $04,x	                sty 4,x
.96ac	60		rts		z_not_rote:     rts
.96ad					xt_number:
.96ad	20 3d d8	jsr $d83d	                jsr underflow_2
.96b0	64 2a		stz $2a		                stz tmpdsp      ; flag for double
.96b2	64 2b		stz $2b		                stz tmpdsp+1    ; flag for minus
.96b4	a5 18		lda $18		                lda base
.96b6	48		pha		                pha
.96b7	20 ac a3	jsr $a3ac	                jsr xt_two_dup
.96ba	a1 02		lda ($02,x)	                lda (2,x)
.96bc					_check_dec:
.96bc	c9 23		cmp #$23	                cmp #$23        ; ASCII for "#"
.96be	d0 04		bne $96c4	                bne _check_hex
.96c0	a9 0a		lda #$0a	                lda #$0A
.96c2	80 42		bra $9706	                bra _base_changed
.96c4					_check_hex:
.96c4	c9 24		cmp #$24	                cmp #$24        ; ASCII for "$"
.96c6	d0 04		bne $96cc	                bne _check_binary
.96c8	a9 10		lda #$10	                lda #$10
.96ca	80 3a		bra $9706	                bra _base_changed
.96cc					_check_binary:
.96cc	c9 25		cmp #$25	                cmp #$25        ; ASCII for "%"
.96ce	d0 04		bne $96d4	                bne _check_char
.96d0	a9 02		lda #$02	                lda #$02
.96d2	80 32		bra $9706	                bra _base_changed
.96d4					_check_char:
.96d4	c9 27		cmp #$27	                cmp #$27        ; ASCII for "'"
.96d6	d0 3a		bne $9712	                bne _check_minus
.96d8	b5 00		lda $00,x	                lda 0,x         ; Get the length
.96da	c9 03		cmp #$03	                cmp #$03
.96dc	d0 26		bne $9704	                bne _not_a_char
.96de	b5 01		lda $01,x	                lda 1,x
.96e0	d0 22		bne $9704	                bne _not_a_char ; No compare needed to check for non-zero.
.96e2	b5 02		lda $02,x	                lda 2,x         ; LSB of address
.96e4	18		clc		                clc
.96e5	69 02		adc #$02	                adc #2          ; length of string
.96e7	85 2c		sta $2c		                sta tmptos
.96e9	b5 03		lda $03,x	                lda 3,x
.96eb	69 00		adc #$00	                adc #0          ; only need carry
.96ed	85 2d		sta $2d		                sta tmptos+1
.96ef	b2 2c		lda ($2c)	                lda (tmptos)
.96f1	c9 27		cmp #$27	                cmp #$27        ; ASCII for "'"
.96f3	d0 0f		bne $9704	                bne _not_a_char
.96f5	f6 02		inc $02,x	                inc 2,x
.96f7	d0 02		bne $96fb	                bne +
.96f9	f6 03		inc $03,x	                inc 3,x
.96fb					+
.96fb	a1 02		lda ($02,x)	                lda (2,x)
.96fd	95 02		sta $02,x	                sta 2,x
.96ff	74 03		stz $03,x	                stz 3,x
.9701	4c 82 97	jmp $9782	                jmp _drop_original_string ; Single flag will drop the TOS for us.
.9704					_not_a_char:
.9704	80 5a		bra $9760	                bra _number_error
.9706					_base_changed:
.9706	85 18		sta $18		                sta base        ; Switch to the new base
.9708	f6 02		inc $02,x	                inc 2,x         ; start one character later
.970a	d0 02		bne $970e	                bne +
.970c	f6 03		inc $03,x	                inc 3,x
.970e					+
.970e	d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.9710	a1 02		lda ($02,x)	                lda (2,x)       ; Load the first char again
.9712					_check_minus:
.9712	c9 2d		cmp #$2d	                cmp #$2D        ; ASCII for "-"
.9714	d0 0a		bne $9720	                bne _check_dot
.9716	c6 2b		dec $2b		                dec tmpdsp+1
.9718	f6 02		inc $02,x	                inc 2,x         ; start one character later
.971a	d0 02		bne $971e	                bne +
.971c	f6 03		inc $03,x	                inc 3,x
.971e					+
.971e	d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.9720					_check_dot:
.9720	b5 02		lda $02,x	                lda 2,x         ; LSB of address
.9722	18		clc		                clc
.9723	75 00		adc $00,x	                adc 0,x         ; length of string
.9725	85 2c		sta $2c		                sta tmptos
.9727	b5 03		lda $03,x	                lda 3,x
.9729	69 00		adc #$00	                adc #0          ; only need carry
.972b	85 2d		sta $2d		                sta tmptos+1
.972d	a5 2c		lda $2c		                lda tmptos
.972f	d0 02		bne $9733	                bne +
.9731	c6 2d		dec $2d		                dec tmptos+1
.9733					+
.9733	c6 2c		dec $2c		                dec tmptos
.9735	b2 2c		lda ($2c)	                lda (tmptos)
.9737	c9 2e		cmp #$2e	                cmp #'.'
.9739	d0 04		bne $973f	                bne _main
.973b	c6 2a		dec $2a		                dec tmpdsp
.973d	d6 00		dec $00,x	                dec 0,x
.973f					_main:
.973f	ca		dex		                dex
.9740	ca		dex		                dex
.9741	ca		dex		                dex
.9742	ca		dex		                dex
.9743	b5 04		lda $04,x	                lda 4,x         ; LSB of length
.9745	95 00		sta $00,x	                sta 0,x
.9747	74 01		stz $01,x	                stz 1,x         ; MSB, max length 255 chars
.9749	b5 06		lda $06,x	                lda 6,x         ; LSB of address
.974b	95 02		sta $02,x	                sta 2,x
.974d	b5 07		lda $07,x	                lda 7,x         ; MSB of address
.974f	95 03		sta $03,x	                sta 3,x
.9751	74 04		stz $04,x	                stz 4,x         ; clear space for ud
.9753	74 05		stz $05,x	                stz 5,x
.9755	74 06		stz $06,x	                stz 6,x
.9757	74 07		stz $07,x	                stz 7,x
.9759	20 b1 a2	jsr $a2b1	                jsr xt_to_number        ; (ud addr u -- ud addr u )
.975c	b5 00		lda $00,x	                lda 0,x
.975e	f0 1e		beq $977e	                beq _all_converted
.9760					_number_error:
.9760	20 a4 a3	jsr $a3a4	                jsr xt_two_drop ; >NUMBER modified addr u
.9763	20 a4 a3	jsr $a3a4	                jsr xt_two_drop ; ud   (partially converted number)
.9766	a9 3e		lda #$3e	                lda #$3E        ; ASCII for ">"
.9768	20 02 8e	jsr $8e02	                jsr emit_a
.976b	20 f7 a4	jsr $a4f7	                jsr xt_type
.976e	a9 3c		lda #$3c	                lda #$3C        ; ASCII for "<"
.9770	20 02 8e	jsr $8e02	                jsr emit_a
.9773	20 12 a1	jsr $a112	                jsr xt_space
.9776	68		pla		                pla
.9777	85 18		sta $18		                sta base
.9779	a9 08		lda #$08	                lda #err_syntax
.977b	4c 4e d8	jmp $d84e	                jmp error
.977e					_all_converted:
.977e	e8		inx		                inx ; Drop the current addr u
.977f	e8		inx		                inx
.9780	e8		inx		                inx
.9781	e8		inx		                inx
.9782					_drop_original_string:
.9782	20 72 a4	jsr $a472	                jsr xt_two_swap  ; Drop the original addr u
.9785	20 a4 a3	jsr $a3a4	                jsr xt_two_drop  ; (was saved for unknown word error message)
.9788	a5 2a		lda $2a		                lda tmpdsp      ; flag for double
.978a	f0 0d		beq $9799	                beq _single
.978c	a9 20		lda #$20	                lda #%00100000
.978e	04 20		tsb $20		                tsb status
.9790	a5 2b		lda $2b		                lda tmpdsp+1
.9792	f0 12		beq $97a6	                beq _done       ; no minus, all done
.9794	20 4d 8b	jsr $8b4d	                jsr xt_dnegate
.9797	80 0d		bra $97a6	                bra _done
.9799					_single:
.9799	e8		inx		                inx
.979a	e8		inx		                inx
.979b	a9 20		lda #$20	                lda #%00100000
.979d	14 20		trb $20		                trb status
.979f	a5 2b		lda $2b		                lda tmpdsp+1
.97a1	f0 03		beq $97a6	                beq _done       ; no minus, all done
.97a3	20 46 96	jsr $9646	                jsr xt_negate
.97a6					_done:
.97a6	68		pla		                pla
.97a7	85 18		sta $18		                sta base
.97a9	60		rts		z_number:       rts
.97aa					xt_number_sign:
.97aa	20 3d d8	jsr $d83d	                jsr underflow_2         ; double number
.97ad	20 93 83	jsr $8393	                jsr xt_base
.97b0	20 8c 8f	jsr $8f8c	                jsr xt_fetch            ; ( ud1 base )
.97b3	20 64 a3	jsr $a364	                jsr xt_to_r             ; >r
.97b6	20 9c a7	jsr $a79c	                jsr xt_zero             ; 0
.97b9	20 a0 9a	jsr $9aa0	                jsr xt_r_fetch          ; r@
.97bc	20 ae a5	jsr $a5ae	                jsr xt_um_slash_mod     ; um/mod
.97bf	20 7a 9b	jsr $9b7a	                jsr xt_rot              ; rot
.97c2	20 7a 9b	jsr $9b7a	                jsr xt_rot              ; rot
.97c5	20 b5 9a	jsr $9ab5	                jsr xt_r_from           ; r>
.97c8	20 ae a5	jsr $a5ae	                jsr xt_um_slash_mod     ; um/mod
.97cb	20 7a 9b	jsr $9b7a	                jsr xt_rot              ; rot
.97ce	20 7a 9b	jsr $9b7a	                jsr xt_rot              ; ( ud rem )
.97d1	b5 00		lda $00,x	                lda 0,x
.97d3	a8		tay		                tay
.97d4	b9 0a d4	lda $d40a,y	                lda s_abc_upper,y
.97d7	95 00		sta $00,x	                sta 0,x
.97d9	74 01		stz $01,x	                stz 1,x                 ; paranoid; now ( ud char )
.97db	20 e3 91	jsr $91e3	                jsr xt_hold
.97de					z_number_sign:
.97de	60		rts		                rts
.97df					xt_number_sign_greater:
.97df	20 3d d8	jsr $d83d	                jsr underflow_2         ; double number
.97e2	a5 34		lda $34		                lda tohold
.97e4	95 00		sta $00,x	                sta 0,x         ; LSB of tohold
.97e6	95 02		sta $02,x	                sta 2,x
.97e8	a5 35		lda $35		                lda tohold+1
.97ea	95 01		sta $01,x	                sta 1,x         ; MSB of addr
.97ec	95 03		sta $03,x	                sta 3,x         ; ( addr addr )
.97ee	20 c4 98	jsr $98c4	                jsr xt_pad      ; ( addr addr pad )
.97f1	38		sec		                sec
.97f2	b5 00		lda $00,x	                lda 0,x         ; LSB of pad address
.97f4	f5 02		sbc $02,x	                sbc 2,x
.97f6	95 02		sta $02,x	                sta 2,x
.97f8	b5 01		lda $01,x	                lda 1,x         ; MSB, which should always be zero
.97fa	f5 03		sbc $03,x	                sbc 3,x
.97fc	95 03		sta $03,x	                sta 3,x         ; ( addr u pad )
.97fe	e8		inx		                inx
.97ff	e8		inx		                inx
.9800					z_number_sign_greater:
.9800	60		rts		                rts
.9801					xt_number_sign_s:
.9801	20 3d d8	jsr $d83d	                jsr underflow_2
.9804					_loop:
.9804	20 aa 97	jsr $97aa	                jsr xt_number_sign
.9807	b5 00		lda $00,x	                lda 0,x
.9809	15 01		ora $01,x	                ora 1,x
.980b	15 02		ora $02,x	                ora 2,x
.980d	15 03		ora $03,x	                ora 3,x
.980f	d0 f3		bne $9804	                bne _loop
.9811					z_number_sign_s:
.9811	60		rts		                rts
.9812					xt_of:
.9812	a0 98		ldy #$98	                ldy #>xt_over
.9814	a9 b6		lda #$b6	                lda #<xt_over
.9816	20 ce d6	jsr $d6ce	                jsr cmpl_subroutine
.9819	a0 8e		ldy #$8e	                ldy #>xt_equal
.981b	a9 da		lda #$da	                lda #<xt_equal
.981d	20 ce d6	jsr $d6ce	                jsr cmpl_subroutine
.9820	20 0f 92	jsr $920f	                jsr xt_if
.9823	a0 8d		ldy #$8d	                ldy #>xt_drop
.9825	a9 3a		lda #$3a	                lda #<xt_drop
.9827	20 ce d6	jsr $d6ce	                jsr cmpl_subroutine
.982a	60		rts		z_of:           rts
.982b					xt_editor_wordlist:
.982b					xt_one:
.982b	ca		dex		                dex
.982c	ca		dex		                dex
.982d	a9 01		lda #$01	                lda #1
.982f	95 00		sta $00,x	                sta 0,x
.9831	74 01		stz $01,x	                stz 1,x
.9833					z_editor_wordlist:
.9833					z_one:
.9833	60		rts		                rts
.9834					xt_one_minus:
.9834	20 38 d8	jsr $d838	                jsr underflow_1
.9837	b5 00		lda $00,x	                lda 0,x
.9839	d0 02		bne $983d	                bne +
.983b	d6 01		dec $01,x	                dec 1,x
.983d					+
.983d	d6 00		dec $00,x	                dec 0,x
.983f	60		rts		z_one_minus:    rts
.9840					xt_char_plus:
.9840					xt_one_plus:
.9840	20 38 d8	jsr $d838	                jsr underflow_1
.9843	f6 00		inc $00,x	                inc 0,x
.9845	d0 02		bne $9849	                bne _done
.9847	f6 01		inc $01,x	                inc 1,x
.9849					_done:
.9849					z_char_plus:
.9849	60		rts		z_one_plus:     rts
.984a					xt_only:
.984a	ca		dex		                dex
.984b	ca		dex		                dex
.984c	a9 ff		lda #$ff	                lda #$FF
.984e	95 00		sta $00,x	                sta 0,x
.9850	95 01		sta $01,x	                sta 1,x
.9852	20 3e 9d	jsr $9d3e	                jsr xt_set_order
.9855	60		rts		z_only:         rts
.9856					xt_or:
.9856	20 3d d8	jsr $d83d	                jsr underflow_2
.9859	b5 00		lda $00,x	                lda 0,x
.985b	15 02		ora $02,x	                ora 2,x
.985d	95 02		sta $02,x	                sta 2,x
.985f	b5 01		lda $01,x	                lda 1,x
.9861	15 03		ora $03,x	                ora 3,x
.9863	95 03		sta $03,x	                sta 3,x
.9865	e8		inx		                inx
.9866	e8		inx		                inx
.9867	60		rts		z_or:           rts
.9868					xt_order:
.9868	20 6f 89	jsr $896f	                jsr xt_cr
.986b	20 40 91	jsr $9140	                jsr xt_get_order        ; ( wid_n ... wid_1 n )
.986e	b5 00		lda $00,x	                lda 0,x                 ; assumes no more than 255 wordlists
.9870	f0 1e		beq $9890	                beq _drop_done
.9872					_have_wordlists:
.9872	a8		tay		                tay
.9873					_loop:
.9873	e8		inx		                inx
.9874	e8		inx		                inx                     ; DROP, now ( wid_n ... wid_1 )
.9875	b5 00		lda $00,x	                lda 0,x
.9877	5a		phy		                phy
.9878	20 93 98	jsr $9893	                jsr order_print_wid_string   ; internal helper function
.987b	7a		ply		                ply
.987c	88		dey		                dey
.987d	d0 f4		bne $9873	                bne _loop
.987f	20 12 a1	jsr $a112	                jsr xt_space
.9882	20 12 a1	jsr $a112	                jsr xt_space
.9885	20 35 91	jsr $9135	                jsr xt_get_current      ; ( wid )
.9888	b5 00		lda $00,x	                lda 0,x
.988a	20 93 98	jsr $9893	                jsr order_print_wid_string
.988d	20 6f 89	jsr $896f	                jsr xt_cr
.9890					_drop_done:
.9890	e8		inx		                inx
.9891	e8		inx		                inx
.9892					z_order:
.9892	60		rts		                rts
.9893					order_print_wid_string:
.9893	c9 04		cmp #$04	                cmp #4
.9895	90 09		bcc $98a0	                bcc _output_string      ; less than 4, print a real string
.9897	ca		dex		                dex
.9898	ca		dex		                dex
.9899	95 00		sta $00,x	                sta 0,x
.989b	74 01		stz $01,x	                stz 1,x
.989d	4c 22 a5	jmp $a522	                jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
.98a0					_output_string:
.98a0	a8		tay		                tay
.98a1	b9 a7 98	lda $98a7,y	                lda _wid_data,y
.98a4	4c 74 d8	jmp $d874	                jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
.98a7					_wid_data:
>98a7	04				        .byte str_wid_forth            ; WID 0: "Forth"
>98a8	05				        .byte str_wid_editor           ; WID 1: "Editor"
>98a9	06				        .byte str_wid_assembler        ; WID 2: "Assembler"
>98aa	07				        .byte str_wid_root             ; WID 3: "Root"
.98ab					xt_output:
.98ab	ca		dex		                dex
.98ac	ca		dex		                dex
.98ad	a9 10		lda #$10	                lda #<output
.98af	95 00		sta $00,x	                sta 0,x
.98b1	a9 00		lda #$00	                lda #>output
.98b3	95 01		sta $01,x	                sta 1,x
.98b5	60		rts		z_output:       rts
.98b6					xt_over:
.98b6	20 3d d8	jsr $d83d	                jsr underflow_2
.98b9	ca		dex		                dex
.98ba	ca		dex		                dex
.98bb	b5 04		lda $04,x	                lda 4,x         ; LSB
.98bd	95 00		sta $00,x	                sta 0,x
.98bf	b5 05		lda $05,x	                lda 5,x         ; MSB
.98c1	95 01		sta $01,x	                sta 1,x
.98c3	60		rts		z_over:         rts
.98c4					xt_pad:
.98c4	ca		dex		                dex
.98c5	ca		dex		                dex
.98c6	a5 00		lda $00		                lda cp
.98c8	18		clc		                clc
.98c9	69 ff		adc #$ff	                adc #padoffset  ; assumes padoffset one byte in size
.98cb	95 00		sta $00,x	                sta 0,x
.98cd	a5 01		lda $01		                lda cp+1
.98cf	69 00		adc #$00	                adc #0          ; only need carry
.98d1	95 01		sta $01,x	                sta 1,x
.98d3	60		rts		z_pad:          rts
.98d4					xt_page:
.98d4	a9 1b		lda #$1b	                lda #AscESC
.98d6	20 02 8e	jsr $8e02	                jsr emit_a
.98d9	a9 5b		lda #$5b	                lda #$5B        ; ASCII for "["
.98db	20 02 8e	jsr $8e02	                jsr emit_a
.98de	a9 32		lda #$32	                lda #'2'
.98e0	20 02 8e	jsr $8e02	                jsr emit_a
.98e3	a9 4a		lda #$4a	                lda #'J'
.98e5	20 02 8e	jsr $8e02	                jsr emit_a
.98e8	20 9c a7	jsr $a79c	                jsr xt_zero
.98eb	20 9c a7	jsr $a79c	                jsr xt_zero
.98ee	20 3a 83	jsr $833a	                jsr xt_at_xy
.98f1	60		rts		z_page:         rts
.98f2					xt_paren:
.98f2	ca		dex		                dex
.98f3	ca		dex		                dex
.98f4	a9 29		lda #$29	                lda #41     ; Right parenthesis
.98f6	95 00		sta $00,x	                sta 0,x
.98f8	74 01		stz $01,x	                stz 1,x
.98fa	20 5d 99	jsr $995d	                jsr xt_parse
.98fd	e8		inx		                inx
.98fe	e8		inx		                inx
.98ff	e8		inx		                inx
.9900	e8		inx		                inx
.9901	60		rts		z_paren:        rts
.9902					xt_parse_name:
.9902	a5 0a		lda $0a		                lda ciblen              ; LSB of counter
.9904	38		sec		                sec
.9905	e5 0c		sbc $0c		                sbc toin
.9907	85 24		sta $24		                sta tmp1
.9909	a5 0b		lda $0b		                lda ciblen+1            ; MSB
.990b	e5 0d		sbc $0d		                sbc toin+1
.990d	85 25		sta $25		                sta tmp1+1
.990f	a5 24		lda $24		                lda tmp1
.9911	05 25		ora $25		                ora tmp1+1
.9913	f0 28		beq $993d	                beq _empty_line
.9915	a5 08		lda $08		                lda cib
.9917	18		clc		                clc
.9918	65 0c		adc $0c		                adc toin
.991a	85 26		sta $26		                sta tmp2                ; LSB of first character
.991c	a5 09		lda $09		                lda cib+1
.991e	65 0d		adc $0d		                adc toin+1
.9920	85 27		sta $27		                sta tmp2+1              ; MSB
.9922					_skip_loop:
.9922	b2 26		lda ($26)	                lda (tmp2)              ; work copy of cib
.9924	20 2b d8	jsr $d82b	                jsr is_whitespace
.9927	90 1f		bcc $9948	                bcc _char_found
.9929	e6 26		inc $26		                inc tmp2
.992b	d0 02		bne $992f	                bne +
.992d	e6 27		inc $27		                inc tmp2+1
.992f					+
.992f	a5 24		lda $24		                lda tmp1
.9931	d0 02		bne $9935	                bne +
.9933	c6 25		dec $25		                dec tmp1+1
.9935	c6 24		dec $24		+               dec tmp1
.9937	a5 24		lda $24		                lda tmp1
.9939	05 25		ora $25		                ora tmp1+1
.993b	d0 e5		bne $9922	                bne _skip_loop          ; fall through if empty line
.993d					_empty_line:
.993d	ca		dex		                dex
.993e	ca		dex		                dex
.993f	ca		dex		                dex
.9940	ca		dex		                dex
.9941	74 00		stz $00,x	                stz 0,x                 ; TOS is zero
.9943	74 01		stz $01,x	                stz 1,x
.9945	4c f4 99	jmp $99f4	                jmp z_parse_name        ; skip over PARSE
.9948					_char_found:
.9948	a5 26		lda $26		                lda tmp2
.994a	38		sec		                sec
.994b	e5 08		sbc $08		                sbc cib
.994d	85 0c		sta $0c		                sta toin
.994f	a5 27		lda $27		                lda tmp2+1
.9951	e5 09		sbc $09		                sbc cib+1
.9953	85 0d		sta $0d		                sta toin+1
.9955	ca		dex		                dex
.9956	ca		dex		                dex
.9957	a9 20		lda #$20	                lda #AscSP
.9959	95 00		sta $00,x	                sta 0,x
.995b	74 01		stz $01,x	                stz 1,x                 ; paranoid, now ( "name" c )
.995d					xt_parse:
.995d	20 38 d8	jsr $d838	                jsr underflow_1
.9960	a5 0a		lda $0a		                lda ciblen
.9962	05 0b		ora $0b		                ora ciblen+1
.9964	f0 0c		beq $9972	                beq _abort_parse
.9966	a5 0d		lda $0d		                lda toin+1              ; MSB
.9968	c5 0b		cmp $0b		                cmp ciblen+1
.996a	90 0e		bcc $997a	                bcc _go_parse           ; unsigned comparison
.996c	a5 0c		lda $0c		                lda toin                ; LSB
.996e	c5 0a		cmp $0a		                cmp ciblen
.9970	90 08		bcc $997a	                bcc _go_parse
.9972					_abort_parse:
.9972	ca		dex		                dex
.9973	ca		dex		                dex
.9974	74 00		stz $00,x	                stz 0,x
.9976	74 01		stz $01,x	                stz 1,x
.9978	80 7a		bra $99f4	                bra _done
.997a					_go_parse:
.997a	b5 00		lda $00,x	                lda 0,x
.997c	85 2c		sta $2c		                sta tmptos
.997e	ca		dex		                dex
.997f	ca		dex		                dex
.9980	a5 08		lda $08		                lda cib
.9982	18		clc		                clc
.9983	65 0c		adc $0c		                adc toin        ; LSB
.9985	85 24		sta $24		                sta tmp1
.9987	85 26		sta $26		                sta tmp2
.9989	95 02		sta $02,x	                sta 2,x
.998b	a5 09		lda $09		                lda cib+1
.998d	65 0d		adc $0d		                adc toin+1      ; MSB
.998f	85 25		sta $25		                sta tmp1+1
.9991	85 27		sta $27		                sta tmp2+1
.9993	95 03		sta $03,x	                sta 3,x
.9995	a5 08		lda $08		                lda cib
.9997	18		clc		                clc
.9998	65 0a		adc $0a		                adc ciblen
.999a	85 28		sta $28		                sta tmp3
.999c	a5 09		lda $09		                lda cib+1
.999e	65 0b		adc $0b		                adc ciblen+1
.99a0	85 29		sta $29		                sta tmp3+1
.99a2	64 2d		stz $2d		                stz tmptos+1
.99a4					_loop:
.99a4	a5 26		lda $26		                lda tmp2
.99a6	c5 28		cmp $28		                cmp tmp3
.99a8	d0 06		bne $99b0	                bne _not_empty
.99aa	a5 27		lda $27		                lda tmp2+1
.99ac	c5 29		cmp $29		                cmp tmp3+1
.99ae	f0 1d		beq $99cd	                beq _eol
.99b0					_not_empty:
.99b0	b2 26		lda ($26)	                lda (tmp2)
.99b2	a4 2c		ldy $2c		                ldy tmptos
.99b4	c0 20		cpy #$20	                cpy #AscSP
.99b6	d0 07		bne $99bf	                bne _not_whitespace
.99b8	20 2b d8	jsr $d82b	                jsr is_whitespace
.99bb	90 02		bcc $99bf	                bcc _not_whitespace
.99bd	80 0c		bra $99cb	                bra _found_delimiter
.99bf					_not_whitespace:
.99bf	c5 2c		cmp $2c		                cmp tmptos
.99c1	f0 08		beq $99cb	                beq _found_delimiter
.99c3	e6 26		inc $26		                inc tmp2
.99c5	d0 dd		bne $99a4	                bne _loop
.99c7	e6 27		inc $27		                inc tmp2+1
.99c9	80 d9		bra $99a4	                bra _loop
.99cb					_found_delimiter:
.99cb	e6 2d		inc $2d		                inc tmptos+1
.99cd					_eol:
.99cd	a5 26		lda $26		                lda tmp2
.99cf	38		sec		                sec
.99d0	e5 24		sbc $24		                sbc tmp1
.99d2	95 00		sta $00,x	                sta 0,x
.99d4	a5 27		lda $27		                lda tmp2+1
.99d6	e5 25		sbc $25		                sbc tmp1+1
.99d8	95 01		sta $01,x	                sta 1,x
.99da	a5 26		lda $26		                lda tmp2
.99dc	38		sec		                sec
.99dd	e5 08		sbc $08		                sbc cib
.99df	85 0c		sta $0c		                sta toin
.99e1	a5 27		lda $27		                lda tmp2+1
.99e3	e5 09		sbc $09		                sbc cib+1
.99e5	85 0d		sta $0d		                sta toin+1
.99e7	a5 0c		lda $0c		                lda toin
.99e9	18		clc		                clc
.99ea	65 2d		adc $2d		                adc tmptos+1
.99ec	85 0c		sta $0c		                sta toin
.99ee	a5 0d		lda $0d		                lda toin+1
.99f0	69 00		adc #$00	                adc #0          ; we only need the carry
.99f2	85 0d		sta $0d		                sta toin+1
.99f4					_done:
.99f4					z_parse_name:
.99f4	60		rts		z_parse:        rts
.99f5					xt_pick:
.99f5	16 00		asl $00,x	                asl 0,x         ; we assume u < 128 (stack is small)
.99f7	8a		txa		                txa
.99f8	75 00		adc $00,x	                adc 0,x
.99fa	a8		tay		                tay
.99fb	b9 02 00	lda $0002,y	                lda 0002,y
.99fe	95 00		sta $00,x	                sta 0,x
.9a00	b9 03 00	lda $0003,y	                lda 0003,y
.9a03	95 01		sta $01,x	                sta 1,x
.9a05	60		rts		z_pick:         rts
.9a06					xt_plus:
.9a06	20 3d d8	jsr $d83d	                jsr underflow_2
.9a09	18		clc		                clc
.9a0a	b5 00		lda $00,x	                lda 0,x         ; LSB
.9a0c	75 02		adc $02,x	                adc 2,x
.9a0e	95 02		sta $02,x	                sta 2,x
.9a10	b5 01		lda $01,x	                lda 1,x         ; MSB. No CLC, conserve carry bit
.9a12	75 03		adc $03,x	                adc 3,x
.9a14	95 03		sta $03,x	                sta 3,x
.9a16	e8		inx		                inx
.9a17	e8		inx		                inx
.9a18	60		rts		z_plus:         rts
.9a19					xt_plus_store:
.9a19	20 3d d8	jsr $d83d	                jsr underflow_2
.9a1c	b5 00		lda $00,x	                lda 0,x
.9a1e	85 24		sta $24		                sta tmp1
.9a20	b5 01		lda $01,x	                lda 1,x
.9a22	85 25		sta $25		                sta tmp1+1
.9a24	a0 00		ldy #$00	                ldy #0          ; LSB
.9a26	b1 24		lda ($24),y	                lda (tmp1),y
.9a28	18		clc		                clc
.9a29	75 02		adc $02,x	                adc 2,x
.9a2b	91 24		sta ($24),y	                sta (tmp1),y
.9a2d	c8		iny		                iny             ; MSB
.9a2e	b1 24		lda ($24),y	                lda (tmp1),y
.9a30	75 03		adc $03,x	                adc 3,x
.9a32	91 24		sta ($24),y	                sta (tmp1),y
.9a34	e8		inx		                inx
.9a35	e8		inx		                inx
.9a36	e8		inx		                inx
.9a37	e8		inx		                inx
.9a38	60		rts		z_plus_store:   rts
.9a39					xt_postpone:
.9a39	20 02 99	jsr $9902	                jsr xt_parse_name               ; ( -- addr n )
.9a3c	b5 00		lda $00,x	                lda 0,x
.9a3e	15 01		ora $01,x	                ora 1,x
.9a40	d0 05		bne $9a47	                bne +
.9a42	a9 05		lda #$05	                lda #err_noname
.9a44	4c 4e d8	jmp $d84e	                jmp error
.9a47					+
.9a47	20 e7 8f	jsr $8fe7	                jsr xt_find_name                ; ( -- nt | 0 )
.9a4a	d0 05		bne $9a51	                bne +
.9a4c	a9 05		lda #$05	                lda #err_noname
.9a4e	4c 4e d8	jmp $d84e	                jmp error
.9a51					+
.9a51	b5 00		lda $00,x	                lda 0,x
.9a53	85 24		sta $24		                sta tmp1
.9a55	b5 01		lda $01,x	                lda 1,x
.9a57	85 25		sta $25		                sta tmp1+1
.9a59	20 04 96	jsr $9604	                jsr xt_name_to_int              ; ( nt -- xt )
.9a5c	e6 24		inc $24		                inc tmp1
.9a5e	d0 02		bne $9a62	                bne +
.9a60	e6 25		inc $25		                inc tmp1+1
.9a62					+
.9a62	b2 24		lda ($24)	                lda (tmp1)
.9a64	29 04		and #$04	                and #IM         ; mask all but Intermediate flag
.9a66	f0 05		beq $9a6d	                beq _not_immediate
.9a68	20 f9 87	jsr $87f9	                jsr xt_compile_comma
.9a6b	80 0a		bra $9a77	                bra _done
.9a6d					_not_immediate:
.9a6d	20 96 93	jsr $9396	                jsr xt_literal
.9a70	a0 87		ldy #$87	                ldy #>xt_compile_comma
.9a72	a9 f9		lda #$f9	                lda #<xt_compile_comma
.9a74	20 ce d6	jsr $d6ce	                jsr cmpl_subroutine
.9a77					_done:
.9a77	60		rts		z_postpone:     rts
.9a78					xt_previous:
.9a78	20 40 91	jsr $9140	                jsr xt_get_order
.9a7b	20 65 96	jsr $9665	                jsr xt_nip
.9a7e	20 34 98	jsr $9834	                jsr xt_one_minus
.9a81	20 3e 9d	jsr $9d3e	                jsr xt_set_order
.9a84	60		rts		z_previous:     rts
.9a85					xt_question:
.9a85	20 8c 8f	jsr $8f8c	                jsr xt_fetch
.9a88	20 42 8c	jsr $8c42	                jsr xt_dot
.9a8b	60		rts		z_question:     rts
.9a8c					xt_question_dup:
.9a8c	20 38 d8	jsr $d838	                jsr underflow_1
.9a8f	b5 00		lda $00,x	                lda 0,x
.9a91	15 01		ora $01,x	                ora 1,x
.9a93	f0 0a		beq $9a9f	                beq _done
.9a95	ca		dex		                dex
.9a96	ca		dex		                dex
.9a97	b5 02		lda $02,x	                lda 2,x
.9a99	95 00		sta $00,x	                sta 0,x
.9a9b	b5 03		lda $03,x	                lda 3,x
.9a9d	95 01		sta $01,x	                sta 1,x
.9a9f					_done:
.9a9f	60		rts		z_question_dup: rts
.9aa0					xt_r_fetch:
.9aa0	7a		ply		                ply             ; LSB
.9aa1	84 24		sty $24		                sty tmp1
.9aa3	7a		ply		                ply             ; MSB
.9aa4	ca		dex		                dex
.9aa5	ca		dex		                dex
.9aa6	68		pla		                pla             ; LSB
.9aa7	95 00		sta $00,x	                sta 0,x
.9aa9	68		pla		                pla             ; MSB
.9aaa	95 01		sta $01,x	                sta 1,x
.9aac	48		pha		                pha
.9aad	b5 00		lda $00,x	                lda 0,x
.9aaf	48		pha		                pha
.9ab0	5a		phy		                phy             ; MSB
.9ab1	a4 24		ldy $24		                ldy tmp1
.9ab3	5a		phy		                phy             ; LSB
.9ab4	60		rts		z_r_fetch:      rts
.9ab5					xt_r_from:
.9ab5	68		pla		                pla             ; LSB
.9ab6	85 2c		sta $2c		                sta tmptos
.9ab8	7a		ply		                ply             ; MSB
.9ab9	ca		dex		                dex
.9aba	ca		dex		                dex
.9abb	68		pla		                pla             ; LSB
.9abc	95 00		sta $00,x	                sta 0,x
.9abe	68		pla		                pla             ; MSB
.9abf	95 01		sta $01,x	                sta 1,x
.9ac1	5a		phy		                phy             ; MSB
.9ac2	a5 2c		lda $2c		                lda tmptos
.9ac4	48		pha		                pha             ; LSB
.9ac5	60		rts		z_r_from:       rts
.9ac6					xt_r_to_input:
.9ac6	68		pla		                pla
.9ac7	85 24		sta $24		                sta tmp1
.9ac9	68		pla		                pla
.9aca	85 25		sta $25		                sta tmp1+1
.9acc	a0 00		ldy #$00	                ldy #0
.9ace					_loop:
.9ace	68		pla		                pla
.9acf	99 06 00	sta $0006,y	                sta insrc,y
.9ad2	c8		iny		                iny
.9ad3	c0 08		cpy #$08	                cpy #8
.9ad5	d0 f7		bne $9ace	                bne _loop
.9ad7	a5 25		lda $25		                lda tmp1+1
.9ad9	48		pha		                pha
.9ada	a5 24		lda $24		                lda tmp1
.9adc	48		pha		                pha
.9add	60		rts		z_r_to_input: 	rts
.9ade					xt_recurse:
.9ade	a0 00		ldy #$00	                ldy #0
.9ae0	a9 20		lda #$20	                lda #$20        ; opcode for JSR
.9ae2	91 00		sta ($00),y	                sta (cp),y
.9ae4	c8		iny		                iny
.9ae5	24 20		bit $20		                bit status
.9ae7	70 0c		bvs $9af5	                bvs _nt_in_workword
.9ae9	a5 04		lda $04		                lda workword
.9aeb	91 00		sta ($00),y	                sta (cp),y
.9aed	c8		iny		                iny
.9aee	a5 05		lda $05		                lda workword+1
.9af0	91 00		sta ($00),y	                sta (cp),y
.9af2	c8		iny		                iny
.9af3	80 1b		bra $9b10	                bra _update_cp
.9af5					_nt_in_workword:
.9af5	a5 04		lda $04		                lda workword            ; LSB
.9af7	18		clc		                clc
.9af8	69 04		adc #$04	                adc #4
.9afa	85 24		sta $24		                sta tmp1
.9afc	a5 05		lda $05		                lda workword+1          ; MSB
.9afe	69 00		adc #$00	                adc #0
.9b00	85 25		sta $25		                sta tmp1+1
.9b02	b2 24		lda ($24)	                lda (tmp1)
.9b04	91 00		sta ($00),y	                sta (cp),y
.9b06	5a		phy		                phy
.9b07	a0 01		ldy #$01	                ldy #1
.9b09	b1 24		lda ($24),y	                lda (tmp1),y
.9b0b	7a		ply		                ply
.9b0c	c8		iny		                iny
.9b0d	91 00		sta ($00),y	                sta (cp),y
.9b0f	c8		iny		                iny
.9b10					_update_cp:
.9b10	98		tya		                tya
.9b11	18		clc		                clc
.9b12	65 00		adc $00		                adc cp
.9b14	85 00		sta $00		                sta cp
.9b16	90 02		bcc $9b1a	                bcc _done
.9b18	e6 01		inc $01		                inc cp+1
.9b1a					_done:
.9b1a	60		rts		z_recurse:      rts
.9b1b					xt_refill:
.9b1b	a5 06		lda $06		                lda insrc               ; cheat: We only check LSB
.9b1d	d0 2d		bne $9b4c	                bne _src_not_kbd
.9b1f	ca		dex		                dex
.9b20	ca		dex		                dex
.9b21	ca		dex		                dex
.9b22	ca		dex		                dex
.9b23	a5 08		lda $08		                lda cib                 ; address of CIB is NOS
.9b25	95 02		sta $02,x	                sta 2,x
.9b27	a5 09		lda $09		                lda cib+1
.9b29	95 03		sta $03,x	                sta 3,x
.9b2b	64 0a		stz $0a		                stz ciblen              ; go in with empty buffer
.9b2d	64 0b		stz $0b		                stz ciblen+1
.9b2f	a9 ff		lda #$ff	                lda #bsize              ; max number of chars is TOS
.9b31	95 00		sta $00,x	                sta 0,x
.9b33	74 01		stz $01,x	                stz 1,x                 ; cheat: We only accept max 255
.9b35	20 38 81	jsr $8138	                jsr xt_accept           ; ( addr n1 -- n2)
.9b38	b5 00		lda $00,x	                lda 0,x
.9b3a	85 0a		sta $0a		                sta ciblen
.9b3c	b5 01		lda $01,x	                lda 1,x
.9b3e	85 0b		sta $0b		                sta ciblen+1            ; though we only accept 255 chars
.9b40	64 0c		stz $0c		                stz toin
.9b42	64 0d		stz $0d		                stz toin+1
.9b44	a9 ff		lda #$ff	                lda #$FF                ; overwrite with TRUE flag
.9b46	95 00		sta $00,x	                sta 0,x
.9b48	95 01		sta $01,x	                sta 1,x
.9b4a	80 10		bra $9b5c	                bra _done
.9b4c					_src_not_kbd:
.9b4c	1a		inc a		                ina
.9b4d	d0 08		bne $9b57	                bne _src_not_string
.9b4f	ca		dex		                dex
.9b50	ca		dex		                dex
.9b51	74 00		stz $00,x	                stz 0,x
.9b53	74 01		stz $01,x	                stz 1,x
.9b55	80 05		bra $9b5c	                bra z_refill
.9b57					_src_not_string:
.9b57	a9 01		lda #$01	                lda #err_badsource
.9b59	4c 4e d8	jmp $d84e	                jmp error
.9b5c					_done:
.9b5c	60		rts		z_refill:       rts
.9b5d					xt_repeat:
.9b5d	20 73 82	jsr $8273	                jsr xt_again
.9b60	20 7e 91	jsr $917e	                jsr xt_here
.9b63	20 a2 a1	jsr $a1a2	                jsr xt_swap
.9b66	20 81 a1	jsr $a181	                jsr xt_store
.9b69	60		rts		z_repeat:       rts
.9b6a					xt_right_bracket:
.9b6a	a9 ff		lda #$ff	                lda #$FF
.9b6c	85 16		sta $16		                sta state
.9b6e	85 17		sta $17		                sta state+1
.9b70					z_right_bracket:
.9b70	60		rts		                rts
.9b71					xt_root_wordlist:
.9b71	ca		dex		                dex             ; The WID for the Root wordlist is 3.
.9b72	ca		dex		                dex
.9b73	a9 03		lda #$03	                lda #3
.9b75	95 00		sta $00,x	                sta 0,x
.9b77	74 01		stz $01,x	                stz 1,x
.9b79					z_root_wordlist:
.9b79	60		rts		                rts
.9b7a					xt_rot:
.9b7a	20 42 d8	jsr $d842	                jsr underflow_3
.9b7d	b4 05		ldy $05,x	                ldy 5,x         ; MSB first
.9b7f	b5 03		lda $03,x	                lda 3,x
.9b81	95 05		sta $05,x	                sta 5,x
.9b83	b5 01		lda $01,x	                lda 1,x
.9b85	95 03		sta $03,x	                sta 3,x
.9b87	94 01		sty $01,x	                sty 1,x
.9b89	b4 04		ldy $04,x	                ldy 4,x         ; LSB next
.9b8b	b5 02		lda $02,x	                lda 2,x
.9b8d	95 04		sta $04,x	                sta 4,x
.9b8f	b5 00		lda $00,x	                lda 0,x
.9b91	95 02		sta $02,x	                sta 2,x
.9b93	94 00		sty $00,x	                sty 0,x
.9b95	60		rts		z_rot:          rts
.9b96					xt_rshift:
.9b96	20 3d d8	jsr $d83d	                jsr underflow_2
.9b99	b5 00		lda $00,x	                lda 0,x
.9b9b	29 0f		and #$0f	                and #%00001111
.9b9d	f0 08		beq $9ba7	                beq _done               ; if 0 shifts, quit
.9b9f	a8		tay		                tay
.9ba0					_loop:
.9ba0	56 03		lsr $03,x	                lsr 3,x
.9ba2	76 02		ror $02,x	                ror 2,x
.9ba4	88		dey		                dey
.9ba5	d0 f9		bne $9ba0	                bne _loop
.9ba7					_done:
.9ba7	e8		inx		                inx
.9ba8	e8		inx		                inx
.9ba9	60		rts		z_rshift:       rts
.9baa					xt_s_backslash_quote:
.9baa	a9 ff		lda #$ff	                lda #$FF
.9bac	85 26		sta $26		                sta tmp2
.9bae	64 27		stz $27		                stz tmp2+1
.9bb0	20 76 9d	jsr $9d76	                jsr s_quote_start
.9bb3					_done:
.9bb3					z_s_backslash_quote:
.9bb3	60		rts		                rts
.9bb4					convert_hex_value:
.9bb4	c9 41		cmp #$41	        cmp #'A'
.9bb6	90 07		bcc $9bbf	        bcc _digit
.9bb8	29 df		and #$df	        and #$DF                ; Make it uppercase.
.9bba	38		sec		        sec
.9bbb	e9 37		sbc #$37	        sbc #'7'                 ; gives value 10 for 'A'
.9bbd	80 03		bra $9bc2	        bra _done
.9bbf					_digit:
.9bbf	38		sec		        sec
.9bc0	e9 30		sbc #$30	        sbc #'0'
.9bc2					_done:
.9bc2	60		rts		        rts
.9bc3					xt_search_wordlist:
.9bc3	20 42 d8	jsr $d842	                jsr underflow_3
.9bc6	a5 1e		lda $1e		                lda up
.9bc8	18		clc		                clc
.9bc9	69 06		adc #$06	                adc #wordlists_offset
.9bcb	85 26		sta $26		                sta tmp2
.9bcd	a5 1f		lda $1f		                lda up+1
.9bcf	69 00		adc #$00	                adc #0          ; Adding carry
.9bd1	85 27		sta $27		                sta tmp2+1
.9bd3	b5 00		lda $00,x	                lda 0,x
.9bd5	0a		asl a		                asl             ; Convert wid to offset in cells (x2)
.9bd6	65 26		adc $26		                adc tmp2
.9bd8	85 26		sta $26		                sta tmp2
.9bda	90 02		bcc $9bde	                bcc +
.9bdc	e6 27		inc $27		                inc tmp2+1      ; Propagate carry if needed.
.9bde					+
.9bde	e8		inx		                inx
.9bdf	e8		inx		                inx
.9be0	b5 00		lda $00,x	                lda 0,x
.9be2	15 01		ora $01,x	                ora 1,x
.9be4	d0 03		bne $9be9	                bne _check_wordlist
.9be6	4c a1 9c	jmp $9ca1	                jmp _done
.9be9					_check_wordlist:
.9be9	a5 26		lda $26		                lda tmp2
.9beb	05 27		ora $27		                ora tmp2+1
.9bed	d0 03		bne $9bf2	                bne _have_string
.9bef	4c a1 9c	jmp $9ca1	                jmp _done
.9bf2					_have_string:
.9bf2	b2 26		lda ($26)	                lda (tmp2)              ; nt of first word in Dictionary
.9bf4	85 24		sta $24		                sta tmp1
.9bf6	e6 26		inc $26		                inc tmp2                ; Move to the upper byte
.9bf8	d0 02		bne $9bfc	                bne +
.9bfa	e6 27		inc $27		                inc tmp2+1
.9bfc					+
.9bfc	b2 26		lda ($26)	                lda (tmp2)
.9bfe	85 25		sta $25		                sta tmp1+1
.9c00	b5 02		lda $02,x	                lda 2,x                 ; Address of mystery string
.9c02	85 26		sta $26		                sta tmp2
.9c04	b5 03		lda $03,x	                lda 3,x
.9c06	85 27		sta $27		                sta tmp2+1
.9c08					_loop:
.9c08	b2 24		lda ($24)	                lda (tmp1)
.9c0a	d5 00		cmp $00,x	                cmp 0,x
.9c0c	d0 7b		bne $9c89	                bne _next_entry
.9c0e					_compare_string:
.9c0e	b2 26		lda ($26)	                lda (tmp2)      ; first character of mystery string
.9c10	c9 5b		cmp #$5b	                cmp #$5B        ; ASCII '[' (one past Z)
.9c12	b0 07		bcs $9c1b	                bcs _compare_first
.9c14	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.9c16	90 03		bcc $9c1b	                bcc _compare_first
.9c18	18		clc		                clc
.9c19	69 20		adc #$20	                adc #$20
.9c1b					_compare_first:
.9c1b	a0 08		ldy #$08	                ldy #8          ; Offset in nt to name
.9c1d	d1 24		cmp ($24),y	                cmp (tmp1),y    ; first character of current word
.9c1f	d0 68		bne $9c89	                bne _next_entry
.9c21	b5 00		lda $00,x	                lda 0,x
.9c23	3a		dec a		                dea
.9c24	f0 2c		beq $9c52	                beq _success
.9c26	a5 24		lda $24		                lda tmp1
.9c28	48		pha		                pha             ; Preserve tmp1 on the return stack.
.9c29	18		clc		                clc
.9c2a	69 08		adc #$08	                adc #8
.9c2c	85 24		sta $24		                sta tmp1        ; Reusing tmp1 temporarily for string check.
.9c2e	a5 25		lda $25		                lda tmp1+1
.9c30	48		pha		                pha             ; Preserve tmp1+1 on the return stack.
.9c31	69 00		adc #$00	                adc #0          ; we only need the carry
.9c33	85 25		sta $25		                sta tmp1+1
.9c35	b4 00		ldy $00,x	                ldy 0,x         ; index is length of string minus 1
.9c37	88		dey		                dey
.9c38					_string_loop:
.9c38	b1 26		lda ($26),y	                lda (tmp2),y    ; last char of mystery string
.9c3a	c9 5b		cmp #$5b	                cmp #$5B         ; ASCII '[' (one past Z)
.9c3c	b0 07		bcs $9c45	                bcs _check_char
.9c3e	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.9c40	90 03		bcc $9c45	                bcc _check_char
.9c42	18		clc		                clc
.9c43	69 20		adc #$20	                adc #$20
.9c45					_check_char:
.9c45	d1 24		cmp ($24),y	                cmp (tmp1),y    ; last char of word we're testing against
.9c47	d0 3a		bne $9c83	                bne _next_entry_tmp1
.9c49	88		dey		                dey
.9c4a	d0 ec		bne $9c38	                bne _string_loop
.9c4c					_success_tmp1:
.9c4c	68		pla		                pla             ; Restore tmp1 from the return stack.
.9c4d	85 25		sta $25		                sta tmp1+1
.9c4f	68		pla		                pla
.9c50	85 24		sta $24		                sta tmp1
.9c52					_success:
.9c52	e8		inx		                inx
.9c53	e8		inx		                inx
.9c54	a5 24		lda $24		                lda tmp1
.9c56	95 00		sta $00,x	                sta 0,x
.9c58	a5 25		lda $25		                lda tmp1+1
.9c5a	95 01		sta $01,x	                sta 1,x
.9c5c	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; ( nt nt )
.9c5f	20 04 96	jsr $9604	                jsr xt_name_to_int      ; ( nt xt )
.9c62	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; ( xt nt )
.9c65	a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.9c67	f6 00		inc $00,x	                inc 0,x
.9c69	d0 02		bne $9c6d	                bne +
.9c6b	f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.9c6d					+
.9c6d	a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.9c6f	29 04		and #$04	                and #IM
.9c71	d0 08		bne $9c7b	                bne _immediate          ; bit set, we're immediate
.9c73	a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.9c75	95 00		sta $00,x	                sta 0,x
.9c77	95 01		sta $01,x	                sta 1,x
.9c79	80 28		bra $9ca3	                bra _done_nodrop
.9c7b					_immediate:
.9c7b	a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.9c7d	95 00		sta $00,x	                sta 0,x
.9c7f	74 01		stz $01,x	                stz 1,x
.9c81	80 20		bra $9ca3	                bra _done_nodrop
.9c83					_next_entry_tmp1:
.9c83	68		pla		                pla             ; Restore tmp1 from the return stack.
.9c84	85 25		sta $25		                sta tmp1+1
.9c86	68		pla		                pla
.9c87	85 24		sta $24		                sta tmp1
.9c89					_next_entry:
.9c89	a0 02		ldy #$02	                ldy #2
.9c8b	b1 24		lda ($24),y	                lda (tmp1),y
.9c8d	48		pha		                pha
.9c8e	c8		iny		                iny
.9c8f	b1 24		lda ($24),y	                lda (tmp1),y
.9c91	85 25		sta $25		                sta tmp1+1
.9c93	68		pla		                pla
.9c94	85 24		sta $24		                sta tmp1
.9c96	05 25		ora $25		                ora tmp1+1
.9c98	f0 03		beq $9c9d	                beq _fail_done
.9c9a	4c 08 9c	jmp $9c08	                jmp _loop
.9c9d					_fail_done:
.9c9d	74 02		stz $02,x	                stz 2,x         ; failure flag
.9c9f	74 03		stz $03,x	                stz 3,x
.9ca1					_done:
.9ca1	e8		inx		                inx
.9ca2	e8		inx		                inx
.9ca3					_done_nodrop:
.9ca3					z_search_wordlist:
.9ca3	60		rts		                rts
.9ca4					xt_see:
.9ca4	20 02 99	jsr $9902	                jsr xt_parse_name       ; ( addr u )
.9ca7	20 e7 8f	jsr $8fe7	                jsr xt_find_name        ; ( nt | 0 )
.9caa	b5 00		lda $00,x	                lda 0,x
.9cac	15 01		ora $01,x	                ora 1,x
.9cae	d0 05		bne $9cb5	                bne +
.9cb0	a9 05		lda #$05	                lda #err_noname
.9cb2	4c 4e d8	jmp $d84e	                jmp error
.9cb5					+
.9cb5	20 6f 89	jsr $896f	                jsr xt_cr
.9cb8	a5 18		lda $18		                lda base
.9cba	48		pha		                pha
.9cbb	20 89 91	jsr $9189	                jsr xt_hex
.9cbe	a9 09		lda #$09	                lda #str_see_nt
.9cc0	20 74 d8	jsr $d874	                jsr print_string_no_lf
.9cc3	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; ( nt nt )
.9cc6	20 22 a5	jsr $a522	                jsr xt_u_dot
.9cc9	20 12 a1	jsr $a112	                jsr xt_space            ; ( nt )
.9ccc	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; ( nt nt )
.9ccf	20 04 96	jsr $9604	                jsr xt_name_to_int      ; ( nt xt )
.9cd2	a9 0a		lda #$0a	                lda #str_see_xt
.9cd4	20 74 d8	jsr $d874	                jsr print_string_no_lf
.9cd7	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; ( nt xt xt )
.9cda	20 22 a5	jsr $a522	                jsr xt_u_dot
.9cdd	20 6f 89	jsr $896f	                jsr xt_cr               ; ( nt xt )
.9ce0	a9 08		lda #$08	                lda #str_see_flags
.9ce2	20 74 d8	jsr $d874	                jsr print_string_no_lf
.9ce5	20 b6 98	jsr $98b6	                jsr xt_over             ; ( nt xt nt )
.9ce8	20 40 98	jsr $9840	                jsr xt_one_plus         ; ( nt xt nt+1 )
.9ceb	20 8c 8f	jsr $8f8c	                jsr xt_fetch            ; ( nt xt flags )
.9cee	b5 00		lda $00,x	                lda 0,x
.9cf0	a0 06		ldy #$06	                ldy #6                  ; Not all bits are used
.9cf2					_flag_loop:
.9cf2	48		pha		                pha
.9cf3	29 01		and #$01	                and #%00000001
.9cf5	18		clc		                clc
.9cf6	69 30		adc #$30	                adc #$30                ; ASCII "0"
.9cf8	20 02 8e	jsr $8e02	                jsr emit_a
.9cfb	20 12 a1	jsr $a112	                jsr xt_space
.9cfe	68		pla		                pla
.9cff	6a		ror a		                ror                     ; Next flag
.9d00	88		dey		                dey
.9d01	d0 ef		bne $9cf2	                bne _flag_loop
.9d03	20 6f 89	jsr $896f	                jsr xt_cr
.9d06	e8		inx		                inx
.9d07	e8		inx		                inx                     ; ( nt xt )
.9d08	a9 0b		lda #$0b	                lda #str_see_size
.9d0a	20 74 d8	jsr $d874	                jsr print_string_no_lf
.9d0d	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; ( xt nt )
.9d10	20 69 a7	jsr $a769	                jsr xt_wordsize         ; ( xt u )
.9d13	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
.9d16	20 b1 8a	jsr $8ab1	                jsr xt_decimal
.9d19	20 22 a5	jsr $a522	                jsr xt_u_dot            ; ( xt u )
.9d1c	20 89 91	jsr $9189	                jsr xt_hex
.9d1f	20 6f 89	jsr $896f	                jsr xt_cr
.9d22	20 ac a3	jsr $a3ac	                jsr xt_two_dup          ; ( xt u xt u )
.9d25	20 40 8d	jsr $8d40	                jsr xt_dump
.9d28	20 6f 89	jsr $896f	                jsr xt_cr
.9d2b	20 46 8b	jsr $8b46	                jsr xt_disasm
.9d2e	68		pla		                pla
.9d2f	85 18		sta $18		                sta base
.9d31	60		rts		z_see:          rts
.9d32					xt_set_current:
.9d32	20 38 d8	jsr $d838	                jsr underflow_1
.9d35	a0 04		ldy #$04	                ldy #current_offset
.9d37	b5 00		lda $00,x	                lda 0,x         ; CURRENT is byte variable
.9d39	91 1e		sta ($1e),y	                sta (up),y      ; so only the LSB is used.
.9d3b	e8		inx		                inx
.9d3c	e8		inx		                inx
.9d3d	60		rts		z_set_current:  rts
.9d3e					xt_set_order:
.9d3e	a9 ff		lda #$ff	                lda #$FF
.9d40	d5 01		cmp $01,x	                cmp 1,x
.9d42	d0 12		bne $9d56	                bne _start
.9d44	d5 00		cmp $00,x	                cmp 0,x
.9d46	d0 0e		bne $9d56	                bne _start
.9d48	ca		dex		                dex             ; Make room for the count.
.9d49	ca		dex		                dex
.9d4a	74 03		stz $03,x	                stz 3,x         ; ROOT-WORDLIST is 3
.9d4c	a9 03		lda #$03	                lda #3
.9d4e	95 02		sta $02,x	                sta 2,x
.9d50	74 01		stz $01,x	                stz 1,x         ; Count is 1.
.9d52	a9 01		lda #$01	                lda #1
.9d54	95 00		sta $00,x	                sta 0,x
.9d56					_start:
.9d56	a0 1e		ldy #$1e	                ldy #num_order_offset
.9d58	b5 00		lda $00,x	                lda 0,x
.9d5a	91 1e		sta ($1e),y	                sta (up),y      ; #ORDER is a byte variable.
.9d5c	85 24		sta $24		                sta tmp1        ; Save a copy for zero check and looping.
.9d5e	e8		inx		                inx             ; Drop the count off the data stack.
.9d5f	e8		inx		                inx
.9d60	a5 24		lda $24		                lda tmp1
.9d62	f0 0d		beq $9d71	                beq _done       ; If zero, there are no wordlists.
.9d64	a0 1f		ldy #$1f	                ldy #search_order_offset
.9d66					_loop:
.9d66	b5 00		lda $00,x	                lda 0,x         ; The search order is a byte array
.9d68	91 1e		sta ($1e),y	                sta (up),y      ; so only save the LSB
.9d6a	c8		iny		                iny
.9d6b	e8		inx		                inx
.9d6c	e8		inx		                inx
.9d6d	c6 24		dec $24		                dec tmp1
.9d6f	d0 f5		bne $9d66	                bne _loop
.9d71					_done:
.9d71	60		rts		z_set_order:    rts
.9d72					xt_s_quote:
.9d72	64 26		stz $26		                stz tmp2
.9d74	64 27		stz $27		                stz tmp2+1
.9d76					s_quote_start:
.9d76	ca		dex		                dex
.9d77	ca		dex		                dex
.9d78	ca		dex		                dex
.9d79	ca		dex		                dex
.9d7a	a9 4c		lda #$4c	                lda #$4C
.9d7c	20 de d6	jsr $d6de	                jsr cmpl_a
.9d7f	20 de d6	jsr $d6de	                jsr cmpl_a
.9d82	20 de d6	jsr $d6de	                jsr cmpl_a
.9d85	a5 00		lda $00		                lda cp
.9d87	95 02		sta $02,x	                sta 2,x
.9d89	a5 01		lda $01		                lda cp+1
.9d8b	95 03		sta $03,x	                sta 3,x
.9d8d					_savechars_loop:
.9d8d	a5 0d		lda $0d		                lda toin+1              ; MSB
.9d8f	c5 0b		cmp $0b		                cmp ciblen+1
.9d91	90 2a		bcc $9dbd	                bcc _input_fine         ; unsigned comparison
.9d93	a5 0c		lda $0c		                lda toin                ; LSB
.9d95	c5 0a		cmp $0a		                cmp ciblen
.9d97	90 24		bcc $9dbd	                bcc _input_fine
.9d99	a5 26		lda $26		                lda tmp2
.9d9b	48		pha		                pha
.9d9c	a5 27		lda $27		                lda tmp2+1
.9d9e	48		pha		                pha
.9d9f	a5 28		lda $28		                lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
.9da1	48		pha		                pha
.9da2	20 1b 9b	jsr $9b1b	                jsr xt_refill           ; ( -- f )
.9da5	68		pla		                pla
.9da6	85 28		sta $28		                sta tmp3
.9da8	68		pla		                pla
.9da9	85 27		sta $27		                sta tmp2+1
.9dab	68		pla		                pla
.9dac	85 26		sta $26		                sta tmp2
.9dae	b5 00		lda $00,x	                lda 0,x
.9db0	15 01		ora $01,x	                ora 1,x
.9db2	d0 05		bne $9db9	                bne _refill_ok
.9db4	a9 06		lda #$06	                lda #err_refill
.9db6	4c 4e d8	jmp $d84e	                jmp error
.9db9					_refill_ok:
.9db9	e8		inx		                inx
.9dba	e8		inx		                inx
.9dbb	80 d0		bra $9d8d	                bra _savechars_loop
.9dbd					_input_fine:
.9dbd	a5 08		lda $08		                lda cib
.9dbf	18		clc		                clc
.9dc0	65 0c		adc $0c		                adc toin        ; LSB
.9dc2	85 24		sta $24		                sta tmp1
.9dc4	a5 09		lda $09		                lda cib+1
.9dc6	65 0d		adc $0d		                adc toin+1      ; MSB
.9dc8	85 25		sta $25		                sta tmp1+1
.9dca	b2 24		lda ($24)	                lda (tmp1)
.9dcc	24 26		bit $26		                bit tmp2
.9dce	30 03		bmi $9dd3	                bmi _handle_escapes    ; Only checking bit 7
.9dd0	4c 5c 9e	jmp $9e5c	                jmp _regular_char
.9dd3					_handle_escapes:
.9dd3	24 27		bit $27		                bit tmp2+1
.9dd5	30 03		bmi $9dda	                bmi _escaped
.9dd7	4c 52 9e	jmp $9e52	                jmp _not_escaped
.9dda					_escaped:
.9dda	70 3c		bvs $9e18	                bvs _check_esc_chars
.9ddc	a9 01		lda #$01	                lda #1
.9dde	24 27		bit $27		                bit tmp2+1
.9de0	d0 10		bne $9df2	                bne _esc_x_second_digit
.9de2	e6 27		inc $27		                inc tmp2+1  ; Adjust flag for second digit next time.
.9de4	b2 24		lda ($24)	                lda (tmp1)  ; Get the char again.
.9de6	20 b4 9b	jsr $9bb4	                jsr convert_hex_value
.9de9	0a		asl a		                asl
.9dea	0a		asl a		                asl
.9deb	0a		asl a		                asl
.9dec	0a		asl a		                asl
.9ded	85 28		sta $28		                sta tmp3    ; Save it for later.
.9def	4c 63 9e	jmp $9e63	                jmp _next_character
.9df2					_esc_x_second_digit:
.9df2	64 27		stz $27		                stz tmp2+1
.9df4	b2 24		lda ($24)	                lda (tmp1)
.9df6	20 b4 9b	jsr $9bb4	                jsr convert_hex_value
.9df9	05 28		ora $28		                ora tmp3
.9dfb	4c 60 9e	jmp $9e60	                jmp _save_character
.9dfe					_esc_tr_table:
>9dfe	07				    .byte   7               ; a -> BEL (ASCII value 7)
>9dff	08				    .byte   8               ; b -> Backspace (ASCII value 8)
>9e00	00 00				    .byte   0,0             ; c, d no escape
>9e02	1b				    .byte   27              ; e -> ESC (ASCII value 27)
>9e03	0c				    .byte   12              ; f -> FF (ASCII value 12)
>9e04	00 00 00 00 00			    .byte   0,0,0,0,0       ; g,h,i,j,k
>9e09	0a				    .byte   10              ; l -> LF (ASCII value 10)
>9e0a	8d				    .byte   13+128          ; m -> CR/LF pair (ASCII values 13, 10)
>9e0b	0a				    .byte   10              ; n behaves like l --> lf
>9e0c	00 00				    .byte   0,0             ; o,p
>9e0e	22				    .byte   34              ; q -> Double quote (ASCII value 34)
>9e0f	0d				    .byte   13              ; r ->  CR (ASCII value 13)
>9e10	00				    .byte   0               ; s
>9e11	09				    .byte   9               ; t -> Horizontal TAB (ASCII value 9)
>9e12	00				    .byte   0               ; u
>9e13	0b				    .byte   11              ; v -> Vertical TAB (ASCII value 11)
>9e14	00 00 00			    .byte   0,0,0           ; w,x,y   (x is a special case later)
>9e17	80				    .byte   0+128           ; z -> NULL (ASCII value 0)
.9e18					_check_esc_chars:
.9e18	64 27		stz $27		                stz tmp2+1
.9e1a	c9 61		cmp #$61	                cmp #'a'
.9e1c	30 1a		bmi $9e38	                bmi _check_esc_quote
.9e1e	c9 7b		cmp #$7b	                cmp #'z'+1
.9e20	10 16		bpl $9e38	                bpl _check_esc_quote
.9e22	a8		tay		                tay
.9e23	b9 9d 9d	lda $9d9d,y	                lda _esc_tr_table - 'a',y   ; fake base address to index with a-z directly
.9e26	d0 03		bne $9e2b	                bne _esc_replace
.9e28	98		tya		                tya                     ; revert if no translation
.9e29	80 0d		bra $9e38	                bra _check_esc_quote
.9e2b	10 33		bpl $9e60	_esc_replace:   bpl _save_character     ; simple replacement
.9e2d	29 7f		and #$7f	                and #$7f                ; clear hi bit
.9e2f	f0 2f		beq $9e60	                beq _save_character     ; NUL we can just output
.9e31	20 de d6	jsr $d6de	                jsr cmpl_a              ; else output first char (CR)
.9e34	a9 0a		lda #$0a	                lda #10                 ; followed by LF
.9e36	80 28		bra $9e60	                bra _save_character
.9e38					_check_esc_quote:
.9e38	c9 22		cmp #$22	                cmp #$22
.9e3a	d0 04		bne $9e40	                bne _check_esc_x
.9e3c	a9 22		lda #$22	                lda #34
.9e3e	80 20		bra $9e60	                bra _save_character
.9e40					_check_esc_x:
.9e40	c9 78		cmp #$78	                cmp #'x'
.9e42	d0 06		bne $9e4a	                bne _check_esc_backslash
.9e44	a9 be		lda #$be	                lda #$BE        ; Clear bits 6 and 0
.9e46	85 27		sta $27		                sta tmp2+1
.9e48	80 19		bra $9e63	                bra _next_character
.9e4a					_check_esc_backslash:
.9e4a	c9 5c		cmp #$5c	                cmp #$5C
.9e4c	d0 04		bne $9e52	                bne _not_escaped
.9e4e	a9 5c		lda #$5c	                lda #92
.9e50	80 0e		bra $9e60	                bra _save_character
.9e52					_not_escaped:
.9e52	c9 5c		cmp #$5c	                cmp #$5C        ; The backslash char
.9e54	d0 06		bne $9e5c	                bne _regular_char
.9e56	a9 ff		lda #$ff	                lda #$FF
.9e58	85 27		sta $27		                sta tmp2+1
.9e5a	80 07		bra $9e63	                bra _next_character
.9e5c					_regular_char:
.9e5c	c9 22		cmp #$22	                cmp #$22        ; ASCII for "
.9e5e	f0 0c		beq $9e6c	                beq _found_string_end
.9e60					_save_character:
.9e60	20 de d6	jsr $d6de	                jsr cmpl_a
.9e63					_next_character:
.9e63	e6 0c		inc $0c		                inc toin
.9e65	d0 02		bne $9e69	                bne _savechars_loop_longjump
.9e67	e6 0d		inc $0d		                inc toin+1
.9e69					_savechars_loop_longjump:
.9e69	4c 8d 9d	jmp $9d8d	                jmp _savechars_loop
.9e6c					_found_string_end:
.9e6c	e6 0c		inc $0c		                inc toin
.9e6e	d0 02		bne $9e72	                bne +
.9e70	e6 0d		inc $0d		                inc toin+1
.9e72					+
.9e72	a5 00		lda $00		                lda cp
.9e74	38		sec		                sec
.9e75	f5 02		sbc $02,x	                sbc 2,x
.9e77	95 00		sta $00,x	                sta 0,x         ; LSB
.9e79	a5 01		lda $01		                lda cp+1
.9e7b	f5 03		sbc $03,x	                sbc 3,x
.9e7d	95 01		sta $01,x	                sta 1,x         ; MSB
.9e7f	b5 02		lda $02,x	                lda 2,x
.9e81	38		sec		                sec
.9e82	e9 02		sbc #$02	                sbc #2
.9e84	85 24		sta $24		                sta tmp1
.9e86	b5 03		lda $03,x	                lda 3,x
.9e88	e9 00		sbc #$00	                sbc #0          ; Propagate borrow
.9e8a	85 25		sta $25		                sta tmp1+1
.9e8c	a5 00		lda $00		                lda cp
.9e8e	92 24		sta ($24)	                sta (tmp1)
.9e90	a0 01		ldy #$01	                ldy #1
.9e92	a5 01		lda $01		                lda cp+1
.9e94	91 24		sta ($24),y	                sta (tmp1),y
.9e96	a5 16		lda $16		                lda state
.9e98	05 17		ora $17		                ora state+1             ; paranoid
.9e9a	f0 03		beq $9e9f	                beq _done
.9e9c	20 83 a0	jsr $a083	                jsr sliteral_const_str         ; ( addr u -- )
.9e9f					_done:
.9e9f	60		rts		z_s_quote:      rts
.9ea0					xt_s_to_d:
.9ea0	20 38 d8	jsr $d838	                jsr underflow_1
.9ea3	ca		dex		                dex
.9ea4	ca		dex		                dex
.9ea5	74 00		stz $00,x	                stz 0,x
.9ea7	74 01		stz $01,x	                stz 1,x
.9ea9	b5 03		lda $03,x	                lda 3,x
.9eab	10 04		bpl $9eb1	                bpl _done
.9ead	d6 00		dec $00,x	                dec 0,x
.9eaf	d6 01		dec $01,x	                dec 1,x
.9eb1					_done:
.9eb1	60		rts		z_s_to_d:       rts
.9eb2					xt_save_buffers:
.9eb2	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.9eb4	b1 1e		lda ($1e),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.9eb6	c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.9eb8	d0 12		bne $9ecc	                bne _done       ; Either not used or not dirty = done!
.9eba	20 bf 83	jsr $83bf	                jsr xt_blkbuffer
.9ebd	20 b1 85	jsr $85b1	                jsr xt_buffblocknum
.9ec0	20 8c 8f	jsr $8f8c	                jsr xt_fetch
.9ec3	20 6c 85	jsr $856c	                jsr xt_block_write
.9ec6	a9 01		lda #$01	                lda #1
.9ec8	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.9eca	91 1e		sta ($1e),y	                sta (up),y
.9ecc					_done:
.9ecc	60		rts		z_save_buffers: rts
.9ecd					xt_scr:
.9ecd	ca		dex		                dex
.9ece	ca		dex		                dex
.9ecf	18		clc		                clc
.9ed0	a5 1e		lda $1e		                lda up
.9ed2	69 02		adc #$02	                adc #scr_offset ; Add offset
.9ed4	95 00		sta $00,x	                sta 0,x
.9ed6	a5 1f		lda $1f		                lda up+1
.9ed8	69 00		adc #$00	                adc #0          ; Adding carry
.9eda	95 01		sta $01,x	                sta 1,x
.9edc	60		rts		z_scr:          rts
.9edd					xt_search:
.9edd	20 47 d8	jsr $d847	                jsr underflow_4
.9ee0	b5 00		lda $00,x	                lda 0,x
.9ee2	15 01		ora $01,x	                ora 1,x
.9ee4	d0 0b		bne $9ef1	                bne _start_search
.9ee6	e8		inx		                inx             ; Remove u2
.9ee7	e8		inx		                inx
.9ee8	a9 ff		lda #$ff	                lda #$FF        ; Turn addr2 into a true flag
.9eea	95 00		sta $00,x	                sta 0,x
.9eec	95 01		sta $01,x	                sta 1,x
.9eee	4c 7b 9f	jmp $9f7b	                jmp z_search
.9ef1					_start_search:
.9ef1	20 9c a7	jsr $a79c	                jsr xt_zero
.9ef4					_search_loop:
.9ef4	18		clc		                clc
.9ef5	b5 00		lda $00,x	                lda 0,x
.9ef7	75 02		adc $02,x	                adc 2,x
.9ef9	85 24		sta $24		                sta tmp1
.9efb	b5 01		lda $01,x	                lda 1,x
.9efd	75 03		adc $03,x	                adc 3,x
.9eff	d5 07		cmp $07,x	                cmp 7,x
.9f01	90 12		bcc $9f15	                bcc _init_comparison ; Obviously less
.9f03	d0 06		bne $9f0b	                bne _not_found
.9f05	b5 06		lda $06,x	                lda 6,x
.9f07	c5 24		cmp $24		                cmp tmp1
.9f09	b0 0a		bcs $9f15	                bcs _init_comparison
.9f0b					_not_found:
.9f0b	e8		inx		                inx             ; Remove offset
.9f0c	e8		inx		                inx
.9f0d	e8		inx		                inx             ; Remove u2
.9f0e	e8		inx		                inx
.9f0f	74 00		stz $00,x	                stz 0,x         ; Turn addr2 into a false flag
.9f11	74 01		stz $01,x	                stz 1,x
.9f13	80 66		bra $9f7b	                bra z_search
.9f15					_init_comparison:
.9f15	18		clc		                clc
.9f16	b5 08		lda $08,x	                lda 8,x
.9f18	75 00		adc $00,x	                adc 0,x
.9f1a	85 24		sta $24		                sta tmp1
.9f1c	b5 09		lda $09,x	                lda 9,x
.9f1e	75 01		adc $01,x	                adc 1,x
.9f20	85 25		sta $25		                sta tmp1+1
.9f22	b5 04		lda $04,x	                lda 4,x
.9f24	85 26		sta $26		                sta tmp2
.9f26	b5 05		lda $05,x	                lda 5,x
.9f28	85 27		sta $27		                sta tmp2+1
.9f2a	b5 02		lda $02,x	                lda 2,x
.9f2c	85 28		sta $28		                sta tmp3
.9f2e	b5 03		lda $03,x	                lda 3,x
.9f30	85 29		sta $29		                sta tmp3+1
.9f32					_comparison_loop:
.9f32	b2 24		lda ($24)	                lda (tmp1)
.9f34	d2 26		cmp ($26)	                cmp (tmp2)
.9f36	f0 05		beq $9f3d	                beq _letters_match
.9f38	20 40 98	jsr $9840	                jsr xt_one_plus
.9f3b	80 b7		bra $9ef4	                bra _search_loop
.9f3d					_letters_match:
.9f3d	e6 24		inc $24		                inc tmp1
.9f3f	d0 02		bne $9f43	                bne +
.9f41	e6 25		inc $25		                inc tmp1+1
.9f43					+
.9f43	e6 26		inc $26		                inc tmp2
.9f45	d0 02		bne $9f49	                bne +
.9f47	e6 27		inc $27		                inc tmp2+1
.9f49					+
.9f49	a5 28		lda $28		                lda tmp3
.9f4b	d0 02		bne $9f4f	                bne +
.9f4d	c6 29		dec $29		                dec tmp3+1
.9f4f					+
.9f4f	c6 28		dec $28		                dec tmp3
.9f51	a5 28		lda $28		                lda tmp3
.9f53	05 29		ora $29		                ora tmp3+1
.9f55	d0 db		bne $9f32	                bne _comparison_loop ; Check the next letter
.9f57	18		clc		                clc
.9f58	b5 00		lda $00,x	                lda 0,x
.9f5a	75 08		adc $08,x	                adc 8,x
.9f5c	95 08		sta $08,x	                sta 8,x
.9f5e	b5 01		lda $01,x	                lda 1,x
.9f60	75 09		adc $09,x	                adc 9,x
.9f62	95 09		sta $09,x	                sta 9,x
.9f64	38		sec		                sec
.9f65	b5 06		lda $06,x	                lda 6,x
.9f67	f5 00		sbc $00,x	                sbc 0,x
.9f69	95 06		sta $06,x	                sta 6,x
.9f6b	b5 07		lda $07,x	                lda 7,x
.9f6d	f5 01		sbc $01,x	                sbc 1,x
.9f6f	95 07		sta $07,x	                sta 7,x
.9f71	e8		inx		                inx             ; drop offset
.9f72	e8		inx		                inx
.9f73	e8		inx		                inx             ; drop u2
.9f74	e8		inx		                inx
.9f75	a9 ff		lda #$ff	                lda #$FF
.9f77	95 00		sta $00,x	                sta 0,x         ; Turn addr2 into a true flag.
.9f79	95 01		sta $01,x	                sta 1,x
.9f7b	60		rts		z_search:       rts
.9f7c					xt_semicolon:
.9f7c	24 20		bit $20		                bit status
.9f7e	70 11		bvs $9f91	                bvs _colonword
.9f80	a9 60		lda #$60	                lda #$60                ; opcode for RTS
.9f82	20 de d6	jsr $d6de	                jsr cmpl_a
.9f85	ca		dex		                dex
.9f86	ca		dex		                dex
.9f87	a5 04		lda $04		                lda workword
.9f89	95 00		sta $00,x	                sta 0,x
.9f8b	a5 05		lda $05		                lda workword+1
.9f8d	95 01		sta $01,x	                sta 1,x
.9f8f	80 45		bra $9fd6	                bra _semicolon_done
.9f91					_colonword:
.9f91	a0 06		ldy #$06	                ldy #6
.9f93	a5 00		lda $00		                lda cp
.9f95	91 04		sta ($04),y	                sta (workword),y
.9f97	c8		iny		                iny
.9f98	a5 01		lda $01		                lda cp+1
.9f9a	91 04		sta ($04),y	                sta (workword),y
.9f9c	a9 60		lda #$60	                lda #$60                ; opcode for RTS
.9f9e	20 de d6	jsr $d6de	                jsr cmpl_a
.9fa1	24 20		bit $20		                bit status
.9fa3	10 26		bpl $9fcb	                bpl _new_word   ; Bit 7 is clear = new word
.9fa5	ca		dex		                dex
.9fa6	ca		dex		                dex
.9fa7	ca		dex		                dex
.9fa8	ca		dex		                dex
.9fa9	b2 04		lda ($04)	                lda (workword)
.9fab	95 00		sta $00,x	                sta 0,x
.9fad	74 01		stz $01,x	                stz 1,x
.9faf	a5 04		lda $04		                lda workword
.9fb1	18		clc		                clc
.9fb2	69 08		adc #$08	                adc #8
.9fb4	95 02		sta $02,x	                sta 2,x
.9fb6	a5 05		lda $05		                lda workword+1
.9fb8	69 00		adc #$00	                adc #0                  ; only want carry
.9fba	95 03		sta $03,x	                sta 3,x
.9fbc	a9 02		lda #$02	                lda #str_redefined       ; address of string "redefined"
.9fbe	20 74 d8	jsr $d874	                jsr print_string_no_lf
.9fc1	20 f7 a4	jsr $a4f7	                jsr xt_type
.9fc4	20 12 a1	jsr $a112	                jsr xt_space
.9fc7	a9 80		lda #$80	                lda #%10000000
.9fc9	14 20		trb $20		                trb status
.9fcb					_new_word:
.9fcb	a5 04		lda $04		                lda workword
.9fcd	85 02		sta $02		                sta dp
.9fcf	a5 05		lda $05		                lda workword+1
.9fd1	85 03		sta $03		                sta dp+1
.9fd3	20 80 d7	jsr $d780	                jsr dp_to_current       ; Save the updated DP to the
.9fd6					_semicolon_done:
.9fd6	64 16		stz $16		                stz state
.9fd8	64 17		stz $17		                stz state+1
.9fda	60		rts		z_semicolon:    rts
.9fdb					xt_sign:
.9fdb	20 38 d8	jsr $d838	                jsr underflow_1
.9fde	b5 01		lda $01,x	                lda 1,x         ; check MSB of TOS
.9fe0	30 04		bmi $9fe6	                bmi _minus
.9fe2	e8		inx		                inx
.9fe3	e8		inx		                inx
.9fe4	80 09		bra $9fef	                bra _done
.9fe6					_minus:
.9fe6	a9 2d		lda #$2d	                lda #$2D        ; ASCII for "-"
.9fe8	95 00		sta $00,x	                sta 0,x         ; overwrite TOS
.9fea	74 01		stz $01,x	                stz 1,x         ; paranoid
.9fec	20 e3 91	jsr $91e3	                jsr xt_hold
.9fef					_done:
.9fef	60		rts		z_sign:         rts
.9ff0					xt_slash:
.9ff0	a9 00		lda #$00	                lda #0
.9ff2	48		pha		                pha
.9ff3	80 03		bra $9ff8	                bra slashmod_common
.9ff5					xt_slash_mod:
.9ff5	a9 ff		lda #$ff	                lda #$FF
.9ff7	48		pha		                pha             ; falls through to _common
.9ff8					slashmod_common:
.9ff8	20 64 a3	jsr $a364	                jsr xt_to_r             ; >R
.9ffb	20 a0 9e	jsr $9ea0	                jsr xt_s_to_d           ; S>D
.9ffe	20 b5 9a	jsr $9ab5	                jsr xt_r_from           ; R>
.a001	20 c9 a0	jsr $a0c9	                jsr xt_sm_slash_rem     ; SM/REM
.a004	68		pla		                pla
.a005	d0 05		bne $a00c	                bne _done
.a007	20 a2 a1	jsr $a1a2	                jsr xt_swap
.a00a	e8		inx		                inx             ; DROP
.a00b	e8		inx		                inx
.a00c					_done:
.a00c					z_slash_mod:
.a00c	60		rts		z_slash:        rts
.a00d					xt_slash_string:
.a00d	20 42 d8	jsr $d842	                jsr underflow_3
.a010	18		clc		                clc             ; 3OS+TOS
.a011	b5 00		lda $00,x	                lda 0,x
.a013	75 04		adc $04,x	                adc 4,x
.a015	95 04		sta $04,x	                sta 4,x
.a017	b5 01		lda $01,x	                lda 1,x
.a019	75 05		adc $05,x	                adc 5,x
.a01b	95 05		sta $05,x	                sta 5,x
.a01d	38		sec		                sec             ; NOS-TOS
.a01e	b5 02		lda $02,x	                lda 2,x
.a020	f5 00		sbc $00,x	                sbc 0,x
.a022	95 02		sta $02,x	                sta 2,x
.a024	b5 03		lda $03,x	                lda 3,x
.a026	f5 01		sbc $01,x	                sbc 1,x
.a028	95 03		sta $03,x	                sta 3,x
.a02a	e8		inx		                inx
.a02b	e8		inx		                inx
.a02c	60		rts		z_slash_string: rts
.a02d					xt_sliteral:
.a02d	20 3d d8	jsr $d83d	                jsr underflow_2
.a030	a9 4c		lda #$4c	                lda #$4C
.a032	20 de d6	jsr $d6de	                jsr cmpl_a
.a035	20 de d6	jsr $d6de	                jsr cmpl_a
.a038	20 de d6	jsr $d6de	                jsr cmpl_a
.a03b	8a		txa		                txa
.a03c	38		sec		                sec
.a03d	e9 06		sbc #$06	                sbc #6
.a03f	aa		tax		                tax
.a040	b5 08		lda $08,x	                lda 8,x
.a042	95 04		sta $04,x	                sta 4,x
.a044	b5 09		lda $09,x	                lda 9,x
.a046	95 05		sta $05,x	                sta 5,x
.a048	b5 06		lda $06,x	                lda 6,x
.a04a	95 00		sta $00,x	                sta 0,x
.a04c	b5 07		lda $07,x	                lda 7,x
.a04e	95 01		sta $01,x	                sta 1,x
.a050	a5 00		lda $00		                lda cp
.a052	95 08		sta $08,x	                sta 8,x
.a054	95 02		sta $02,x	                sta 2,x
.a056	a5 01		lda $01		                lda cp+1
.a058	95 09		sta $09,x	                sta 9,x
.a05a	95 03		sta $03,x	                sta 3,x
.a05c	20 e5 95	jsr $95e5	                jsr xt_move
.a05f	18		clc		                clc
.a060	a5 00		lda $00		                lda cp
.a062	75 00		adc $00,x	                adc 0,x
.a064	85 00		sta $00		                sta cp
.a066	a5 01		lda $01		                lda cp+1
.a068	75 01		adc $01,x	                adc 1,x
.a06a	85 01		sta $01		                sta cp+1
.a06c	b5 02		lda $02,x	                lda 2,x
.a06e	38		sec		                sec
.a06f	e9 02		sbc #$02	                sbc #2
.a071	85 24		sta $24		                sta tmp1
.a073	b5 03		lda $03,x	                lda 3,x
.a075	e9 00		sbc #$00	                sbc #0          ; Propagate borrow
.a077	85 25		sta $25		                sta tmp1+1
.a079	a5 00		lda $00		                lda cp
.a07b	92 24		sta ($24)	                sta (tmp1)
.a07d	a0 01		ldy #$01	                ldy #1
.a07f	a5 01		lda $01		                lda cp+1
.a081	91 24		sta ($24),y	                sta (tmp1),y
.a083					sliteral_const_str:
.a083	a0 a0		ldy #$a0	                ldy #>sliteral_runtime
.a085	a9 9d		lda #$9d	                lda #<sliteral_runtime
.a087	20 ce d6	jsr $d6ce	                jsr cmpl_subroutine
.a08a	b4 03		ldy $03,x	                ldy 3,x                ; address MSB
.a08c	b5 02		lda $02,x	                lda 2,x                ; address LSB
.a08e	20 da d6	jsr $d6da	                jsr cmpl_word
.a091	b4 01		ldy $01,x	                ldy 1,x                ; length MSB
.a093	b5 00		lda $00,x	                lda 0,x                ; length LSB
.a095	20 da d6	jsr $d6da	                jsr cmpl_word
.a098	e8		inx		                inx
.a099	e8		inx		                inx
.a09a	e8		inx		                inx
.a09b	e8		inx		                inx
.a09c	60		rts		z_sliteral:     rts
.a09d					sliteral_runtime:
.a09d	ca		dex		                dex
.a09e	ca		dex		                dex
.a09f	ca		dex		                dex
.a0a0	ca		dex		                dex
.a0a1	68		pla		                pla
.a0a2	85 24		sta $24		                sta tmp1        ; LSB of address
.a0a4	68		pla		                pla
.a0a5	85 25		sta $25		                sta tmp1+1      ; MSB of address
.a0a7	a0 01		ldy #$01	                ldy #1          ; adjust for JSR/RTS mechanics on 65c02
.a0a9	b1 24		lda ($24),y	                lda (tmp1),y
.a0ab	95 02		sta $02,x	                sta 2,x         ; LSB of address
.a0ad	c8		iny		                iny
.a0ae	b1 24		lda ($24),y	                lda (tmp1),y
.a0b0	95 03		sta $03,x	                sta 3,x         ; MSB of address
.a0b2	c8		iny		                iny
.a0b3	b1 24		lda ($24),y	                lda (tmp1),y
.a0b5	95 00		sta $00,x	                sta 0,x         ; LSB of length
.a0b7	c8		iny		                iny
.a0b8	b1 24		lda ($24),y	                lda (tmp1),y
.a0ba	95 01		sta $01,x	                sta 1,x         ; MSB of length
.a0bc	18		clc		                clc
.a0bd	a5 24		lda $24		                lda tmp1
.a0bf	69 04		adc #$04	                adc #4
.a0c1	a8		tay		                tay             ; LSB
.a0c2	a5 25		lda $25		                lda tmp1+1
.a0c4	69 00		adc #$00	                adc #0          ; we only need carry
.a0c6	48		pha		                pha             ; MSB
.a0c7	5a		phy		                phy
.a0c8	60		rts		                rts
.a0c9					xt_sm_slash_rem:
.a0c9	20 42 d8	jsr $d842	                jsr underflow_3 ; contains double number
.a0cc	b5 03		lda $03,x	                lda 3,x
.a0ce	48		pha		                pha
.a0cf	b5 01		lda $01,x	                lda 1,x
.a0d1	55 03		eor $03,x	                eor 3,x
.a0d3	48		pha		                pha
.a0d4	20 23 81	jsr $8123	                jsr xt_abs
.a0d7	e8		inx		                inx             ; pretend we pushed n1 to R
.a0d8	e8		inx		                inx
.a0d9	20 92 8a	jsr $8a92	                jsr xt_dabs
.a0dc	ca		dex		                dex
.a0dd	ca		dex		                dex
.a0de	20 ae a5	jsr $a5ae	                jsr xt_um_slash_mod     ; UM/MOD
.a0e1	68		pla		                pla
.a0e2	10 03		bpl $a0e7	                bpl +
.a0e4	20 46 96	jsr $9646	                jsr xt_negate
.a0e7					+
.a0e7	68		pla		                pla
.a0e8	10 07		bpl $a0f1	                bpl _done
.a0ea	e8		inx		                inx             ; pretend we pushed quotient to R
.a0eb	e8		inx		                inx
.a0ec	20 46 96	jsr $9646	                jsr xt_negate
.a0ef	ca		dex		                dex
.a0f0	ca		dex		                dex
.a0f1					_done:
.a0f1	60		rts		z_sm_slash_rem: rts
.a0f2					xt_source:
.a0f2	ca		dex		                dex
.a0f3	ca		dex		                dex
.a0f4	a5 08		lda $08		                lda cib
.a0f6	95 00		sta $00,x	                sta 0,x
.a0f8	a5 09		lda $09		                lda cib+1
.a0fa	95 01		sta $01,x	                sta 1,x
.a0fc	ca		dex		                dex
.a0fd	ca		dex		                dex
.a0fe	a5 0a		lda $0a		                lda ciblen
.a100	95 00		sta $00,x	                sta 0,x
.a102	a5 0b		lda $0b		                lda ciblen+1
.a104	95 01		sta $01,x	                sta 1,x
.a106	60		rts		z_source:       rts
.a107					xt_source_id:
.a107	ca		dex		                dex
.a108	ca		dex		                dex
.a109	a5 06		lda $06		                lda insrc
.a10b	95 00		sta $00,x	                sta 0,x
.a10d	a5 07		lda $07		                lda insrc+1
.a10f	95 01		sta $01,x	                sta 1,x
.a111	60		rts		z_source_id:    rts
.a112					xt_space:
.a112	a9 20		lda #$20	                lda #AscSP
.a114	20 02 8e	jsr $8e02	                jsr emit_a
.a117	60		rts		z_space:        rts
.a118					xt_spaces:
.a118	20 38 d8	jsr $d838	                jsr underflow_1
.a11b	20 9c a7	jsr $a79c	                jsr xt_zero
.a11e	20 3b 95	jsr $953b	                jsr xt_max
.a121	b5 00		lda $00,x	                lda 0,x
.a123	15 01		ora $01,x	                ora 1,x
.a125	f0 2a		beq $a151	                beq _done
.a127	b4 01		ldy $01,x	                ldy 1,x
.a129	d0 0c		bne $a137	                bne _lots_of_spaces
.a12b	b4 00		ldy $00,x	                ldy 0,x
.a12d					_quick_loop:
.a12d	a9 20		lda #$20	                lda #AscSP
.a12f	20 02 8e	jsr $8e02	                jsr emit_a
.a132	88		dey		                dey
.a133	f0 1c		beq $a151	                beq _done
.a135	80 f6		bra $a12d	                bra _quick_loop
.a137					_lots_of_spaces:
.a137	b4 00		ldy $00,x	                ldy 0,x
.a139					_first_slow_loop:
.a139	f0 08		beq $a143	                beq _slow_outer_loop
.a13b	a9 20		lda #$20	                lda #AscSP
.a13d	20 02 8e	jsr $8e02	                jsr emit_a
.a140	88		dey		                dey
.a141	80 f6		bra $a139	                bra _first_slow_loop
.a143					_slow_outer_loop:
.a143	a0 00		ldy #$00	                ldy #00
.a145					_slow_inner_loop:
.a145	a9 20		lda #$20	                lda #AscSP
.a147	20 02 8e	jsr $8e02	                jsr emit_a
.a14a	88		dey		                dey
.a14b	d0 f8		bne $a145	                bne _slow_inner_loop
.a14d	d6 01		dec $01,x	                dec 1,x
.a14f	d0 f2		bne $a143	                bne _slow_outer_loop
.a151					_done:
.a151	e8		inx		                inx             ; drop
.a152	e8		inx		                inx
.a153	60		rts		z_spaces:       rts
.a154					xt_star:
.a154	20 3d d8	jsr $d83d	                jsr underflow_2
.a157	20 f0 a5	jsr $a5f0	                jsr xt_um_star
.a15a	e8		inx		                inx
.a15b	e8		inx		                inx
.a15c	60		rts		z_star:         rts
.a15d					xt_star_slash:
.a15d	20 66 a1	jsr $a166	                jsr xt_star_slash_mod
.a160	20 a2 a1	jsr $a1a2	                jsr xt_swap
.a163	e8		inx		                inx
.a164	e8		inx		                inx
.a165					z_star_slash:
.a165	60		rts		                rts
.a166					xt_star_slash_mod:
.a166	20 42 d8	jsr $d842	                jsr underflow_3
.a169	20 64 a3	jsr $a364	                jsr xt_to_r
.a16c	20 b1 94	jsr $94b1	                jsr xt_m_star
.a16f	20 b5 9a	jsr $9ab5	                jsr xt_r_from
.a172	20 c9 a0	jsr $a0c9	                jsr xt_sm_slash_rem
.a175					z_star_slash_mod:
.a175	60		rts		                rts
.a176					xt_state:
.a176	ca		dex		                dex
.a177	ca		dex		                dex
.a178	a9 16		lda #$16	                lda #<state
.a17a	95 00		sta $00,x	                sta 0,x
.a17c	a9 00		lda #$00	                lda #>state
.a17e	95 01		sta $01,x	                sta 1,x
.a180	60		rts		z_state:        rts
.a181					xt_store:
.a181	20 3d d8	jsr $d83d	                jsr underflow_2
.a184	b5 02		lda $02,x	                lda 2,x         ; LSB
.a186	81 00		sta ($00,x)	                sta (0,x)
.a188	f6 00		inc $00,x	                inc 0,x
.a18a	d0 02		bne $a18e	                bne +
.a18c	f6 01		inc $01,x	                inc 1,x
.a18e					+
.a18e	b5 03		lda $03,x	                lda 3,x         ; MSB
.a190	81 00		sta ($00,x)	                sta (0,x)
.a192	e8		inx		                inx             ; 2DROP
.a193	e8		inx		                inx
.a194	e8		inx		                inx
.a195	e8		inx		                inx
.a196	60		rts		z_store:        rts
.a197					xt_strip_underflow:
.a197	ca		dex		                dex
.a198	ca		dex		                dex
.a199	a9 1c		lda #$1c	                lda #<uf_strip
.a19b	95 00		sta $00,x	                sta 0,x
.a19d	a9 00		lda #$00	                lda #>uf_strip
.a19f	95 01		sta $01,x	                sta 1,x
.a1a1					z_strip_underflow:
.a1a1	60		rts		                rts
.a1a2					xt_swap:
.a1a2	20 3d d8	jsr $d83d	                jsr underflow_2
.a1a5	b5 00		lda $00,x	                lda 0,x         ; LSB
.a1a7	b4 02		ldy $02,x	                ldy 2,x
.a1a9	95 02		sta $02,x	                sta 2,x
.a1ab	94 00		sty $00,x	                sty 0,x
.a1ad	b5 01		lda $01,x	                lda 1,x         ; MSB
.a1af	b4 03		ldy $03,x	                ldy 3,x
.a1b1	95 03		sta $03,x	                sta 3,x
.a1b3	94 01		sty $01,x	                sty 1,x
.a1b5	60		rts		z_swap:         rts
.a1b6					xt_then:
.a1b6	20 7e 91	jsr $917e	                jsr xt_here
.a1b9	20 a2 a1	jsr $a1a2	                jsr xt_swap
.a1bc	20 81 a1	jsr $a181	                jsr xt_store
.a1bf	60		rts		z_then:         rts
.a1c0					xt_thru:
.a1c0	20 3d d8	jsr $d83d	                jsr underflow_2
.a1c3	b5 01		lda $01,x	                lda 1,x
.a1c5	48		pha		                pha
.a1c6	b5 00		lda $00,x	                lda 0,x
.a1c8	48		pha		                pha
.a1c9	e8		inx		                inx
.a1ca	e8		inx		                inx
.a1cb					_thru_loop:
.a1cb	b5 01		lda $01,x	                lda 1,x
.a1cd	48		pha		                pha
.a1ce	b5 00		lda $00,x	                lda 0,x
.a1d0	48		pha		                pha
.a1d1	20 da 93	jsr $93da	                jsr xt_load
.a1d4	68		pla		                pla
.a1d5	85 24		sta $24		                sta tmp1
.a1d7	68		pla		                pla
.a1d8	85 25		sta $25		                sta tmp1+1
.a1da	68		pla		                pla
.a1db	85 26		sta $26		                sta tmp2
.a1dd	68		pla		                pla
.a1de	85 27		sta $27		                sta tmp2+1
.a1e0	c5 25		cmp $25		                cmp tmp1+1
.a1e2	d0 08		bne $a1ec	                bne _next_screen
.a1e4	a5 26		lda $26		                lda tmp2        ; Compare the LSB
.a1e6	c5 24		cmp $24		                cmp tmp1
.a1e8	d0 02		bne $a1ec	                bne _next_screen
.a1ea	80 18		bra $a204	                bra _done       ; We just did the last screen.
.a1ec					_next_screen:
.a1ec	a5 27		lda $27		                lda tmp2+1
.a1ee	48		pha		                pha
.a1ef	a5 26		lda $26		                lda tmp2
.a1f1	48		pha		                pha
.a1f2	e6 24		inc $24		                inc tmp1
.a1f4	d0 02		bne $a1f8	                bne +
.a1f6	e6 25		inc $25		                inc tmp1+1
.a1f8					+
.a1f8	ca		dex		                dex
.a1f9	ca		dex		                dex
.a1fa	a5 24		lda $24		                lda tmp1
.a1fc	95 00		sta $00,x	                sta 0,x
.a1fe	a5 25		lda $25		                lda tmp1+1
.a200	95 01		sta $01,x	                sta 1,x
.a202	80 c7		bra $a1cb	                bra _thru_loop
.a204					_done:
.a204	60		rts		z_thru:         rts
.a205					xt_tick:
.a205	20 02 99	jsr $9902	                jsr xt_parse_name       ; ( -- addr u )
.a208	b5 00		lda $00,x	                lda 0,x
.a20a	15 01		ora $01,x	                ora 1,x
.a20c	d0 05		bne $a213	                bne +
.a20e	a9 05		lda #$05	                lda #err_noname
.a210	4c 4e d8	jmp $d84e	                jmp error
.a213					+
.a213	20 e7 8f	jsr $8fe7	                jsr xt_find_name        ; ( addr u -- nt )
.a216	b5 00		lda $00,x	                lda 0,x
.a218	15 01		ora $01,x	                ora 1,x
.a21a	d0 05		bne $a221	                bne +
.a21c	a9 08		lda #$08	                lda #err_syntax
.a21e	4c 4e d8	jmp $d84e	                jmp error
.a221					+
.a221	20 04 96	jsr $9604	                jsr xt_name_to_int      ; ( nt -- xt )
.a224	60		rts		z_tick:         rts
.a225					xt_to:
.a225	20 05 a2	jsr $a205	                jsr xt_tick             ; ( [n] xt )
.a228	b5 00		lda $00,x	                lda 0,x                 ; LSB
.a22a	18		clc		                clc
.a22b	69 03		adc #$03	                adc #3
.a22d	85 24		sta $24		                sta tmp1
.a22f	b5 01		lda $01,x	                lda 1,x                 ; MSB
.a231	69 00		adc #$00	                adc #0                  ; we just want the carry
.a233	85 25		sta $25		                sta tmp1+1
.a235	e8		inx		                inx
.a236	e8		inx		                inx                     ; ( [n] )
.a237	a5 16		lda $16		                lda state
.a239	05 17		ora $17		                ora state+1
.a23b	f0 34		beq $a271	                beq _interpret
.a23d	a0 00		ldy #$00	                ldy #$00                ; Code for LDA 0,X
.a23f	a9 b5		lda #$b5	                lda #$B5
.a241	20 da d6	jsr $d6da	                jsr cmpl_word
.a244	a9 8d		lda #$8d	                lda #$8D                ; Code for STA abs
.a246	20 de d6	jsr $d6de	                jsr cmpl_a
.a249	a4 25		ldy $25		                ldy tmp1+1              ; MSB goes in Y
.a24b	a5 24		lda $24		                lda tmp1
.a24d	20 da d6	jsr $d6da	                jsr cmpl_word
.a250	a0 01		ldy #$01	                ldy #$01                ; Code for LDA 1,X
.a252	a9 b5		lda #$b5	                lda #$B5
.a254	20 da d6	jsr $d6da	                jsr cmpl_word
.a257	a9 8d		lda #$8d	                lda #$8D                ; Code for STA abs
.a259	20 de d6	jsr $d6de	                jsr cmpl_a
.a25c	e6 24		inc $24		                inc tmp1                ; Calculate MSB
.a25e	d0 02		bne $a262	                bne +
.a260	e6 25		inc $25		                inc tmp1+1
.a262					+
.a262	a4 25		ldy $25		                ldy tmp1+1              ; MSB goes in Y
.a264	a5 24		lda $24		                lda tmp1
.a266	20 da d6	jsr $d6da	                jsr cmpl_word
.a269	a0 e8		ldy #$e8	                ldy #$E8                ; Code for INX
.a26b	98		tya		                tya
.a26c	20 da d6	jsr $d6da	                jsr cmpl_word
.a26f	80 0f		bra $a280	                bra _done
.a271					_interpret:
.a271	20 38 d8	jsr $d838	                jsr underflow_1
.a274	b5 00		lda $00,x	                lda 0,x
.a276	92 24		sta ($24)	                sta (tmp1)              ; LSB
.a278	a0 01		ldy #$01	                ldy #1
.a27a	b5 01		lda $01,x	                lda 1,x                 ; MSB
.a27c	91 24		sta ($24),y	                sta (tmp1),y            ; fall through to common
.a27e	e8		inx		                inx                     ; DROP
.a27f	e8		inx		                inx
.a280					_done:
.a280	60		rts		z_to:           rts
.a281					xt_to_body:
.a281	20 38 d8	jsr $d838	                jsr underflow_1
.a284	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; ( xt xt )
.a287	20 84 92	jsr $9284	                jsr xt_int_to_name      ; ( xt nt )
.a28a	f6 00		inc $00,x	                inc 0,x
.a28c	d0 02		bne $a290	                bne +
.a28e	f6 01		inc $01,x	                inc 1,x
.a290					+
.a290	a1 00		lda ($00,x)	                lda (0,x)               ; get status byte
.a292	29 20		and #$20	                and #HC
.a294	f0 0d		beq $a2a3	                beq _no_cfa
.a296	18		clc		                clc
.a297	b5 02		lda $02,x	                lda 2,x         ; LSB
.a299	69 03		adc #$03	                adc #3
.a29b	95 02		sta $02,x	                sta 2,x
.a29d	b5 03		lda $03,x	                lda 3,x         ; MSB
.a29f	69 00		adc #$00	                adc #0          ; we conly care about the carry
.a2a1	95 03		sta $03,x	                sta 3,x         ; Fall through to _no_cfa
.a2a3					_no_cfa:
.a2a3	e8		inx		                inx             ; get rid of the nt
.a2a4	e8		inx		                inx
.a2a5					_done:
.a2a5	60		rts		z_to_body:      rts
.a2a6					xt_to_in:
.a2a6	ca		dex		                dex
.a2a7	ca		dex		                dex
.a2a8	a9 0c		lda #$0c	                lda #<toin
.a2aa	95 00		sta $00,x	                sta 0,x
.a2ac	a9 00		lda #$00	                lda #>toin      ; paranoid, should be zero
.a2ae	95 01		sta $01,x	                sta 1,x
.a2b0	60		rts		z_to_in:        rts
.a2b1					xt_to_number:
.a2b1	20 47 d8	jsr $d847	                jsr underflow_4
.a2b4	b5 06		lda $06,x	                lda 6,x         ; ud-lo LSB
.a2b6	85 36		sta $36		                sta scratch
.a2b8	b5 07		lda $07,x	                lda 7,x         ; ud-lo MSB
.a2ba	85 37		sta $37		                sta scratch+1
.a2bc	b5 04		lda $04,x	                lda 4,x         ; ud-hi LSB
.a2be	85 38		sta $38		                sta scratch+2
.a2c0	b5 05		lda $05,x	                lda 5,x         ; ud-hi MSB
.a2c2	85 39		sta $39		                sta scratch+3
.a2c4	ca		dex		                dex
.a2c5	ca		dex		                dex
.a2c6					_loop:
.a2c6	a1 04		lda ($04,x)	                lda (4,x)
.a2c8	95 00		sta $00,x	                sta 0,x                 ; ( ud-lo ud-hi addr u char )
.a2ca	74 01		stz $01,x	                stz 1,x                 ; paranoid
.a2cc	20 11 8b	jsr $8b11	                jsr xt_digit_question   ; ( char -- n -1 | char 0 )
.a2cf	b5 00		lda $00,x	                lda 0,x
.a2d1	d0 04		bne $a2d7	                bne _digit_ok
.a2d3	e8		inx		                inx
.a2d4	e8		inx		                inx
.a2d5	80 67		bra $a33e	                bra _done       ; ( ud-lo ud-hi addr u char )
.a2d7					_digit_ok:
.a2d7	b5 02		lda $02,x	                lda 2,x
.a2d9	85 3a		sta $3a		                sta scratch+4
.a2db	b5 03		lda $03,x	                lda 3,x
.a2dd	85 3b		sta $3b		                sta scratch+5
.a2df	a5 38		lda $38		                lda scratch+2
.a2e1	95 02		sta $02,x	                sta 2,x         ; NOS
.a2e3	a5 39		lda $39		                lda scratch+3
.a2e5	95 03		sta $03,x	                sta 3,x
.a2e7	a5 18		lda $18		                lda base
.a2e9	95 00		sta $00,x	                sta 0,x         ; TOS
.a2eb	74 01		stz $01,x	                stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
.a2ed	20 f0 a5	jsr $a5f0	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
.a2f0	b5 02		lda $02,x	                lda 2,x         ; ud-hi-lo
.a2f2	85 3c		sta $3c		                sta scratch+6
.a2f4	b5 03		lda $03,x	                lda 3,x
.a2f6	85 3d		sta $3d		                sta scratch+7
.a2f8	a5 36		lda $36		                lda scratch
.a2fa	95 02		sta $02,x	                sta 2,x
.a2fc	a5 37		lda $37		                lda scratch+1
.a2fe	95 03		sta $03,x	                sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
.a300	a5 18		lda $18		                lda base
.a302	95 00		sta $00,x	                sta 0,x
.a304	74 01		stz $01,x	                stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
.a306	20 f0 a5	jsr $a5f0	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
.a309	b5 00		lda $00,x	                lda 0,x
.a30b	85 38		sta $38		                sta scratch+2
.a30d	b5 01		lda $01,x	                lda 1,x
.a30f	85 39		sta $39		                sta scratch+3
.a311	b5 02		lda $02,x	                lda 2,x
.a313	85 36		sta $36		                sta scratch
.a315	b5 03		lda $03,x	                lda 3,x
.a317	85 37		sta $37		                sta scratch+1
.a319	18		clc		                clc
.a31a	a5 36		lda $36		                lda scratch     ; ud-lo LSB
.a31c	65 3a		adc $3a		                adc scratch+4   ; n LSB
.a31e	85 36		sta $36		                sta scratch     ; this is the new ud-lo
.a320	a5 37		lda $37		                lda scratch+1   ; ud-lo MSB
.a322	65 3b		adc $3b		                adc scratch+5   ; n MSB
.a324	85 37		sta $37		                sta scratch+1
.a326	a5 38		lda $38		                lda scratch+2   ; LSB
.a328	65 3c		adc $3c		                adc scratch+6
.a32a	85 38		sta $38		                sta scratch+2   ; this is the new ud-hi
.a32c	a5 39		lda $39		                lda scratch+3   ; MSB
.a32e	65 3d		adc $3d		                adc scratch+7
.a330	85 39		sta $39		                sta scratch+3
.a332	e8		inx		                inx
.a333	e8		inx		                inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
.a334	f6 04		inc $04,x	                inc 4,x
.a336	d0 02		bne $a33a	                bne +
.a338	f6 05		inc $05,x	                inc 5,x
.a33a					+
.a33a	d6 02		dec $02,x	                dec 2,x
.a33c	d0 88		bne $a2c6	                bne _loop
.a33e					_done:
.a33e	e8		inx		                inx
.a33f	e8		inx		                inx             ; ( ud-lo ud-hi addr u )
.a340	a5 36		lda $36		                lda scratch     ; new ud-lo
.a342	95 06		sta $06,x	                sta 6,x
.a344	a5 37		lda $37		                lda scratch+1
.a346	95 07		sta $07,x	                sta 7,x
.a348	a5 38		lda $38		                lda scratch+2
.a34a	95 04		sta $04,x	                sta 4,x
.a34c	a5 39		lda $39		                lda scratch+3
.a34e	95 05		sta $05,x	                sta 5,x
.a350	60		rts		z_to_number:    rts
.a351					xt_to_order:
.a351	20 64 a3	jsr $a364	                jsr xt_to_r
.a354	20 40 91	jsr $9140	                jsr xt_get_order
.a357	20 b5 9a	jsr $9ab5	                jsr xt_r_from
.a35a	20 a2 a1	jsr $a1a2	                jsr xt_swap
.a35d	20 40 98	jsr $9840	                jsr xt_one_plus
.a360	20 3e 9d	jsr $9d3e	                jsr xt_set_order
.a363	60		rts		z_to_order:     rts
.a364					xt_to_r:
.a364	68		pla		                pla             ; LSB
.a365	85 2c		sta $2c		                sta tmptos
.a367	7a		ply		                ply             ; MSB
.a368	20 38 d8	jsr $d838	                jsr underflow_1
.a36b	b5 01		lda $01,x	                lda 1,x         ; MSB
.a36d	48		pha		                pha
.a36e	b5 00		lda $00,x	                lda 0,x         ; LSB
.a370	48		pha		                pha
.a371	e8		inx		                inx
.a372	e8		inx		                inx
.a373	5a		phy		                phy             ; MSB
.a374	a5 2c		lda $2c		                lda tmptos
.a376	48		pha		                pha             ; LSB
.a377	60		rts		z_to_r:         rts
.a378					xt_true:
.a378	ca		dex		                dex
.a379	ca		dex		                dex
.a37a	a9 ff		lda #$ff	                lda #$FF
.a37c	95 00		sta $00,x	                sta 0,x
.a37e	95 01		sta $01,x	                sta 1,x
.a380	60		rts		z_true:         rts
.a381					xt_tuck:
.a381	20 3d d8	jsr $d83d	                jsr underflow_2
.a384	ca		dex		                dex
.a385	ca		dex		                dex
.a386	b4 04		ldy $04,x	                ldy 4,x         ; LSB
.a388	b5 02		lda $02,x	                lda 2,x
.a38a	95 04		sta $04,x	                sta 4,x
.a38c	94 02		sty $02,x	                sty 2,x
.a38e	95 00		sta $00,x	                sta 0,x
.a390	b4 05		ldy $05,x	                ldy 5,x         ; MSB
.a392	b5 03		lda $03,x	                lda 3,x
.a394	95 05		sta $05,x	                sta 5,x
.a396	94 03		sty $03,x	                sty 3,x         ; bba
.a398	95 01		sta $01,x	                sta 1,x         ; baa
.a39a	60		rts		z_tuck:         rts
.a39b					xt_assembler_wordlist:
.a39b					xt_two:
.a39b	ca		dex		                dex
.a39c	ca		dex		                dex
.a39d	a9 02		lda #$02	                lda #2
.a39f	95 00		sta $00,x	                sta 0,x
.a3a1	74 01		stz $01,x	                stz 1,x
.a3a3					z_assembler_wordlist:
.a3a3	60		rts		z_two:          rts
.a3a4					xt_two_drop:
.a3a4	20 3d d8	jsr $d83d	                jsr underflow_2
.a3a7	e8		inx		                inx
.a3a8	e8		inx		                inx
.a3a9	e8		inx		                inx
.a3aa	e8		inx		                inx
.a3ab	60		rts		z_two_drop:     rts
.a3ac					xt_two_dup:
.a3ac	20 3d d8	jsr $d83d	                jsr underflow_2
.a3af	ca		dex		                dex
.a3b0	ca		dex		                dex
.a3b1	ca		dex		                dex
.a3b2	ca		dex		                dex
.a3b3	b5 04		lda $04,x	                lda 4,x         ; TOS
.a3b5	95 00		sta $00,x	                sta 0,x
.a3b7	b5 05		lda $05,x	                lda 5,x
.a3b9	95 01		sta $01,x	                sta 1,x
.a3bb	b5 06		lda $06,x	                lda 6,x         ; NOS
.a3bd	95 02		sta $02,x	                sta 2,x
.a3bf	b5 07		lda $07,x	                lda 7,x
.a3c1	95 03		sta $03,x	                sta 3,x
.a3c3	60		rts		z_two_dup:      rts
.a3c4					xt_two_fetch:
.a3c4	20 38 d8	jsr $d838	                jsr underflow_1
.a3c7	b5 00		lda $00,x	                lda 0,x
.a3c9	85 24		sta $24		                sta tmp1
.a3cb	b4 01		ldy $01,x	                ldy 1,x
.a3cd	84 25		sty $25		                sty tmp1+1
.a3cf	ca		dex		                dex             ; reuse one stack element
.a3d0	ca		dex		                dex
.a3d1	b2 24		lda ($24)	                lda (tmp1)      ; copy LSB
.a3d3	95 00		sta $00,x	                sta 0,x
.a3d5	a0 01		ldy #$01	                ldy #1          ; copy next
.a3d7	b1 24		lda ($24),y	                lda (tmp1),y
.a3d9	95 01		sta $01,x	                sta 1,x
.a3db	c8		iny		                iny             ; copy next
.a3dc	b1 24		lda ($24),y	                lda (tmp1),y
.a3de	95 02		sta $02,x	                sta 2,x
.a3e0	c8		iny		                iny             ; copy next
.a3e1	b1 24		lda ($24),y	                lda (tmp1),y
.a3e3	95 03		sta $03,x	                sta 3,x
.a3e5	60		rts		z_two_fetch:    rts
.a3e6					xt_two_over:
.a3e6	20 47 d8	jsr $d847	                jsr underflow_4
.a3e9	ca		dex		                dex
.a3ea	ca		dex		                dex
.a3eb	ca		dex		                dex
.a3ec	ca		dex		                dex
.a3ed	b5 08		lda $08,x	                lda 8,x
.a3ef	95 00		sta $00,x	                sta 0,x
.a3f1	b5 09		lda $09,x	                lda 9,x
.a3f3	95 01		sta $01,x	                sta 1,x
.a3f5	b5 0a		lda $0a,x	                lda 10,x
.a3f7	95 02		sta $02,x	                sta 2,x
.a3f9	b5 0b		lda $0b,x	                lda 11,x
.a3fb	95 03		sta $03,x	                sta 3,x
.a3fd	60		rts		z_two_over:     rts
.a3fe					xt_two_r_fetch:
.a3fe	ca		dex		                dex
.a3ff	ca		dex		                dex
.a400	ca		dex		                dex
.a401	ca		dex		                dex
.a402	8a		txa		                txa
.a403	ba		tsx		                tsx
.a404	da		phx		                phx             ; 65c02 has no TXY, so do it the hard way
.a405	7a		ply		                ply
.a406	aa		tax		                tax
.a407	b9 03 01	lda $0103,y	                lda $0103,y     ; LSB of top entry
.a40a	95 00		sta $00,x	                sta 0,x
.a40c	b9 04 01	lda $0104,y	                lda $0104,y     ; MSB of top entry
.a40f	95 01		sta $01,x	                sta 1,x
.a411	b9 05 01	lda $0105,y	                lda $0105,y     ; LSB of bottom entry
.a414	95 02		sta $02,x	                sta 2,x
.a416	b9 06 01	lda $0106,y	                lda $0106,y     ; MSB of top entry
.a419	95 03		sta $03,x	                sta 3,x
.a41b	60		rts		z_two_r_fetch:  rts
.a41c					xt_two_r_from:
.a41c	68		pla		                pla                     ; LSB
.a41d	85 24		sta $24		                sta tmp1
.a41f	68		pla		                pla                     ; MSB
.a420	85 25		sta $25		                sta tmp1+1
.a422	ca		dex		                dex
.a423	ca		dex		                dex
.a424	ca		dex		                dex
.a425	ca		dex		                dex
.a426	68		pla		                pla                     ; LSB
.a427	95 00		sta $00,x	                sta 0,x
.a429	68		pla		                pla                     ; MSB
.a42a	95 01		sta $01,x	                sta 1,x
.a42c	68		pla		                pla                     ; LSB
.a42d	95 02		sta $02,x	                sta 2,x
.a42f	68		pla		                pla                     ; MSB
.a430	95 03		sta $03,x	                sta 3,x
.a432	a5 25		lda $25		                lda tmp1+1              ; MSB
.a434	48		pha		                pha
.a435	a5 24		lda $24		                lda tmp1                ; LSB
.a437	48		pha		                pha
.a438	60		rts		z_two_r_from:   rts
.a439					xt_two_slash:
.a439	20 38 d8	jsr $d838	                jsr underflow_1
.a43c	b5 01		lda $01,x	                lda 1,x
.a43e	0a		asl a		                asl                     ; save the sign
.a43f	76 01		ror $01,x	                ror 1,x
.a441	76 00		ror $00,x	                ror 0,x
.a443	60		rts		z_two_slash:    rts
.a444					xt_two_star:
.a444					xt_cells:
.a444	20 38 d8	jsr $d838	                jsr underflow_1
.a447	16 00		asl $00,x	                asl 0,x
.a449	36 01		rol $01,x	                rol 1,x
.a44b					z_cells:
.a44b	60		rts		z_two_star:     rts
.a44c					xt_two_store:
.a44c	20 42 d8	jsr $d842	                jsr underflow_3
.a44f	b5 00		lda $00,x	                lda 0,x
.a451	85 24		sta $24		                sta tmp1
.a453	b4 01		ldy $01,x	                ldy 1,x
.a455	84 25		sty $25		                sty tmp1+1
.a457	e8		inx		                inx
.a458	e8		inx		                inx
.a459	b5 00		lda $00,x	                lda 0,x         ; copy MSB
.a45b	92 24		sta ($24)	                sta (tmp1)
.a45d	b5 01		lda $01,x	                lda 1,x         ; copy next
.a45f	a0 01		ldy #$01	                ldy #1
.a461	91 24		sta ($24),y	                sta (tmp1),y
.a463	b5 02		lda $02,x	                lda 2,x         ; copy next
.a465	c8		iny		                iny
.a466	91 24		sta ($24),y	                sta (tmp1),y
.a468	b5 03		lda $03,x	                lda 3,x         ; copy MSB
.a46a	c8		iny		                iny
.a46b	91 24		sta ($24),y	                sta (tmp1),y
.a46d	e8		inx		                inx             ; 2DROP
.a46e	e8		inx		                inx
.a46f	e8		inx		                inx
.a470	e8		inx		                inx
.a471	60		rts		z_two_store:    rts
.a472					xt_two_swap:
.a472	20 47 d8	jsr $d847	                jsr underflow_4
.a475	b5 00		lda $00,x	                lda 0,x
.a477	b4 04		ldy $04,x	                ldy 4,x
.a479	95 04		sta $04,x	                sta 4,x
.a47b	94 00		sty $00,x	                sty 0,x
.a47d	b5 01		lda $01,x	                lda 1,x
.a47f	b4 05		ldy $05,x	                ldy 5,x
.a481	95 05		sta $05,x	                sta 5,x
.a483	94 01		sty $01,x	                sty 1,x
.a485	b5 02		lda $02,x	                lda 2,x
.a487	b4 06		ldy $06,x	                ldy 6,x
.a489	95 06		sta $06,x	                sta 6,x
.a48b	94 02		sty $02,x	                sty 2,x
.a48d	b5 03		lda $03,x	                lda 3,x
.a48f	b4 07		ldy $07,x	                ldy 7,x
.a491	95 07		sta $07,x	                sta 7,x
.a493	94 03		sty $03,x	                sty 3,x
.a495	60		rts		z_two_swap:     rts
.a496					xt_two_to_r:
.a496	68		pla		                pla             ; LSB
.a497	85 24		sta $24		                sta tmp1
.a499	68		pla		                pla             ; MSB
.a49a	85 25		sta $25		                sta tmp1+1
.a49c	20 3d d8	jsr $d83d	                jsr underflow_2
.a49f	b5 03		lda $03,x	                lda 3,x         ; MSB
.a4a1	48		pha		                pha
.a4a2	b5 02		lda $02,x	                lda 2,x         ; LSB
.a4a4	48		pha		                pha
.a4a5	b5 01		lda $01,x	                lda 1,x         ; MSB
.a4a7	48		pha		                pha
.a4a8	b5 00		lda $00,x	                lda 0,x         ; LSB
.a4aa	48		pha		                pha
.a4ab	e8		inx		                inx
.a4ac	e8		inx		                inx
.a4ad	e8		inx		                inx
.a4ae	e8		inx		                inx
.a4af	a5 25		lda $25		                lda tmp1+1      ; MSB
.a4b1	48		pha		                pha
.a4b2	a5 24		lda $24		                lda tmp1        ; LSB
.a4b4	48		pha		                pha
.a4b5	60		rts		z_two_to_r:     rts
.a4b6					xt_two_constant:
.a4b6	20 3d d8	jsr $d83d	                jsr underflow_2
.a4b9	20 75 89	jsr $8975	                jsr xt_create
.a4bc	20 a2 a1	jsr $a1a2	                jsr xt_swap
.a4bf	20 7a 87	jsr $877a	                jsr xt_comma
.a4c2	20 7a 87	jsr $877a	                jsr xt_comma
.a4c5	20 10 8c	jsr $8c10	                jsr does_runtime    ; does> turns into these two routines.
.a4c8	20 14 d7	jsr $d714	                jsr dodoes
.a4cb	20 bb 8d	jsr $8dbb	                jsr xt_dup
.a4ce	20 8c 8f	jsr $8f8c	                jsr xt_fetch
.a4d1	20 a2 a1	jsr $a1a2	                jsr xt_swap
.a4d4	20 2d 86	jsr $862d	                jsr xt_cell_plus
.a4d7	20 8c 8f	jsr $8f8c	                jsr xt_fetch
.a4da	60		rts		z_two_constant: rts
.a4db					xt_two_literal:
.a4db	20 3d d8	jsr $d83d	                jsr underflow_2 ; double number
.a4de	20 a2 a1	jsr $a1a2	                jsr xt_swap
.a4e1	20 96 93	jsr $9396	                jsr xt_literal
.a4e4	20 96 93	jsr $9396	                jsr xt_literal
.a4e7	60		rts		z_two_literal:  rts
.a4e8					xt_two_variable:
.a4e8	20 75 89	jsr $8975	                jsr xt_create
.a4eb	ca		dex		                dex
.a4ec	ca		dex		                dex
.a4ed	a9 04		lda #$04	                lda #4
.a4ef	95 00		sta $00,x	                sta 0,x
.a4f1	74 01		stz $01,x	                stz 1,x
.a4f3	20 95 82	jsr $8295	                jsr xt_allot
.a4f6	60		rts		z_two_variable: rts
.a4f7					xt_type:
.a4f7	20 3d d8	jsr $d83d	                jsr underflow_2
.a4fa	b5 02		lda $02,x	                lda 2,x
.a4fc	85 24		sta $24		                sta tmp1
.a4fe	b5 03		lda $03,x	                lda 3,x
.a500	85 25		sta $25		                sta tmp1+1
.a502					_loop:
.a502	b5 00		lda $00,x	                lda 0,x
.a504	15 01		ora $01,x	                ora 1,x
.a506	f0 15		beq $a51d	                beq _done
.a508	b2 24		lda ($24)	                lda (tmp1)
.a50a	20 02 8e	jsr $8e02	                jsr emit_a      ; avoids stack foolery
.a50d	e6 24		inc $24		                inc tmp1
.a50f	d0 02		bne $a513	                bne +
.a511	e6 25		inc $25		                inc tmp1+1
.a513					+
.a513	b5 00		lda $00,x	                lda 0,x
.a515	d0 02		bne $a519	                bne +
.a517	d6 01		dec $01,x	                dec 1,x
.a519					+
.a519	d6 00		dec $00,x	                dec 0,x
.a51b	80 e5		bra $a502	                bra _loop
.a51d					_done:
.a51d	e8		inx		                inx
.a51e	e8		inx		                inx
.a51f	e8		inx		                inx
.a520	e8		inx		                inx
.a521	60		rts		z_type:         rts
.a522					xt_u_dot:
.a522	20 38 d8	jsr $d838	                jsr underflow_1
.a525	20 a5 d8	jsr $d8a5	                jsr print_u
.a528	a9 20		lda #$20	                lda #AscSP
.a52a	20 02 8e	jsr $8e02	                jsr emit_a
.a52d	60		rts		z_u_dot:        rts
.a52e					xt_u_dot_r:
.a52e	20 3d d8	jsr $d83d	                jsr underflow_2
.a531	20 64 a3	jsr $a364	                jsr xt_to_r
.a534	20 9c a7	jsr $a79c	                jsr xt_zero
.a537	20 66 93	jsr $9366	                jsr xt_less_number_sign
.a53a	20 01 98	jsr $9801	                jsr xt_number_sign_s
.a53d	20 df 97	jsr $97df	                jsr xt_number_sign_greater
.a540	20 b5 9a	jsr $9ab5	                jsr xt_r_from
.a543	20 b6 98	jsr $98b6	                jsr xt_over
.a546	20 73 95	jsr $9573	                jsr xt_minus
.a549	20 18 a1	jsr $a118	                jsr xt_spaces
.a54c	20 f7 a4	jsr $a4f7	                jsr xt_type
.a54f	60		rts		z_u_dot_r:      rts
.a550					xt_u_greater_than:
.a550	20 3d d8	jsr $d83d	                jsr underflow_2
.a553	b5 00		lda $00,x	                lda 0,x
.a555	d5 02		cmp $02,x	                cmp 2,x
.a557	b5 01		lda $01,x	                lda 1,x
.a559	f5 03		sbc $03,x	                sbc 3,x
.a55b	e8		inx		                inx
.a55c	e8		inx		                inx
.a55d	a9 00		lda #$00	                lda #0
.a55f	69 ff		adc #$ff	                adc #$ff
.a561	95 00		sta $00,x	                sta 0,x         ; store flag
.a563	95 01		sta $01,x	                sta 1,x
.a565	60		rts		z_u_greater_than:    rts
.a566					xt_u_less_than:
.a566	20 3d d8	jsr $d83d	                jsr underflow_2
.a569	b5 02		lda $02,x	                lda 2,x
.a56b	d5 00		cmp $00,x	                cmp 0,x
.a56d	b5 03		lda $03,x	                lda 3,x
.a56f	f5 01		sbc $01,x	                sbc 1,x
.a571	e8		inx		                inx
.a572	e8		inx		                inx
.a573	a9 00		lda #$00	                lda #0
.a575	69 ff		adc #$ff	                adc #$ff
.a577	95 00		sta $00,x	                sta 0,x         ; store flag
.a579	95 01		sta $01,x	                sta 1,x
.a57b	60		rts		z_u_less_than:    rts
.a57c					xt_ud_dot:
.a57c	20 3d d8	jsr $d83d	                jsr underflow_2 ; double number
.a57f	20 66 93	jsr $9366	                jsr xt_less_number_sign
.a582	20 01 98	jsr $9801	                jsr xt_number_sign_s
.a585	20 df 97	jsr $97df	                jsr xt_number_sign_greater
.a588	20 f7 a4	jsr $a4f7	                jsr xt_type
.a58b	20 12 a1	jsr $a112	                jsr xt_space
.a58e	60		rts		z_ud_dot:        rts
.a58f					xt_ud_dot_r:
.a58f	20 42 d8	jsr $d842	                jsr underflow_3
.a592	20 64 a3	jsr $a364	                jsr xt_to_r
.a595	20 66 93	jsr $9366	                jsr xt_less_number_sign
.a598	20 01 98	jsr $9801	                jsr xt_number_sign_s
.a59b	20 df 97	jsr $97df	                jsr xt_number_sign_greater
.a59e	20 b5 9a	jsr $9ab5	                jsr xt_r_from
.a5a1	20 b6 98	jsr $98b6	                jsr xt_over
.a5a4	20 73 95	jsr $9573	                jsr xt_minus
.a5a7	20 18 a1	jsr $a118	                jsr xt_spaces
.a5aa	20 f7 a4	jsr $a4f7	                jsr xt_type
.a5ad	60		rts		z_ud_dot_r:      rts
.a5ae					xt_um_slash_mod:
.a5ae	20 42 d8	jsr $d842	                jsr underflow_3
.a5b1	b5 00		lda $00,x	                lda 0,x
.a5b3	15 01		ora $01,x	                ora 1,x
.a5b5	d0 05		bne $a5bc	                bne _not_zero
.a5b7	a9 04		lda #$04	                lda #err_divzero
.a5b9	4c 4e d8	jmp $d84e	                jmp error
.a5bc					_not_zero:
.a5bc	a9 11		lda #$11	                lda #17
.a5be	85 2c		sta $2c		                sta tmptos
.a5c0					_loop:
.a5c0	36 04		rol $04,x	                rol 4,x
.a5c2	36 05		rol $05,x	                rol 5,x
.a5c4	c6 2c		dec $2c		                dec tmptos
.a5c6	f0 22		beq $a5ea	                beq _done
.a5c8	36 02		rol $02,x	                rol 2,x
.a5ca	36 03		rol $03,x	                rol 3,x
.a5cc	64 24		stz $24		                stz tmp1        ; store the bit we got from hi cell (MSB)
.a5ce	26 24		rol $24		                rol tmp1
.a5d0	38		sec		                sec
.a5d1	b5 02		lda $02,x	                lda 2,x
.a5d3	f5 00		sbc $00,x	                sbc 0,x
.a5d5	85 25		sta $25		                sta tmp1+1
.a5d7	b5 03		lda $03,x	                lda 3,x
.a5d9	f5 01		sbc $01,x	                sbc 1,x
.a5db	a8		tay		                tay
.a5dc	a5 24		lda $24		                lda tmp1
.a5de	e9 00		sbc #$00	                sbc #0
.a5e0	90 de		bcc $a5c0	                bcc _loop
.a5e2	a5 25		lda $25		                lda tmp1+1
.a5e4	95 02		sta $02,x	                sta 2,x
.a5e6	94 03		sty $03,x	                sty 3,x         ; used as temp storage
.a5e8	80 d6		bra $a5c0	                bra _loop
.a5ea					_done:
.a5ea	e8		inx		                inx
.a5eb	e8		inx		                inx
.a5ec	20 a2 a1	jsr $a1a2	                jsr xt_swap
.a5ef	60		rts		z_um_slash_mod: rts
.a5f0					xt_um_star:
.a5f0	20 3d d8	jsr $d83d	                jsr underflow_2
.a5f3	18		clc		                clc
.a5f4	b5 00		lda $00,x	                lda 0,x         ; copy TOS to tmp2
.a5f6	e9 00		sbc #$00	                sbc #0
.a5f8	85 26		sta $26		                sta tmp2
.a5fa	b5 01		lda $01,x	                lda 1,x
.a5fc	e9 00		sbc #$00	                sbc #0
.a5fe	90 31		bcc $a631	                bcc _zero       ; is TOS zero?
.a600	85 27		sta $27		                sta tmp2+1
.a602	a9 00		lda #$00	                lda #0
.a604	85 24		sta $24		                sta tmp1
.a606	86 28		stx $28		                stx tmp3        ; tested for exit from outer loop
.a608	ca		dex		                dex
.a609	ca		dex		                dex
.a60a					_outer_loop:
.a60a	a0 08		ldy #$08	                ldy #8          ; counter inner loop
.a60c	56 04		lsr $04,x	                lsr 4,x         ; think "2,x" then later "3,x"
.a60e					_inner_loop:
.a60e	90 0c		bcc $a61c	                bcc _no_add
.a610	85 25		sta $25		                sta tmp1+1      ; save time, don't CLC
.a612	a5 24		lda $24		                lda tmp1
.a614	65 26		adc $26		                adc tmp2
.a616	85 24		sta $24		                sta tmp1
.a618	a5 25		lda $25		                lda tmp1+1
.a61a	65 27		adc $27		                adc tmp2+1
.a61c					_no_add:
.a61c	6a		ror a		                ror
.a61d	66 24		ror $24		                ror tmp1
.a61f	76 04		ror $04,x	                ror 4,x         ; think "2,x" then later "3,x"
.a621	88		dey		                dey
.a622	d0 ea		bne $a60e	                bne _inner_loop ; go back for one more shift?
.a624	e8		inx		                inx
.a625	e4 28		cpx $28		                cpx tmp3
.a627	d0 e1		bne $a60a	                bne _outer_loop ; go back for eight more shifts?
.a629	95 01		sta $01,x	                sta 1,x
.a62b	a5 24		lda $24		                lda tmp1
.a62d	95 00		sta $00,x	                sta 0,x
.a62f	80 04		bra $a635	                bra _done
.a631					_zero:
.a631	74 02		stz $02,x	                stz 2,x
.a633	74 03		stz $03,x	                stz 3,x
.a635					_done:
.a635	60		rts		z_um_star:      rts
.a636					xt_unloop:
.a636	68		pla		                pla
.a637	68		pla		                pla
.a638	68		pla		                pla
.a639	68		pla		                pla
.a63a	68		pla		                pla
.a63b	68		pla		                pla
.a63c	60		rts		z_unloop:       rts
.a63d					xt_until:
.a63d	a0 92		ldy #$92	                ldy #>zero_branch_runtime
.a63f	a9 20		lda #$20	                lda #<zero_branch_runtime
.a641	20 ce d6	jsr $d6ce	                jsr cmpl_subroutine
.a644	20 7a 87	jsr $877a	                jsr xt_comma
.a647	60		rts		z_until:        rts
.a648					xt_unused:
.a648	ca		dex		                dex
.a649	ca		dex		                dex
.a64a	a9 00		lda #$00	                lda #<cp_end
.a64c	38		sec		                sec
.a64d	e5 00		sbc $00		                sbc cp
.a64f	95 00		sta $00,x	                sta 0,x
.a651	a9 7c		lda #$7c	                lda #>cp_end
.a653	e5 01		sbc $01		                sbc cp+1
.a655	95 01		sta $01,x	                sta 1,x
.a657	60		rts		z_unused:       rts
.a658					xt_update:
.a658	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.a65a	b1 1e		lda ($1e),y	                lda (up),y
.a65c	09 02		ora #$02	                ora #2          ; Turn on dirty flag (bit 2)
.a65e	91 1e		sta ($1e),y	                sta (up),y
.a660	60		rts		z_update:       rts
.a661					xt_useraddr:
.a661	ca		dex		                dex
.a662	ca		dex		                dex
.a663	a9 1e		lda #$1e	                lda #<up
.a665	95 00		sta $00,x	                sta 0,x
.a667	a9 00		lda #$00	                lda #>up
.a669	95 01		sta $01,x	                sta 1,x
.a66b	60		rts		z_useraddr:     rts
.a66c					xt_variable:
.a66c	20 75 89	jsr $8975	                jsr xt_create
.a66f	a9 00		lda #$00	                lda #0
.a671	92 00		sta ($00)	                sta (cp)
.a673	e6 00		inc $00		                inc cp
.a675	d0 02		bne $a679	                bne +
.a677	e6 01		inc $01		                inc cp+1
.a679					+
.a679	92 00		sta ($00)	                sta (cp)
.a67b	e6 00		inc $00		                inc cp
.a67d	d0 02		bne $a681	                bne +
.a67f	e6 01		inc $01		                inc cp+1
.a681					+
.a681	20 3d 89	jsr $893d	                jsr adjust_z
.a684	60		rts		z_variable:     rts
.a685					xt_while:
.a685	a0 92		ldy #$92	                ldy #>zero_branch_runtime
.a687	a9 20		lda #$20	                lda #<zero_branch_runtime
.a689	20 ce d6	jsr $d6ce	                jsr cmpl_subroutine
.a68c	20 7e 91	jsr $917e	                jsr xt_here
.a68f	20 9c a7	jsr $a79c	                jsr xt_zero
.a692	20 7a 87	jsr $877a	                jsr xt_comma
.a695	20 a2 a1	jsr $a1a2	                jsr xt_swap
.a698	60		rts		z_while:        rts
.a699					xt_within:
.a699	20 42 d8	jsr $d842	                jsr underflow_3
.a69c	20 b6 98	jsr $98b6	                jsr xt_over
.a69f	20 73 95	jsr $9573	                jsr xt_minus
.a6a2	20 64 a3	jsr $a364	                jsr xt_to_r
.a6a5	20 73 95	jsr $9573	                jsr xt_minus
.a6a8	20 b5 9a	jsr $9ab5	                jsr xt_r_from
.a6ab	20 66 a5	jsr $a566	                jsr xt_u_less_than
.a6ae	60		rts		z_within:       rts
.a6af					xt_word:
.a6af	20 38 d8	jsr $d838	                jsr underflow_1
.a6b2	a4 0c		ldy $0c		                ldy toin                ; >IN
.a6b4					_loop:
.a6b4	c4 0a		cpy $0a		                cpy ciblen              ; quit if end of input
.a6b6	f0 09		beq $a6c1	                beq _found_char
.a6b8	b1 08		lda ($08),y	                lda (cib),y
.a6ba	d5 00		cmp $00,x	                cmp 0,x                 ; ASCII of delimiter
.a6bc	d0 03		bne $a6c1	                bne _found_char
.a6be	c8		iny		                iny
.a6bf	80 f3		bra $a6b4	                bra _loop
.a6c1					_found_char:
.a6c1	84 0c		sty $0c		                sty toin
.a6c3	20 5d 99	jsr $995d	                jsr xt_parse            ; Returns ( addr u )
.a6c6	b5 00		lda $00,x	                lda 0,x
.a6c8	92 00		sta ($00)	                sta (cp)                ; Save length of string
.a6ca	48		pha		                pha                     ; Keep copy of length for later
.a6cb	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; ( addr u u )
.a6ce	a5 00		lda $00		                lda cp
.a6d0	18		clc		                clc
.a6d1	69 01		adc #$01	                adc #1
.a6d3	95 02		sta $02,x	                sta 2,x                 ; LSB of CP
.a6d5	a5 01		lda $01		                lda cp+1
.a6d7	69 00		adc #$00	                adc #0
.a6d9	95 03		sta $03,x	                sta 3,x                 ; ( addr cp+1 u )
.a6db	20 e5 95	jsr $95e5	                jsr xt_move
.a6de	ca		dex		                dex
.a6df	ca		dex		                dex
.a6e0	a5 00		lda $00		                lda cp
.a6e2	95 00		sta $00,x	                sta 0,x
.a6e4	a5 01		lda $01		                lda cp+1
.a6e6	95 01		sta $01,x	                sta 1,x
.a6e8	68		pla		                pla                     ; length of string
.a6e9	18		clc		                clc
.a6ea	65 00		adc $00		                adc cp
.a6ec	85 00		sta $00		                sta cp
.a6ee	a5 01		lda $01		                lda cp+1
.a6f0	69 00		adc #$00	                adc #0                  ; we only need the carry
.a6f2	85 01		sta $01		                sta cp+1
.a6f4	60		rts		z_word:         rts
.a6f5					xt_wordlist:
.a6f5	a0 05		ldy #$05	                ldy #num_wordlists_offset
.a6f7	b1 1e		lda ($1e),y	                lda (up),y      ; This is a byte variable, so only
.a6f9	c9 0c		cmp #$0c	                cmp #max_wordlists
.a6fb	d0 05		bne $a702	                bne _ok
.a6fd	a9 0b		lda #$0b	                lda #err_wordlist
.a6ff	4c 4e d8	jmp $d84e	                jmp error
.a702					_ok:
.a702	1a		inc a		                ina             ; Increment the wordlist#
.a703	91 1e		sta ($1e),y	                sta (up),y      ; Save it into byte variable #wordlists
.a705	ca		dex		                dex             ; and put it on the stack.
.a706	ca		dex		                dex
.a707	95 00		sta $00,x	                sta 0,x
.a709	74 01		stz $01,x	                stz 1,x         ; 12 is the max, so upper byte is always zero.
.a70b	60		rts		z_wordlist:     rts
.a70c					xt_words:
.a70c	20 6f 89	jsr $896f	                jsr xt_cr
.a70f	a9 00		lda #$00	                lda #0
.a711	48		pha		                pha
.a712	ca		dex		                dex                     ; Make room on the stack for
.a713	ca		dex		                dex                     ; a dictionary pointer.
.a714	64 28		stz $28		                stz tmp3                ; Start at the beginning of
.a716					_wordlist_loop:
.a716	a0 1e		ldy #$1e	                ldy #num_order_offset   ; Check against byte variable #ORDER.
.a718	a5 28		lda $28		                lda tmp3
.a71a	d1 1e		cmp ($1e),y	                cmp (up),y              ; See if we are done.
.a71c	d0 02		bne $a720	                bne _have_wordlist
.a71e	80 45		bra $a765	                bra _words_done
.a720					_have_wordlist:
.a720	18		clc		                clc                     ; Index into byte array SEARCH-ORDER.
.a721	69 1f		adc #$1f	                adc #search_order_offset
.a723	a8		tay		                tay
.a724	b1 1e		lda ($1e),y	                lda (up),y              ; Get the index into array WORDLISTS
.a726	0a		asl a		                asl                     ; Turn offset into cells offset.
.a727	18		clc		                clc
.a728	69 06		adc #$06	                adc #wordlists_offset
.a72a	a8		tay		                tay
.a72b	b1 1e		lda ($1e),y	                lda (up),y              ; Save the DP for this wordlist
.a72d	95 00		sta $00,x	                sta 0,x                 ; on the stack. ( nt )
.a72f	c8		iny		                iny
.a730	b1 1e		lda ($1e),y	                lda (up),y
.a732	95 01		sta $01,x	                sta 1,x
.a734					_loop:
.a734	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; ( nt nt )
.a737	20 21 96	jsr $9621	                jsr xt_name_to_string   ; ( nt addr u )
.a73a	68		pla		                pla
.a73b	18		clc		                clc
.a73c	75 00		adc $00,x	                adc 0,x
.a73e	1a		inc a		                ina                     ; don't forget the space between words
.a73f	c9 4f		cmp #$4f	                cmp #MAX_LINE_LENGTH    ; usually 79
.a741	90 06		bcc $a749	                bcc +
.a743	20 6f 89	jsr $896f	                jsr xt_cr
.a746	b5 00		lda $00,x	                lda 0,x                 ; After going to next line, start
.a748	1a		inc a		                ina                     ; with length of this word.
.a749					+
.a749	48		pha		                pha
.a74a	20 f7 a4	jsr $a4f7	                jsr xt_type             ; ( nt )
.a74d	a9 20		lda #$20	                lda #AscSP
.a74f	20 02 8e	jsr $8e02	                jsr emit_a
.a752	20 40 98	jsr $9840	                jsr xt_one_plus         ; 1+
.a755	20 40 98	jsr $9840	                jsr xt_one_plus         ; 1+
.a758	20 8c 8f	jsr $8f8c	                jsr xt_fetch            ; @ ( nt+1 )
.a75b	b5 00		lda $00,x	                lda 0,x
.a75d	15 01		ora $01,x	                ora 1,x
.a75f	d0 d3		bne $a734	                bne _loop
.a761	e6 28		inc $28		                inc tmp3
.a763	80 b1		bra $a716	                bra _wordlist_loop
.a765					_words_done:
.a765	68		pla		                pla                     ; dump counter
.a766	e8		inx		                inx
.a767	e8		inx		                inx
.a768	60		rts		z_words:        rts
.a769					xt_wordsize:
.a769	20 38 d8	jsr $d838	                jsr underflow_1
.a76c	b5 00		lda $00,x	                lda 0,x
.a76e	85 24		sta $24		                sta tmp1
.a770	b5 01		lda $01,x	                lda 1,x
.a772	85 25		sta $25		                sta tmp1+1
.a774	a0 06		ldy #$06	                ldy #6
.a776	b1 24		lda ($24),y	                lda (tmp1),y    ; LSB of z
.a778	88		dey		                dey
.a779	88		dey		                dey
.a77a	38		sec		                sec
.a77b	f1 24		sbc ($24),y	                sbc (tmp1),y    ; LSB of xt
.a77d	95 00		sta $00,x	                sta 0,x
.a77f	a0 07		ldy #$07	                ldy #7
.a781	b1 24		lda ($24),y	                lda (tmp1),y    ; MSB of z
.a783	88		dey		                dey
.a784	88		dey		                dey
.a785	f1 24		sbc ($24),y	                sbc (tmp1),y    ; MSB of xt
.a787	95 01		sta $01,x	                sta 1,x
.a789	60		rts		z_wordsize:     rts
.a78a					xt_xor:
.a78a	20 3d d8	jsr $d83d	                jsr underflow_2
.a78d	b5 00		lda $00,x	                lda 0,x
.a78f	55 02		eor $02,x	                eor 2,x
.a791	95 02		sta $02,x	                sta 2,x
.a793	b5 01		lda $01,x	                lda 1,x
.a795	55 03		eor $03,x	                eor 3,x
.a797	95 03		sta $03,x	                sta 3,x
.a799	e8		inx		                inx
.a79a	e8		inx		                inx
.a79b	60		rts		z_xor:          rts
.a79c					xt_case:
.a79c					xt_forth_wordlist:
.a79c					xt_zero:
.a79c	ca		dex		                dex             ; push
.a79d	ca		dex		                dex
.a79e	74 00		stz $00,x	                stz 0,x
.a7a0	74 01		stz $01,x	                stz 1,x
.a7a2					z_case:
.a7a2					z_forth_wordlist:
.a7a2					z_zero:
.a7a2	60		rts		                rts
.a7a3					xt_zero_equal:
.a7a3	20 38 d8	jsr $d838	                jsr underflow_1
.a7a6	b5 00		lda $00,x	                lda 0,x
.a7a8	15 01		ora $01,x	                ora 1,x
.a7aa	f0 04		beq $a7b0	                beq _zero
.a7ac	a9 00		lda #$00	                lda #0
.a7ae	80 02		bra $a7b2	                bra _store
.a7b0					_zero:
.a7b0	a9 ff		lda #$ff	                lda #$ff
.a7b2					_store:
.a7b2	95 00		sta $00,x	                sta 0,x
.a7b4	95 01		sta $01,x	                sta 1,x
.a7b6	60		rts		z_zero_equal:   rts
.a7b7					xt_zero_greater:
.a7b7	20 38 d8	jsr $d838	                jsr underflow_1
.a7ba	a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS is negative)
.a7bc	b5 01		lda $01,x	                lda 1,x         ; MSB
.a7be	30 05		bmi $a7c5	                bmi _done       ; TOS is negative, keep FLASE
.a7c0	15 00		ora $00,x	                ora 0,x
.a7c2	f0 01		beq $a7c5	                beq _done       ; TOS is zero, keep FALSE
.a7c4	88		dey		                dey             ; TOS is postive, make true
.a7c5					_done:
.a7c5	98		tya		                tya
.a7c6	95 00		sta $00,x	                sta 0,x
.a7c8	95 01		sta $01,x	                sta 1,x
.a7ca	60		rts		z_zero_greater: rts
.a7cb					xt_zero_less:
.a7cb	20 38 d8	jsr $d838	                jsr underflow_1
.a7ce	a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS positive)
.a7d0	b5 01		lda $01,x	                lda 1,x         ; MSB
.a7d2	10 01		bpl $a7d5	                bpl _done       ; TOS is positive, so keep FALSE
.a7d4	88		dey		                dey             ; TOS is negative, make TRUE
.a7d5					_done:
.a7d5	98		tya		                tya
.a7d6	95 00		sta $00,x	                sta 0,x
.a7d8	95 01		sta $01,x	                sta 1,x
.a7da	60		rts		z_zero_less:    rts
.a7db					xt_zero_unequal:
.a7db	20 38 d8	jsr $d838	                jsr underflow_1
.a7de	a0 00		ldy #$00	                ldy #0          ; default false
.a7e0	b5 00		lda $00,x	                lda 0,x
.a7e2	15 01		ora $01,x	                ora 1,x
.a7e4	f0 01		beq $a7e7	                beq _got_zero
.a7e6	88		dey		                dey
.a7e7					_got_zero:
.a7e7	98		tya		                tya
.a7e8	95 00		sta $00,x	                sta 0,x
.a7ea	95 01		sta $01,x	                sta 1,x
.a7ec	60		rts		z_zero_unequal: rts
.a7ed					xt_editor_screen_helper:
.a7ed	20 bb 8d	jsr $8dbb	                jsr xt_dup
.a7f0	20 cd 9e	jsr $9ecd	                jsr xt_scr
.a7f3	20 81 a1	jsr $a181	                jsr xt_store
.a7f6	20 c1 85	jsr $85c1	                jsr xt_buffer
.a7f9					z_editor_screen_helper:
.a7f9	60		rts		                rts
.a7fa					xt_editor_enter_screen:
.a7fa	20 ed a7	jsr $a7ed	                jsr xt_editor_screen_helper
.a7fd	20 3a 8d	jsr $8d3a	                jsr xt_drop
.a800	64 2e		stz $2e		                stz editor1
.a802					_prompt_loop:
.a802	ca		dex		                dex
.a803	ca		dex		                dex
.a804	a5 2e		lda $2e		                lda editor1
.a806	95 00		sta $00,x	                sta 0,x
.a808	74 01		stz $01,x	                stz 1,x
.a80a	20 cf a8	jsr $a8cf	                jsr xt_editor_o
.a80d	e6 2e		inc $2e		                inc editor1
.a80f	a9 10		lda #$10	                lda #16
.a811	c5 2e		cmp $2e		                cmp editor1
.a813	d0 ed		bne $a802	                bne _prompt_loop
.a815					z_editor_enter_screen:
.a815	60		rts		                rts
.a816					xt_editor_erase_screen:
.a816	20 ed a7	jsr $a7ed	                jsr xt_editor_screen_helper
.a819	ca		dex		                dex
.a81a	ca		dex		                dex
.a81b	74 00		stz $00,x	                stz 0,x
.a81d	a9 04		lda #$04	                lda #4          ; 4 in MSB makes 1024 ($400).
.a81f	95 01		sta $01,x	                sta 1,x
.a821	20 f6 8e	jsr $8ef6	                jsr xt_blank
.a824	20 58 a6	jsr $a658	                jsr xt_update
.a827					z_editor_erase_screen:
.a827	60		rts		                rts
.a828					xt_editor_el:
.a828	20 b6 a8	jsr $a8b6	                jsr xt_editor_line
.a82b	ca		dex		                dex
.a82c	ca		dex		                dex
.a82d	a9 40		lda #$40	                lda #64
.a82f	95 00		sta $00,x	                sta 0,x
.a831	74 01		stz $01,x	                stz 1,x
.a833	20 f6 8e	jsr $8ef6	                jsr xt_blank
.a836	20 58 a6	jsr $a658	                jsr xt_update
.a839	60		rts		z_editor_el:    rts
.a83a					xt_editor_l:
.a83a	ca		dex		                dex             ; Put SCR on the stack.
.a83b	ca		dex		                dex
.a83c	a0 02		ldy #$02	                ldy #scr_offset
.a83e	b1 1e		lda ($1e),y	                lda (up),y
.a840	95 00		sta $00,x	                sta 0,x
.a842	c8		iny		                iny
.a843	b1 1e		lda ($1e),y	                lda (up),y
.a845	95 01		sta $01,x	                sta 1,x
.a847	20 cd 83	jsr $83cd	                jsr xt_block    ; Get the current screen.
.a84a	20 6f 89	jsr $896f	                jsr xt_cr
.a84d	80 08		bra $a857	                bra _after_screen_msg
.a84f					_screen_msg:
>a84f	53 63 72 65 65 6e 20 23		                .text "Screen #"
.a857					_after_screen_msg:
.a857	20 9d a0	jsr $a09d	                jsr sliteral_runtime
>a85a	4f a8 08 00			                .word _screen_msg, _after_screen_msg-_screen_msg
.a85e	20 f7 a4	jsr $a4f7	                jsr xt_type
.a861	20 cd 9e	jsr $9ecd	                jsr xt_scr
.a864	20 8c 8f	jsr $8f8c	                jsr xt_fetch
.a867	ca		dex		                dex
.a868	ca		dex		                dex
.a869	a9 04		lda #$04	                lda #4          ; four spaces
.a86b	95 00		sta $00,x	                sta 0,x
.a86d	74 01		stz $01,x	                stz 1,x
.a86f	20 2e a5	jsr $a52e	                jsr xt_u_dot_r
.a872	64 28		stz $28		                stz tmp3
.a874					_line_loop:
.a874	20 6f 89	jsr $896f	                jsr xt_cr
.a877	ca		dex		                dex
.a878	ca		dex		                dex
.a879	ca		dex		                dex
.a87a	ca		dex		                dex
.a87b	74 03		stz $03,x	                stz 3,x
.a87d	a5 28		lda $28		                lda tmp3
.a87f	95 02		sta $02,x	                sta 2,x
.a881	74 01		stz $01,x	                stz 1,x
.a883	a9 02		lda #$02	                lda #2
.a885	95 00		sta $00,x	                sta 0,x
.a887	20 2e a5	jsr $a52e	                jsr xt_u_dot_r
.a88a	20 12 a1	jsr $a112	                jsr xt_space
.a88d	20 bb 8d	jsr $8dbb	                jsr xt_dup
.a890	ca		dex		                dex
.a891	ca		dex		                dex
.a892	a9 40		lda #$40	                lda #64
.a894	95 00		sta $00,x	                sta 0,x
.a896	74 01		stz $01,x	                stz 1,x
.a898	20 f7 a4	jsr $a4f7	                jsr xt_type
.a89b	18		clc		                clc
.a89c	a9 40		lda #$40	                lda #64
.a89e	75 00		adc $00,x	                adc 0,x
.a8a0	95 00		sta $00,x	                sta 0,x
.a8a2	b5 01		lda $01,x	                lda 1,x
.a8a4	69 00		adc #$00	                adc #0      ; Add carry
.a8a6	95 01		sta $01,x	                sta 1,x
.a8a8	e6 28		inc $28		                inc tmp3
.a8aa	a5 28		lda $28		                lda tmp3
.a8ac	c9 10		cmp #$10	                cmp #16
.a8ae	d0 c4		bne $a874	                bne _line_loop
.a8b0	20 6f 89	jsr $896f	                jsr xt_cr
.a8b3	e8		inx		                inx
.a8b4	e8		inx		                inx
.a8b5	60		rts		z_editor_l:            rts
.a8b6					xt_editor_line:
.a8b6	20 38 d8	jsr $d838	                jsr underflow_1
.a8b9	a0 06		ldy #$06	                ldy #6          ; *64 is same as left shift 6 times.
.a8bb					_shift_tos_left:
.a8bb	16 00		asl $00,x	                asl 0,x         ; Shift TOS to the left
.a8bd	36 01		rol $01,x	                rol 1,x         ; ROL brings MSb from lower byte.
.a8bf	88		dey		                dey
.a8c0	d0 f9		bne $a8bb	                bne _shift_tos_left
.a8c2	20 cd 9e	jsr $9ecd	                jsr xt_scr
.a8c5	20 8c 8f	jsr $8f8c	                jsr xt_fetch
.a8c8	20 cd 83	jsr $83cd	                jsr xt_block
.a8cb	20 06 9a	jsr $9a06	                jsr xt_plus
.a8ce	60		rts		z_editor_line:  rts
.a8cf					xt_editor_o:
.a8cf	20 6f 89	jsr $896f	                jsr xt_cr
.a8d2	20 bb 8d	jsr $8dbb	                jsr xt_dup
.a8d5	20 9b a3	jsr $a39b	                jsr xt_two
.a8d8	20 2e a5	jsr $a52e	                jsr xt_u_dot_r
.a8db	20 12 a1	jsr $a112	                jsr xt_space
.a8de	a9 2a		lda #$2a	                lda #42         ; ASCII for *
.a8e0	20 02 8e	jsr $8e02	                jsr emit_a
.a8e3	20 12 a1	jsr $a112	                jsr xt_space
.a8e6	20 b6 a8	jsr $a8b6	                jsr xt_editor_line
.a8e9	20 bb 8d	jsr $8dbb	                jsr xt_dup      ; Save a copy of the line address for later.
.a8ec	ca		dex		                dex
.a8ed	ca		dex		                dex
.a8ee	a9 40		lda #$40	                lda #64         ; chars/line
.a8f0	95 00		sta $00,x	                sta 0,x
.a8f2	74 01		stz $01,x	                stz 1,x
.a8f4	20 38 81	jsr $8138	                jsr xt_accept
.a8f7	20 bb 8d	jsr $8dbb	                jsr xt_dup
.a8fa	20 91 96	jsr $9691	                jsr xt_not_rote ; -rot
.a8fd	20 06 9a	jsr $9a06	                jsr xt_plus
.a900	ca		dex		                dex
.a901	ca		dex		                dex
.a902	a9 40		lda #$40	                lda #64         ; chars/line
.a904	95 00		sta $00,x	                sta 0,x
.a906	74 01		stz $01,x	                stz 1,x
.a908	20 7a 9b	jsr $9b7a	                jsr xt_rot
.a90b	20 73 95	jsr $9573	                jsr xt_minus
.a90e	20 f6 8e	jsr $8ef6	                jsr xt_blank
.a911	20 58 a6	jsr $a658	                jsr xt_update
.a914	60		rts		z_editor_o:     rts

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../assembler.asm

.a915					assembler:
.a915					xt_asm_adc_h:
.a915	a9 69		lda #$69	                lda #$69
.a917	4c 70 ac	jmp $ac70	                jmp asm_common
.a91a					z_asm_adc_h:
.a91a					xt_asm_adc_x:
.a91a	a9 7d		lda #$7d	                lda #$7D
.a91c	4c 70 ac	jmp $ac70	                jmp asm_common
.a91f					z_asm_adc_x:
.a91f					xt_asm_adc_y:
.a91f	a9 79		lda #$79	                lda #$79
.a921	4c 70 ac	jmp $ac70	                jmp asm_common
.a924					z_asm_adc_y:
.a924					xt_asm_adc_z:
.a924	a9 65		lda #$65	                lda #$65
.a926	4c 70 ac	jmp $ac70	                jmp asm_common
.a929					z_asm_adc_z:
.a929					xt_asm_adc_zi:
.a929	a9 72		lda #$72	                lda #$72
.a92b	4c 70 ac	jmp $ac70	                jmp asm_common
.a92e					z_asm_adc_zi:
.a92e					xt_asm_adc_ziy:
.a92e	a9 71		lda #$71	                lda #$71
.a930	4c 70 ac	jmp $ac70	                jmp asm_common
.a933					z_asm_adc_ziy:
.a933					xt_asm_adc_zx:
.a933	a9 75		lda #$75	                lda #$75
.a935	4c 70 ac	jmp $ac70	                jmp asm_common
.a938					z_asm_adc_zx:
.a938					xt_asm_adc_zxi:
.a938	a9 61		lda #$61	                lda #$61
.a93a	4c 70 ac	jmp $ac70	                jmp asm_common
.a93d					z_asm_adc_zxi:
.a93d					xt_asm_and:
.a93d	a9 2d		lda #$2d	                lda #$2D
.a93f	4c 70 ac	jmp $ac70	                jmp asm_common
.a942					z_asm_and:
.a942					xt_asm_and_h:
.a942	a9 29		lda #$29	                lda #$29
.a944	4c 70 ac	jmp $ac70	                jmp asm_common
.a947					z_asm_and_h:
.a947					xt_asm_and_x:
.a947	a9 3d		lda #$3d	                lda #$3D
.a949	4c 70 ac	jmp $ac70	                jmp asm_common
.a94c					z_asm_and_x:
.a94c					xt_asm_and_y:
.a94c	a9 39		lda #$39	                lda #$39
.a94e	4c 70 ac	jmp $ac70	                jmp asm_common
.a951					z_asm_and_y:
.a951					xt_asm_and_z:
.a951	a9 25		lda #$25	                lda #$25
.a953	4c 70 ac	jmp $ac70	                jmp asm_common
.a956					z_asm_and_z:
.a956					xt_asm_and_zi:
.a956	a9 32		lda #$32	                lda #$32
.a958	4c 70 ac	jmp $ac70	                jmp asm_common
.a95b					z_asm_and_zi:
.a95b					xt_asm_and_ziy:
.a95b	a9 31		lda #$31	                lda #$31
.a95d	4c 70 ac	jmp $ac70	                jmp asm_common
.a960					z_asm_and_ziy:
.a960					xt_asm_and_zx:
.a960	a9 35		lda #$35	                lda #$35
.a962	4c 70 ac	jmp $ac70	                jmp asm_common
.a965					z_asm_and_zx:
.a965					xt_asm_and_zxi:
.a965	a9 21		lda #$21	                lda #$21
.a967	4c 70 ac	jmp $ac70	                jmp asm_common
.a96a					z_asm_and_zxi:
.a96a					xt_asm_asl:
.a96a	a9 0e		lda #$0e	                lda #$0E
.a96c	4c 70 ac	jmp $ac70	                jmp asm_common
.a96f					z_asm_asl:
.a96f					xt_asm_asl_a:
.a96f	a9 0a		lda #$0a	                lda #$0A
.a971	4c 70 ac	jmp $ac70	                jmp asm_common
.a974					z_asm_asl_a:
.a974					xt_asm_asl_x:
.a974	a9 1e		lda #$1e	                lda #$1E
.a976	4c 70 ac	jmp $ac70	                jmp asm_common
.a979					z_asm_asl_x:
.a979					xt_asm_asl_z:
.a979	a9 06		lda #$06	                lda #$06
.a97b	4c 70 ac	jmp $ac70	                jmp asm_common
.a97e					z_asm_asl_z:
.a97e					xt_asm_asl_zx:
.a97e	a9 16		lda #$16	                lda #$16
.a980	4c 70 ac	jmp $ac70	                jmp asm_common
.a983					z_asm_asl_zx:
.a983					xt_asm_bcc:
.a983	a9 90		lda #$90	                lda #$90
.a985	4c 70 ac	jmp $ac70	                jmp asm_common
.a988					z_asm_bcc:
.a988					xt_asm_bcs:
.a988	a9 b0		lda #$b0	                lda #$B0
.a98a	a0 02		ldy #$02	                ldy #2
.a98c	4c 70 ac	jmp $ac70	                jmp asm_common
.a98f					z_asm_bcs:
.a98f					xt_asm_beq:
.a98f	a9 f0		lda #$f0	                lda #$F0
.a991	4c 70 ac	jmp $ac70	                jmp asm_common
.a994					z_asm_beq:
.a994					xt_asm_bit:
.a994	a9 2c		lda #$2c	                lda #$2C
.a996	4c 70 ac	jmp $ac70	                jmp asm_common
.a999					z_asm_bit:
.a999					xt_asm_bit_h:
.a999	a9 89		lda #$89	                lda #$89
.a99b	4c 70 ac	jmp $ac70	                jmp asm_common
.a99e					z_asm_bit_h:
.a99e					xt_asm_bit_x:
.a99e	a9 3c		lda #$3c	                lda #$3C
.a9a0	4c 70 ac	jmp $ac70	                jmp asm_common
.a9a3					z_asm_bit_x:
.a9a3					xt_asm_bit_z:
.a9a3	a9 24		lda #$24	                lda #$24
.a9a5	4c 70 ac	jmp $ac70	                jmp asm_common
.a9a8					z_asm_bit_z:
.a9a8					xt_asm_bit_zx:
.a9a8	a9 34		lda #$34	                lda #$34
.a9aa	4c 70 ac	jmp $ac70	                jmp asm_common
.a9ad					z_asm_bit_zx:
.a9ad					xt_asm_bmi:
.a9ad	a9 30		lda #$30	                lda #$30
.a9af	4c 70 ac	jmp $ac70	                jmp asm_common
.a9b2					z_asm_bmi:
.a9b2					xt_asm_bne:
.a9b2	a9 d0		lda #$d0	                lda #$D0
.a9b4	4c 70 ac	jmp $ac70	                jmp asm_common
.a9b7					z_asm_bne:
.a9b7					xt_asm_bpl:
.a9b7	a9 10		lda #$10	                lda #$10
.a9b9	4c 70 ac	jmp $ac70	                jmp asm_common
.a9bc					z_asm_bpl:
.a9bc					xt_asm_bra:
.a9bc	a9 80		lda #$80	                lda #$80
.a9be	4c 70 ac	jmp $ac70	                jmp asm_common
.a9c1					z_asm_bra:
.a9c1					xt_asm_brk:
.a9c1	a9 00		lda #$00	                lda #$00
.a9c3	4c 70 ac	jmp $ac70	                jmp asm_common
.a9c6					z_asm_brk:
.a9c6					xt_asm_bvc:
.a9c6	a9 50		lda #$50	                lda #$50
.a9c8	4c 70 ac	jmp $ac70	                jmp asm_common
.a9cb					z_asm_bvc:
.a9cb					xt_asm_bvs:
.a9cb	a9 70		lda #$70	                lda #$70
.a9cd	4c 70 ac	jmp $ac70	                jmp asm_common
.a9d0					z_asm_bvs:
.a9d0					xt_asm_clc:
.a9d0	a9 18		lda #$18	                lda #$18
.a9d2	4c 70 ac	jmp $ac70	                jmp asm_common
.a9d5					z_asm_clc:
.a9d5					xt_asm_cld:
.a9d5	a9 d8		lda #$d8	                lda #$D8
.a9d7	4c 70 ac	jmp $ac70	                jmp asm_common
.a9da					z_asm_cld:
.a9da					xt_asm_cli:
.a9da	a9 58		lda #$58	                lda #$58
.a9dc	4c 70 ac	jmp $ac70	                jmp asm_common
.a9df					z_asm_cli:
.a9df					xt_asm_clv:
.a9df	a9 b8		lda #$b8	                lda #$B8
.a9e1	4c 70 ac	jmp $ac70	                jmp asm_common
.a9e4					z_asm_clv:
.a9e4					xt_asm_cmp:
.a9e4	a9 cd		lda #$cd	                lda #$CD
.a9e6	4c 70 ac	jmp $ac70	                jmp asm_common
.a9e9					z_asm_cmp:
.a9e9					xt_asm_cmp_h:
.a9e9	a9 c9		lda #$c9	                lda #$C9
.a9eb	4c 70 ac	jmp $ac70	                jmp asm_common
.a9ee					z_asm_cmp_h:
.a9ee					xt_asm_cmp_x:
.a9ee	a9 dd		lda #$dd	                lda #$DD
.a9f0	4c 70 ac	jmp $ac70	                jmp asm_common
.a9f3					z_asm_cmp_x:
.a9f3					xt_asm_cmp_y:
.a9f3	a9 d9		lda #$d9	                lda #$D9
.a9f5	4c 70 ac	jmp $ac70	                jmp asm_common
.a9f8					z_asm_cmp_y:
.a9f8					xt_asm_cmp_z:
.a9f8	a9 c5		lda #$c5	                lda #$C5
.a9fa	4c 70 ac	jmp $ac70	                jmp asm_common
.a9fd					z_asm_cmp_z:
.a9fd					xt_asm_cmp_zi:
.a9fd	a9 d2		lda #$d2	                lda #$D2
.a9ff	4c 70 ac	jmp $ac70	                jmp asm_common
.aa02					z_asm_cmp_zi:
.aa02					xt_asm_cmp_ziy:
.aa02	a9 d1		lda #$d1	                lda #$D1
.aa04	4c 70 ac	jmp $ac70	                jmp asm_common
.aa07					z_asm_cmp_ziy:
.aa07					xt_asm_cmp_zx:
.aa07	a9 d5		lda #$d5	                lda #$D5
.aa09	4c 70 ac	jmp $ac70	                jmp asm_common
.aa0c					z_asm_cmp_zx:
.aa0c					xt_asm_cmp_zxi:
.aa0c	a9 c1		lda #$c1	                lda #$C1
.aa0e	4c 70 ac	jmp $ac70	                jmp asm_common
.aa11					z_asm_cmp_zxi:
.aa11					xt_asm_cpx:
.aa11	a9 ec		lda #$ec	                lda #$EC
.aa13	4c 70 ac	jmp $ac70	                jmp asm_common
.aa16					z_asm_cpx:
.aa16					xt_asm_cpx_h:
.aa16	a9 e0		lda #$e0	                lda #$E0
.aa18	4c 70 ac	jmp $ac70	                jmp asm_common
.aa1b					z_asm_cpx_h:
.aa1b					xt_asm_cpx_z:
.aa1b	a9 e4		lda #$e4	                lda #$E4
.aa1d	4c 70 ac	jmp $ac70	                jmp asm_common
.aa20					z_asm_cpx_z:
.aa20					xt_asm_cpy:
.aa20	a9 cc		lda #$cc	                lda #$CC
.aa22	a0 03		ldy #$03	                ldy #3
.aa24	4c 70 ac	jmp $ac70	                jmp asm_common
.aa27					z_asm_cpy:
.aa27					xt_asm_cpy_h:
.aa27	a9 c0		lda #$c0	                lda #$C0
.aa29	4c 70 ac	jmp $ac70	                jmp asm_common
.aa2c					z_asm_cpy_h:
.aa2c					xt_asm_cpy_z:
.aa2c	a9 c4		lda #$c4	                lda #$C4
.aa2e	4c 70 ac	jmp $ac70	                jmp asm_common
.aa31					z_asm_cpy_z:
.aa31					xt_asm_dec:
.aa31	a9 ce		lda #$ce	                lda #$CE
.aa33	4c 70 ac	jmp $ac70	                jmp asm_common
.aa36					z_asm_dec:
.aa36					xt_asm_dec_a:
.aa36	a9 3a		lda #$3a	                lda #$3A
.aa38	4c 70 ac	jmp $ac70	                jmp asm_common
.aa3b					z_asm_dec_a:
.aa3b					xt_asm_dec_x:
.aa3b	a9 de		lda #$de	                lda #$DE
.aa3d	4c 70 ac	jmp $ac70	                jmp asm_common
.aa40					z_asm_dec_x:
.aa40					xt_asm_dec_z:
.aa40	a9 c6		lda #$c6	                lda #$C6
.aa42	4c 70 ac	jmp $ac70	                jmp asm_common
.aa45					z_asm_dec_z:
.aa45					xt_asm_dec_zx:
.aa45	a9 d6		lda #$d6	                lda #$D6
.aa47	4c 70 ac	jmp $ac70	                jmp asm_common
.aa4a					z_asm_dec_zx:
.aa4a					xt_asm_dex:
.aa4a	a9 ca		lda #$ca	                lda #$CA
.aa4c	4c 70 ac	jmp $ac70	                jmp asm_common
.aa4f					z_asm_dex:
.aa4f					xt_asm_dey:
.aa4f	a9 88		lda #$88	                lda #$88
.aa51	4c 70 ac	jmp $ac70	                jmp asm_common
.aa54					z_asm_dey:
.aa54					xt_asm_eor:
.aa54	a9 4d		lda #$4d	                lda #$4D
.aa56	4c 70 ac	jmp $ac70	                jmp asm_common
.aa59					z_asm_eor:
.aa59					xt_asm_eor_h:
.aa59	a9 49		lda #$49	                lda #$49
.aa5b	4c 70 ac	jmp $ac70	                jmp asm_common
.aa5e					z_asm_eor_h:
.aa5e					xt_asm_eor_x:
.aa5e	a9 5d		lda #$5d	                lda #$5D
.aa60	4c 70 ac	jmp $ac70	                jmp asm_common
.aa63					z_asm_eor_x:
.aa63					xt_asm_eor_y:
.aa63	a9 59		lda #$59	                lda #$59
.aa65	4c 70 ac	jmp $ac70	                jmp asm_common
.aa68					z_asm_eor_y:
.aa68					xt_asm_eor_z:
.aa68	a9 45		lda #$45	                lda #$45
.aa6a	4c 70 ac	jmp $ac70	                jmp asm_common
.aa6d					z_asm_eor_z:
.aa6d					xt_asm_eor_zi:
.aa6d	a9 52		lda #$52	                lda #$52
.aa6f	4c 70 ac	jmp $ac70	                jmp asm_common
.aa72					z_asm_eor_zi:
.aa72					xt_asm_eor_ziy:
.aa72	a9 51		lda #$51	                lda #$51
.aa74	4c 70 ac	jmp $ac70	                jmp asm_common
.aa77					z_asm_eor_ziy:
.aa77					xt_asm_eor_zx:
.aa77	a9 55		lda #$55	                lda #$55
.aa79	4c 70 ac	jmp $ac70	                jmp asm_common
.aa7c					z_asm_eor_zx:
.aa7c					xt_asm_eor_zxi:
.aa7c	a9 41		lda #$41	                lda #$41
.aa7e	4c 70 ac	jmp $ac70	                jmp asm_common
.aa81					z_asm_eor_zxi:
.aa81					xt_asm_inc:
.aa81	a9 ee		lda #$ee	                lda #$EE
.aa83	4c 70 ac	jmp $ac70	                jmp asm_common
.aa86					z_asm_inc:
.aa86					xt_asm_inc_a:
.aa86	a9 1a		lda #$1a	                lda #$1A
.aa88	4c 70 ac	jmp $ac70	                jmp asm_common
.aa8b					z_asm_inc_a:
.aa8b					xt_asm_inc_x:
.aa8b	a9 fe		lda #$fe	                lda #$FE
.aa8d	4c 70 ac	jmp $ac70	                jmp asm_common
.aa90					z_asm_inc_x:
.aa90					xt_asm_inc_z:
.aa90	a9 e6		lda #$e6	                lda #$E6
.aa92	4c 70 ac	jmp $ac70	                jmp asm_common
.aa95					z_asm_inc_z:
.aa95					xt_asm_inc_zx:
.aa95	a9 f6		lda #$f6	                lda #$F6
.aa97	4c 70 ac	jmp $ac70	                jmp asm_common
.aa9a					z_asm_inc_zx:
.aa9a					xt_asm_inx:
.aa9a	a9 e8		lda #$e8	                lda #$E8
.aa9c	4c 70 ac	jmp $ac70	                jmp asm_common
.aa9f					z_asm_inx:
.aa9f					xt_asm_iny:
.aa9f	a9 c8		lda #$c8	                lda #$C8
.aaa1	4c 70 ac	jmp $ac70	                jmp asm_common
.aaa4					z_asm_iny:
.aaa4					xt_asm_jmp:
.aaa4	a9 4c		lda #$4c	                lda #$4C
.aaa6	4c 70 ac	jmp $ac70	                jmp asm_common
.aaa9					z_asm_jmp:
.aaa9					xt_asm_jmp_i:
.aaa9	a9 6c		lda #$6c	                lda #$6C
.aaab	4c 70 ac	jmp $ac70	                jmp asm_common
.aaae					z_asm_jmp_i:
.aaae					xt_asm_jmp_xi:
.aaae	a9 7c		lda #$7c	                lda #$7C
.aab0	4c 70 ac	jmp $ac70	                jmp asm_common
.aab3					z_asm_jmp_xi:
.aab3					xt_asm_jsr:
.aab3	a9 20		lda #$20	                lda #$20
.aab5	4c 70 ac	jmp $ac70	                jmp asm_common
.aab8					z_asm_jsr:
.aab8					xt_asm_lda:
.aab8	a9 ad		lda #$ad	                lda #$AD
.aaba	4c 70 ac	jmp $ac70	                jmp asm_common
.aabd					z_asm_lda:
.aabd					xt_asm_lda_h:
.aabd	a9 a9		lda #$a9	                lda #$A9
.aabf	4c 70 ac	jmp $ac70	                jmp asm_common
.aac2					z_asm_lda_h:
.aac2					xt_asm_lda_x:
.aac2	a9 bd		lda #$bd	                lda #$BD
.aac4	4c 70 ac	jmp $ac70	                jmp asm_common
.aac7					z_asm_lda_x:
.aac7					xt_asm_lda_y:
.aac7	a9 b9		lda #$b9	                lda #$B9
.aac9	4c 70 ac	jmp $ac70	                jmp asm_common
.aacc					z_asm_lda_y:
.aacc					xt_asm_lda_z:
.aacc	a9 a5		lda #$a5	                lda #$A5
.aace	4c 70 ac	jmp $ac70	                jmp asm_common
.aad1					z_asm_lda_z:
.aad1					xt_asm_lda_zi:
.aad1	a9 b2		lda #$b2	                lda #$B2
.aad3	4c 70 ac	jmp $ac70	                jmp asm_common
.aad6					z_asm_lda_zi:
.aad6					xt_asm_lda_ziy:
.aad6	a9 b1		lda #$b1	                lda #$B1
.aad8	4c 70 ac	jmp $ac70	                jmp asm_common
.aadb					z_asm_lda_ziy:
.aadb					xt_asm_lda_zx:
.aadb	a9 b5		lda #$b5	                lda #$B5
.aadd	4c 70 ac	jmp $ac70	                jmp asm_common
.aae0					z_asm_lda_zx:
.aae0					xt_asm_lda_zxi:
.aae0	a9 a1		lda #$a1	                lda #$A1
.aae2	4c 70 ac	jmp $ac70	                jmp asm_common
.aae5					z_asm_lda_zxi:
.aae5					xt_asm_ldx:
.aae5	a9 ae		lda #$ae	                lda #$AE
.aae7	4c 70 ac	jmp $ac70	                jmp asm_common
.aaea					z_asm_ldx:
.aaea					xt_asm_ldx_h:
.aaea	a9 a2		lda #$a2	                lda #$A2
.aaec	4c 70 ac	jmp $ac70	                jmp asm_common
.aaef					z_asm_ldx_h:
.aaef					xt_asm_ldx_y:
.aaef	a9 be		lda #$be	                lda #$BE
.aaf1	4c 70 ac	jmp $ac70	                jmp asm_common
.aaf4					z_asm_ldx_y:
.aaf4					xt_asm_ldx_z:
.aaf4	a9 a6		lda #$a6	                lda #$A6
.aaf6	4c 70 ac	jmp $ac70	                jmp asm_common
.aaf9					z_asm_ldx_z:
.aaf9					xt_asm_ldx_zy:
.aaf9	a9 b6		lda #$b6	                lda #$B6
.aafb	4c 70 ac	jmp $ac70	                jmp asm_common
.aafe					z_asm_ldx_zy:
.aafe					xt_asm_ldy:
.aafe	a9 ac		lda #$ac	                lda #$AC
.ab00	4c 70 ac	jmp $ac70	                jmp asm_common
.ab03					z_asm_ldy:
.ab03					xt_asm_ldy_h:
.ab03	a9 a0		lda #$a0	                lda #$A0
.ab05	4c 70 ac	jmp $ac70	                jmp asm_common
.ab08					z_asm_ldy_h:
.ab08					xt_asm_ldy_x:
.ab08	a9 bc		lda #$bc	                lda #$BC
.ab0a	4c 70 ac	jmp $ac70	                jmp asm_common
.ab0d					z_asm_ldy_x:
.ab0d					xt_asm_ldy_z:
.ab0d	a9 a4		lda #$a4	                lda #$A4
.ab0f	4c 70 ac	jmp $ac70	                jmp asm_common
.ab12					z_asm_ldy_z:
.ab12					xt_asm_ldy_zx:
.ab12	a9 b4		lda #$b4	                lda #$B4
.ab14	4c 70 ac	jmp $ac70	                jmp asm_common
.ab17					z_asm_ldy_zx:
.ab17					xt_asm_lsr:
.ab17	a9 4e		lda #$4e	                lda #$4E
.ab19	4c 70 ac	jmp $ac70	                jmp asm_common
.ab1c					z_asm_lsr:
.ab1c					xt_asm_lsr_a:
.ab1c	a9 4a		lda #$4a	                lda #$4A
.ab1e	4c 70 ac	jmp $ac70	                jmp asm_common
.ab21					z_asm_lsr_a:
.ab21					xt_asm_lsr_x:
.ab21	a9 5e		lda #$5e	                lda #$5E
.ab23	4c 70 ac	jmp $ac70	                jmp asm_common
.ab26					z_asm_lsr_x:
.ab26					xt_asm_lsr_z:
.ab26	a9 46		lda #$46	                lda #$46
.ab28	4c 70 ac	jmp $ac70	                jmp asm_common
.ab2b					z_asm_lsr_z:
.ab2b					xt_asm_lsr_zx:
.ab2b	a9 56		lda #$56	                lda #$56
.ab2d	4c 70 ac	jmp $ac70	                jmp asm_common
.ab30					z_asm_lsr_zx:
.ab30					xt_asm_nop:
.ab30	a9 ea		lda #$ea	                lda #$EA
.ab32	4c 70 ac	jmp $ac70	                jmp asm_common
.ab35					z_asm_nop:
.ab35					xt_asm_ora:
.ab35	a9 0d		lda #$0d	                lda #$0D
.ab37	4c 70 ac	jmp $ac70	                jmp asm_common
.ab3a					z_asm_ora:
.ab3a					xt_asm_ora_h:
.ab3a	a9 09		lda #$09	                lda #$09
.ab3c	4c 70 ac	jmp $ac70	                jmp asm_common
.ab3f					z_asm_ora_h:
.ab3f					xt_asm_ora_x:
.ab3f	a9 1d		lda #$1d	                lda #$1D
.ab41	4c 70 ac	jmp $ac70	                jmp asm_common
.ab44					z_asm_ora_x:
.ab44					xt_asm_ora_y:
.ab44	a9 19		lda #$19	                lda #$19
.ab46	4c 70 ac	jmp $ac70	                jmp asm_common
.ab49					z_asm_ora_y:
.ab49					xt_asm_ora_z:
.ab49	a9 05		lda #$05	                lda #$05
.ab4b	4c 70 ac	jmp $ac70	                jmp asm_common
.ab4e					z_asm_ora_z:
.ab4e					xt_asm_ora_zi:
.ab4e	a9 12		lda #$12	                lda #$12
.ab50	a0 02		ldy #$02	                ldy #2
.ab52	4c 70 ac	jmp $ac70	                jmp asm_common
.ab55					z_asm_ora_zi:
.ab55					xt_asm_ora_ziy:
.ab55	a9 11		lda #$11	                lda #$11
.ab57	4c 70 ac	jmp $ac70	                jmp asm_common
.ab5a					z_asm_ora_ziy:
.ab5a					xt_asm_ora_zx:
.ab5a	a9 15		lda #$15	                lda #$15
.ab5c	4c 70 ac	jmp $ac70	                jmp asm_common
.ab5f					z_asm_ora_zx:
.ab5f					xt_asm_ora_zxi:
.ab5f	a9 01		lda #$01	                lda #$01
.ab61	4c 70 ac	jmp $ac70	                jmp asm_common
.ab64					z_asm_ora_zxi:
.ab64					xt_asm_pha:
.ab64	a9 48		lda #$48	                lda #$48
.ab66	4c 70 ac	jmp $ac70	                jmp asm_common
.ab69					z_asm_pha:
.ab69					xt_asm_php:
.ab69	a9 08		lda #$08	                lda #$08
.ab6b	4c 70 ac	jmp $ac70	                jmp asm_common
.ab6e					z_asm_php:
.ab6e					xt_asm_phx:
.ab6e	a9 da		lda #$da	                lda #$DA
.ab70	4c 70 ac	jmp $ac70	                jmp asm_common
.ab73					z_asm_phx:
.ab73					xt_asm_phy:
.ab73	a9 5a		lda #$5a	                lda #$5A
.ab75	4c 70 ac	jmp $ac70	                jmp asm_common
.ab78					z_asm_phy:
.ab78					xt_asm_pla:
.ab78	a9 68		lda #$68	                lda #$68
.ab7a	4c 70 ac	jmp $ac70	                jmp asm_common
.ab7d					z_asm_pla:
.ab7d					xt_asm_plp:
.ab7d	a9 28		lda #$28	                lda #$28
.ab7f	4c 70 ac	jmp $ac70	                jmp asm_common
.ab82					z_asm_plp:
.ab82					xt_asm_plx:
.ab82	a9 fa		lda #$fa	                lda #$FA
.ab84	4c 70 ac	jmp $ac70	                jmp asm_common
.ab87					z_asm_plx:
.ab87					xt_asm_ply:
.ab87	a9 7a		lda #$7a	                lda #$7A
.ab89	4c 70 ac	jmp $ac70	                jmp asm_common
.ab8c					z_asm_ply:
.ab8c					xt_asm_rol:
.ab8c	a9 2e		lda #$2e	                lda #$2E
.ab8e	4c 70 ac	jmp $ac70	                jmp asm_common
.ab91					z_asm_rol:
.ab91					xt_asm_rol_a:
.ab91	a9 2a		lda #$2a	                lda #$2A
.ab93	4c 70 ac	jmp $ac70	                jmp asm_common
.ab96					z_asm_rol_a:
.ab96					xt_asm_rol_x:
.ab96	a9 3e		lda #$3e	                lda #$3E
.ab98	4c 70 ac	jmp $ac70	                jmp asm_common
.ab9b					z_asm_rol_x:
.ab9b					xt_asm_rol_z:
.ab9b	a9 26		lda #$26	                lda #$26
.ab9d	4c 70 ac	jmp $ac70	                jmp asm_common
.aba0					z_asm_rol_z:
.aba0					xt_asm_rol_zx:
.aba0	a9 36		lda #$36	                lda #$36
.aba2	4c 70 ac	jmp $ac70	                jmp asm_common
.aba5					z_asm_rol_zx:
.aba5					xt_asm_ror:
.aba5	a9 6e		lda #$6e	                lda #$6E
.aba7	4c 70 ac	jmp $ac70	                jmp asm_common
.abaa					z_asm_ror:
.abaa					xt_asm_ror_a:
.abaa	a9 6a		lda #$6a	                lda #$6A
.abac	4c 70 ac	jmp $ac70	                jmp asm_common
.abaf					z_asm_ror_a:
.abaf					xt_asm_ror_x:
.abaf	a9 7e		lda #$7e	                lda #$7E
.abb1	4c 70 ac	jmp $ac70	                jmp asm_common
.abb4					z_asm_ror_x:
.abb4					xt_asm_ror_z:
.abb4	a9 66		lda #$66	                lda #$66
.abb6	4c 70 ac	jmp $ac70	                jmp asm_common
.abb9					z_asm_ror_z:
.abb9					xt_asm_ror_zx:
.abb9	a9 76		lda #$76	                lda #$76
.abbb	4c 70 ac	jmp $ac70	                jmp asm_common
.abbe					z_asm_ror_zx:
.abbe					xt_asm_rti:
.abbe	a9 40		lda #$40	                lda #$40
.abc0	4c 70 ac	jmp $ac70	                jmp asm_common
.abc3					z_asm_rti:
.abc3					xt_asm_rts:
.abc3	a9 60		lda #$60	                lda #$60
.abc5	4c 70 ac	jmp $ac70	                jmp asm_common
.abc8					z_asm_rts:
.abc8					xt_asm_sbc:
.abc8	a9 ed		lda #$ed	                lda #$ED
.abca	4c 70 ac	jmp $ac70	                jmp asm_common
.abcd					z_asm_sbc:
.abcd					xt_asm_sbc_h:
.abcd	a9 e9		lda #$e9	                lda #$E9
.abcf	4c 70 ac	jmp $ac70	                jmp asm_common
.abd2					z_asm_sbc_h:
.abd2					xt_asm_sbc_x:
.abd2	a9 fd		lda #$fd	                lda #$FD
.abd4	4c 70 ac	jmp $ac70	                jmp asm_common
.abd7					z_asm_sbc_x:
.abd7					xt_asm_sbc_y:
.abd7	a9 f9		lda #$f9	                lda #$F9
.abd9	4c 70 ac	jmp $ac70	                jmp asm_common
.abdc					z_asm_sbc_y:
.abdc					xt_asm_sbc_z:
.abdc	a9 e5		lda #$e5	                lda #$E5
.abde	4c 70 ac	jmp $ac70	                jmp asm_common
.abe1					z_asm_sbc_z:
.abe1					xt_asm_sbc_zi:
.abe1	a9 f2		lda #$f2	                lda #$F2
.abe3	4c 70 ac	jmp $ac70	                jmp asm_common
.abe6					z_asm_sbc_zi:
.abe6					xt_asm_sbc_ziy:
.abe6	a9 f1		lda #$f1	                lda #$F1
.abe8	4c 70 ac	jmp $ac70	                jmp asm_common
.abeb					z_asm_sbc_ziy:
.abeb					xt_asm_sbc_zx:
.abeb	a9 f5		lda #$f5	                lda #$F5
.abed	4c 70 ac	jmp $ac70	                jmp asm_common
.abf0					z_asm_sbc_zx:
.abf0					xt_asm_sbc_zxi:
.abf0	a9 e1		lda #$e1	                lda #$E1
.abf2	80 7c		bra $ac70	                bra asm_common  ; <-- limit for BRA instead of JMP
.abf4					z_asm_sbc_zxi:
.abf4					xt_asm_sec:
.abf4	a9 38		lda #$38	                lda #$38
.abf6	80 78		bra $ac70	                bra asm_common
.abf8					z_asm_sec:
.abf8					xt_asm_sed:
.abf8	a9 f8		lda #$f8	                lda #$F8
.abfa	80 74		bra $ac70	                bra asm_common
.abfc					z_asm_sed:
.abfc					xt_asm_sei:
.abfc	a9 78		lda #$78	                lda #$78
.abfe	80 70		bra $ac70	                bra asm_common
.ac00					z_asm_sei:
.ac00					xt_asm_sta:
.ac00	a9 8d		lda #$8d	                lda #$8D
.ac02	80 6c		bra $ac70	                bra asm_common
.ac04					z_asm_sta:
.ac04					xt_asm_sta_x:
.ac04	a9 9d		lda #$9d	                lda #$9D
.ac06	80 68		bra $ac70	                bra asm_common
.ac08					z_asm_sta_x:
.ac08					xt_asm_sta_y:
.ac08	a9 99		lda #$99	                lda #$99
.ac0a	80 64		bra $ac70	                bra asm_common
.ac0c					z_asm_sta_y:
.ac0c					xt_asm_sta_z:
.ac0c	a9 85		lda #$85	                lda #$85
.ac0e	80 60		bra $ac70	                bra asm_common
.ac10					z_asm_sta_z:
.ac10					xt_asm_sta_zi:
.ac10	a9 92		lda #$92	                lda #$92
.ac12	80 5c		bra $ac70	                bra asm_common
.ac14					z_asm_sta_zi:
.ac14					xt_asm_sta_ziy:
.ac14	a9 91		lda #$91	                lda #$91
.ac16	80 58		bra $ac70	                bra asm_common
.ac18					z_asm_sta_ziy:
.ac18					xt_asm_sta_zx:
.ac18	a9 95		lda #$95	                lda #$95
.ac1a	80 54		bra $ac70	                bra asm_common
.ac1c					z_asm_sta_zx:
.ac1c					xt_asm_sta_zxi:
.ac1c	a9 81		lda #$81	                lda #$81
.ac1e	80 50		bra $ac70	                bra asm_common
.ac20					z_asm_sta_zxi:
.ac20					xt_asm_stx:
.ac20	a9 8e		lda #$8e	                lda #$8E
.ac22	80 4c		bra $ac70	                bra asm_common
.ac24					z_asm_stx:
.ac24					xt_asm_stx_z:
.ac24	a9 86		lda #$86	                lda #$86
.ac26	80 48		bra $ac70	                bra asm_common
.ac28					z_asm_stx_z:
.ac28					xt_asm_stx_zy:
.ac28	a9 96		lda #$96	                lda #$96
.ac2a	80 44		bra $ac70	                bra asm_common
.ac2c					z_asm_stx_zy:
.ac2c					xt_asm_sty:
.ac2c	a9 8c		lda #$8c	                lda #$8C
.ac2e	80 40		bra $ac70	                bra asm_common
.ac30					z_asm_sty:
.ac30					xt_asm_sty_z:
.ac30	a9 84		lda #$84	                lda #$84
.ac32	80 3c		bra $ac70	                bra asm_common
.ac34					z_asm_sty_z:
.ac34					xt_asm_sty_zx:
.ac34	a9 94		lda #$94	                lda #$94
.ac36	80 38		bra $ac70	                bra asm_common
.ac38					z_asm_sty_zx:
.ac38					xt_asm_stz:
.ac38	a9 9c		lda #$9c	                lda #$9C
.ac3a	80 34		bra $ac70	                bra asm_common
.ac3c					z_asm_stz:
.ac3c					xt_asm_stz_x:
.ac3c	a9 9e		lda #$9e	                lda #$9E
.ac3e	80 30		bra $ac70	                bra asm_common
.ac40					z_asm_stz_x:
.ac40					xt_asm_stz_z:
.ac40	a9 64		lda #$64	                lda #$64
.ac42	80 2c		bra $ac70	                bra asm_common
.ac44					z_asm_stz_z:
.ac44					xt_asm_stz_zx:
.ac44	a9 74		lda #$74	                lda #$74
.ac46	80 28		bra $ac70	                bra asm_common
.ac48					z_asm_stz_zx:
.ac48					xt_asm_tax:
.ac48	a9 aa		lda #$aa	                lda #$AA
.ac4a	80 24		bra $ac70	                bra asm_common
.ac4c					z_asm_tax:
.ac4c					xt_asm_tay:
.ac4c	a9 a8		lda #$a8	                lda #$A8
.ac4e	80 20		bra $ac70	                bra asm_common
.ac50					z_asm_tay:
.ac50					xt_asm_trb:
.ac50	a9 1c		lda #$1c	                lda #$1C
.ac52	80 1c		bra $ac70	                bra asm_common
.ac54					z_asm_trb:
.ac54					xt_asm_trb_z:
.ac54	a9 14		lda #$14	                lda #$14
.ac56	80 18		bra $ac70	                bra asm_common
.ac58					z_asm_trb_z:
.ac58					xt_asm_tsb:
.ac58	a9 0c		lda #$0c	                lda #$0C
.ac5a	80 14		bra $ac70	                bra asm_common
.ac5c					z_asm_tsb:
.ac5c					xt_asm_tsb_z:
.ac5c	a9 04		lda #$04	                lda #$04
.ac5e	80 10		bra $ac70	                bra asm_common
.ac60					z_asm_tsb_z:
.ac60					xt_asm_tsx:
.ac60	a9 ba		lda #$ba	                lda #$BA
.ac62	80 0c		bra $ac70	                bra asm_common
.ac64					z_asm_tsx:
.ac64					xt_asm_txa:
.ac64	a9 8a		lda #$8a	                lda #$8A
.ac66	80 08		bra $ac70	                bra asm_common
.ac68					z_asm_txa:
.ac68					xt_asm_txs:
.ac68	a9 9a		lda #$9a	                lda #$9A
.ac6a	80 04		bra $ac70	                bra asm_common
.ac6c					z_asm_txs:
.ac6c					xt_asm_tya:
.ac6c	a9 98		lda #$98	                lda #$98
.ac6e	80 00		bra $ac70	                bra asm_common
.ac70					z_asm_tya:
.ac70					asm_common:
.ac70	a8		tay		                tay
.ac71	20 de d6	jsr $d6de	                jsr cmpl_a
.ac74	a9 f5		lda #$f5	                lda #<oc_index_table
.ac76	85 26		sta $26		                sta tmp2
.ac78	a9 ae		lda #$ae	                lda #>oc_index_table
.ac7a	85 27		sta $27		                sta tmp2+1
.ac7c	98		tya		                tya             ; retrieve opcode
.ac7d	0a		asl a		                asl             ; times two for offset
.ac7e	90 02		bcc $ac82	                bcc +
.ac80	e6 27		inc $27		                inc tmp2+1
.ac82					+
.ac82	a8		tay		                tay             ; use Y as the index
.ac83	b1 26		lda ($26),y	                lda (tmp2),y    ; LSB
.ac85	85 28		sta $28		                sta tmp3
.ac87	c8		iny		                iny
.ac88	b1 26		lda ($26),y	                lda (tmp2),y    ; MSB
.ac8a	85 29		sta $29		                sta tmp3+1
.ac8c	b2 28		lda ($28)	                lda (tmp3)      ; get "lengths byte"
.ac8e	2a		rol a		                rol
.ac8f	2a		rol a		                rol
.ac90	2a		rol a		                rol             ; Three times because we go through Carry
.ac91	29 03		and #$03	                and #%00000011
.ac93	a8		tay		                tay
.ac94	88		dey		                dey
.ac95	f0 12		beq $aca9	                beq _done
.ac97	20 38 d8	jsr $d838	                jsr underflow_1
.ac9a	b5 00		lda $00,x	                lda 0,x
.ac9c	20 de d6	jsr $d6de	                jsr cmpl_a      ; does not use Y
.ac9f	88		dey		                dey
.aca0	f0 05		beq $aca7	                beq _done_drop
.aca2	b5 01		lda $01,x	                lda 1,x
.aca4	20 de d6	jsr $d6de	                jsr cmpl_a      ; Fall through to _done_drop
.aca7					_done_drop:
.aca7	e8		inx		                inx
.aca8	e8		inx		                inx             ; Fall through to _done
.aca9					_done:
.aca9	60		rts		                rts             ; Returns to original caller
.acaa					xt_asm_push_a:
.acaa	a0 00		ldy #$00	                ldy #0
.acac					_loop:
.acac	b9 ba ac	lda $acba,y	                lda asm_push_a_data,y
.acaf	c9 ff		cmp #$ff	                cmp #$FF
.acb1	f0 06		beq $acb9	                beq _done
.acb3	20 de d6	jsr $d6de	                jsr cmpl_a      ; does not change Y
.acb6	c8		iny		                iny
.acb7	80 f3		bra $acac	                bra _loop
.acb9					_done:
.acb9					z_asm_push_a:
.acb9	60		rts		                rts
.acba					asm_push_a_data:
>acba	ca ca 95 00 74 01		        .byte $CA, $CA, $95, 00, $74, $01
>acc0	ff				        .byte $FF               ; terminator
.acc1					xt_asm_back_jump:
.acc1					z_asm_back_jump:
.acc1	60		rts		                rts
.acc2					xt_asm_back_branch:
.acc2	20 7e 91	jsr $917e	                jsr xt_here             ; ( addr-l addr-h )
.acc5	20 73 95	jsr $9573	                jsr xt_minus            ; ( offset )
.acc8	3a		dec a		                dea
.acc9	3a		dec a		                dea
.acca					z_asm_back_branch:
.acca	60		rts		                rts
.accb					assembler_end:

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../disassembler.asm

.accb					disassembler:
.accb	20 6f 89	jsr $896f	                jsr xt_cr       ; ( addr u )
.acce					_byte_loop:
.acce	20 b6 98	jsr $98b6	                jsr xt_over     ; ( addr u addr )
.acd1	20 22 a5	jsr $a522	                jsr xt_u_dot    ; ( addr u )
.acd4	20 12 a1	jsr $a112	                jsr xt_space
.acd7	a9 f5		lda #$f5	                lda #<oc_index_table
.acd9	85 26		sta $26		                sta tmp2
.acdb	a9 ae		lda #$ae	                lda #>oc_index_table
.acdd	85 27		sta $27		                sta tmp2+1
.acdf	a1 02		lda ($02,x)	                lda (2,x)       ; get opcode that addr points to
.ace1	85 36		sta $36		                sta scratch     ; Save opcode
.ace3	0a		asl a		                asl             ; multiply by two for offset
.ace4	90 02		bcc $ace8	                bcc +
.ace6	e6 27		inc $27		                inc tmp2+1      ; we're on second page
.ace8					+
.ace8	a8		tay		                tay             ; use Y as the index
.ace9	b1 26		lda ($26),y	                lda (tmp2),y    ; LSB
.aceb	85 28		sta $28		                sta tmp3
.aced	48		pha		                pha
.acee	c8		iny		                iny
.acef	b1 26		lda ($26),y	                lda (tmp2),y    ; MSB
.acf1	85 29		sta $29		                sta tmp3+1
.acf3	48		pha		                pha
.acf4	b2 28		lda ($28)	                lda (tmp3)
.acf6	a8		tay		                tay                     ; save copy of lengths byte
.acf7	10 3c		bpl $ad35	                bpl _no_operand         ; bit 7 clear, single-byte instruction
.acf9	20 9c a7	jsr $a79c	                jsr xt_zero             ; ( addr u 0 ) ZERO does not use Y
.acfc	f6 04		inc $04,x	                inc 4,x
.acfe	d0 02		bne $ad02	                bne +
.ad00	f6 05		inc $05,x	                inc 5,x                 ; ( addr+1 u 0 )
.ad02					+
.ad02	b5 02		lda $02,x	                lda 2,x
.ad04	d0 02		bne $ad08	                bne +
.ad06	d6 03		dec $03,x	                dec 3,x
.ad08					+
.ad08	d6 02		dec $02,x	                dec 2,x                 ; ( addr+1 u-1 0 )
.ad0a	a1 04		lda ($04,x)	                lda (4,x)
.ad0c	95 00		sta $00,x	                sta 0,x                 ; LSB of operand ( addr+1 u-1 LSB )
.ad0e	85 37		sta $37		                sta scratch+1           ; Save a copy in the scratch buffer
.ad10	98		tya		                tya                     ; retrieve copy of lengths byte
.ad11	2a		rol a		                rol                     ; shift bit 6 to bit 7
.ad12	10 14		bpl $ad28	                bpl _print_operand
.ad14	f6 04		inc $04,x	                inc 4,x
.ad16	d0 02		bne $ad1a	                bne +
.ad18	f6 05		inc $05,x	                inc 5,x                 ; ( addr+2 u-1 LSB )
.ad1a					+
.ad1a	b5 02		lda $02,x	                lda 2,x
.ad1c	d0 02		bne $ad20	                bne +
.ad1e	d6 03		dec $03,x	                dec 3,x
.ad20					+
.ad20	d6 02		dec $02,x	                dec 2,x                 ; ( addr+2 u-2 LSB )
.ad22	a1 04		lda ($04,x)	                lda (4,x)
.ad24	95 01		sta $01,x	                sta 1,x                 ; MSB of operand ( addr+2 u-2 opr )
.ad26	85 38		sta $38		                sta scratch+2           ; Save a copy in the scratch buffer
.ad28					_print_operand:
.ad28	ca		dex		                dex
.ad29	ca		dex		                dex
.ad2a	a9 05		lda #$05	                lda #5
.ad2c	95 00		sta $00,x	                sta 0,x
.ad2e	74 01		stz $01,x	                stz 1,x                 ; ( addr+n u-n opr 5 )
.ad30	20 2e a5	jsr $a52e	                jsr xt_u_dot_r          ; U.R ( addr+n u-n )
.ad33	80 0b		bra $ad40	                bra _print_mnemonic
.ad35					_no_operand:
.ad35	ca		dex		                dex
.ad36	ca		dex		                dex
.ad37	a9 05		lda #$05	                lda #5
.ad39	95 00		sta $00,x	                sta 0,x
.ad3b	74 01		stz $01,x	                stz 1,x                 ; ( addr u 5 )
.ad3d	20 18 a1	jsr $a118	                jsr xt_spaces           ; ( addr u )
.ad40					_print_mnemonic:
.ad40	20 12 a1	jsr $a112	                jsr xt_space
.ad43	ca		dex		                dex
.ad44	ca		dex		                dex                     ; ( addr u ? )
.ad45	68		pla		                pla                     ; MSB
.ad46	95 01		sta $01,x	                sta 1,x                 ; ( addr u MSB )
.ad48	68		pla		                pla                     ; LSB
.ad49	95 00		sta $00,x	                sta 0,x                 ; ( addr u addr-o )
.ad4b	20 5b 89	jsr $895b	                jsr xt_count            ; ( addr u addr-o u-o )
.ad4e	74 01		stz $01,x	                stz 1,x                 ; paranoid
.ad50	b5 00		lda $00,x	                lda 0,x
.ad52	29 07		and #$07	                and #%00000111          ; ( addr u addr-o u-o )
.ad54	95 00		sta $00,x	                sta 0,x
.ad56	20 f7 a4	jsr $a4f7	                jsr xt_type             ; ( addr u )
.ad59	a5 36		lda $36		                lda scratch
.ad5b	c9 20		cmp #$20	                cmp #$20
.ad5d	d0 52		bne $adb1	                bne _not_jsr
.ad5f	ca		dex		                dex
.ad60	ca		dex		                dex
.ad61	a9 05		lda #$05	                lda #5
.ad63	95 00		sta $00,x	                sta 0,x
.ad65	74 01		stz $01,x	                stz 1,x
.ad67	20 18 a1	jsr $a118	                jsr xt_spaces
.ad6a	a0 00		ldy #$00	                ldy #0
.ad6c	b9 9d ad	lda $ad9d,y	_check_handler: lda _special_handlers,y
.ad6f	c5 37		cmp $37		                cmp scratch+1
.ad71	d0 0d		bne $ad80	                bne _next_handler
.ad73	b9 9e ad	lda $ad9e,y	                lda _special_handlers+1,y
.ad76	c5 38		cmp $38		                cmp scratch+2
.ad78	d0 06		bne $ad80	                bne _next_handler
.ad7a	20 8a ad	jsr $ad8a	                jsr _run_handler
.ad7d	4c de ad	jmp $adde	                jmp _printing_done
.ad80	c0 10		cpy #$10	_next_handler:  cpy #(_end_handlers-_special_handlers-4)
.ad82	f0 13		beq $ad97	                beq _not_special
.ad84	c8		iny		                iny
.ad85	c8		iny		                iny
.ad86	c8		iny		                iny
.ad87	c8		iny		                iny
.ad88	80 e2		bra $ad6c	                bra _check_handler
.ad8a					_run_handler:
.ad8a	b9 9f ad	lda $ad9f,y	                lda _special_handlers+2,y
.ad8d	85 39		sta $39		                sta scratch+3
.ad8f	b9 a0 ad	lda $ada0,y	                lda _special_handlers+3,y
.ad92	85 3a		sta $3a		                sta scratch+4
.ad94	6c 39 00	jmp ($0039)	                jmp (scratch+3)
.ad97					_not_special:
.ad97	20 a5 ae	jsr $aea5	                jsr disasm_jsr
.ad9a	4c de ad	jmp $adde	                jmp _printing_done
.ad9d					_special_handlers:
>ad9d	a4 93 67 ae			    .word literal_runtime,      disasm_literal
>ada1	c3 93 85 ae			    .word byte_runtime,         disasm_byte_literal
>ada5	9d a0 24 ae			    .word sliteral_runtime,     disasm_sliteral
>ada9	20 92 5b ae			    .word zero_branch_runtime,  disasm_0branch
>adad	e7 8d 60 ae			    .word branch_runtime,       disasm_branch
.adb1					_end_handlers:
.adb1					_not_jsr:
.adb1	c9 4c		cmp #$4c	                cmp #$4C
.adb3	d0 29		bne $adde	                bne _printing_done
.adb5	a5 37		lda $37		                lda scratch+1   ; Copy the pointer.
.adb7	85 39		sta $39		                sta scratch+3
.adb9	a5 38		lda $38		                lda scratch+2
.adbb	85 3a		sta $3a		                sta scratch+4
.adbd	b2 39		lda ($39)	                lda (scratch+3)
.adbf	c9 20		cmp #$20	                cmp #$20 ; check for JSR
.adc1	d0 1b		bne $adde	                bne _printing_done
.adc3	e6 39		inc $39		                inc scratch+3
.adc5	d0 02		bne $adc9	                bne +
.adc7	e6 3a		inc $3a		                inc scratch+4
.adc9					+
.adc9	b2 39		lda ($39)	                lda (scratch+3)
.adcb	c9 9d		cmp #$9d	                cmp #<sliteral_runtime
.adcd	d0 0f		bne $adde	                bne _printing_done
.adcf	e6 39		inc $39		                inc scratch+3
.add1	d0 02		bne $add5	                bne +
.add3	e6 3a		inc $3a		                inc scratch+4
.add5					+
.add5	b2 39		lda ($39)	                lda (scratch+3)
.add7	c9 a0		cmp #$a0	                cmp #>sliteral_runtime
.add9	d0 03		bne $adde	                bne _printing_done
.addb	20 fa ad	jsr $adfa	                jsr disasm_sliteral_jump
.adde					_printing_done:
.adde	20 6f 89	jsr $896f	                jsr xt_cr
.ade1	f6 02		inc $02,x	                inc 2,x
.ade3	d0 02		bne $ade7	                bne +
.ade5	f6 03		inc $03,x	                inc 3,x                 ; ( addr+1 u )
.ade7					+
.ade7	20 34 98	jsr $9834	                jsr xt_one_minus        ; ( addr+1 u-1 )
.adea	b5 00		lda $00,x	                lda 0,x                 ; All done?
.adec	15 01		ora $01,x	                ora 1,x
.adee	f0 07		beq $adf7	                beq _done
.adf0	b5 01		lda $01,x	                lda 1,x                 ; Catch mid-instruction ranges
.adf2	30 03		bmi $adf7	                bmi _done
.adf4	4c ce ac	jmp $acce	                jmp _byte_loop          ; out of range for BRA
.adf7					_done:
.adf7	4c a4 a3	jmp $a3a4	                jmp xt_two_drop         ; JSR/RTS
.adfa					disasm_sliteral_jump:
.adfa	20 a2 a1	jsr $a1a2	                jsr xt_swap
.adfd	ca		dex		                dex
.adfe	ca		dex		                dex
.adff	a5 37		lda $37		                lda scratch+1
.ae01	95 00		sta $00,x	                sta 0,x
.ae03	a5 38		lda $38		                lda scratch+2
.ae05	95 01		sta $01,x	                sta 1,x
.ae07	20 a2 a1	jsr $a1a2	                jsr xt_swap
.ae0a	20 73 95	jsr $9573	                jsr xt_minus
.ae0d	20 34 98	jsr $9834	                jsr xt_one_minus
.ae10	20 73 95	jsr $9573	                jsr xt_minus
.ae13	ca		dex		                dex
.ae14	ca		dex		                dex
.ae15	a5 37		lda $37		                lda scratch+1
.ae17	95 00		sta $00,x	                sta 0,x
.ae19	a5 38		lda $38		                lda scratch+2
.ae1b	95 01		sta $01,x	                sta 1,x
.ae1d	20 34 98	jsr $9834	                jsr xt_one_minus
.ae20	20 a2 a1	jsr $a1a2	                jsr xt_swap ; ( new_addr new_n )
.ae23	60		rts		                rts
.ae24					disasm_sliteral:
.ae24	a9 53		lda #$53	                lda #'S'
.ae26	20 02 8e	jsr $8e02	                jsr emit_a ; Print S before LITERAL so it becomes SLITERAL
.ae29	a9 0c		lda #$0c	                lda #str_disasm_lit     ; "LITERAL "
.ae2b	20 74 d8	jsr $d874	                jsr print_string_no_lf
.ae2e	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; switch to (u addr)
.ae31	20 40 98	jsr $9840	                jsr xt_one_plus
.ae34	20 bb 8d	jsr $8dbb	                jsr xt_dup
.ae37	20 8c 8f	jsr $8f8c	                jsr xt_fetch
.ae3a	20 22 a5	jsr $a522	                jsr xt_u_dot            ; Print the address of the string
.ae3d	20 9b a3	jsr $a39b	                jsr xt_two
.ae40	20 06 9a	jsr $9a06	                jsr xt_plus
.ae43	20 bb 8d	jsr $8dbb	                jsr xt_dup
.ae46	20 85 9a	jsr $9a85	                jsr xt_question         ; Print the length of the string
.ae49	20 40 98	jsr $9840	                jsr xt_one_plus
.ae4c	20 a2 a1	jsr $a1a2	                jsr xt_swap            ; ( addr+4 u )
.ae4f	ca		dex		                dex
.ae50	ca		dex		                dex
.ae51	a9 04		lda #$04	                lda #4
.ae53	95 00		sta $00,x	                sta 0,x
.ae55	74 01		stz $01,x	                stz 1,x
.ae57	20 73 95	jsr $9573	                jsr xt_minus            ; ( addr+4 u-4 )
.ae5a	60		rts		                rts
.ae5b					disasm_0branch:
.ae5b	a9 30		lda #$30	                lda #'0'
.ae5d	20 02 8e	jsr $8e02	                jsr emit_a ; Print 0 before BRANCH so it becomes 0BRANCH
.ae60					disasm_branch:
.ae60	a9 0e		lda #$0e	                lda #str_disasm_bra
.ae62	20 74 d8	jsr $d874	                jsr print_string_no_lf ; "BRANCH "
.ae65	80 05		bra $ae6c	                bra disasm_print_literal
.ae67					disasm_literal:
.ae67	a9 0c		lda #$0c	                lda #str_disasm_lit
.ae69	20 74 d8	jsr $d874	                jsr print_string_no_lf ; "LITERAL "
.ae6c					disasm_print_literal:
.ae6c	20 a2 a1	jsr $a1a2	                jsr xt_swap ; switch to (u addr)
.ae6f	20 40 98	jsr $9840	                jsr xt_one_plus
.ae72	20 bb 8d	jsr $8dbb	                jsr xt_dup
.ae75	20 85 9a	jsr $9a85	                jsr xt_question ; Print the value at the address
.ae78	20 40 98	jsr $9840	                jsr xt_one_plus
.ae7b	20 a2 a1	jsr $a1a2	                jsr xt_swap ; (addr+2 u)
.ae7e	20 34 98	jsr $9834	                jsr xt_one_minus
.ae81	20 34 98	jsr $9834	                jsr xt_one_minus ; (addr+2 u-2)
.ae84	60		rts		                rts
.ae85					disasm_byte_literal:
.ae85	a9 42		lda #$42	                lda #'B'
.ae87	20 02 8e	jsr $8e02	                jsr emit_a ; Add leading B
.ae8a	a9 0c		lda #$0c	                lda #str_disasm_lit
.ae8c	20 74 d8	jsr $d874	                jsr print_string_no_lf ; "LITERAL "
.ae8f	20 a2 a1	jsr $a1a2	                jsr xt_swap ; switch to (u addr)
.ae92	20 40 98	jsr $9840	                jsr xt_one_plus
.ae95	20 bb 8d	jsr $8dbb	                jsr xt_dup
.ae98	20 17 86	jsr $8617	                jsr xt_c_fetch  ; Print byte at the address
.ae9b	20 42 8c	jsr $8c42	                jsr xt_dot
.ae9e	20 a2 a1	jsr $a1a2	                jsr xt_swap ; (addr+1 u)
.aea1	20 34 98	jsr $9834	                jsr xt_one_minus ; (addr+1 u-1)
.aea4	60		rts		                rts
.aea5					disasm_jsr:
.aea5	ca		dex		                dex
.aea6	ca		dex		                dex
.aea7	a5 37		lda $37		                lda scratch+1
.aea9	95 00		sta $00,x	                sta 0,x
.aeab	a5 38		lda $38		                lda scratch+2
.aead	95 01		sta $01,x	                sta 1,x
.aeaf	20 84 92	jsr $9284	                jsr xt_int_to_name
.aeb2	b5 00		lda $00,x	                lda 0,x
.aeb4	15 01		ora $01,x	                ora 1,x
.aeb6	f0 07		beq $aebf	                beq _disasm_no_nt
.aeb8	20 21 96	jsr $9621	                jsr xt_name_to_string
.aebb	20 f7 a4	jsr $a4f7	                jsr xt_type
.aebe	60		rts		                rts
.aebf					_disasm_no_nt:
.aebf	20 3a 8d	jsr $8d3a	                jsr xt_drop ; the 0 indicating no name token
.aec2	ca		dex		                dex
.aec3	ca		dex		                dex
.aec4	a5 37		lda $37		                lda scratch+1
.aec6	95 00		sta $00,x	                sta 0,x
.aec8	a5 38		lda $38		                lda scratch+2
.aeca	95 01		sta $01,x	                sta 1,x
.aecc	ca		dex		                dex
.aecd	ca		dex		                dex
.aece	a9 38		lda #$38	                lda #<underflow_1
.aed0	95 00		sta $00,x	                sta 0,x
.aed2	a9 d8		lda #$d8	                lda #>underflow_1
.aed4	95 01		sta $01,x	                sta 1,x
.aed6	20 52 d7	jsr $d752	                jsr compare_16bit
.aed9	f0 02		beq $aedd	                beq _disasm_jsr_uflow_check_upper
.aedb	b0 14		bcs $aef1	                bcs _disasm_jsr_unknown
.aedd					_disasm_jsr_uflow_check_upper:
.aedd	a9 47		lda #$47	                lda #<underflow_4
.aedf	95 00		sta $00,x	                sta 0,x
.aee1	a9 d8		lda #$d8	                lda #>underflow_4
.aee3	95 01		sta $01,x	                sta 1,x
.aee5	20 52 d7	jsr $d752	                jsr compare_16bit
.aee8	f0 02		beq $aeec	                beq _disasm_jsr_soc
.aeea	90 05		bcc $aef1	                bcc _disasm_jsr_unknown
.aeec					_disasm_jsr_soc:
.aeec	a9 0d		lda #$0d	                lda #str_disasm_sdc
.aeee	20 74 d8	jsr $d874	                jsr print_string_no_lf  ; "STACK DEPTH CHECK"
.aef1					_disasm_jsr_unknown:
.aef1	20 a4 a3	jsr $a3a4	                jsr xt_two_drop
.aef4	60		rts		                rts
.aef5					oc_index_table:
>aef5	f5 b0 f9 b0 8d b5 8d b5		        .word oc00, oc01, oc__, oc__, oc04, oc05, oc06, oc__
>aefd	01 b1 07 b1 0d b1 8d b5
>af05	13 b1 17 b1 1d b1 8d b5		        .word oc08, oc09, oc0a, oc__, oc0c, oc0d, oc0e, oc0f
>af0d	23 b1 27 b1 2b b1 2f b1
>af15	34 b1 38 b1 40 b1 8d b5		        .word oc10, oc11, oc12, oc__, oc14, oc15, oc16, oc17
>af1d	47 b1 4d b1 54 b1 5b b1
>af25	62 b1 66 b1 6c b1 8d b5		        .word oc18, oc19, oc1a, oc__, oc1c, oc1d, oc__, oc1f
>af2d	72 b1 76 b1 8d b5 7c b1
>af35	82 b1 86 b1 8d b5 8d b5		        .word oc20, oc21, oc__, oc__, oc24, oc25, oc26, oc27
>af3d	8e b1 94 b1 9a b1 a0 b1
>af45	a7 b1 ab b1 b1 b1 8d b5		        .word oc28, oc29, oc2a, oc__, oc2c, oc2d, oc2e, oc2f
>af4d	b7 b1 bb b1 c0 b1 c4 b1
>af55	c9 b1 cd b1 d5 b1 8d b5		        .word oc30, oc31, oc32, oc__, oc34, oc35, oc36, oc37
>af5d	dc b1 e4 b1 eb b1 f2 b1
>af65	f9 b1 fd b1 03 b2 8d b5		        .word oc38, oc39, oc3a, oc__, oc3c, oc3d, oc3e, oc0f
>af6d	09 b2 0f b2 15 b2 2f b1
>af75	20 b2 24 b2 8d b5 8d b5		        .word oc40, oc41, oc__, oc__, oc__, oc45, oc46, oc47
>af7d	8d b5 2c b2 32 b2 38 b2
>af85	3f b2 43 b2 49 b2 8d b5		        .word oc48, oc49, oc4a, oc__, oc4c, oc4d, oc4e, oc4f
>af8d	4f b2 53 b2 57 b2 5b b2
>af95	60 b2 64 b2 6c b2 8d b5		        .word oc50, oc51, oc52, oc__, oc__, oc55, oc56, oc57
>af9d	8d b5 73 b2 7a b2 81 b2
>afa5	88 b2 8c b2 92 b2 8d b5		        .word oc58, oc59, oc5a, oc__, oc__, oc__, oc5e, oc5f
>afad	8d b5 8d b5 9c b2 a2 b2
>afb5	a7 b2 ab b2 8d b5 8d b5		        .word oc60, oc61, oc__, oc__, oc64, oc65, oc66, oc67
>afbd	b3 b2 b9 b2 bf b2 c5 b2
>afc5	cc b2 d0 b2 d6 b2 8d b5		        .word oc68, oc69, oc6a, oc__, oc6c, oc6d, oc6e, oc6f
>afcd	dc b2 e2 b2 e6 b2 ea b2
>afd5	ef b2 f3 b2 fb b2 8d b5		        .word oc70, oc71, oc72, oc__, oc74, oc75, oc76, oc77
>afdd	02 b3 09 b3 10 b3 17 b3
>afe5	1e b3 22 b3 28 b3 8d b5		        .word oc78, oc79, oc7a, oc__, oc7c, oc7d, oc7e, oc7f
>afed	2c b3 33 b3 39 b3 3f b3
>aff5	44 b3 48 b3 8d b5 8d b5		        .word oc80, oc81, oc__, oc__, oc84, oc85, oc86, oc__
>affd	50 b3 56 b3 5c b3 8d b5
>b005	62 b3 66 b3 6c b3 8d b5		        .word oc88, oc89, oc8a, oc__, oc8c, oc8d, oc8e, oc8f
>b00d	70 b3 74 b3 78 b3 7c b3
>b015	81 b3 85 b3 8d b3 8d b5		        .word oc90, oc91, oc92, oc__, oc94, oc95, oc96, oc97
>b01d	94 b3 9b b3 a2 b3 a9 b3
>b025	b0 b3 b4 b3 ba b3 8d b5		        .word oc98, oc99, oc9a, oc__, oc9c, oc9d, oc9e, oc9f
>b02d	be b3 c2 b3 c8 b3 ce b3
>b035	d3 b3 d9 b3 e1 b3 8d b5		        .word oca0, oca1, oca2, oc__, oca4, oca5, oca6, oca7
>b03d	e7 b3 ed b3 f3 b3 f9 b3
>b045	00 b4 04 b4 0a b4 8d b5		        .word oca8, oca9, ocaa, oc__, ocac, ocad, ocae, ocaf
>b04d	0e b4 12 b4 16 b4 1a b4
>b055	1f b4 23 b4 2b b4 8d b5		        .word ocb0, ocb1, ocb2, oc__, ocb4, ocb5, ocb6, ocb7
>b05d	32 b4 39 b4 40 b4 47 b4
>b065	4e b4 52 b4 58 b4 8d b5		        .word ocb8, ocb9, ocba, oc__, ocbc, ocbd, ocbe, ocbf
>b06d	5c b4 62 b4 68 b4 6e b4
>b075	73 b4 79 b4 8d b5 8d b5		        .word occ0, occ1, oc__, oc__, occ4, occ5, occ6, occ7
>b07d	81 b4 87 b4 8d b4 93 b4
>b085	9a b4 9e b4 a4 b4 8d b5		        .word occ8, occ9, occa, oc__, occc, occd, occe, occf
>b08d	a8 b4 ac b4 b0 b4 b4 b4
>b095	b9 b4 bd b4 c5 b4 8d b5		        .word ocd0, ocd1, ocd2, oc__, oc__, ocd5, ocd6, ocd7
>b09d	8d b5 cc b4 d3 b4 da b4
>b0a5	e1 b4 e5 b4 eb b4 8d b5		        .word ocd8, ocd9, ocda, oc__, oc__, ocdd, ocde, ocdf
>b0ad	8d b5 ef b4 f5 b4 fb b4
>b0b5	00 b5 06 b5 8d b5 8d b5		        .word oce0, oce1, oc__, oc__, oce4, oce5, oce6, oce7
>b0bd	0e b5 14 b5 1a b5 20 b5
>b0c5	27 b5 2b b5 31 b5 8d b5		        .word oce8, oce9, ocea, oc__, ocec, oced, ocee, ocef
>b0cd	35 b5 39 b5 3d b5 41 b5
>b0d5	46 b5 4a b5 52 b5 8d b5		        .word ocf0, ocf1, ocf2, oc__, oc__, ocf5, ocf6, ocf7
>b0dd	8d b5 59 b5 60 b5 67 b5
>b0e5	6e b5 72 b5 78 b5 8d b5		        .word ocf8, ocf9, ocfa, oc__, oc__, ocfd, ocfe, ocff
>b0ed	8d b5 7c b5 82 b5 88 b5
.b0f5					oc_table:
>b0f5	83 62 72 6b				oc00:	.text 2*64+3, "brk"              ; enforce the signature byte
>b0f9	87 6f 72 61 2e 7a 78 69			oc01:	.text 2*64+7, "ora.zxi"
>b101	85 74 73 62 2e 7a		        oc04:   .text 2*64+5, "tsb.z"
>b107	85 6f 72 61 2e 7a			oc05:	.text 2*64+5, "ora.z"
>b10d	85 61 73 6c 2e 7a			oc06:	.text 2*64+5, "asl.z"
>b113	43 70 68 70				oc08:	.text 1*64+3, "php"
>b117	85 6f 72 61 2e 23			oc09:	.text 2*64+5, "ora.#"
>b11d	45 61 73 6c 2e 61			oc0a:	.text 1*64+5, "asl.a"
>b123	c3 74 73 62				oc0c:	.text 3*64+3, "tsb"
>b127	c3 6f 72 61				oc0d:	.text 3*64+3, "ora"
>b12b	c3 61 73 6c				oc0e:	.text 3*64+3, "asl"
>b12f	c4 62 62 72 30				oc0f:	.text 3*64+4, "bbr0"
>b134	83 62 70 6c				oc10:	.text 2*64+3, "bpl"
>b138	87 6f 72 61 2e 7a 69 79			oc11:	.text 2*64+7, "ora.ziy"
>b140	86 6f 72 61 2e 7a 69			oc12:	.text 2*64+6, "ora.zi"
>b147	85 74 72 62 2e 7a			oc14:	.text 2*64+5, "trb.z"
>b14d	86 6f 72 61 2e 7a 78			oc15:	.text 2*64+6, "ora.zx"
>b154	86 61 73 6c 2e 7a 78			oc16:	.text 2*64+6, "asl.zx"
>b15b	86 72 6d 62 31 2e 7a			oc17:	.text 2*64+6, "rmb1.z"
>b162	43 63 6c 63				oc18:	.text 1*64+3, "clc"
>b166	c5 6f 72 61 2e 79			oc19:	.text 3*64+5, "ora.y"
>b16c	45 69 6e 63 2e 61			oc1a:	.text 1*64+5, "inc.a"
>b172	c3 74 72 62				oc1c:	.text 3*64+3, "trb"
>b176	c5 6f 72 61 2e 78			oc1d:	.text 3*64+5, "ora.x"
>b17c	c5 61 73 6c 2e 78			oc1f:	.text 3*64+5, "asl.x"
>b182	c3 6a 73 72				oc20:	.text 3*64+3, "jsr"
>b186	87 61 6e 64 2e 7a 78 69			oc21:	.text 2*64+7, "and.zxi"
>b18e	85 62 69 74 2e 7a			oc24:	.text 2*64+5, "bit.z"
>b194	85 61 6e 64 2e 7a			oc25:	.text 2*64+5, "and.z"
>b19a	85 72 6f 6c 2e 7a			oc26:	.text 2*64+5, "rol.z"
>b1a0	86 72 6d 62 32 2e 7a			oc27:	.text 2*64+6, "rmb2.z"
>b1a7	43 70 6c 70				oc28:	.text 1*64+3, "plp"
>b1ab	85 61 6e 64 2e 23			oc29:	.text 2*64+5, "and.#"
>b1b1	45 72 6f 6c 2e 61			oc2a:	.text 1*64+5, "rol.a"
>b1b7	c3 62 69 74				oc2c:	.text 3*64+3, "bit"
>b1bb	c4 61 6e 64 2e				oc2d:	.text 3*64+4, "and."
>b1c0	c3 72 6f 6c				oc2e:	.text 3*64+3, "rol"
>b1c4	c4 62 62 72 32				oc2f:	.text 3*64+4, "bbr2"
>b1c9	83 62 6d 69				oc30:	.text 2*64+3, "bmi"
>b1cd	87 61 6e 64 2e 7a 69 79			oc31:	.text 2*64+7, "and.ziy"
>b1d5	86 61 6e 64 2e 7a 69			oc32:	.text 2*64+6, "and.zi"
>b1dc	87 62 69 74 2e 7a 78 69			oc34:	.text 2*64+7, "bit.zxi"
>b1e4	86 61 6e 64 2e 7a 78			oc35:	.text 2*64+6, "and.zx"
>b1eb	86 72 6f 6c 2e 7a 78			oc36:	.text 2*64+6, "rol.zx"
>b1f2	86 72 6d 62 33 2e 7a			oc37:	.text 2*64+6, "rmb3.z"
>b1f9	43 73 65 63				oc38:	.text 1*64+3, "sec"
>b1fd	c5 61 6e 64 2e 79			oc39:	.text 3*64+5, "and.y"
>b203	45 64 65 63 2e 61			oc3a:	.text 1*64+5, "dec.a"
>b209	c5 62 69 74 2e 78			oc3c:	.text 3*64+5, "bit.x"
>b20f	c5 61 6e 64 2e 78			oc3d:	.text 3*64+5, "and.x"
>b215	c5 72 6f 6c 2e 78			oc3e:	.text 3*64+5, "rol.x"
>b21b	c4 62 62 72 33				oc3f:	.text 3*64+4, "bbr3"
>b220	43 72 74 69				oc40:	.text 1*64+3, "rti"
>b224	87 65 6f 72 2e 7a 78 69			oc41:	.text 2*64+7, "eor.zxi"
>b22c	85 65 6f 72 2e 7a			oc45:	.text 2*64+5, "eor.z"
>b232	85 6c 73 72 2e 7a			oc46:	.text 2*64+5, "lsr.z"
>b238	86 72 62 6d 34 2e 7a			oc47:	.text 2*64+6, "rbm4.z"
>b23f	43 70 68 61				oc48:	.text 1*64+3, "pha"
>b243	85 65 6f 72 2e 23			oc49:	.text 2*64+5, "eor.#"
>b249	45 6c 73 72 2e 61			oc4a:	.text 1*64+5, "lsr.a"
>b24f	c3 6a 6d 70				oc4c:	.text 3*64+3, "jmp"
>b253	c3 65 6f 72				oc4d:	.text 3*64+3, "eor"
>b257	c3 6c 73 72				oc4e:	.text 3*64+3, "lsr"
>b25b	c4 62 62 72 34				oc4f:	.text 3*64+4, "bbr4"
>b260	83 62 76 63				oc50:	.text 2*64+3, "bvc"
>b264	87 65 6f 72 2e 7a 69 79			oc51:	.text 2*64+7, "eor.ziy"
>b26c	86 65 6f 72 2e 7a 69			oc52:	.text 2*64+6, "eor.zi"
>b273	86 65 6f 72 2e 7a 78			oc55:	.text 2*64+6, "eor.zx"
>b27a	86 6c 73 72 2e 7a 78			oc56:	.text 2*64+6, "lsr.zx"
>b281	86 72 62 6d 35 2e 7a			oc57:	.text 2*64+6, "rbm5.z"
>b288	43 63 6c 69				oc58:	.text 1*64+3, "cli"
>b28c	c5 65 6f 72 2e 79			oc59:	.text 3*64+5, "eor.y"
>b292	43 70 68 79				oc5a:	.text 1*64+3, "phy"
>b296	c5 65 6f 72 2e 78			oc5d:	.text 3*64+5, "eor.x"
>b29c	c5 6c 73 72 2e 78			oc5e:	.text 3*64+5, "lsr.x"
>b2a2	c4 62 62 72 35				oc5f:	.text 3*64+4, "bbr5"
>b2a7	43 72 74 73				oc60:	.text 1*64+3, "rts"
>b2ab	87 61 64 63 2e 7a 78 69			oc61:	.text 2*64+7, "adc.zxi"
>b2b3	85 73 74 7a 2e 7a			oc64:	.text 2*64+5, "stz.z"
>b2b9	85 61 64 63 2e 7a			oc65:	.text 2*64+5, "adc.z"
>b2bf	85 72 6f 72 2e 7a			oc66:	.text 2*64+5, "ror.z"
>b2c5	86 72 6d 62 36 2e 7a			oc67:	.text 2*64+6, "rmb6.z"
>b2cc	43 70 6c 61				oc68:	.text 1*64+3, "pla"
>b2d0	85 61 64 63 2e 23			oc69:	.text 2*64+5, "adc.#"
>b2d6	45 72 6f 72 2e 61			oc6a:	.text 1*64+5, "ror.a"
>b2dc	c5 6a 6d 70 2e 69			oc6c:	.text 3*64+5, "jmp.i"
>b2e2	c3 61 64 63				oc6d:	.text 3*64+3, "adc"
>b2e6	c3 72 6f 72				oc6e:	.text 3*64+3, "ror"
>b2ea	c4 62 62 72 36				oc6f:	.text 3*64+4, "bbr6"
>b2ef	83 62 76 73				oc70:	.text 2*64+3, "bvs"
>b2f3	87 61 64 63 2e 7a 69 79			oc71:	.text 2*64+7, "adc.ziy"
>b2fb	86 61 64 63 2e 7a 69			oc72:	.text 2*64+6, "adc.zi"
>b302	86 73 74 7a 2e 7a 78			oc74:	.text 2*64+6, "stz.zx"
>b309	86 61 64 63 2e 7a 78			oc75:	.text 2*64+6, "adc.zx"
>b310	86 72 6f 72 2e 7a 78			oc76:	.text 2*64+6, "ror.zx"
>b317	86 72 6d 62 37 2e 7a			oc77:	.text 2*64+6, "rmb7.z"
>b31e	43 73 65 69				oc78:	.text 1*64+3, "sei"
>b322	c5 61 64 63 2e 79			oc79:	.text 3*64+5, "adc.y"
>b328	43 70 6c 79				oc7a:	.text 1*64+3, "ply"
>b32c	c6 6a 6d 70 2e 78 69			oc7c:	.text 3*64+6, "jmp.xi"
>b333	c5 61 64 63 2e 78			oc7d:	.text 3*64+5, "adc.x"
>b339	c5 72 6f 72 2e 78			oc7e:	.text 3*64+5, "ror.x"
>b33f	c4 62 62 72 37				oc7f:	.text 3*64+4, "bbr7"
>b344	83 62 72 61				oc80:	.text 2*64+3, "bra"
>b348	87 73 74 61 2e 7a 78 69			oc81:	.text 2*64+7, "sta.zxi"
>b350	85 73 74 79 2e 7a			oc84:	.text 2*64+5, "sty.z"
>b356	85 73 74 61 2e 7a			oc85:	.text 2*64+5, "sta.z"
>b35c	85 73 74 78 2e 7a			oc86:	.text 2*64+5, "stx.z"
>b362	43 64 65 79				oc88:	.text 1*64+3, "dey"
>b366	85 62 69 74 2e 23			oc89:	.text 2*64+5, "bit.#"
>b36c	43 74 78 61				oc8a:	.text 1*64+3, "txa"
>b370	c3 73 74 79				oc8c:	.text 3*64+3, "sty"
>b374	c3 73 74 61				oc8d:	.text 3*64+3, "sta"
>b378	c3 73 74 78				oc8e:	.text 3*64+3, "stx"
>b37c	c4 62 62 73 30				oc8f:	.text 3*64+4, "bbs0"
>b381	83 62 63 63				oc90:	.text 2*64+3, "bcc"
>b385	87 73 74 61 2e 7a 69 79			oc91:	.text 2*64+7, "sta.ziy"
>b38d	86 73 74 61 2e 7a 69			oc92:	.text 2*64+6, "sta.zi"
>b394	86 73 74 79 2e 7a 78			oc94:	.text 2*64+6, "sty.zx"
>b39b	86 73 74 61 2e 7a 78			oc95:	.text 2*64+6, "sta.zx"
>b3a2	86 73 74 78 2e 7a 79			oc96:	.text 2*64+6, "stx.zy"
>b3a9	86 73 6d 62 31 2e 7a			oc97:	.text 2*64+6, "smb1.z"
>b3b0	43 74 79 61				oc98:	.text 1*64+3, "tya"
>b3b4	c5 73 74 61 2e 79			oc99:	.text 3*64+5, "sta.y"
>b3ba	43 74 78 73				oc9a:	.text 1*64+3, "txs"
>b3be	c3 73 74 7a				oc9c:	.text 3*64+3, "stz"
>b3c2	c5 73 74 61 2e 78			oc9d:	.text 3*64+5, "sta.x"
>b3c8	c5 73 74 7a 2e 78			oc9e:	.text 3*64+5, "stz.x"
>b3ce	c4 62 62 73 31				oc9f:	.text 3*64+4, "bbs1"
>b3d3	85 6c 64 79 2e 23			oca0:	.text 2*64+5, "ldy.#"
>b3d9	87 6c 64 61 2e 7a 78 69			oca1:	.text 2*64+7, "lda.zxi"
>b3e1	85 6c 64 78 2e 23			oca2:	.text 2*64+5, "ldx.#"
>b3e7	85 6c 64 79 2e 7a			oca4:	.text 2*64+5, "ldy.z"
>b3ed	85 6c 64 61 2e 7a			oca5:	.text 2*64+5, "lda.z"
>b3f3	85 6c 64 78 2e 7a			oca6:	.text 2*64+5, "ldx.z"
>b3f9	86 73 6d 62 32 2e 7a			oca7:	.text 2*64+6, "smb2.z"
>b400	43 74 61 79				oca8:	.text 1*64+3, "tay"
>b404	85 6c 64 61 2e 23			oca9:	.text 2*64+5, "lda.#"
>b40a	43 74 61 78				ocaa:	.text 1*64+3, "tax"
>b40e	c3 6c 64 79				ocac:	.text 3*64+3, "ldy"
>b412	c3 6c 64 61				ocad:	.text 3*64+3, "lda"
>b416	c3 6c 64 78				ocae:	.text 3*64+3, "ldx"
>b41a	c4 62 62 73 32				ocaf:	.text 3*64+4, "bbs2"
>b41f	83 62 63 73				ocb0:	.text 2*64+3, "bcs"
>b423	87 6c 64 61 2e 7a 69 79			ocb1:	.text 2*64+7, "lda.ziy"
>b42b	86 6c 64 61 2e 7a 69			ocb2:	.text 2*64+6, "lda.zi"
>b432	86 6c 64 79 2e 7a 78			ocb4:	.text 2*64+6, "ldy.zx"
>b439	86 6c 64 61 2e 7a 78			ocb5:	.text 2*64+6, "lda.zx"
>b440	86 6c 64 78 2e 7a 79			ocb6:	.text 2*64+6, "ldx.zy"
>b447	86 73 6d 62 33 2e 7a			ocb7:	.text 2*64+6, "smb3.z"
>b44e	43 63 6c 76				ocb8:	.text 1*64+3, "clv"
>b452	c5 6c 64 61 2e 79			ocb9:	.text 3*64+5, "lda.y"
>b458	43 74 73 78				ocba:	.text 1*64+3, "tsx"
>b45c	c5 6c 64 79 2e 78			ocbc:	.text 3*64+5, "ldy.x"
>b462	c5 6c 64 61 2e 78			ocbd:	.text 3*64+5, "lda.x"
>b468	c5 6c 64 78 2e 79			ocbe:	.text 3*64+5, "ldx.y"
>b46e	c4 62 62 73 34				ocbf:	.text 3*64+4, "bbs4"
>b473	85 63 70 79 2e 23			occ0:	.text 2*64+5, "cpy.#"
>b479	87 63 6d 70 2e 7a 78 69			occ1:	.text 2*64+7, "cmp.zxi"
>b481	85 63 70 79 2e 7a			occ4:	.text 2*64+5, "cpy.z"
>b487	85 63 6d 70 2e 7a			occ5:	.text 2*64+5, "cmp.z"
>b48d	85 64 65 63 2e 7a			occ6:	.text 2*64+5, "dec.z"
>b493	86 73 6d 62 34 2e 7a			occ7:	.text 2*64+6, "smb4.z"
>b49a	43 69 6e 79				occ8:	.text 1*64+3, "iny"
>b49e	85 63 6d 70 2e 23			occ9:	.text 2*64+5, "cmp.#"
>b4a4	43 64 65 78				occa:	.text 1*64+3, "dex"
>b4a8	c3 63 70 79				occc:	.text 3*64+3, "cpy"
>b4ac	c3 63 6d 70				occd:	.text 3*64+3, "cmp"
>b4b0	c3 64 65 63				occe:	.text 3*64+3, "dec"
>b4b4	c4 62 62 73 34				occf:	.text 3*64+4, "bbs4"
>b4b9	83 62 6e 65				ocd0:	.text 2*64+3, "bne"
>b4bd	87 63 6d 70 2e 7a 69 79			ocd1:	.text 2*64+7, "cmp.ziy"
>b4c5	86 63 6d 70 2e 7a 69			ocd2:	.text 2*64+6, "cmp.zi"
>b4cc	86 63 6d 70 2e 7a 78			ocd5:	.text 2*64+6, "cmp.zx"
>b4d3	86 64 65 63 2e 7a 78			ocd6:	.text 2*64+6, "dec.zx"
>b4da	86 73 6d 62 35 2e 7a			ocd7:	.text 2*64+6, "smb5.z"
>b4e1	43 63 6c 64				ocd8:	.text 1*64+3, "cld"
>b4e5	c5 63 6d 70 2e 79			ocd9:	.text 3*64+5, "cmp.y"
>b4eb	43 70 68 78				ocda:	.text 1*64+3, "phx"
>b4ef	c5 63 6d 70 2e 78			ocdd:	.text 3*64+5, "cmp.x"
>b4f5	c5 64 65 63 2e 78			ocde:	.text 3*64+5, "dec.x"
>b4fb	c4 62 62 73 35				ocdf:	.text 3*64+4, "bbs5"
>b500	85 63 70 78 2e 23			oce0:	.text 2*64+5, "cpx.#"
>b506	87 73 62 63 2e 7a 78 69			oce1:	.text 2*64+7, "sbc.zxi"
>b50e	85 63 70 78 2e 7a			oce4:	.text 2*64+5, "cpx.z"
>b514	85 73 62 63 2e 7a			oce5:	.text 2*64+5, "sbc.z"
>b51a	85 69 6e 63 2e 7a			oce6:	.text 2*64+5, "inc.z"
>b520	86 73 6d 62 36 2e 7a			oce7:	.text 2*64+6, "smb6.z"
>b527	43 69 6e 78				oce8:	.text 1*64+3, "inx"
>b52b	85 73 62 63 2e 23			oce9:	.text 2*64+5, "sbc.#"
>b531	43 6e 6f 70				ocea:	.text 1*64+3, "nop"
>b535	c3 63 70 78				ocec:	.text 3*64+3, "cpx"
>b539	c3 73 62 63				oced:	.text 3*64+3, "sbc"
>b53d	c3 69 6e 63				ocee:	.text 3*64+3, "inc"
>b541	c4 62 62 73 36				ocef:	.text 3*64+4, "bbs6"
>b546	83 62 65 71				ocf0:	.text 2*64+3, "beq"
>b54a	87 73 62 63 2e 7a 69 79			ocf1:	.text 2*64+7, "sbc.ziy"
>b552	86 73 62 63 2e 7a 69			ocf2:	.text 2*64+6, "sbc.zi"
>b559	86 73 62 63 2e 7a 78			ocf5:	.text 2*64+6, "sbc.zx"
>b560	86 69 6e 63 2e 7a 78			ocf6:	.text 2*64+6, "inc.zx"
>b567	86 73 6d 62 37 2e 7a			ocf7:	.text 2*64+6, "smb7.z"
>b56e	43 73 65 64				ocf8:	.text 1*64+3, "sed"
>b572	c5 73 62 63 2e 79			ocf9:	.text 3*64+5, "sbc.y"
>b578	43 70 6c 78				ocfa:	.text 1*64+3, "plx"
>b57c	c5 73 62 63 2e 78			ocfd:	.text 3*64+5, "sbc.x"
>b582	c5 69 6e 63 2e 78			ocfe:	.text 3*64+5, "inc.x"
>b588	c4 62 62 73 37				ocff:	.text 3*64+4, "bbs7"
>b58d	01 3f					oc__:	.text 1, "?"
.b58f					disassembler_end:

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../ed.asm

=46					ed_head  = editor1  ; pointer to first list element (addr) (2 bytes)
=48					ed_cur   = editor2  ; current line number (1 is first line) (2 bytes)
=50					ed_flags = editor3  ; Flags used by ed, where
.b58f					ed6502:
.b58f	a5 18		lda $18		                lda base
.b591	85 33		sta $33		                sta editor3+1
.b593	a9 0a		lda #$0a	                lda #10
.b595	85 18		sta $18		                sta base
.b597	64 2e		stz $2e		                stz ed_head
.b599	64 2f		stz $2f		                stz ed_head+1
.b59b	64 30		stz $30		                stz ed_cur
.b59d	64 31		stz $31		                stz ed_cur+1
.b59f	64 32		stz $32		                stz ed_flags
.b5a1	20 9c a7	jsr $a79c	                jsr xt_zero
.b5a4	20 9c a7	jsr $a79c	                jsr xt_zero             ; ( addr-t u-t )
.b5a7	20 6f 89	jsr $896f	                jsr xt_cr
.b5aa					ed_input_loop:
.b5aa	a9 81		lda #$81	                lda #%10000001
.b5ac	14 32		trb $32		                trb ed_flags
.b5ae	20 89 ba	jsr $ba89	                jsr ed_get_input
.b5b1	a5 0a		lda $0a		                lda ciblen
.b5b3	d0 1f		bne $b5d4	                bne _command_mode
.b5b5	ca		dex		                dex
.b5b6	ca		dex		                dex                     ; ( addr-t u-t ? )
.b5b7	a5 30		lda $30		                lda ed_cur
.b5b9	95 00		sta $00,x	                sta 0,x
.b5bb	a5 31		lda $31		                lda ed_cur+1
.b5bd	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t u )
.b5bf	a9 80		lda #$80	                lda #%10000000
.b5c1	04 32		tsb $32		                tsb ed_flags
.b5c3	20 40 98	jsr $9840	                jsr xt_one_plus         ; ( addr-t u-t u+1 )
.b5c6	20 a5 ba	jsr $baa5	                jsr ed_is_valid_line
.b5c9	b0 03		bcs $b5ce	                bcs +
.b5cb	4c 79 ba	jmp $ba79	                jmp ed_error_1drop
.b5ce					+
.b5ce	20 9c a7	jsr $a79c	                jsr xt_zero             ; ( addr-t u-t u+1 0 )
.b5d1	4c 9f b6	jmp $b69f	                jmp _line_number_only_from_external
.b5d4					_command_mode:
.b5d4	20 9c a7	jsr $a79c	                jsr xt_zero             ; parameter 1 is NOS ( addr-t u-t 0 )
.b5d7	20 9c a7	jsr $a79c	                jsr xt_zero             ; parameter 2 is TOS ( addr-t u-t 0 0 )
.b5da					_prefix_dot:
.b5da	b2 08		lda ($08)	                lda (cib)
.b5dc	c9 2e		cmp #$2e	                cmp #$2e                ; ASCII '.'
.b5de	d0 3a		bne $b61a	                bne _prefix_dollar
.b5e0	20 9a ba	jsr $ba9a	                jsr ed_have_text
.b5e3	a5 30		lda $30		                lda ed_cur
.b5e5	95 02		sta $02,x	                sta 2,x
.b5e7	a5 31		lda $31		                lda ed_cur+1
.b5e9	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.b5eb	a9 80		lda #$80	                lda #%10000000
.b5ed	04 32		tsb $32		                tsb ed_flags
.b5ef	a5 0a		lda $0a		                lda ciblen
.b5f1	3a		dec a		                dea                     ; sets Z if A was 1
.b5f2	d0 03		bne $b5f7	                bne +
.b5f4	4c 9f b6	jmp $b69f	                jmp _line_number_only_from_external
.b5f7					+
.b5f7	ca		dex		                dex
.b5f8	ca		dex		                dex
.b5f9	ca		dex		                dex
.b5fa	ca		dex		                dex
.b5fb	a5 08		lda $08		                lda cib
.b5fd	95 02		sta $02,x	                sta 2,x
.b5ff	a5 09		lda $09		                lda cib+1
.b601	95 03		sta $03,x	                sta 3,x
.b603	a5 0a		lda $0a		                lda ciblen
.b605	95 00		sta $00,x	                sta 0,x
.b607	a5 0b		lda $0b		                lda ciblen+1
.b609	95 01		sta $01,x	                sta 1,x
.b60b	20 34 98	jsr $9834	                jsr xt_one_minus        ; ( addr-t u-t para1 0 addr u-1 )
.b60e	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; ( addr-t u-t para1 0 u-1 addr )
.b611	20 40 98	jsr $9840	                jsr xt_one_plus         ; ( addr-t u-t para1 0 u-1 addr+1 )
.b614	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; ( addr-t u-t para1 0 addr+1 u-1 )
.b617	4c f7 b6	jmp $b6f7	                jmp _check_for_para2
.b61a					_prefix_dollar:
.b61a	b2 08		lda ($08)	                lda (cib)
.b61c	c9 24		cmp #$24	                cmp #'$'
.b61e	d0 1c		bne $b63c	                bne _prefix_percent
.b620	20 9a ba	jsr $ba9a	                jsr ed_have_text
.b623	e8		inx		                inx
.b624	e8		inx		                inx                     ; ( addr-t u-t 0 )
.b625	20 c7 ba	jsr $bac7	                jsr ed_last_line          ; ( addr-t u-t 0 para1 )
.b628	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; SWAP ( addr-t u-t para1 0 )
.b62b	a9 80		lda #$80	                lda #%10000000
.b62d	04 32		tsb $32		                tsb ed_flags
.b62f	a5 0a		lda $0a		                lda ciblen
.b631	3a		dec a		                dea                     ; sets Z if A was 1
.b632	d0 03		bne $b637	                bne +
.b634	4c 9f b6	jmp $b69f	                jmp _line_number_only_from_external
.b637					+
.b637	a0 01		ldy #$01	                ldy #01
.b639	4c 73 b7	jmp $b773	                jmp _check_command
.b63c					_prefix_percent:
.b63c	b2 08		lda ($08)	                lda (cib)
.b63e	c9 25		cmp #$25	                cmp #$25                ; ASCII '%'
.b640	f0 04		beq $b646	                beq _whole_text
.b642	c9 2c		cmp #$2c	                cmp #$2c                ; ASCII ','
.b644	d0 17		bne $b65d	                bne _prefix_semicolon
.b646					_whole_text:
.b646	20 9a ba	jsr $ba9a	                jsr ed_have_text
.b649	a9 01		lda #$01	                lda #01
.b64b	95 02		sta $02,x	                sta 2,x                 ; LSB of NOS is para 1
.b64d	74 03		stz $03,x	                stz 3,x                 ; ( addr-t u-t para1 0 )
.b64f					_semicolon_entry:
.b64f	e8		inx		                inx
.b650	e8		inx		                inx                     ; DROP ( addr-t u-t para1 )
.b651	20 c7 ba	jsr $bac7	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.b654	a9 80		lda #$80	                lda #%10000000
.b656	04 32		tsb $32		                tsb ed_flags
.b658	a0 01		ldy #$01	                ldy #01
.b65a	4c 73 b7	jmp $b773	                jmp _check_command
.b65d					_prefix_semicolon:
.b65d	b2 08		lda ($08)	                lda (cib)
.b65f	c9 3b		cmp #$3b	                cmp #$3b                ; ASCII ';'
.b661	d0 0d		bne $b670	                bne _prefix_number
.b663	20 9a ba	jsr $ba9a	                jsr ed_have_text
.b666	a5 30		lda $30		                lda ed_cur
.b668	95 02		sta $02,x	                sta 2,x
.b66a	a5 31		lda $31		                lda ed_cur+1
.b66c	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.b66e	80 df		bra $b64f	                bra _semicolon_entry
.b670					_prefix_number:
.b670	20 9c a7	jsr $a79c	                jsr xt_zero
.b673	20 9c a7	jsr $a79c	                jsr xt_zero             ; ( addr-t u-t 0 0 0 0 )
.b676	ca		dex		                dex
.b677	ca		dex		                dex
.b678	ca		dex		                dex
.b679	ca		dex		                dex                     ; ( addr-t u-t 0 0 0 0 ? ? )
.b67a	a5 08		lda $08		                lda cib
.b67c	95 02		sta $02,x	                sta 2,x
.b67e	a5 09		lda $09		                lda cib+1
.b680	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t 0 0 0 0 cib ? )
.b682	a5 0a		lda $0a		                lda ciblen
.b684	95 00		sta $00,x	                sta 0,x
.b686	a5 0b		lda $0b		                lda ciblen+1
.b688	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 0 0 cib ciblen )
.b68a	20 b1 a2	jsr $a2b1	                jsr xt_to_number        ; ( addr-t u-t 0 0 ud addr2 u2 )
.b68d	b5 00		lda $00,x	                lda 0,x
.b68f	15 01		ora $01,x	                ora 1,x
.b691	d0 24		bne $b6b7	                bne _have_unconverted_chars
.b693	e8		inx		                inx
.b694	e8		inx		                inx
.b695	e8		inx		                inx
.b696	e8		inx		                inx                     ; 2DROP ( addr-t u-t 0 0 ud )
.b697	20 8c 8a	jsr $8a8c	                jsr xt_d_to_s           ; D>S ( addr-t u-t 0 0 u )
.b69a	20 91 96	jsr $9691	                jsr xt_not_rote         ; -ROT ( addr-t u-t u 0 0 )
.b69d	e8		inx		                inx
.b69e	e8		inx		                inx                     ; ( addr-t u-t u 0 ) drop through
.b69f					_line_number_only_from_external:
.b69f	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; ( addr-t u-t 0 u )
.b6a2	20 a5 ba	jsr $baa5	                jsr ed_is_valid_line
.b6a5	b0 03		bcs $b6aa	                bcs +
.b6a7	4c 77 ba	jmp $ba77	                jmp ed_error_2drop
.b6aa					+
.b6aa	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; ( addr-t u-t u 0 )
.b6ad	20 34 bb	jsr $bb34	                jsr ed_para1_to_cur
.b6b0	a9 80		lda #$80	                lda #%10000000
.b6b2	04 32		tsb $32		                tsb ed_flags
.b6b4	4c 52 b9	jmp $b952	                jmp ed_cmd_p_from_external
.b6b7					_have_unconverted_chars:
.b6b7	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; ( addr-t u-t 0 0 ud addr2 u2 u2 )
.b6ba	ca		dex		                dex
.b6bb	ca		dex		                dex                     ; ( addr-t u-t 0 0 ud addr2 u2 u2 ? )
.b6bc	a5 0a		lda $0a		                lda ciblen
.b6be	95 00		sta $00,x	                sta 0,x
.b6c0	a5 0b		lda $0b		                lda ciblen+1
.b6c2	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 ud addr2 u2 u2 ciblen )
.b6c4	20 da 8e	jsr $8eda	                jsr xt_equal            ; ( addr-t u-t 0 0 ud addr2 u2 f )
.b6c7	b5 00		lda $00,x	                lda 0,x
.b6c9	15 01		ora $01,x	                ora 1,x
.b6cb	f0 0e		beq $b6db	                beq _no_command_yet
.b6cd	8a		txa		                txa
.b6ce	18		clc		                clc
.b6cf	69 0a		adc #$0a	                adc #10
.b6d1	aa		tax		                tax                     ; ( addr-t u-t 0 0 )
.b6d2	a9 80		lda #$80	                lda #%10000000
.b6d4	14 32		trb $32		                trb ed_flags
.b6d6	a0 00		ldy #$00	                ldy #00
.b6d8	4c 73 b7	jmp $b773	                jmp _check_command
.b6db					_no_command_yet:
.b6db	e8		inx		                inx
.b6dc	e8		inx		                inx                     ; ( ... 0 0 ud addr2 u2 )
.b6dd	20 64 a3	jsr $a364	                jsr xt_to_r             ; >R ( ... 0 0 ud addr2 ) (R: u2)
.b6e0	20 91 96	jsr $9691	                jsr xt_not_rote         ; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.b6e3	20 8c 8a	jsr $8a8c	                jsr xt_d_to_s           ; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.b6e6	b5 00		lda $00,x	                lda 0,x                 ; LSB
.b6e8	95 06		sta $06,x	                sta 6,x
.b6ea	b5 01		lda $01,x	                lda 1,x                 ; MSB
.b6ec	95 07		sta $07,x	                sta 7,x                 ; ( ... para1 0 addr2 para1 ) (R: u2)
.b6ee	e8		inx		                inx
.b6ef	e8		inx		                inx                     ; ( addr-t u-t para1 0 addr2 ) (R: u2)
.b6f0	20 b5 9a	jsr $9ab5	                jsr xt_r_from           ; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.b6f3	a9 80		lda #$80	                lda #%10000000
.b6f5	04 32		tsb $32		                tsb ed_flags
.b6f7					_check_for_para2:
.b6f7	a1 02		lda ($02,x)	                lda (2,x)
.b6f9	c9 2c		cmp #$2c	                cmp #$2c                ; ASCII code for ',' (comma)
.b6fb	f0 0d		beq $b70a	                beq _got_comma
.b6fd	38		sec		                sec
.b6fe	a5 0a		lda $0a		                lda ciblen
.b700	f5 00		sbc $00,x	                sbc 0,x
.b702	a8		tay		                tay
.b703	e8		inx		                inx
.b704	e8		inx		                inx
.b705	e8		inx		                inx
.b706	e8		inx		                inx                     ; 2DROP ( addr-t u-t para1 0 )
.b707	4c 73 b7	jmp $b773	                jmp _check_command
.b70a					_got_comma:
.b70a	f6 02		inc $02,x	                inc 2,x
.b70c	d0 02		bne $b710	                bne +
.b70e	f6 03		inc $03,x	                inc 3,x                 ; ( addr-t u-t para1 0 addr2+1 u2 )
.b710					+
.b710	b5 01		lda $01,x	                lda 1,x
.b712	f0 02		beq $b716	                beq +
.b714	d6 01		dec $01,x	                dec 1,x
.b716					+
.b716	d6 00		dec $00,x	                dec 0,x                 ; ( addr-t u-t para1 0 addr2+1 u2-1 )
.b718	a1 02		lda ($02,x)	                lda (2,x)
.b71a	c9 24		cmp #$24	                cmp #$24                ; ASCII for '$'
.b71c	d0 14		bne $b732	                bne _para2_not_dollar
.b71e	38		sec		                sec
.b71f	a5 0a		lda $0a		                lda ciblen
.b721	f5 02		sbc $02,x	                sbc 2,x
.b723	a8		tay		                tay
.b724	c8		iny		                iny
.b725	5a		phy		                phy
.b726	8a		txa		                txa
.b727	18		clc		                clc
.b728	69 06		adc #$06	                adc #06
.b72a	aa		tax		                tax                     ; ( addr-t u-t para1 )
.b72b	20 c7 ba	jsr $bac7	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.b72e	7a		ply		                ply
.b72f	4c 73 b7	jmp $b773	                jmp _check_command
.b732					_para2_not_dollar:
.b732	20 64 a3	jsr $a364	                jsr xt_to_r             ; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.b735	20 9c a7	jsr $a79c	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.b738	20 9c a7	jsr $a79c	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.b73b	20 7a 9b	jsr $9b7a	                jsr xt_rot              ; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.b73e	20 b5 9a	jsr $9ab5	                jsr xt_r_from           ; R> ( ... para1 0 0 0 addr2+1 u2-1)
.b741	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.b744	20 64 a3	jsr $a364	                jsr xt_to_r             ; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.b747	20 b1 a2	jsr $a2b1	                jsr xt_to_number        ; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.b74a	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.b74d	20 b5 9a	jsr $9ab5	                jsr xt_r_from           ; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.b750	20 da 8e	jsr $8eda	                jsr xt_equal            ; = ( ... para1 0 ud addr3 u3 f )
.b753	b5 00		lda $00,x	                lda 0,x
.b755	15 01		ora $01,x	                ora 1,x
.b757	f0 08		beq $b761	                beq _second_number
.b759	8a		txa		                txa
.b75a	18		clc		                clc
.b75b	69 0c		adc #$0c	                adc #12
.b75d	aa		tax		                tax                     ; back to ( addr-t u-t )
.b75e	4c 7b ba	jmp $ba7b	                jmp ed_error
.b761					_second_number:
.b761	e8		inx		                inx
.b762	e8		inx		                inx                     ; ( addr-t u-t para1 0 ud addr3 u3 )
.b763	38		sec		                sec
.b764	a5 0a		lda $0a		                lda ciblen
.b766	f5 00		sbc $00,x	                sbc 0,x
.b768	48		pha		                pha
.b769	20 a4 a3	jsr $a3a4	                jsr xt_two_drop         ; 2DROP ( addr-t u-t para1 0 ud )
.b76c	20 8c 8a	jsr $8a8c	                jsr xt_d_to_s           ; D>S  ( addr-t u-t para1 0 para2 )
.b76f	20 65 96	jsr $9665	                jsr xt_nip              ; NIP ( addr-t u-t para1 para2 )
.b772	7a		ply		                ply
.b773					_check_command:
.b773	24 32		bit $32		                bit ed_flags
.b775	30 08		bmi $b77f	                bmi _check_command_have_arg
.b777	a5 30		lda $30		                lda ed_cur
.b779	95 02		sta $02,x	                sta 2,x
.b77b	a5 31		lda $31		                lda ed_cur+1
.b77d	95 03		sta $03,x	                sta 3,x
.b77f					_check_command_have_arg:
.b77f	b1 08		lda ($08),y	                lda (cib),y             ; get mystery char from input
.b781	85 24		sta $24		                sta tmp1
.b783	da		phx		                phx
.b784	a2 00		ldx #$00	                ldx #00
.b786					_cmd_loop:
.b786	bd 5f bb	lda $bb5f,x	                lda ed_cmd_list,x
.b789	f0 07		beq $b792	                beq _illegal_command    ; zero marks end of list
.b78b	c5 24		cmp $24		                cmp tmp1
.b78d	f0 07		beq $b796	                beq _found_cmd
.b78f	e8		inx		                inx
.b790	80 f4		bra $b786	                bra _cmd_loop
.b792					_illegal_command:
.b792	fa		plx		                plx
.b793	4c 77 ba	jmp $ba77	                jmp ed_error_2drop
.b796					_found_cmd:
.b796	8a		txa		                txa
.b797	0a		asl a		                asl
.b798	aa		tax		                tax                     ; X * 2 for table
.b799	7c 6a bb	jmp ($bb6a,x)	                jmp (ed_cmd_table,x)
.b79c					ed_next_command:
.b79c	e8		inx		                inx
.b79d	e8		inx		                inx
.b79e	e8		inx		                inx
.b79f	e8		inx		                inx                     ; ( addr-t u-t ) Fall through
.b7a0					_next_command_empty:
.b7a0	4c aa b5	jmp $b5aa	                jmp ed_input_loop
.b7a3					ed_all_done:
.b7a3	64 0a		stz $0a		                stz ciblen
.b7a5	64 0b		stz $0b		                stz ciblen+1
.b7a7	20 a4 a3	jsr $a3a4	                jsr xt_two_drop                 ; 2DROP ( addr-t u-t )
.b7aa	a5 33		lda $33		                lda editor3+1
.b7ac	85 18		sta $18		                sta base
.b7ae	60		rts		                rts
.b7af					ed_cmd_a:
.b7af	fa		plx		                plx
.b7b0	e8		inx		                inx
.b7b1	e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.b7b2					ed_entry_cmd_i:
.b7b2					ed_cmd_a_have_para:
.b7b2	20 fd ba	jsr $bafd	                jsr ed_num_to_addr        ;  ( addr-t u-t addr1 )
.b7b5	20 6f 89	jsr $896f	                jsr xt_cr
.b7b8					_next_string_loop:
.b7b8	20 89 ba	jsr $ba89	                jsr ed_get_input
.b7bb	b2 08		lda ($08)	                lda (cib)
.b7bd	c9 2e		cmp #$2e	                cmp #$2e                ; ASCII for '.'
.b7bf	d0 16		bne $b7d7	                bne _add_line
.b7c1	a4 0a		ldy $0a		                ldy ciblen
.b7c3	c0 01		cpy #$01	                cpy #01
.b7c5	d0 10		bne $b7d7	                bne _add_line
.b7c7	a4 0b		ldy $0b		                ldy ciblen+1
.b7c9	d0 0c		bne $b7d7	                bne _add_line
.b7cb	e8		inx		                inx
.b7cc	e8		inx		                inx
.b7cd	a9 40		lda #$40	                lda #%01000000
.b7cf	04 32		tsb $32		                tsb ed_flags
.b7d1	20 6f 89	jsr $896f	                jsr xt_cr
.b7d4	4c aa b5	jmp $b5aa	                jmp ed_input_loop
.b7d7					_add_line:
.b7d7	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; DUP ( addr-t u-t addr1 addr1 )
.b7da	20 7e 91	jsr $917e	                jsr xt_here             ; HERE ( addr-t u-t addr1 addr1 here )
.b7dd	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 here addr1 )
.b7e0	20 8c 8f	jsr $8f8c	                jsr xt_fetch            ; @  ( addr-t u-t addr1 here addr2 )
.b7e3	20 7a 87	jsr $877a	                jsr xt_comma            ; ,  ( addr-t u-t addr1 here )
.b7e6	20 81 a3	jsr $a381	                jsr xt_tuck             ; TUCK ( addr-t u-t here addr1 here )
.b7e9	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; SWAP ( addr-t u-t here here addr1 )
.b7ec	20 81 a1	jsr $a181	                jsr xt_store            ; ! ( addr-t u-t here )
.b7ef	20 7e 91	jsr $917e	                jsr xt_here             ; HERE ( addr-t u-t here here2)
.b7f2	a5 00		lda $00		                lda cp
.b7f4	18		clc		                clc
.b7f5	69 04		adc #$04	                adc #04
.b7f7	85 00		sta $00		                sta cp
.b7f9	90 02		bcc $b7fd	                bcc +
.b7fb	e6 01		inc $01		                inc cp+1
.b7fd					+
.b7fd	e6 30		inc $30		                inc ed_cur
.b7ff	d0 02		bne $b803	                bne +
.b801	e6 31		inc $31		                inc ed_cur+1
.b803					+
.b803	20 7e 91	jsr $917e	                jsr xt_here     ; HERE ( addr-t u-t here here2 here3 )
.b806	20 bb 8d	jsr $8dbb	                jsr xt_dup      ; DUP ( addr-t u-t here here2 here3 here3 )
.b809	ca		dex		                dex
.b80a	ca		dex		                dex             ; ( addr-t u-t here here2 here3 here3 ? )
.b80b	a5 08		lda $08		                lda cib
.b80d	95 00		sta $00,x	                sta 0,x
.b80f	a5 09		lda $09		                lda cib+1
.b811	95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 here3 cib )
.b813	20 a2 a1	jsr $a1a2	                jsr xt_swap     ; SWAP ( addr-t u-t here here2 here3 cib here3 )
.b816	ca		dex		                dex
.b817	ca		dex		                dex             ; ( addr-t u-t here here2 here3 cib here3 ? )
.b818	a5 0a		lda $0a		                lda ciblen
.b81a	95 00		sta $00,x	                sta 0,x
.b81c	a5 0b		lda $0b		                lda ciblen+1
.b81e	95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 cib here3 ciblen )
.b820	20 e5 95	jsr $95e5	                jsr xt_move     ; ( addr-t u-t here here2 here3 )
.b823	18		clc		                clc
.b824	a5 00		lda $00		                lda cp
.b826	65 0a		adc $0a		                adc ciblen
.b828	85 00		sta $00		                sta cp
.b82a	90 06		bcc $b832	                bcc +
.b82c	a5 01		lda $01		                lda cp+1
.b82e	65 0b		adc $0b		                adc ciblen+1
.b830	85 01		sta $01		                sta cp+1
.b832					+
.b832	20 b6 98	jsr $98b6	                jsr xt_over             ; OVER ( addr-t u-t here here2 here3 here2 )
.b835	20 81 a1	jsr $a181	                jsr xt_store            ; ! ( addr-t u-t here here2 )
.b838	20 40 98	jsr $9840	                jsr xt_one_plus         ; 1+
.b83b	20 40 98	jsr $9840	                jsr xt_one_plus         ; 1+ ( addr-t u-t here here2+2 )
.b83e	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; DUP ( addr-t u-t here here2+2 here2+2 )
.b841	a5 0a		lda $0a		                lda ciblen
.b843	95 02		sta $02,x	                sta 2,x
.b845	a5 0b		lda $0b		                lda ciblen+1
.b847	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t here ciblen here2+2 )
.b849	20 81 a1	jsr $a181	                jsr xt_store            ; ! ( addr-t u-t here )
.b84c	20 6f 89	jsr $896f	                jsr xt_cr
.b84f	4c b8 b7	jmp $b7b8	                jmp _next_string_loop
.b852					ed_cmd_d:
.b852	fa		plx		                plx
.b853	20 9a ba	jsr $ba9a	                jsr ed_have_text
.b856	20 ef ba	jsr $baef	                jsr ed_no_line_zero
.b859	b5 00		lda $00,x	                lda 0,x
.b85b	15 01		ora $01,x	                ora 1,x
.b85d	d0 08		bne $b867	                bne +
.b85f	20 b6 98	jsr $98b6	                jsr xt_over             ; ( addr-t u-t para1 0 para1 )
.b862	20 a4 b8	jsr $b8a4	                jsr _cmd_d_common       ; ( addr-t u-t para1 0 )
.b865	80 33		bra $b89a	                bra _cmd_d_done
.b867					+
.b867	20 a5 ba	jsr $baa5	                jsr ed_is_valid_line      ; result is in C flag
.b86a	b0 03		bcs $b86f	                bcs _cmd_d_loop
.b86c	4c 77 ba	jmp $ba77	                jmp ed_error_2drop
.b86f					_cmd_d_loop:
.b86f	20 ac a3	jsr $a3ac	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.b872	20 69 91	jsr $9169	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.b875	b5 00		lda $00,x	                lda 0,x
.b877	15 01		ora $01,x	                ora 1,x
.b879	d0 0d		bne $b888	                bne _cmd_d_done_with_flag
.b87b	e8		inx		                inx
.b87c	e8		inx		                inx                     ; Get rid of the flag from >
.b87d	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; DUP ( addr-t u-t para1 para2 para2 )
.b880	20 a4 b8	jsr $b8a4	                jsr _cmd_d_common       ; ( addr-t u-t para1 para2 )
.b883	20 34 98	jsr $9834	                jsr xt_one_minus        ; 1- ( addr-t u-t para1 para2-1 )
.b886	80 e7		bra $b86f	                bra _cmd_d_loop
.b888					_cmd_d_done_with_flag:
.b888	e8		inx		                inx                     ; ( addr-t u-t para1 para2 )
.b889	e8		inx		                inx
.b88a	b5 02		lda $02,x	                lda 2,x
.b88c	d0 02		bne $b890	                bne +
.b88e	d6 03		dec $03,x	                dec 3,x
.b890					+
.b890	d6 02		dec $02,x	                dec 2,x
.b892	b5 02		lda $02,x	                lda 2,x
.b894	85 30		sta $30		                sta ed_cur
.b896	b5 03		lda $03,x	                lda 3,x
.b898	85 31		sta $31		                sta ed_cur+1            ; drop through to _cmd_d_done
.b89a					_cmd_d_done:
.b89a	a9 40		lda #$40	                lda #%01000000
.b89c	04 32		tsb $32		                tsb ed_flags
.b89e	20 6f 89	jsr $896f	                jsr xt_cr
.b8a1	4c 9c b7	jmp $b79c	                jmp ed_next_command
.b8a4					_cmd_d_common:
.b8a4	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; DUP ( addr-t u-t u u )
.b8a7	20 fd ba	jsr $bafd	                jsr ed_num_to_addr        ; ( addr-t u-t u addr )
.b8aa	20 8c 8f	jsr $8f8c	                jsr xt_fetch            ; @ ( addr-t u-t u addr1 )
.b8ad	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 u )
.b8b0	20 34 98	jsr $9834	                jsr xt_one_minus        ; 1- ( addr-t u-t addr1 u-1 )
.b8b3	20 fd ba	jsr $bafd	                jsr ed_num_to_addr        ; ( addr-t u-t addr1 addr-1 )
.b8b6	20 81 a1	jsr $a181	                jsr xt_store            ; ! ( addr-t u-t )
.b8b9	60		rts		                rts
.b8ba					ed_cmd_equ:
.b8ba	fa		plx		                plx
.b8bb	a5 2e		lda $2e		                lda ed_head
.b8bd	05 2f		ora $2f		                ora ed_head+1
.b8bf	d0 08		bne $b8c9	                bne _cmd_equ_have_text
.b8c1	ca		dex		                dex
.b8c2	ca		dex		                dex
.b8c3	74 00		stz $00,x	                stz 0,x
.b8c5	74 01		stz $01,x	                stz 1,x                 ; ( addr-t u-t para1 para2 0 )
.b8c7	80 21		bra $b8ea	                bra _cmd_equ_done
.b8c9					_cmd_equ_have_text:
.b8c9	20 ef ba	jsr $baef	                jsr ed_no_line_zero
.b8cc	24 32		bit $32		                bit ed_flags
.b8ce	30 0c		bmi $b8dc	                bmi _cmd_equ_have_para
.b8d0	ca		dex		                dex
.b8d1	ca		dex		                dex                     ; ( addr-t u-t para1 para2 ? )
.b8d2	a5 30		lda $30		                lda ed_cur
.b8d4	95 00		sta $00,x	                sta 0,x
.b8d6	a5 31		lda $31		                lda ed_cur+1
.b8d8	95 01		sta $01,x	                sta 1,x
.b8da	80 0e		bra $b8ea	                bra _cmd_equ_done       ; ( addr-t u-t para1 para2 cur )
.b8dc					_cmd_equ_have_para:
.b8dc	b5 00		lda $00,x	                lda 0,x
.b8de	15 01		ora $01,x	                ora 1,x
.b8e0	d0 05		bne $b8e7	                bne _cmd_equ_two_paras
.b8e2	20 b6 98	jsr $98b6	                jsr xt_over             ; ( addr-t u-t para1 para2 para1)
.b8e5	80 03		bra $b8ea	                bra _cmd_equ_done
.b8e7					_cmd_equ_two_paras:
.b8e7	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; ( addr-t u-t para1 para2 para2) drop through
.b8ea					_cmd_equ_done:
.b8ea	20 6f 89	jsr $896f	                jsr xt_cr               ; number goes on new line
.b8ed	20 22 a5	jsr $a522	                jsr xt_u_dot            ; ( addr-t u-t para1 para2 )
.b8f0	20 6f 89	jsr $896f	                jsr xt_cr
.b8f3	4c 9c b7	jmp $b79c	                jmp ed_next_command
.b8f6					ed_cmd_f:
.b8f6	fa		plx		                plx
.b8f7	24 32		bit $32		                bit ed_flags
.b8f9	30 17		bmi $b912	                bmi _cmd_f_have_para
.b8fb	20 6f 89	jsr $896f	                jsr xt_cr
.b8fe	20 64 a3	jsr $a364	                jsr xt_to_r             ; >R   ( addr-t u-t 0 ) ( R: 0 )
.b901	20 7a 9b	jsr $9b7a	                jsr xt_rot              ; ROT  ( u-t 0 addr-t ) ( R: 0 )
.b904	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; DUP  ( u-t 0 addr-t addr-t ) ( R: 0 )
.b907	20 22 a5	jsr $a522	                jsr xt_u_dot            ; U.   ( u-t 0 addr-t ) ( R: 0 )
.b90a	20 91 96	jsr $9691	                jsr xt_not_rote         ; -ROT ( addr-t u-t 0 ) ( R: 0 )
.b90d	20 b5 9a	jsr $9ab5	                jsr xt_r_from           ; R>   ( addr-t u-t 0 0 )
.b910	80 11		bra $b923	                bra _cmd_f_done
.b912					_cmd_f_have_para:
.b912	20 b6 98	jsr $98b6	                jsr xt_over
.b915	20 6f 89	jsr $896f	                jsr xt_cr
.b918	20 22 a5	jsr $a522	                jsr xt_u_dot
.b91b	b5 02		lda $02,x	                lda 2,x
.b91d	95 06		sta $06,x	                sta 6,x
.b91f	b5 03		lda $03,x	                lda 3,x
.b921	95 07		sta $07,x	                sta 7,x                 ; fall through to _cmd_f_done
.b923					_cmd_f_done:
.b923	20 6f 89	jsr $896f	                jsr xt_cr
.b926	4c 9c b7	jmp $b79c	                jmp ed_next_command
.b929					ed_cmd_i:
.b929	fa		plx		                plx
.b92a	e8		inx		                inx
.b92b	e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.b92c	24 32		bit $32		                bit ed_flags
.b92e	30 08		bmi $b938	                bmi _cmd_i_have_para
.b930	a5 30		lda $30		                lda ed_cur
.b932	95 00		sta $00,x	                sta 0,x
.b934	a5 31		lda $31		                lda ed_cur+1
.b936	95 01		sta $01,x	                sta 1,x                 ;  ( addr-t u-t cur ) drop through
.b938					_cmd_i_have_para:
.b938	b5 00		lda $00,x	                lda 0,x
.b93a	15 01		ora $01,x	                ora 1,x
.b93c	f0 09		beq $b947	                beq _cmd_i_done
.b93e	20 34 98	jsr $9834	                jsr xt_one_minus        ; 1-  ( addr-t u-t para1-1 )
.b941	20 9c a7	jsr $a79c	                jsr xt_zero             ; 0   ( addr-t u-t para1-1 0 )
.b944	20 3b 95	jsr $953b	                jsr xt_max              ; MAX ( addr-t u-t para1-1 | 0 )
.b947					_cmd_i_done:
.b947	4c b2 b7	jmp $b7b2	                jmp ed_entry_cmd_i
.b94a					ed_cmd_n:
.b94a	fa		plx		                plx
.b94b	a9 01		lda #$01	                lda #%00000001
.b94d	04 32		tsb $32		                tsb ed_flags
.b94f	80 05		bra $b956	                bra ed_cmd_p_entry_for_cmd_n
.b951					ed_cmd_p:
.b951	fa		plx		                plx
.b952					ed_cmd_p_from_external:
.b952	a9 01		lda #$01	                lda #%00000001
.b954	14 32		trb $32		                trb ed_flags
.b956					ed_cmd_p_entry_for_cmd_n:
.b956	20 9a ba	jsr $ba9a	                jsr ed_have_text
.b959	20 ef ba	jsr $baef	                jsr ed_no_line_zero
.b95c	20 6f 89	jsr $896f	                jsr xt_cr
.b95f	b5 00		lda $00,x	                lda 0,x
.b961	15 01		ora $01,x	                ora 1,x
.b963	d0 10		bne $b975	                bne _cmd_p_loop
.b965	b5 02		lda $02,x	                lda 2,x
.b967	85 30		sta $30		                sta ed_cur
.b969	b5 03		lda $03,x	                lda 3,x
.b96b	85 31		sta $31		                sta ed_cur+1
.b96d	20 b6 98	jsr $98b6	                jsr xt_over             ; OVER ( addr-t u-t para1 para2 para1 )
.b970	20 9e b9	jsr $b99e	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.b973	80 26		bra $b99b	                bra _cmd_p_all_done
.b975					_cmd_p_loop:
.b975	20 ac a3	jsr $a3ac	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.b978	20 69 91	jsr $9169	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.b97b	b5 00		lda $00,x	                lda 0,x
.b97d	15 01		ora $01,x	                ora 1,x
.b97f	d0 10		bne $b991	                bne _cmd_p_done
.b981	e8		inx		                inx
.b982	e8		inx		                inx                     ; Get rid of the flag from >
.b983	20 b6 98	jsr $98b6	                jsr xt_over             ; ( addr-t u-t para1 para2 para1 )
.b986	20 9e b9	jsr $b99e	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.b989	f6 02		inc $02,x	                inc 2,x
.b98b	d0 02		bne $b98f	                bne +
.b98d	f6 03		inc $03,x	                inc 3,x
.b98f					+
.b98f	80 e4		bra $b975	                bra _cmd_p_loop
.b991					_cmd_p_done:
.b991	e8		inx		                inx
.b992	e8		inx		                inx                     ; fall through to _cmp_p_all_done
.b993	b5 00		lda $00,x	                lda 0,x
.b995	85 30		sta $30		                sta ed_cur
.b997	b5 01		lda $01,x	                lda 1,x
.b999	85 31		sta $31		                sta ed_cur+1
.b99b					_cmd_p_all_done:
.b99b	4c 9c b7	jmp $b79c	                jmp ed_next_command
.b99e					_cmd_p_common:
.b99e	a5 32		lda $32		                lda ed_flags
.b9a0	4a		lsr a		                lsr                     ; bit 0 now in carry
.b9a1	90 0b		bcc $b9ae	                bcc _cmd_p_common_no_num
.b9a3	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; DUP ( addr-t u-t para1 para1 )
.b9a6	20 22 a5	jsr $a522	                jsr xt_u_dot            ; U. ( addr-t u-t para1 )
.b9a9	a9 09		lda #$09	                lda #$09                 ; ASCII for Tab
.b9ab	20 02 8e	jsr $8e02	                jsr emit_a
.b9ae					_cmd_p_common_no_num:
.b9ae	20 fd ba	jsr $bafd	                jsr ed_num_to_addr        ; ( addr-t u-t addr )
.b9b1	20 3d bb	jsr $bb3d	                jsr ed_print_addr
.b9b4	60		rts		                rts
.b9b5					ed_cmd_q:
.b9b5	fa		plx		                plx
.b9b6	24 32		bit $32		                bit ed_flags            ; bit 6 is change flag
.b9b8	50 03		bvc $b9bd	                bvc +
.b9ba	4c 77 ba	jmp $ba77	                jmp ed_error_2drop
.b9bd					+
.b9bd	4c a3 b7	jmp $b7a3	                jmp ed_all_done            ; can't fall thru because of PLX
.b9c0					ed_cmd_qq:
.b9c0	fa		plx		                plx
.b9c1	4c a3 b7	jmp $b7a3	                jmp ed_all_done
.b9c4					ed_cmd_w:
.b9c4	fa		plx		                plx
.b9c5	20 9a ba	jsr $ba9a	                jsr ed_have_text
.b9c8	24 32		bit $32		                bit ed_flags
.b9ca	30 13		bmi $b9df	                bmi _cmd_w_have_para
.b9cc	b5 06		lda $06,x	                lda 6,x
.b9ce	15 07		ora $07,x	                ora 7,x
.b9d0	d0 03		bne $b9d5	                bne +
.b9d2	4c 77 ba	jmp $ba77	                jmp ed_error_2drop
.b9d5					+
.b9d5	b5 06		lda $06,x	                lda 6,x
.b9d7	95 02		sta $02,x	                sta 2,x
.b9d9	b5 07		lda $07,x	                lda 7,x
.b9db	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t addr-t ? )
.b9dd	80 08		bra $b9e7	                bra _cmd_w_para_ready
.b9df					_cmd_w_have_para:
.b9df	b5 02		lda $02,x	                lda 2,x
.b9e1	95 06		sta $06,x	                sta 6,x
.b9e3	b5 03		lda $03,x	                lda 3,x
.b9e5	95 07		sta $07,x	                sta 7,x                 ; drop through to _cmd_w_para_ready
.b9e7					_cmd_w_para_ready:
.b9e7	a9 2e		lda #$2e	                lda #<ed_head
.b9e9	95 00		sta $00,x	                sta 0,x
.b9eb	a9 00		lda #$00	                lda #>ed_head
.b9ed	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t addr-t addr-h )
.b9ef	20 b6 98	jsr $98b6	                jsr xt_over             ; OVER ( addr-t u-t addr-t addr-h addr-t )
.b9f2	20 64 a3	jsr $a364	                jsr xt_to_r             ; >R ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.b9f5					_cmd_w_loop:
.b9f5	20 8c 8f	jsr $8f8c	                jsr xt_fetch            ; @ ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.b9f8	b5 00		lda $00,x	                lda 0,x
.b9fa	15 01		ora $01,x	                ora 1,x
.b9fc	f0 55		beq $ba53	                beq _cmd_w_eol
.b9fe	20 ac a3	jsr $a3ac	                jsr xt_two_dup          ; 2DUP ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.ba01	20 96 a4	jsr $a496	                jsr xt_two_to_r         ; 2>R  ( addr-t addr-1 ) (R: ... )
.ba04	20 40 98	jsr $9840	                jsr xt_one_plus         ; 1+ ( addr-t addr1+1 ) (R: ... )
.ba07	20 40 98	jsr $9840	                jsr xt_one_plus         ; 1+ ( addr-t addr1+2 ) (R: ... )
.ba0a	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; DUP ( addr-t addr1+2 addr1+2 ) ( R: ... )
.ba0d	20 8c 8f	jsr $8f8c	                jsr xt_fetch            ; @ ( addr-t addr1+2 addr-s ) ( R: ... )
.ba10	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; SWAP ( addr-t addr-s addr1+2 ) ( R: ... )
.ba13	20 40 98	jsr $9840	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+1 ) (R: ... )
.ba16	20 40 98	jsr $9840	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+2 ) (R: ... )
.ba19	20 8c 8f	jsr $8f8c	                jsr xt_fetch            ; @ ( addr-t addr-s u-s ) ( R: ... )
.ba1c	20 91 96	jsr $9691	                jsr xt_not_rote         ; -ROT ( u-s addr-t addr-s ) ( R: ... )
.ba1f	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; SWAP ( u-s addr-s addr-t ) ( R: ... )
.ba22	20 7a 9b	jsr $9b7a	                jsr xt_rot              ; ROT (addr-s addr-t u-s ) ( R: ... )
.ba25	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; DUP (addr-s addr-t u-s u-s ) ( R: ... )
.ba28	20 64 a3	jsr $a364	                jsr xt_to_r             ; >R (addr-s addr-t u-s ) ( R: ... u-s )
.ba2b	20 e5 95	jsr $95e5	                jsr xt_move             ; MOVE ( )( R: addr-t addr-1 addr-t )
.ba2e	20 b5 9a	jsr $9ab5	                jsr xt_r_from           ; R> ( u-s )  ( R: addr-t addr-h addr-t )
.ba31	20 1c a4	jsr $a41c	                jsr xt_two_r_from       ; 2R> ( u-s addr-t addr-h ) ( R: addr-t )
.ba34	20 91 96	jsr $9691	                jsr xt_not_rote         ; -ROT ( addr-h u-s addr-t ) ( R: addr-t )
.ba37	20 06 9a	jsr $9a06	                jsr xt_plus             ; + ( addr-h addr-t1 ) ( R: addr-t )
.ba3a	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; DUP ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.ba3d	ca		dex		                dex
.ba3e	ca		dex		                dex                     ; ( addr-h addr-t1 addr-t1 ? ) ( R: addr-t )
.ba3f	a9 0a		lda #$0a	                lda #AscLF              ; ASCII for LF
.ba41	95 00		sta $00,x	                sta 0,x
.ba43	74 01		stz $01,x	                stz 1,x                 ; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.ba45	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; SWAP ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.ba48	20 81 a1	jsr $a181	                jsr xt_store            ; ! ( addr-h addr-t1 ) ( R: addr-t )
.ba4b	20 40 98	jsr $9840	                jsr xt_one_plus         ; 1+ ( addr-h addr-t1+1 ) ( R: addr-t )
.ba4e	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; SWAP ( addr-t1+1 addr-h ) ( R: addr-t )
.ba51	80 a2		bra $b9f5	                bra _cmd_w_loop
.ba53					_cmd_w_eol:
.ba53	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; SWAP ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.ba56	20 b5 9a	jsr $9ab5	                jsr xt_r_from           ; R> ( addr-t u-t addr-n addr-tn addr-t )
.ba59	20 73 95	jsr $9573	                jsr xt_minus            ; - ( addr-t u-t addr-n u )
.ba5c	b5 00		lda $00,x	                lda 0,x
.ba5e	95 04		sta $04,x	                sta 4,x
.ba60	b5 01		lda $01,x	                lda 1,x
.ba62	95 05		sta $05,x	                sta 5,x                 ; ( addr-t u addr-n u )
.ba64	20 6f 89	jsr $896f	                jsr xt_cr
.ba67	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; DUP ( addr-t u addr-n u u )
.ba6a	20 22 a5	jsr $a522	                jsr xt_u_dot            ; U. ( addr-t u addr-n u )
.ba6d	20 6f 89	jsr $896f	                jsr xt_cr
.ba70	a9 40		lda #$40	                lda #%01000000
.ba72	14 32		trb $32		                trb ed_flags
.ba74	4c 9c b7	jmp $b79c	                jmp ed_next_command
.ba77					ed_error_2drop:
.ba77	e8		inx		                inx
.ba78	e8		inx		                inx                     ; drop through to _error_1drop
.ba79					ed_error_1drop:
.ba79	e8		inx		                inx
.ba7a	e8		inx		                inx                     ; drop through to _error
.ba7b					ed_error:
.ba7b	20 6f 89	jsr $896f	                jsr xt_cr
.ba7e	a9 3f		lda #$3f	                lda #'?'
.ba80	20 02 8e	jsr $8e02	                jsr emit_a
.ba83	20 6f 89	jsr $896f	                jsr xt_cr
.ba86	4c aa b5	jmp $b5aa	                jmp ed_input_loop
.ba89					ed_get_input:
.ba89	20 1b 9b	jsr $9b1b	                jsr xt_refill           ;  ( addr-t u-t f )
.ba8c	b5 00		lda $00,x	                lda 0,x
.ba8e	15 01		ora $01,x	                ora 1,x
.ba90	d0 05		bne $ba97	                bne +
.ba92	7a		ply		                ply
.ba93	7a		ply		                ply
.ba94	4c 79 ba	jmp $ba79	                jmp ed_error_1drop
.ba97					+
.ba97	e8		inx		                inx
.ba98	e8		inx		                inx
.ba99	60		rts		                rts
.ba9a					ed_have_text:
.ba9a	a5 2e		lda $2e		                lda ed_head
.ba9c	05 2f		ora $2f		                ora ed_head+1
.ba9e	d0 04		bne $baa4	                bne +
.baa0	7a		ply		                ply
.baa1	7a		ply		                ply
.baa2	80 d7		bra $ba7b	                bra ed_error
.baa4					+
.baa4	60		rts		                rts
.baa5					ed_is_valid_line:
.baa5	38		sec		                sec                             ; default is legal line number
.baa6	b5 00		lda $00,x	                lda 0,x
.baa8	15 01		ora $01,x	                ora 1,x
.baaa	f0 19		beq $bac5	                beq _is_valid_line_nope_zero    ; ( n )
.baac	20 bb 8d	jsr $8dbb	                jsr xt_dup                      ; DUP ( n n )
.baaf	20 c7 ba	jsr $bac7	                jsr ed_last_line                  ; ( n n last )
.bab2	20 a2 a1	jsr $a1a2	                jsr xt_swap                     ; SWAP ( n last n )
.bab5	20 74 93	jsr $9374	                jsr xt_less_than                ; < ( n f )
.bab8	b5 00		lda $00,x	                lda 0,x                         ; 0 flag is good
.baba	15 01		ora $01,x	                ora 1,x
.babc	d0 05		bne $bac3	                bne _is_valid_line_too_small
.babe	e8		inx		                inx
.babf	e8		inx		                inx                     ; DROP flag ( n )
.bac0	38		sec		                sec                     ; Who knows what's happened to C by now
.bac1	80 03		bra $bac6	                bra _is_valid_line_done ; only one exit from this routine
.bac3					_is_valid_line_too_small:
.bac3	e8		inx		                inx
.bac4	e8		inx		                inx                     ; drop through to _is_valid_line_zero
.bac5					_is_valid_line_nope_zero:
.bac5	18		clc		                clc                     ; drop through to _is_valid_line_done
.bac6					_is_valid_line_done:
.bac6	60		rts		                rts
.bac7					ed_last_line:
.bac7	64 24		stz $24		                stz tmp1
.bac9	64 25		stz $25		                stz tmp1+1
.bacb	ca		dex		                dex
.bacc	ca		dex		                dex                     ; ( ? )
.bacd	a9 2e		lda #$2e	                lda #<ed_head
.bacf	95 00		sta $00,x	                sta 0,x
.bad1	a9 00		lda #$00	                lda #>ed_head
.bad3	95 01		sta $01,x	                sta 1,x                 ; ( addr )
.bad5					_last_line_loop:
.bad5	20 8c 8f	jsr $8f8c	                jsr xt_fetch            ; ( addr | 0 )
.bad8	b5 00		lda $00,x	                lda 0,x
.bada	15 01		ora $01,x	                ora 1,x
.badc	f0 08		beq $bae6	                beq _last_line_done
.bade	e6 24		inc $24		                inc tmp1
.bae0	d0 02		bne $bae4	                bne +
.bae2	e6 25		inc $25		                inc tmp1+1
.bae4					+
.bae4	80 ef		bra $bad5	                bra _last_line_loop
.bae6					_last_line_done:
.bae6	a5 24		lda $24		                lda tmp1
.bae8	95 00		sta $00,x	                sta 0,x
.baea	a5 25		lda $25		                lda tmp1+1
.baec	95 01		sta $01,x	                sta 1,x                 ; ( u )
.baee	60		rts		                rts
.baef					ed_no_line_zero:
.baef	b5 02		lda $02,x	                lda 2,x
.baf1	15 03		ora $03,x	                ora 3,x
.baf3	d0 07		bne $bafc	                bne _no_line_zero_done
.baf5	24 32		bit $32		                bit ed_flags
.baf7	10 03		bpl $bafc	                bpl _no_line_zero_done
.baf9	4c 77 ba	jmp $ba77	                jmp ed_error_2drop
.bafc					_no_line_zero_done:
.bafc	60		rts		                rts
.bafd					ed_num_to_addr:
.bafd	ca		dex		                dex
.bafe	ca		dex		                dex                     ; ( u ? )
.baff	a9 2e		lda #$2e	                lda #<ed_head
.bb01	95 00		sta $00,x	                sta 0,x
.bb03	a9 00		lda #$00	                lda #>ed_head
.bb05	95 01		sta $01,x	                sta 1,x                 ; ( u addr-h )
.bb07	b5 02		lda $02,x	                lda 2,x
.bb09	15 03		ora $03,x	                ora 3,x
.bb0b	d0 05		bne $bb12	                bne _num_to_addr_loop
.bb0d	20 65 96	jsr $9665	                jsr xt_nip              ; ( addr-h )
.bb10	80 21		bra $bb33	                bra _num_to_addr_done
.bb12					_num_to_addr_loop:
.bb12	20 8c 8f	jsr $8f8c	                jsr xt_fetch            ; @ ( u addr1 )
.bb15	b5 00		lda $00,x	                lda 0,x
.bb17	15 01		ora $01,x	                ora 1,x
.bb19	d0 05		bne $bb20	                bne +
.bb1b	20 65 96	jsr $9665	                jsr xt_nip              ; NIP ( addr1 )
.bb1e	80 13		bra $bb33	                bra _num_to_addr_done
.bb20					+
.bb20	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; SWAP ( addr1 u )
.bb23	20 34 98	jsr $9834	                jsr xt_one_minus        ; 1- ( addr1 u-1 )
.bb26	b5 00		lda $00,x	                lda 0,x
.bb28	15 01		ora $01,x	                ora 1,x
.bb2a	f0 05		beq $bb31	                beq _num_to_addr_finished
.bb2c	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; SWAP ( u-1 addr1 )
.bb2f	80 e1		bra $bb12	                bra _num_to_addr_loop
.bb31					_num_to_addr_finished:
.bb31	e8		inx		                inx
.bb32	e8		inx		                inx                     ; ( addr )
.bb33					_num_to_addr_done:
.bb33	60		rts		                rts
.bb34					ed_para1_to_cur:
.bb34	b5 02		lda $02,x	                lda 2,x
.bb36	85 30		sta $30		                sta ed_cur
.bb38	b5 03		lda $03,x	                lda 3,x
.bb3a	85 31		sta $31		                sta ed_cur+1
.bb3c	60		rts		                rts
.bb3d					ed_print_addr:
.bb3d	20 40 98	jsr $9840	                jsr xt_one_plus
.bb40	20 40 98	jsr $9840	                jsr xt_one_plus         ; ( addr+2 )
.bb43	20 bb 8d	jsr $8dbb	                jsr xt_dup              ; ( addr+2 addr+2 )
.bb46	20 40 98	jsr $9840	                jsr xt_one_plus
.bb49	20 40 98	jsr $9840	                jsr xt_one_plus         ; ( addr+2 addr+4 )
.bb4c	20 8c 8f	jsr $8f8c	                jsr xt_fetch            ; ( addr+2 u-s )
.bb4f	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; ( u-s addr+2 )
.bb52	20 8c 8f	jsr $8f8c	                jsr xt_fetch            ; ( u-s addr-s )
.bb55	20 a2 a1	jsr $a1a2	                jsr xt_swap             ; ( addr-s u-s )
.bb58	20 f7 a4	jsr $a4f7	                jsr xt_type
.bb5b	20 6f 89	jsr $896f	                jsr xt_cr
.bb5e	60		rts		                rts
>bb5f	61 66 69 64 70 6e 3d 77		ed_cmd_list:    .text "afidpn=wqQ", 0
>bb67	71 51 00
.bb6a					ed_cmd_table:
>bb6a	af b7 f6 b8 29 b9 52 b8		                .word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>bb72	51 b9 4a b9
>bb76	ba b8 c4 b9 b5 b9 c0 b9		                .word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.bb7e					ed6502_end:

;******  Return to file: platform/../taliforth.asm

.bb7e					forth_words_start:
>bb7e	20 63 72 20 2e 28 20 54		.binary "forth_words.asc"
>bb86	61 6c 69 20 46 6f 72 74 68 20 32 20 66 6f 72 20
>bb96	74 68 65 20 36 35 63 30 32 29 20 63 72 20 2e 28
>bba6	20 56 65 72 73 69 6f 6e 20 31 2e 30 20 30 34 2e
>bbb6	20 44 65 63 20 32 30 32 32 20 29 20 63 72 20 2e
>bbc6	28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31 34
>bbd6	2d 32 30 32 32 20 53 63 6f 74 20 57 2e 20 53 74
>bbe6	65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f 6c
>bbf6	77 65 6c 6c 29 20 63 72 20 2e 28 20 54 61 6c 69
>bc06	20 46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20 77
>bc16	69 74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20 4e
>bc26	4f 20 57 41 52 52 41 4e 54 59 29 20 63 72 20 2e
>bc36	28 20 54 79 70 65 20 27 62 79 65 27 20 74 6f 20
>bc46	65 78 69 74 29 20 63 72 20
.bc4f					forth_words_end:
.bc4f					user_words_start:
>bc4f	20 20				.binary "user_words.asc"
.bc51					user_words_end:

;******  Processing file: platform/../headers.asm

.bc51					dictionary_start:
.bc51					nt_drop:
>bc51	04 10				        .byte 4, UF
>bc53	5d bc 3a 8d 3f 8d		        .word nt_dup, xt_drop, z_drop
>bc59	64 72 6f 70			        .text "drop"
.bc5d					nt_dup:
>bc5d	03 10				        .byte 3, UF
>bc5f	68 bc bb 8d c8 8d		        .word nt_swap, xt_dup, z_dup
>bc65	64 75 70			        .text "dup"
.bc68					nt_swap:
>bc68	04 10				        .byte 4, UF
>bc6a	74 bc a2 a1 b5 a1		        .word nt_store, xt_swap, z_swap
>bc70	73 77 61 70			        .text "swap"
.bc74					nt_store:
>bc74	01 10				        .byte 1, UF
>bc76	7d bc 81 a1 96 a1		        .word nt_fetch, xt_store, z_store
>bc7c	21				        .text "!"
.bc7d					nt_fetch:
>bc7d	01 10				        .byte 1, UF
>bc7f	86 bc 8c 8f 9e 8f		        .word nt_over, xt_fetch, z_fetch
>bc85	40				        .text "@"
.bc86					nt_over:
>bc86	04 10				        .byte 4, UF
>bc88	92 bc b6 98 c3 98		        .word nt_to_r, xt_over, z_over
>bc8e	6f 76 65 72			        .text "over"
.bc92					nt_to_r:
>bc92	02 11				        .byte 2, CO+UF ; native is special case
>bc94	9c bc 64 a3 77 a3		        .word nt_r_from, xt_to_r, z_to_r
>bc9a	3e 72				        .text ">r"
.bc9c					nt_r_from:
>bc9c	02 01				        .byte 2, CO    ; native is special case
>bc9e	a6 bc b5 9a c5 9a		        .word nt_r_fetch, xt_r_from, z_r_from
>bca4	72 3e				        .text "r>"
.bca6					nt_r_fetch:
>bca6	02 01				        .byte 2, CO    ; native is special case
>bca8	b0 bc a0 9a b4 9a		        .word nt_nip, xt_r_fetch, z_r_fetch
>bcae	72 40				        .text "r@"
.bcb0					nt_nip:
>bcb0	03 10				        .byte 3, UF
>bcb2	bb bc 65 96 72 96		        .word nt_rot, xt_nip, z_nip
>bcb8	6e 69 70			        .text "nip"
.bcbb					nt_rot:
>bcbb	03 10				        .byte 3, UF
>bcbd	c6 bc 7a 9b 95 9b		        .word nt_not_rote, xt_rot, z_rot
>bcc3	72 6f 74			        .text "rot"
.bcc6					nt_not_rote:
>bcc6	04 10				        .byte 4, UF
>bcc8	d2 bc 91 96 ac 96		        .word nt_tuck, xt_not_rote, z_not_rote
>bcce	2d 72 6f 74			        .text "-rot"
.bcd2					nt_tuck:
>bcd2	04 10				        .byte 4, UF
>bcd4	de bc 81 a3 9a a3		        .word nt_comma, xt_tuck, z_tuck
>bcda	74 75 63 6b			        .text "tuck"
.bcde					nt_comma:
>bcde	01 10				        .byte 1, UF
>bce0	e7 bc 7a 87 93 87		        .word nt_c_fetch, xt_comma, z_comma
>bce6	2c				        .text ","
.bce7					nt_c_fetch:
>bce7	02 10				        .byte 2, UF
>bce9	f1 bc 17 86 20 86		        .word nt_c_store, xt_c_fetch, z_c_fetch
>bcef	63 40				        .text "c@"
.bcf1					nt_c_store:
>bcf1	02 10				        .byte 2, UF
>bcf3	fb bc 21 86 2c 86		        .word nt_plus_store, xt_c_store, z_c_store
>bcf9	63 21				        .text "c!"
.bcfb					nt_plus_store:
>bcfb	02 10				        .byte 2, UF
>bcfd	05 bd 19 9a 38 9a		        .word nt_execute, xt_plus_store, z_plus_store
>bd03	2b 21				        .text "+!"
.bd05					nt_execute:
>bd05	07 10				        .byte 7, UF
>bd07	14 bd 49 8f 4f 8f		        .word nt_emit, xt_execute, z_execute
>bd0d	65 78 65 63 75 74 65		        .text "execute"
.bd14					nt_emit:
>bd14	04 18				        .byte 4, NN+UF
>bd16	20 bd fb 8d 05 8e		        .word nt_type, xt_emit, z_emit
>bd1c	65 6d 69 74			        .text "emit"
.bd20					nt_type:
>bd20	04 10				        .byte 4, UF
>bd22	2c bd f7 a4 21 a5		        .word nt_dot, xt_type, z_type
>bd28	74 79 70 65			        .text "type"
.bd2c					nt_dot:
>bd2c	01 10				        .byte 1, UF
>bd2e	35 bd 42 8c 63 8c		        .word nt_u_dot, xt_dot, z_dot
>bd34	2e				        .text "."
.bd35					nt_u_dot:
>bd35	02 10				        .byte 2, UF
>bd37	3f bd 22 a5 2d a5		        .word nt_u_dot_r, xt_u_dot, z_u_dot
>bd3d	75 2e				        .text "u."
.bd3f					nt_u_dot_r:
>bd3f	03 10				        .byte 3, UF
>bd41	4a bd 2e a5 4f a5		        .word nt_dot_r, xt_u_dot_r, z_u_dot_r
>bd47	75 2e 72			        .text "u.r"
.bd4a					nt_dot_r:
>bd4a	02 10				        .byte 2, UF
>bd4c	54 bd 7e 8c ab 8c		        .word nt_d_dot, xt_dot_r, z_dot_r
>bd52	2e 72				        .text ".r"
.bd54					nt_d_dot:
>bd54	02 10				        .byte 2, UF
>bd56	5e bd f0 8c 0e 8d		        .word nt_d_dot_r, xt_d_dot, z_d_dot
>bd5c	64 2e				        .text "d."
.bd5e					nt_d_dot_r:
>bd5e	03 10				        .byte 3, UF
>bd60	69 bd 0f 8d 39 8d		        .word nt_ud_dot, xt_d_dot_r, z_d_dot_r
>bd66	64 2e 72			        .text "d.r"
.bd69					nt_ud_dot:
>bd69	03 10				        .byte 3, UF
>bd6b	74 bd 7c a5 8e a5		        .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
>bd71	75 64 2e			        .text "ud."
.bd74					nt_ud_dot_r:
>bd74	04 10				        .byte 4, UF
>bd76	80 bd 8f a5 ad a5		        .word nt_question, xt_ud_dot_r, z_ud_dot_r
>bd7c	75 64 2e 72			        .text "ud.r"
.bd80					nt_question:
>bd80	01 00				        .byte 1, 0
>bd82	89 bd 85 9a 8b 9a		        .word nt_false, xt_question, z_question
>bd88	3f				        .text "?"
.bd89					nt_false:
>bd89	05 00				        .byte 5, 0
>bd8b	96 bd 85 8f 8b 8f		        .word nt_true, xt_false, z_false
>bd91	66 61 6c 73 65			        .text "false"
.bd96					nt_true:
>bd96	04 00				        .byte 4, 0
>bd98	a2 bd 78 a3 80 a3		        .word nt_space, xt_true, z_true
>bd9e	74 72 75 65			        .text "true"
.bda2					nt_space:
>bda2	05 00				        .byte 5, 0
>bda4	af bd 12 a1 17 a1		        .word nt_zero, xt_space, z_space
>bdaa	73 70 61 63 65			        .text "space"
.bdaf					nt_zero:
>bdaf	01 00				        .byte 1, 0
>bdb1	b8 bd 9c a7 a2 a7		        .word nt_one, xt_zero, z_zero
>bdb7	30				        .text "0"
.bdb8					nt_one:
>bdb8	01 00				        .byte 1, 0
>bdba	c1 bd 2b 98 33 98		        .word nt_two, xt_one, z_one
>bdc0	31				        .text "1"
.bdc1					nt_two:
>bdc1	01 00				        .byte 1, 0
>bdc3	ca bd 9b a3 a3 a3		        .word nt_two_dup, xt_two, z_two
>bdc9	32				        .text "2"
.bdca					nt_two_dup:
>bdca	04 10				        .byte 4, UF
>bdcc	d6 bd ac a3 c3 a3		        .word nt_question_dup, xt_two_dup, z_two_dup
>bdd2	32 64 75 70			        .text "2dup"
.bdd6					nt_question_dup:
>bdd6	04 10				        .byte 4, UF
>bdd8	e2 bd 8c 9a 9f 9a		        .word nt_plus, xt_question_dup, z_question_dup
>bdde	3f 64 75 70			        .text "?dup"
.bde2					nt_plus:
>bde2	01 10				        .byte 1, UF
>bde4	eb bd 06 9a 18 9a		        .word nt_minus, xt_plus, z_plus
>bdea	2b				        .text "+"
.bdeb					nt_minus:
>bdeb	01 10				        .byte 1, UF
>bded	f4 bd 73 95 85 95		        .word nt_one_minus, xt_minus, z_minus
>bdf3	2d				        .text "-"
.bdf4					nt_one_minus:
>bdf4	02 10				        .byte 2, UF
>bdf6	fe bd 34 98 3f 98		        .word nt_one_plus, xt_one_minus, z_one_minus
>bdfc	31 2d				        .text "1-"
.bdfe					nt_one_plus:
>bdfe	02 10				        .byte 2, UF
>be00	08 be 40 98 49 98		        .word nt_two_star, xt_one_plus, z_one_plus
>be06	31 2b				        .text "1+"
.be08					nt_two_star:
>be08	02 10				        .byte 2, UF
>be0a	12 be 44 a4 4b a4		        .word nt_two_slash, xt_two_star, z_two_star
>be10	32 2a				        .text "2*"
.be12					nt_two_slash:
>be12	02 10				        .byte 2, UF
>be14	1c be 39 a4 43 a4		        .word nt_abs, xt_two_slash, z_two_slash
>be1a	32 2f				        .text "2/"
.be1c					nt_abs:
>be1c	03 10				        .byte 3, UF
>be1e	27 be 23 81 37 81		        .word nt_dabs, xt_abs, z_abs
>be24	61 62 73			        .text "abs"
.be27					nt_dabs:
>be27	04 10				        .byte 4, UF
>be29	33 be 92 8a b0 8a		        .word nt_and, xt_dabs, z_dabs
>be2f	64 61 62 73			        .text "dabs"
.be33					nt_and:
>be33	03 10				        .byte 3, UF
>be35	3e be 28 83 39 83		        .word nt_or, xt_and, z_and
>be3b	61 6e 64			        .text "and"
.be3e					nt_or:
>be3e	02 10				        .byte 2, UF
>be40	48 be 56 98 67 98		        .word nt_xor, xt_or, z_or
>be46	6f 72				        .text "or"
.be48					nt_xor:
>be48	03 10				        .byte 3, UF
>be4a	53 be 8a a7 9b a7		        .word nt_rshift, xt_xor, z_xor
>be50	78 6f 72			        .text "xor"
.be53					nt_rshift:
>be53	06 10				        .byte 6, UF
>be55	61 be 96 9b a9 9b		        .word nt_lshift, xt_rshift, z_rshift
>be5b	72 73 68 69 66 74		        .text "rshift"
.be61					nt_lshift:
>be61	06 10				        .byte 6, UF
>be63	6f be 9d 94 b0 94		        .word nt_pick, xt_lshift, z_lshift
>be69	6c 73 68 69 66 74		        .text "lshift"
.be6f					nt_pick:
>be6f	04 00				        .byte 4, 0    ; underflow check is complicated, leave off here
>be71	7b be f5 99 05 9a		        .word nt_char, xt_pick, z_pick
>be77	70 69 63 6b			        .text "pick"
.be7b					nt_char:
>be7b	04 00				        .byte 4, 0
>be7d	87 be 3d 86 53 86		        .word nt_bracket_char, xt_char, z_char
>be83	63 68 61 72			        .text "char"
.be87					nt_bracket_char:
>be87	06 05				        .byte 6, CO+IM
>be89	95 be a3 85 a9 85		        .word nt_char_plus, xt_bracket_char, z_bracket_char
>be8f	5b 63 68 61 72 5d		        .text "[char]"
.be95					nt_char_plus:
>be95	05 00				        .byte 5, 0
>be97	a2 be 40 98 49 98		        .word nt_chars, xt_one_plus, z_one_plus ; same as 1+
>be9d	63 68 61 72 2b			        .text "char+"
.bea2					nt_chars:
>bea2	05 12				        .byte 5, AN+UF   ; deleted during compile
>bea4	af be 54 86 57 86		        .word nt_cells, xt_chars, z_chars
>beaa	63 68 61 72 73			        .text "chars"
.beaf					nt_cells:
>beaf	05 00				        .byte 5, 0
>beb1	bc be 44 a4 4b a4		        .word nt_cell_plus, xt_two_star, z_two_star  ; same as 2*
>beb7	63 65 6c 6c 73			        .text "cells"
.bebc					nt_cell_plus:
>bebc	05 10				        .byte 5, UF
>bebe	c9 be 2d 86 3c 86		        .word nt_here, xt_cell_plus, z_cell_plus
>bec4	63 65 6c 6c 2b			        .text "cell+"
.bec9					nt_here:
>bec9	04 00				        .byte 4, 0
>becb	d5 be 7e 91 88 91		        .word nt_equal, xt_here, z_here
>bed1	68 65 72 65			        .text "here"
.bed5					nt_equal:
>bed5	01 10				        .byte 1, UF
>bed7	de be da 8e f5 8e		        .word nt_not_equals, xt_equal, z_equal
>bedd	3d				        .text "="
.bede					nt_not_equals:
>bede	02 10				        .byte 2, UF
>bee0	e8 be 73 96 90 96		        .word nt_less_than, xt_not_equals, z_not_equals
>bee6	3c 3e				        .text "<>"
.bee8					nt_less_than:
>bee8	01 10				        .byte 1, UF
>beea	f1 be 74 93 88 93		        .word nt_u_less_than, xt_less_than, z_less_than
>bef0	3c				        .text "<"
.bef1					nt_u_less_than:
>bef1	02 10				        .byte 2, UF
>bef3	fb be 66 a5 7b a5		        .word nt_u_greater_than, xt_u_less_than, z_u_less_than
>bef9	75 3c				        .text "u<"
.befb					nt_u_greater_than:
>befb	02 10				        .byte 2, UF
>befd	05 bf 50 a5 65 a5		        .word nt_greater_than, xt_u_greater_than, z_u_greater_than
>bf03	75 3e				        .text "u>"
.bf05					nt_greater_than:
>bf05	01 10				        .byte 1, UF
>bf07	0e bf 69 91 7d 91		        .word nt_zero_equal, xt_greater_than, z_greater_than
>bf0d	3e				        .text ">"
.bf0e					nt_zero_equal:
>bf0e	02 10				        .byte 2, UF
>bf10	18 bf a3 a7 b6 a7		        .word nt_zero_unequal, xt_zero_equal, z_zero_equal
>bf16	30 3d				        .text "0="
.bf18					nt_zero_unequal:
>bf18	03 10				        .byte 3, UF
>bf1a	23 bf db a7 ec a7		        .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
>bf20	30 3c 3e			        .text "0<>"
.bf23					nt_zero_greater:
>bf23	02 10				        .byte 2, UF
>bf25	2d bf b7 a7 ca a7		        .word nt_zero_less, xt_zero_greater, z_zero_greater
>bf2b	30 3e				        .text "0>"
.bf2d					nt_zero_less:
>bf2d	02 10				        .byte 2, UF
>bf2f	37 bf cb a7 da a7		        .word nt_min, xt_zero_less, z_zero_less
>bf35	30 3c				        .text "0<"
.bf37					nt_min:
>bf37	03 10				        .byte 3, UF
>bf39	42 bf 57 95 72 95		        .word nt_max, xt_min, z_min
>bf3f	6d 69 6e			        .text "min"
.bf42					nt_max:
>bf42	03 10				        .byte 3, UF
>bf44	4d bf 3b 95 56 95		        .word nt_two_drop, xt_max, z_max
>bf4a	6d 61 78			        .text "max"
.bf4d					nt_two_drop:
>bf4d	05 10				        .byte 5, UF
>bf4f	5a bf a4 a3 ab a3		        .word nt_two_swap, xt_two_drop, z_two_drop
>bf55	32 64 72 6f 70			        .text "2drop"
.bf5a					nt_two_swap:
>bf5a	05 10				        .byte 5, UF
>bf5c	67 bf 72 a4 95 a4		        .word nt_two_over, xt_two_swap, z_two_swap
>bf62	32 73 77 61 70			        .text "2swap"
.bf67					nt_two_over:
>bf67	05 10				        .byte 5, UF
>bf69	74 bf e6 a3 fd a3		        .word nt_two_store, xt_two_over, z_two_over
>bf6f	32 6f 76 65 72			        .text "2over"
.bf74					nt_two_store:
>bf74	02 10				        .byte 2, UF
>bf76	7e bf 4c a4 71 a4		        .word nt_two_fetch, xt_two_store, z_two_store
>bf7c	32 21				        .text "2!"
.bf7e					nt_two_fetch:
>bf7e	02 10				        .byte 2, UF
>bf80	88 bf c4 a3 e5 a3		        .word nt_two_variable, xt_two_fetch, z_two_fetch
>bf86	32 40				        .text "2@"
.bf88					nt_two_variable:
>bf88	09 00				        .byte 9, 0
>bf8a	99 bf e8 a4 f6 a4		        .word nt_two_constant, xt_two_variable, z_two_variable
>bf90	32 76 61 72 69 61 62 6c		        .text "2variable"
>bf98	65
.bf99					nt_two_constant:
>bf99	09 10				        .byte 9, UF
>bf9b	aa bf b6 a4 da a4		        .word nt_two_literal, xt_two_constant, z_two_constant
>bfa1	32 63 6f 6e 73 74 61 6e		        .text "2constant"
>bfa9	74
.bfaa					nt_two_literal:
>bfaa	08 14				        .byte 8, UF+IM
>bfac	ba bf db a4 e7 a4		        .word nt_two_r_fetch, xt_two_literal, z_two_literal
>bfb2	32 6c 69 74 65 72 61 6c		        .text "2literal"
.bfba					nt_two_r_fetch:
>bfba	03 09				        .byte 3, CO+NN          ; native is special case, leave NN for now
>bfbc	c5 bf fe a3 1b a4		        .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
>bfc2	32 72 40			        .text "2r@"
.bfc5					nt_two_r_from:
>bfc5	03 01				        .byte 3, CO             ; native is special case
>bfc7	d0 bf 1c a4 38 a4		        .word nt_two_to_r, xt_two_r_from, z_two_r_from
>bfcd	32 72 3e			        .text "2r>"
.bfd0					nt_two_to_r:
>bfd0	03 11				        .byte 3, CO+UF          ; native is special case
>bfd2	db bf 96 a4 b5 a4		        .word nt_invert, xt_two_to_r, z_two_to_r
>bfd8	32 3e 72			        .text "2>r"
.bfdb					nt_invert:
>bfdb	06 10				        .byte 6, UF
>bfdd	e9 bf f7 92 06 93		        .word nt_negate, xt_invert, z_invert
>bfe3	69 6e 76 65 72 74		        .text "invert"
.bfe9					nt_negate:
>bfe9	06 10				        .byte 6, UF
>bfeb	f7 bf 46 96 56 96		        .word nt_dnegate, xt_negate, z_negate
>bff1	6e 65 67 61 74 65		        .text "negate"
.bff7					nt_dnegate:
>bff7	07 10				        .byte 7, UF
>bff9	06 c0 4d 8b 67 8b		        .word nt_c_comma, xt_dnegate, z_dnegate
>bfff	64 6e 65 67 61 74 65		        .text "dnegate"
.c006					nt_c_comma:
>c006	02 10				        .byte 2, UF
>c008	10 c0 0c 86 16 86		        .word nt_bounds, xt_c_comma, z_c_comma
>c00e	63 2c				        .text "c,"
.c010					nt_bounds:
>c010	06 10				        .byte 6, UF
>c012	1e c0 8a 85 a2 85		        .word nt_spaces, xt_bounds, z_bounds
>c018	62 6f 75 6e 64 73		        .text "bounds"
.c01e					nt_spaces:
>c01e	06 10				        .byte 6, UF
>c020	2c c0 18 a1 53 a1		        .word nt_bl, xt_spaces, z_spaces
>c026	73 70 61 63 65 73		        .text "spaces"
.c02c					nt_bl:
>c02c	02 00				        .byte 2, 0
>c02e	36 c0 a6 83 ae 83		        .word nt_minus_trailing, xt_bl, z_bl
>c034	62 6c				        .text "bl"
.c036					nt_minus_trailing:
>c036	09 10				        .byte 9, UF
>c038	47 c0 9f 95 db 95		        .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
>c03e	2d 74 72 61 69 6c 69 6e		        .text "-trailing"
>c046	67
.c047					nt_minus_leading:
>c047	08 10				        .byte 8, UF
>c049	57 c0 86 95 9e 95		        .word nt_slash_string, xt_minus_leading, z_minus_leading
>c04f	2d 6c 65 61 64 69 6e 67		        .text "-leading"
.c057					nt_slash_string:
>c057	07 10				        .byte 7, UF
>c059	66 c0 0d a0 2c a0		        .word nt_refill, xt_slash_string, z_slash_string
>c05f	2f 73 74 72 69 6e 67		        .text "/string"
.c066					nt_refill:
>c066	06 00				        .byte 6, 0
>c068	74 c0 1b 9b 5c 9b		        .word nt_accept, xt_refill, z_refill
>c06e	72 65 66 69 6c 6c		        .text "refill"
.c074					nt_accept:
>c074	06 18				        .byte 6, UF+NN
>c076	82 c0 38 81 30 82		        .word nt_input_to_r, xt_accept, z_accept
>c07c	61 63 63 65 70 74		        .text "accept"
.c082					nt_input_to_r:
>c082	07 08				        .byte 7, NN
>c084	91 c0 6e 92 83 92		        .word nt_r_to_input, xt_input_to_r, z_input_to_r
>c08a	69 6e 70 75 74 3e 72		        .text "input>r"
.c091					nt_r_to_input:
>c091	07 08				        .byte 7, NN
>c093	a0 c0 c6 9a dd 9a		        .word nt_unused, xt_r_to_input, z_r_to_input
>c099	72 3e 69 6e 70 75 74		        .text "r>input"
.c0a0					nt_unused:
>c0a0	06 00				        .byte 6, 0
>c0a2	ae c0 48 a6 57 a6		        .word nt_depth, xt_unused, z_unused
>c0a8	75 6e 75 73 65 64		        .text "unused"
.c0ae					nt_depth:
>c0ae	05 00				        .byte 5, 0
>c0b0	bb c0 02 8b 10 8b		        .word nt_key, xt_depth, z_depth
>c0b6	64 65 70 74 68			        .text "depth"
.c0bb					nt_key:
>c0bb	03 00				        .byte 3, 0
>c0bd	c6 c0 3a 93 43 93		        .word nt_allot, xt_key, z_key
>c0c3	6b 65 79			        .text "key"
.c0c6					nt_allot:
>c0c6	05 10				        .byte 5, UF
>c0c8	d3 c0 95 82 fd 82		        .word nt_create, xt_allot, z_allot
>c0ce	61 6c 6c 6f 74			        .text "allot"
.c0d3					nt_create:
>c0d3	06 00				        .byte 6, 0
>c0d5	e1 c0 75 89 49 8a		        .word nt_does, xt_create, z_create
>c0db	63 72 65 61 74 65		        .text "create"
.c0e1					nt_does:
>c0e1	05 05				        .byte 5, CO+IM
>c0e3	ee c0 01 8c 0f 8c		        .word nt_variable, xt_does, z_does
>c0e9	64 6f 65 73 3e			        .text "does>"
.c0ee					nt_variable:
>c0ee	08 00				        .byte 8, 0
>c0f0	fe c0 6c a6 84 a6		        .word nt_constant, xt_variable, z_variable
>c0f6	76 61 72 69 61 62 6c 65		        .text "variable"
.c0fe					nt_constant:
>c0fe	08 10				        .byte 8, UF
>c100	0e c1 1d 89 5a 89		        .word nt_value, xt_constant, z_constant
>c106	63 6f 6e 73 74 61 6e 74		        .text "constant"
.c10e					nt_value:
>c10e	05 10				        .byte 5, UF
>c110	1b c1 1d 89 5a 89		        .word nt_to, xt_constant, z_constant
>c116	76 61 6c 75 65			        .text "value"
.c11b					nt_to:
>c11b	02 0c				        .byte 2, NN+IM
>c11d	25 c1 25 a2 80 a2		        .word nt_s_to_d, xt_to, z_to
>c123	74 6f				        .text "to"
.c125					nt_s_to_d:
>c125	03 10				        .byte 3, UF
>c127	30 c1 a0 9e b1 9e		        .word nt_d_to_s, xt_s_to_d, z_s_to_d
>c12d	73 3e 64			        .text "s>d"
.c130					nt_d_to_s:
>c130	03 10				        .byte 3, UF
>c132	3b c1 8c 8a 91 8a		        .word nt_d_minus, xt_d_to_s, z_d_to_s
>c138	64 3e 73			        .text "d>s"
.c13b					nt_d_minus:
>c13b	02 10				        .byte 2, UF
>c13d	45 c1 4a 8a 6a 8a		        .word nt_d_plus, xt_d_minus, z_d_minus
>c143	64 2d				        .text "d-"
.c145					nt_d_plus:
>c145	02 10				        .byte 2, UF
>c147	4f c1 6b 8a 8b 8a		        .word nt_erase, xt_d_plus, z_d_plus
>c14d	64 2b				        .text "d+"
.c14f					nt_erase:
>c14f	05 00				        .byte 5, 0      ; underflow checked by FILL
>c151	5c c1 00 8f 48 8f		        .word nt_blank, xt_erase, z_erase
>c157	65 72 61 73 65			        .text "erase"
.c15c					nt_blank:
>c15c	05 00				        .byte 5, 0     ; underflow checked by FILL
>c15e	69 c1 f6 8e 48 8f		        .word nt_fill, xt_blank, z_blank
>c164	62 6c 61 6e 6b			        .text "blank"
.c169					nt_fill:
>c169	04 10				        .byte 4, UF
>c16b	75 c1 06 8f 48 8f		        .word nt_find_name, xt_fill, z_fill
>c171	66 69 6c 6c			        .text "fill"
.c175					nt_find_name:
>c175	09 10				        .byte 9, UF
>c177	86 c1 e7 8f 92 90		        .word nt_tick, xt_find_name, z_find_name
>c17d	66 69 6e 64 2d 6e 61 6d		        .text "find-name"
>c185	65
.c186					nt_tick:
>c186	01 00				        .byte 1, 0
>c188	8f c1 05 a2 24 a2		        .word nt_bracket_tick, xt_tick, z_tick
>c18e	27				        .text "'"
.c18f					nt_bracket_tick:
>c18f	03 05				        .byte 3, CO+IM
>c191	9a c1 aa 85 b0 85		        .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
>c197	5b 27 5d			        .text "[']"
.c19a					nt_name_to_int:
>c19a	08 10				        .byte 8, UF
>c19c	aa c1 04 96 20 96		        .word nt_int_to_name, xt_name_to_int, z_name_to_int
>c1a2	6e 61 6d 65 3e 69 6e 74		        .text "name>int"
.c1aa					nt_int_to_name:
>c1aa	08 10				        .byte 8, UF
>c1ac	ba c1 84 92 f6 92		        .word nt_name_to_string, xt_int_to_name, z_int_to_name
>c1b2	69 6e 74 3e 6e 61 6d 65		        .text "int>name"
.c1ba					nt_name_to_string:
>c1ba	0b 10				        .byte 11, UF
>c1bc	cd c1 21 96 3a 96		        .word nt_to_body, xt_name_to_string, z_name_to_string
>c1c2	6e 61 6d 65 3e 73 74 72		        .text "name>string"
>c1ca	69 6e 67
.c1cd					nt_to_body:
>c1cd	05 10				        .byte 5, UF
>c1cf	da c1 81 a2 a5 a2		        .word nt_defer, xt_to_body, z_to_body
>c1d5	3e 62 6f 64 79			        .text ">body"
.c1da					nt_defer:
>c1da	05 00				        .byte 5, 0
>c1dc	e7 c1 b8 8a ea 8a		        .word nt_latestxt, xt_defer, z_defer
>c1e2	64 65 66 65 72			        .text "defer"
.c1e7					nt_latestxt:
>c1e7	08 00				        .byte 8, 0
>c1e9	f7 c1 55 93 5b 93		        .word nt_latestnt, xt_latestxt, z_latestxt
>c1ef	6c 61 74 65 73 74 78 74		        .text "latestxt"
.c1f7					nt_latestnt:
>c1f7	08 00				        .byte 8, 0
>c1f9	07 c2 47 93 54 93		        .word nt_parse_name, xt_latestnt, z_latestnt
>c1ff	6c 61 74 65 73 74 6e 74		        .text "latestnt"
.c207					nt_parse_name:
>c207	0a 08				        .byte 10, NN
>c209	19 c2 02 99 f4 99		        .word nt_parse, xt_parse_name, z_parse_name
>c20f	70 61 72 73 65 2d 6e 61		        .text "parse-name"
>c217	6d 65
.c219					nt_parse:
>c219	05 10				        .byte 5, UF
>c21b	26 c2 5d 99 f4 99		        .word nt_execute_parsing, xt_parse, z_parse
>c221	70 61 72 73 65			        .text "parse"
.c226					nt_execute_parsing:
>c226	0f 10				        .byte 15, UF
>c228	3d c2 5d 8f 83 8f		        .word nt_source, xt_execute_parsing, z_execute_parsing
>c22e	65 78 65 63 75 74 65 2d		        .text "execute-parsing"
>c236	70 61 72 73 69 6e 67
.c23d					nt_source:
>c23d	06 00				        .byte 6, 0
>c23f	4b c2 f2 a0 06 a1		        .word nt_source_id, xt_source, z_source
>c245	73 6f 75 72 63 65		        .text "source"
.c24b					nt_source_id:
>c24b	09 00				        .byte 9, 0
>c24d	5c c2 07 a1 11 a1		        .word nt_colon, xt_source_id, z_source_id
>c253	73 6f 75 72 63 65 2d 69		        .text "source-id"
>c25b	64
.c25c					nt_colon:
>c25c	01 00				        .byte 1, 0
>c25e	65 c2 1b 87 5d 87		        .word nt_semicolon, xt_colon, z_colon
>c264	3a				        .text ":"
.c265					nt_semicolon:
>c265	01 05				        .byte 1, CO+IM
>c267	6e c2 7c 9f da 9f		        .word nt_colon_noname, xt_semicolon, z_semicolon
>c26d	3b				        .text ";"
.c26e					nt_colon_noname:
>c26e	07 00				        .byte 7, 0
>c270	7d c2 5e 87 79 87		        .word nt_compile_comma, xt_colon_noname, z_colon_noname
>c276	3a 6e 6f 6e 61 6d 65		        .text ":noname"
.c27d					nt_compile_comma:
>c27d	08 18				        .byte 8, UF+NN
>c27f	8d c2 f9 87 10 89		        .word nt_left_bracket, xt_compile_comma, z_compile_comma
>c285	63 6f 6d 70 69 6c 65 2c		        .text "compile,"
.c28d					nt_left_bracket:
>c28d	01 05				        .byte 1, IM+CO
>c28f	96 c2 61 93 65 93		        .word nt_right_bracket, xt_left_bracket, z_left_bracket
>c295	5b				        .text "["
.c296					nt_right_bracket:
>c296	01 04				        .byte 1, IM
>c298	9f c2 6a 9b 70 9b		        .word nt_literal, xt_right_bracket, z_right_bracket
>c29e	5d				        .text "]"
.c29f					nt_literal:
>c29f	07 15				        .byte 7, IM+CO+UF
>c2a1	ae c2 96 93 a3 93		        .word nt_sliteral, xt_literal, z_literal
>c2a7	6c 69 74 65 72 61 6c		        .text "literal"
.c2ae					nt_sliteral:
>c2ae	08 15				        .byte 8, CO+IM+UF
>c2b0	be c2 2d a0 9c a0		        .word nt_dot_quote, xt_sliteral, z_sliteral
>c2b6	73 6c 69 74 65 72 61 6c		        .text "sliteral"
.c2be					nt_dot_quote:
>c2be	02 05				        .byte 2, CO+IM
>c2c0	c8 c2 73 8c 7d 8c		        .word nt_s_quote, xt_dot_quote, z_dot_quote
>c2c6	2e 22				        .text ".", $22
.c2c8					nt_s_quote:
>c2c8	02 0c				        .byte 2, IM+NN
>c2ca	d2 c2 72 9d 9f 9e		        .word nt_s_backslash_quote, xt_s_quote, z_s_quote
>c2d0	73 22				        .text "s", $22
.c2d2					nt_s_backslash_quote:
>c2d2	03 04				        .byte 3, IM
>c2d4	dd c2 aa 9b b3 9b		        .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
>c2da	73 5c 22			        .text "s", $5C, $22
.c2dd					nt_postpone:
>c2dd	08 05				        .byte 8, IM+CO
>c2df	ed c2 39 9a 77 9a		        .word nt_immediate, xt_postpone, z_postpone
>c2e5	70 6f 73 74 70 6f 6e 65		        .text "postpone"
.c2ed					nt_immediate:
>c2ed	09 00				        .byte 9, 0
>c2ef	fe c2 57 92 62 92		        .word nt_compile_only, xt_immediate, z_immediate
>c2f5	69 6d 6d 65 64 69 61 74		        .text "immediate"
>c2fd	65
.c2fe					nt_compile_only:
>c2fe	0c 00				        .byte 12, 0
>c300	12 c3 11 89 1c 89		        .word nt_never_native, xt_compile_only, z_compile_only
>c306	63 6f 6d 70 69 6c 65 2d		        .text "compile-only"
>c30e	6f 6e 6c 79
.c312					nt_never_native:
>c312	0c 00				        .byte 12, 0
>c314	26 c3 57 96 64 96		        .word nt_always_native, xt_never_native, z_never_native
>c31a	6e 65 76 65 72 2d 6e 61		        .text "never-native"
>c322	74 69 76 65
.c326					nt_always_native:
>c326	0d 00				        .byte 13, 0
>c328	3b c3 1a 83 27 83		        .word nt_allow_native, xt_always_native, z_always_native
>c32e	61 6c 77 61 79 73 2d 6e		        .text "always-native"
>c336	61 74 69 76 65
.c33b					nt_allow_native:
>c33b	0c 00				        .byte 12, 0
>c33d	4f c3 fe 82 09 83		        .word nt_nc_limit, xt_allow_native, z_allow_native
>c343	61 6c 6c 6f 77 2d 6e 61		        .text "allow-native"
>c34b	74 69 76 65
.c34f					nt_nc_limit:
>c34f	08 00				        .byte 8, 0
>c351	5f c3 3b 96 45 96		        .word nt_strip_underflow, xt_nc_limit, z_nc_limit
>c357	6e 63 2d 6c 69 6d 69 74		        .text "nc-limit"
.c35f					nt_strip_underflow:
>c35f	0f 00				        .byte 15, 0
>c361	76 c3 97 a1 a1 a1		        .word nt_abort, xt_strip_underflow, z_strip_underflow
>c367	73 74 72 69 70 2d 75 6e		        .text "strip-underflow"
>c36f	64 65 72 66 6c 6f 77
.c376					nt_abort:
>c376	05 00				        .byte 5, 0
>c378	83 c3 60 80 ad 80		        .word nt_abort_quote, xt_abort, z_abort
>c37e	61 62 6f 72 74			        .text "abort"
.c383					nt_abort_quote:
>c383	06 0d				        .byte 6, CO+IM+NN
>c385	91 c3 03 81 0d 81		        .word nt_do, xt_abort_quote, z_abort_quote
>c38b	61 62 6f 72 74 22		        .text "abort", $22
.c391					nt_do:
>c391	02 0d				        .byte 2, CO+IM+NN
>c393	9b c3 6e 8b c8 8b		        .word nt_question_do, xt_do, z_do
>c399	64 6f				        .text "do"
.c39b					nt_question_do:
>c39b	03 0d				        .byte 3, CO+IM+NN
>c39d	a6 c3 68 8b c8 8b		        .word nt_i, xt_question_do, z_question_do
>c3a3	3f 64 6f			        .text "?do"
.c3a6					nt_i:
>c3a6	01 03				        .byte 1, AN+CO
>c3a8	af c3 f5 91 0e 92		        .word nt_j, xt_i, z_i
>c3ae	69				        .text "i"
.c3af					nt_j:
>c3af	01 03				        .byte 1, AN+CO
>c3b1	b8 c3 20 93 39 93		        .word nt_loop, xt_j, z_j
>c3b7	6a				        .text "j"
.c3b8					nt_loop:
>c3b8	04 05				        .byte 4, CO+IM
>c3ba	c4 c3 1e 94 8b 94		        .word nt_plus_loop, xt_loop, z_loop
>c3c0	6c 6f 6f 70			        .text "loop"
.c3c4					nt_plus_loop:
>c3c4	05 05				        .byte 5, CO+IM
>c3c6	d1 c3 25 94 8b 94		        .word nt_exit, xt_plus_loop, z_plus_loop
>c3cc	2b 6c 6f 6f 70			        .text "+loop"
.c3d1					nt_exit:
>c3d1	04 03				        .byte 4, AN+CO
>c3d3	dd c3 84 8f 85 8f		        .word nt_unloop, xt_exit, z_exit
>c3d9	65 78 69 74			        .text "exit"
.c3dd					nt_unloop:
>c3dd	06 03				        .byte 6, AN+CO
>c3df	eb c3 36 a6 3c a6		        .word nt_leave, xt_unloop, z_unloop
>c3e5	75 6e 6c 6f 6f 70		        .text "unloop"
.c3eb					nt_leave:
>c3eb	05 03				        .byte 5, AN+CO
>c3ed	f8 c3 5c 93 61 93		        .word nt_recurse, xt_leave, z_leave
>c3f3	6c 65 61 76 65			        .text "leave"
.c3f8					nt_recurse:
>c3f8	07 0d				        .byte 7, CO+IM+NN
>c3fa	07 c4 de 9a 1a 9b		        .word nt_quit, xt_recurse, z_recurse
>c400	72 65 63 75 72 73 65		        .text "recurse"
.c407					nt_quit:
>c407	04 00				        .byte 4, 0
>c409	13 c4 62 80 ad 80		        .word nt_begin, xt_quit, z_quit
>c40f	71 75 69 74			        .text "quit"
.c413					nt_begin:
>c413	05 07				        .byte 5, AN+CO+IM
>c415	20 c4 9c 83 9f 83		        .word nt_again, xt_begin, z_begin
>c41b	62 65 67 69 6e			        .text "begin"
.c420					nt_again:
>c420	05 17				        .byte 5, AN+CO+IM+UF
>c422	2d c4 73 82 93 82		        .word nt_state, xt_again, z_again
>c428	61 67 61 69 6e			        .text "again"
.c42d					nt_state:
>c42d	05 00				        .byte 5, 0
>c42f	3a c4 76 a1 80 a1		        .word nt_evaluate, xt_state, z_state
>c435	73 74 61 74 65			        .text "state"
.c43a					nt_evaluate:
>c43a	08 10				        .byte 8, UF
>c43c	4a c4 e1 90 34 91		        .word nt_base, xt_evaluate, z_evaluate
>c442	65 76 61 6c 75 61 74 65		        .text "evaluate"
.c44a					nt_base:
>c44a	04 00				        .byte 4, 0
>c44c	56 c4 93 83 9b 83		        .word nt_digit_question, xt_base, z_base
>c452	62 61 73 65			        .text "base"
.c456					nt_digit_question:
>c456	06 10				        .byte 6, UF
>c458	64 c4 11 8b 45 8b		        .word nt_number, xt_digit_question, z_digit_question
>c45e	64 69 67 69 74 3f		        .text "digit?"
.c464					nt_number:
>c464	06 10				        .byte 6, UF
>c466	72 c4 ad 96 a9 97		        .word nt_to_number, xt_number, z_number
>c46c	6e 75 6d 62 65 72		        .text "number"
.c472					nt_to_number:
>c472	07 10				        .byte 7, UF
>c474	81 c4 b1 a2 50 a3		        .word nt_hex, xt_to_number, z_to_number
>c47a	3e 6e 75 6d 62 65 72		        .text ">number"
.c481					nt_hex:
>c481	03 00				        .byte 3, 0
>c483	8c c4 89 91 8f 91		        .word nt_decimal, xt_hex, z_hex
>c489	68 65 78			        .text "hex"
.c48c					nt_decimal:
>c48c	07 00				        .byte 7, 0
>c48e	9b c4 b1 8a b7 8a		        .word nt_count, xt_decimal, z_decimal
>c494	64 65 63 69 6d 61 6c		        .text "decimal"
.c49b					nt_count:
>c49b	05 10				        .byte 5, UF
>c49d	a8 c4 5b 89 6e 89		        .word nt_m_star, xt_count, z_count
>c4a3	63 6f 75 6e 74			        .text "count"
.c4a8					nt_m_star:
>c4a8	02 10				        .byte 2, UF
>c4aa	b2 c4 b1 94 cb 94		        .word nt_um_star, xt_m_star, z_m_star
>c4b0	6d 2a				        .text "m*"
.c4b2					nt_um_star:
>c4b2	03 10				        .byte 3, UF
>c4b4	bd c4 f0 a5 35 a6		        .word nt_star, xt_um_star, z_um_star
>c4ba	75 6d 2a			        .text "um*"
.c4bd					nt_star:
>c4bd	01 10				        .byte 1, UF
>c4bf	c6 c4 54 a1 5c a1		        .word nt_um_slash_mod, xt_star, z_star
>c4c5	2a				        .text "*"
.c4c6					nt_um_slash_mod:
>c4c6	06 10				        .byte 6, UF
>c4c8	d4 c4 ae a5 ef a5		        .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
>c4ce	75 6d 2f 6d 6f 64		        .text "um/mod"
.c4d4					nt_sm_slash_rem:
>c4d4	06 10				        .byte 6, UF
>c4d6	e2 c4 c9 a0 f1 a0		        .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
>c4dc	73 6d 2f 72 65 6d		        .text "sm/rem"
.c4e2					nt_fm_slash_mod:
>c4e2	06 10				        .byte 6, UF
>c4e4	f0 c4 9d 90 d3 90		        .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
>c4ea	66 6d 2f 6d 6f 64		        .text "fm/mod"
.c4f0					nt_slash:
>c4f0	01 10				        .byte 1, UF
>c4f2	f9 c4 f0 9f 0c a0		        .word nt_slash_mod, xt_slash, z_slash
>c4f8	2f				        .text "/"
.c4f9					nt_slash_mod:
>c4f9	04 10				        .byte 4, UF
>c4fb	05 c5 f5 9f 0c a0		        .word nt_mod, xt_slash_mod, z_slash_mod
>c501	2f 6d 6f 64			        .text "/mod"
.c505					nt_mod:
>c505	03 10				        .byte 3, UF
>c507	10 c5 dc 95 e4 95		        .word nt_star_slash_mod, xt_mod, z_mod
>c50d	6d 6f 64			        .text "mod"
.c510					nt_star_slash_mod:
>c510	05 10				        .byte 5, UF
>c512	1d c5 66 a1 75 a1		        .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
>c518	2a 2f 6d 6f 64			        .text "*/mod"
.c51d					nt_star_slash:
>c51d	02 10				        .byte 2, UF
>c51f	27 c5 5d a1 65 a1		        .word nt_backslash, xt_star_slash, z_star_slash
>c525	2a 2f				        .text "*/"
.c527					nt_backslash:
>c527	01 04				        .byte 1, IM
>c529	30 c5 68 83 92 83		        .word nt_move, xt_backslash, z_backslash
>c52f	5c				        .byte $5c
.c530					nt_move:
>c530	04 18				        .byte 4, NN+UF
>c532	3c c5 e5 95 03 96		        .word nt_cmove_up, xt_move, z_move
>c538	6d 6f 76 65			        .text "move"
.c53c					nt_cmove_up:
>c53c	06 10				        .byte 6, UF
>c53e	4a c5 e0 86 1a 87		        .word nt_cmove, xt_cmove_up, z_cmove_up
>c544	63 6d 6f 76 65 3e		        .text "cmove>"
.c54a					nt_cmove:
>c54a	05 10				        .byte 5, UF
>c54c	57 c5 a5 86 df 86		        .word nt_pad, xt_cmove, z_cmove
>c552	63 6d 6f 76 65			        .text "cmove"
.c557					nt_pad:
>c557	03 00				        .byte 3, 0
>c559	62 c5 c4 98 d3 98		        .word nt_cleave, xt_pad, z_pad
>c55f	70 61 64			        .text "pad"
.c562					nt_cleave:
>c562	06 10				        .byte 6, UF
>c564	70 c5 58 86 a4 86		        .word nt_hexstore, xt_cleave, z_cleave
>c56a	63 6c 65 61 76 65		        .text "cleave"
.c570					nt_hexstore:
>c570	08 10				        .byte 8, UF
>c572	80 c5 90 91 e2 91		        .word nt_within, xt_hexstore, z_hexstore
>c578	68 65 78 73 74 6f 72 65		        .text "hexstore"
.c580					nt_within:
>c580	06 10				        .byte 6, UF
>c582	8e c5 99 a6 ae a6		        .word nt_to_in, xt_within, z_within
>c588	77 69 74 68 69 6e		        .text "within"
.c58e					nt_to_in:
>c58e	03 00				        .byte 3, 0
>c590	99 c5 a6 a2 b0 a2		        .word nt_less_number_sign, xt_to_in, z_to_in
>c596	3e 69 6e			        .text ">in"
.c599					nt_less_number_sign:
>c599	02 00				        .byte 2, 0
>c59b	a3 c5 66 93 73 93		        .word nt_number_sign, xt_less_number_sign, z_less_number_sign
>c5a1	3c 23				        .text "<#"
.c5a3					nt_number_sign:
>c5a3	01 10				        .byte 1, UF
>c5a5	ac c5 aa 97 de 97		        .word nt_number_sign_s, xt_number_sign, z_number_sign
>c5ab	23				        .text "#"
.c5ac					nt_number_sign_s:
>c5ac	02 10				        .byte 2, UF
>c5ae	b6 c5 01 98 11 98		        .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
>c5b4	23 73				        .text "#s"
.c5b6					nt_number_sign_greater:
>c5b6	02 10				        .byte 2, UF
>c5b8	c0 c5 df 97 00 98		        .word nt_hold, xt_number_sign_greater, z_number_sign_greater
>c5be	23 3e				        .text "#>"
.c5c0					nt_hold:
>c5c0	04 10				        .byte 4, UF
>c5c2	cc c5 e3 91 f4 91		        .word nt_sign, xt_hold, z_hold
>c5c8	68 6f 6c 64			        .text "hold"
.c5cc					nt_sign:
>c5cc	04 10				        .byte 4, UF
>c5ce	d8 c5 db 9f ef 9f		        .word nt_output, xt_sign, z_sign
>c5d4	73 69 67 6e			        .text "sign"
.c5d8					nt_output:
>c5d8	06 00				        .byte 6, 0
>c5da	e6 c5 ab 98 b5 98		        .word nt_input, xt_output, z_output
>c5e0	6f 75 74 70 75 74		        .text "output"
.c5e6					nt_input:
>c5e6	05 00				        .byte 5, 0
>c5e8	f3 c5 63 92 6d 92		        .word nt_cr, xt_input, z_input
>c5ee	69 6e 70 75 74			        .text "input"
.c5f3					nt_cr:
>c5f3	02 00				        .byte 2, 0
>c5f5	fd c5 6f 89 74 89		        .word nt_page, xt_cr, z_cr
>c5fb	63 72				        .text "cr"
.c5fd					nt_page:
>c5fd	04 00				        .byte 4, 0
>c5ff	09 c6 d4 98 f1 98		        .word nt_at_xy, xt_page, z_page
>c605	70 61 67 65			        .text "page"
.c609					nt_at_xy:
>c609	05 10				        .byte 5, UF
>c60b	16 c6 3a 83 67 83		        .word nt_marker, xt_at_xy, z_at_xy
>c611	61 74 2d 78 79			        .text "at-xy"
.c616					nt_marker:
>c616	06 04				        .byte 6, IM
>c618	24 c6 cc 94 09 95		        .word nt_words, xt_marker, z_marker
>c61e	6d 61 72 6b 65 72		        .text "marker"
.c624					nt_words:
>c624	05 00				        .byte 5, 0
>c626	31 c6 0c a7 68 a7		        .word nt_wordsize, xt_words, z_words
>c62c	77 6f 72 64 73			        .text "words"
.c631					nt_wordsize:
>c631	08 10				        .byte 8, UF
>c633	41 c6 69 a7 89 a7		        .word nt_aligned, xt_wordsize, z_wordsize
>c639	77 6f 72 64 73 69 7a 65		        .text "wordsize"
.c641					nt_aligned:
>c641	07 00				        .byte 7, 0
>c643	50 c6 94 82 94 82		        .word nt_align, xt_align, z_align
>c649	61 6c 69 67 6e 65 64		        .text "aligned"
.c650					nt_align:
>c650	05 00				        .byte 5, 0
>c652	5d c6 94 82 94 82		        .word nt_bell, xt_align, z_align
>c658	61 6c 69 67 6e			        .text "align"
.c65d					nt_bell:
>c65d	04 00				        .byte 4, 0
>c65f	69 c6 a0 83 a5 83		        .word nt_dump, xt_bell, z_bell
>c665	62 65 6c 6c			        .text "bell"
.c669					nt_dump:
>c669	04 10				        .byte 4, UF
>c66b	75 c6 40 8d a6 8d		        .word nt_dot_s, xt_dump, z_dump
>c671	64 75 6d 70			        .text "dump"
.c675					nt_dot_s:
>c675	02 00				        .byte 2, 0
>c677	7f c6 ac 8c ef 8c		        .word +, xt_dot_s, z_dot_s
>c67d	2e 73				        .text ".s"
.c67f					+
.c67f					nt_disasm:
>c67f	06 10				        .byte 6, UF
>c681	8d c6 46 8b 4c 8b		        .word +, xt_disasm, z_disasm
>c687	64 69 73 61 73 6d		        .text "disasm"
.c68d					+
.c68d					nt_compare:
>c68d	07 10				        .byte 7, UF
>c68f	9c c6 94 87 f8 87		        .word nt_search, xt_compare, z_compare
>c695	63 6f 6d 70 61 72 65		        .text "compare"
.c69c					nt_search:
>c69c	06 18				        .byte 6, UF+NN
>c69e	aa c6 dd 9e 7b 9f		        .word +, xt_search, z_search
>c6a4	73 65 61 72 63 68		        .text "search"
.c6aa					+
.c6aa					nt_environment_q:
>c6aa	0c 10				        .byte 12, UF
>c6ac	be c6 21 8e 9d 8e		        .word +, xt_environment_q, z_environment_q
>c6b2	65 6e 76 69 72 6f 6e 6d		        .text "environment?"
>c6ba	65 6e 74 3f
.c6be					+
.c6be					nt_find:
>c6be	04 10				        .byte 4, UF
>c6c0	ca c6 9f 8f e6 8f		        .word nt_word, xt_find, z_find
>c6c6	66 69 6e 64			        .text "find"
.c6ca					nt_word:
>c6ca	04 10				        .byte 4, UF
>c6cc	d6 c6 af a6 f4 a6		        .word nt_paren, xt_word, z_word
>c6d2	77 6f 72 64			        .text "word"
.c6d6					nt_paren:
>c6d6	01 04				        .byte 1, IM
>c6d8	df c6 f2 98 01 99		        .word nt_dot_paren, xt_paren, z_paren
>c6de	28				        .text "("
.c6df					nt_dot_paren:
>c6df	02 04				        .byte 2, IM
>c6e1	e9 c6 64 8c 72 8c		        .word nt_if, xt_dot_paren, z_dot_paren
>c6e7	2e 28				        .text ".("
.c6e9					nt_if:
>c6e9	02 0d				        .byte 2, IM+CO+NN
>c6eb	f3 c6 0f 92 1f 92		        .word nt_then, xt_if, z_if
>c6f1	69 66				        .text "if"
.c6f3					nt_then:
>c6f3	04 0d				        .byte 4, IM+CO+NN
>c6f5	ff c6 b6 a1 bf a1		        .word nt_else, xt_then, z_then
>c6fb	74 68 65 6e			        .text "then"
.c6ff					nt_else:
>c6ff	04 0d				        .byte 4, IM+CO+NN
>c701	0b c7 cd 8d e6 8d		        .word nt_repeat, xt_else, z_else
>c707	65 6c 73 65			        .text "else"
.c70b					nt_repeat:
>c70b	06 0d				        .byte 6, IM+CO+NN
>c70d	19 c7 5d 9b 69 9b		        .word nt_until, xt_repeat, z_repeat
>c713	72 65 70 65 61 74		        .text "repeat"
.c719					nt_until:
>c719	05 0d				        .byte 5, IM+CO+NN
>c71b	26 c7 3d a6 47 a6		        .word nt_while, xt_until, z_until
>c721	75 6e 74 69 6c			        .text "until"
.c726					nt_while:
>c726	05 0d				        .byte 5, IM+CO+NN
>c728	33 c7 85 a6 98 a6		        .word nt_case, xt_while, z_while
>c72e	77 68 69 6c 65			        .text "while"
.c733					nt_case:
>c733	04 0d				        .byte 4, IM+CO+NN
>c735	3f c7 9c a7 a2 a7		        .word nt_of, xt_case, z_case    ; shares code with ZERO
>c73b	63 61 73 65			        .text "case"
.c73f					nt_of:
>c73f	02 0d				        .byte 2, IM+CO+NN
>c741	49 c7 12 98 2a 98		        .word nt_endof, xt_of, z_of
>c747	6f 66				        .text "of"
.c749					nt_endof:
>c749	05 0d				        .byte 5, IM+CO+NN
>c74b	56 c7 cd 8d e6 8d		        .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
>c751	65 6e 64 6f 66			        .text "endof"
.c756					nt_endcase:
>c756	07 0d				        .byte 7, IM+CO+NN
>c758	65 c7 0c 8e 20 8e		        .word nt_defer_fetch, xt_endcase, z_endcase
>c75e	65 6e 64 63 61 73 65		        .text "endcase"
.c765					nt_defer_fetch:
>c765	06 00				        .byte 6, 0
>c767	73 c7 eb 8a f1 8a		        .word nt_defer_store, xt_defer_fetch, z_defer_fetch
>c76d	64 65 66 65 72 40		        .text "defer@"
.c773					nt_defer_store:
>c773	06 00				        .byte 6, 0
>c775	81 c7 f2 8a f8 8a		        .word nt_is, xt_defer_store, z_defer_store
>c77b	64 65 66 65 72 21		        .text "defer!"
.c781					nt_is:
>c781	02 04				        .byte 2, IM
>c783	8b c7 07 93 1f 93		        .word nt_action_of, xt_is, z_is
>c789	69 73				        .text "is"
.c78b					nt_action_of:
>c78b	09 04				        .byte 9, IM
>c78d	9c c7 5a 82 72 82		        .word nt_useraddr, xt_action_of, z_action_of
>c793	61 63 74 69 6f 6e 2d 6f		        .text "action-of"
>c79b	66
.c79c					nt_useraddr:
>c79c	08 00				        .byte 8, 0
>c79e	ac c7 61 a6 6b a6		        .word nt_buffer_colon, xt_useraddr, z_useraddr
>c7a4	75 73 65 72 61 64 64 72		        .text "useraddr"
.c7ac					nt_buffer_colon:
>c7ac	07 00				        .byte 7, 0
>c7ae	bb c7 f2 85 f8 85		        .word +, xt_buffer_colon, z_buffer_colon
>c7b4	62 75 66 66 65 72 3a		        .text "buffer:"
.c7bb					+
.c7bb					nt_buffstatus:
>c7bb	0a 00				        .byte 10, 0
>c7bd	cd c7 f9 85 08 86		        .word nt_buffblocknum, xt_buffstatus, z_buffstatus
>c7c3	62 75 66 66 73 74 61 74		        .text "buffstatus"
>c7cb	75 73
.c7cd					nt_buffblocknum:
>c7cd	0c 00				        .byte 12, 0
>c7cf	e1 c7 b1 85 c0 85		        .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
>c7d5	62 75 66 66 62 6c 6f 63		        .text "buffblocknum"
>c7dd	6b 6e 75 6d
.c7e1					nt_blkbuffer:
>c7e1	09 00				        .byte 9, 0
>c7e3	f2 c7 bf 83 cc 83		        .word nt_scr, xt_blkbuffer, z_blkbuffer
>c7e9	62 6c 6b 62 75 66 66 65		        .text "blkbuffer"
>c7f1	72
.c7f2					nt_scr:
>c7f2	03 00				        .byte 3, 0
>c7f4	fd c7 cd 9e dc 9e		        .word nt_blk, xt_scr, z_scr
>c7fa	73 63 72			        .text "scr"
.c7fd					nt_blk:
>c7fd	03 00				        .byte 3, 0
>c7ff	08 c8 af 83 be 83		        .word nt_block_write, xt_blk, z_blk
>c805	62 6c 6b			        .text "blk"
.c808					nt_block_write:
>c808	0b 08				        .byte 11, NN ; Deferred words need the HC (Code Field) flag.
>c80a	1b c8 6c 85 7a 85		        .word nt_block_write_vector, xt_block_write, z_block_write
>c810	62 6c 6f 63 6b 2d 77 72		        .text "block-write"
>c818	69 74 65
.c81b					nt_block_write_vector:
>c81b	12 08				        .byte 18, NN ; Deferred words need the HC (Code Field) flag.
>c81d	35 c8 7a 85 89 85		        .word nt_block_read, xt_block_write_vector, z_block_write_vector
>c823	62 6c 6f 63 6b 2d 77 72		        .text "block-write-vector"
>c82b	69 74 65 2d 76 65 63 74 6f 72
.c835					nt_block_read:
>c835	0a 28				        .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
>c837	47 c8 49 85 57 85		        .word nt_block_read_vector, xt_block_read, z_block_read
>c83d	62 6c 6f 63 6b 2d 72 65		        .text "block-read"
>c845	61 64
.c847					nt_block_read_vector:
>c847	11 28				        .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
>c849	60 c8 57 85 66 85		        .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
>c84f	62 6c 6f 63 6b 2d 72 65		        .text "block-read-vector"
>c857	61 64 2d 76 65 63 74 6f 72
.c860					nt_save_buffers:
>c860	0c 00				        .byte 12, 0
>c862	74 c8 b2 9e cc 9e		        .word nt_block, xt_save_buffers, z_save_buffers
>c868	73 61 76 65 2d 62 75 66		        .text "save-buffers"
>c870	66 65 72 73
.c874					nt_block:
>c874	05 00				        .byte 5, 0
>c876	81 c8 cd 83 1f 84		        .word nt_update, xt_block, z_block
>c87c	62 6c 6f 63 6b			        .text "block"
.c881					nt_update:
>c881	06 00				        .byte 6, 0
>c883	8f c8 58 a6 60 a6		        .word nt_buffer, xt_update, z_update
>c889	75 70 64 61 74 65		        .text "update"
.c88f					nt_buffer:
>c88f	06 00				        .byte 6, 0
>c891	9d c8 c1 85 f1 85		        .word nt_empty_buffers, xt_buffer, z_buffer
>c897	62 75 66 66 65 72		        .text "buffer"
.c89d					nt_empty_buffers:
>c89d	0d 00				        .byte 13, 0
>c89f	b2 c8 05 8e 0b 8e		        .word nt_flush, xt_empty_buffers, z_empty_buffers
>c8a5	65 6d 70 74 79 2d 62 75		        .text "empty-buffers"
>c8ad	66 66 65 72 73
.c8b2					nt_flush:
>c8b2	05 00				        .byte 5, 0
>c8b4	bf c8 93 90 9c 90		        .word nt_load, xt_flush, z_flush
>c8ba	66 6c 75 73 68			        .text "flush"
.c8bf					nt_load:
>c8bf	04 10				        .byte 4, UF
>c8c1	cb c8 da 93 1d 94		        .word nt_thru, xt_load, z_load
>c8c7	6c 6f 61 64			        .text "load"
.c8cb					nt_thru:
>c8cb	04 10				        .byte 4, UF
>c8cd	d7 c8 c0 a1 04 a2		        .word nt_list, xt_thru, z_thru
>c8d3	74 68 72 75			        .text "thru"
.c8d7					nt_list:
>c8d7	04 10				        .byte 4, UF
>c8d9	e3 c8 89 93 95 93		        .word +, xt_list, z_list
>c8df	6c 69 73 74			        .text "list"
.c8e3					+
.c8e3					nt_block_ramdrive_init:
>c8e3	13 10				        .byte 19, UF
>c8e5	fe c8 20 84 48 85		        .word +, xt_block_ramdrive_init, z_block_ramdrive_init
>c8eb	62 6c 6f 63 6b 2d 72 61		        .text "block-ramdrive-init"
>c8f3	6d 64 72 69 76 65 2d 69 6e 69 74
.c8fe					+
.c8fe					nt_definitions:
>c8fe	0b 00				        .byte 11, 0
>c900	11 c9 f9 8a 01 8b		        .word nt_wordlist, xt_definitions, z_definitions
>c906	64 65 66 69 6e 69 74 69		        .text "definitions"
>c90e	6f 6e 73
.c911					nt_wordlist:
>c911	08 00				        .byte 8, 0
>c913	21 c9 f5 a6 0b a7		        .word nt_search_wordlist, xt_wordlist, z_wordlist
>c919	77 6f 72 64 6c 69 73 74		        .text "wordlist"
.c921					nt_search_wordlist:
>c921	0f 10				        .byte 15, UF
>c923	38 c9 c3 9b a3 9c		        .word nt_set_current, xt_search_wordlist, z_search_wordlist
>c929	73 65 61 72 63 68 2d 77		        .text "search-wordlist"
>c931	6f 72 64 6c 69 73 74
.c938					nt_set_current:
>c938	0b 10				        .byte 11, UF
>c93a	4b c9 32 9d 3d 9d		        .word nt_get_current, xt_set_current, z_set_current
>c940	73 65 74 2d 63 75 72 72		        .text "set-current"
>c948	65 6e 74
.c94b					nt_get_current:
>c94b	0b 00				        .byte 11, 0
>c94d	5e c9 35 91 3f 91		        .word nt_set_order, xt_get_current, z_get_current
>c953	67 65 74 2d 63 75 72 72		        .text "get-current"
>c95b	65 6e 74
.c95e					nt_set_order:
>c95e	09 00				        .byte 9, 0
>c960	6f c9 3e 9d 71 9d		        .word nt_get_order, xt_set_order, z_set_order
>c966	73 65 74 2d 6f 72 64 65		        .text "set-order"
>c96e	72
.c96f					nt_get_order:
>c96f	09 00				        .byte 9, 0
>c971	80 c9 40 91 68 91		        .word nt_root_wordlist, xt_get_order, z_get_order
>c977	67 65 74 2d 6f 72 64 65		        .text "get-order"
>c97f	72
.c980					nt_root_wordlist:
>c980	0d 00				        .byte 13, 0
>c982	95 c9 71 9b 79 9b		        .word +, xt_root_wordlist, z_root_wordlist
>c988	72 6f 6f 74 2d 77 6f 72		        .text "root-wordlist"
>c990	64 6c 69 73 74
.c995					+
.c995					nt_assembler_wordlist:
>c995	12 00				        .byte 18, 0
>c997	af c9 9b a3 a3 a3		        .word +, xt_assembler_wordlist, z_assembler_wordlist
>c99d	61 73 73 65 6d 62 6c 65		        .text "assembler-wordlist"
>c9a5	72 2d 77 6f 72 64 6c 69 73 74
.c9af					+
.c9af					nt_editor_wordlist:
>c9af	0f 00				        .byte 15, 0
>c9b1	c6 c9 2b 98 33 98		        .word +, xt_editor_wordlist, z_editor_wordlist
>c9b7	65 64 69 74 6f 72 2d 77		        .text "editor-wordlist"
>c9bf	6f 72 64 6c 69 73 74
.c9c6					+
.c9c6					nt_forth_wordlist:
>c9c6	0e 00				        .byte 14, 0
>c9c8	dc c9 9c a7 a2 a7		        .word nt_only, xt_forth_wordlist, z_forth_wordlist
>c9ce	66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>c9d6	72 64 6c 69 73 74
.c9dc					nt_only:
>c9dc	04 00				        .byte 4, 0
>c9de	e8 c9 4a 98 55 98		        .word nt_also, xt_only, z_only
>c9e4	6f 6e 6c 79			        .text "only"
.c9e8					nt_also:
>c9e8	04 00				        .byte 4, 0
>c9ea	f4 c9 0a 83 19 83		        .word nt_previous, xt_also, z_also
>c9f0	61 6c 73 6f			        .text "also"
.c9f4					nt_previous:
>c9f4	08 00				        .byte 8, 0
>c9f6	04 ca 78 9a 84 9a		        .word nt_to_order, xt_previous, z_previous
>c9fc	70 72 65 76 69 6f 75 73		        .text "previous"
.ca04					nt_to_order:
>ca04	06 00				        .byte 6, 0
>ca06	12 ca 51 a3 63 a3		        .word nt_order, xt_to_order, z_to_order
>ca0c	3e 6f 72 64 65 72		        .text ">order"
.ca12					nt_order:
>ca12	05 00				        .byte 5, 0
>ca14	1f ca 68 98 92 98		        .word nt_forth, xt_order, z_order
>ca1a	6f 72 64 65 72			        .text "order"
.ca1f					nt_forth:
>ca1f	05 00				        .byte 5, 0
>ca21	2c ca d4 90 da 90		        .word +, xt_forth, z_forth
>ca27	66 6f 72 74 68			        .text "forth"
.ca2c					+
>ca2c	03 08				nt_see: .byte 3, NN
>ca2e	37 ca a4 9c 31 9d		        .word +, xt_see, z_see
>ca34	73 65 65			        .text "see"
.ca37					+
.ca37					nt_ed:
>ca37	02 08				        .byte 2, NN
>ca39	41 ca c9 8d cc 8d		        .word +, xt_ed, z_ed
>ca3f	65 64				        .text "ed"
.ca41					+
.ca41					nt_cold:
>ca41	04 00				        .byte 4, 0
>ca43	4d ca 00 80 ad 80		        .word nt_bye, xt_cold, z_cold
>ca49	63 6f 6c 64			        .text "cold"
.ca4d					nt_bye:
>ca4d	03				        .byte 3         ; length of word strings
>ca4e	00				        .byte 0         ; status byte
>ca4f	00 00				        .word 0000      ; next word in Dictionary, 0000 signals end
>ca51	09 86				        .word xt_bye    ; start of code block (xt of this word)
>ca53	0c 86				        .word z_bye     ; end of code (RTS)
>ca55	62 79 65			        .text "bye"     ; word name, always lower case, not zero-terminated
.ca58					root_dictionary_start:
.ca58					nt_root_set_order:
>ca58	09 00				        .byte 9, 0
>ca5a	69 ca 3e 9d 71 9d		        .word nt_root_forth, xt_set_order, z_set_order
>ca60	73 65 74 2d 6f 72 64 65		        .text "set-order"
>ca68	72
.ca69					nt_root_forth:
>ca69	05 00				        .byte 5, 0
>ca6b	76 ca d4 90 da 90		        .word nt_root_forth_wordlist, xt_forth, z_forth
>ca71	66 6f 72 74 68			        .text "forth"
.ca76					nt_root_forth_wordlist:
>ca76	0e 00				        .byte 14, 0
>ca78	8c ca 9c a7 a2 a7		        .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
>ca7e	66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>ca86	72 64 6c 69 73 74
.ca8c					nt_root_words:
>ca8c	05 00				        .byte 5, 0
>ca8e	00 00 0c a7 68 a7		        .word 0000, xt_words, z_words
>ca94	77 6f 72 64 73			        .text "words"
.ca99					editor_dictionary_start:
.ca99					nt_editor_o:
>ca99	01 00				        .byte 1, 0
>ca9b	a2 ca cf a8 14 a9		        .word nt_editor_line, xt_editor_o, z_editor_o
>caa1	6f				        .text "o"
.caa2					nt_editor_line:
>caa2	04 10				        .byte 4, UF
>caa4	ae ca b6 a8 ce a8		        .word nt_editor_l, xt_editor_line, z_editor_line
>caaa	6c 69 6e 65			        .text "line"
.caae					nt_editor_l:
>caae	01 00				        .byte 1, 0
>cab0	b7 ca 3a a8 b5 a8		        .word nt_editor_el, xt_editor_l, z_editor_l
>cab6	6c				        .text "l"
.cab7					nt_editor_el:
>cab7	02 00				        .byte 2, 0
>cab9	c1 ca 28 a8 39 a8		        .word nt_editor_erase_screen, xt_editor_el, z_editor_el
>cabf	65 6c				        .text "el"
.cac1					nt_editor_erase_screen:
>cac1	0c 00				        .byte 12, 0
>cac3	d5 ca 16 a8 27 a8		        .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
>cac9	65 72 61 73 65 2d 73 63		        .text "erase-screen"
>cad1	72 65 65 6e
.cad5					nt_editor_enter_screen:
>cad5	0c 00				        .byte 12, 0
>cad7	00 00 fa a7 15 a8		        .word 0000, xt_editor_enter_screen, z_editor_enter_screen
>cadd	65 6e 74 65 72 2d 73 63		        .text "enter-screen"
>cae5	72 65 65 6e
.cae9					assembler_dictionary_start:
.cae9					nt_asm_adc_h:
>cae9	05 0c						.byte 5, IM+NN
>caeb	f6 ca				                .word nt_asm_adc_x
>caed	15 a9 1a a9					.word xt_asm_adc_h, z_asm_adc_h
>caf1	61 64 63 2e 23					.text "adc.#"
.caf6					nt_asm_adc_x:
>caf6	05 0c						.byte 5, IM+NN
>caf8	03 cb				                .word nt_asm_adc_y
>cafa	1a a9 1f a9					.word xt_asm_adc_x, z_asm_adc_x
>cafe	61 64 63 2e 78					.text "adc.x"
.cb03					nt_asm_adc_y:
>cb03	05 0c						.byte 5, IM+NN
>cb05	10 cb				                .word nt_asm_adc_z
>cb07	1f a9 24 a9					.word xt_asm_adc_y, z_asm_adc_y
>cb0b	61 64 63 2e 79					.text "adc.y"
.cb10					nt_asm_adc_z:
>cb10	05 0c						.byte 5, IM+NN
>cb12	1d cb				                .word nt_asm_adc_zi
>cb14	24 a9 29 a9					.word xt_asm_adc_z, z_asm_adc_z
>cb18	61 64 63 2e 7a					.text "adc.z"
.cb1d					nt_asm_adc_zi:
>cb1d	06 0c						.byte 6, IM+NN
>cb1f	2b cb				                .word nt_asm_adc_ziy
>cb21	29 a9 2e a9					.word xt_asm_adc_zi, z_asm_adc_zi
>cb25	61 64 63 2e 7a 69				.text "adc.zi"
.cb2b					nt_asm_adc_ziy:
>cb2b	07 0c						.byte 7, IM+NN
>cb2d	3a cb				                .word nt_asm_adc_zx
>cb2f	2e a9 33 a9					.word xt_asm_adc_ziy, z_asm_adc_ziy
>cb33	61 64 63 2e 7a 69 79				.text "adc.ziy"
.cb3a					nt_asm_adc_zx:
>cb3a	06 0c						.byte 6, IM+NN
>cb3c	48 cb				                .word nt_asm_adc_zxi
>cb3e	33 a9 38 a9					.word xt_asm_adc_zx, z_asm_adc_zx
>cb42	61 64 63 2e 7a 78				.text "adc.zx"
.cb48					nt_asm_adc_zxi:
>cb48	07 0c						.byte 7, IM+NN
>cb4a	57 cb				                .word nt_asm_and
>cb4c	38 a9 3d a9					.word xt_asm_adc_zxi, z_asm_adc_zxi
>cb50	61 64 63 2e 7a 78 69				.text "adc.zxi"
.cb57					nt_asm_and:
>cb57	04 0c						.byte 4, IM+NN
>cb59	63 cb				                .word nt_asm_and_h
>cb5b	3d a9 42 a9					.word xt_asm_and, z_asm_and
>cb5f	61 6e 64 2e					.text "and."
.cb63					nt_asm_and_h:
>cb63	05 0c						.byte 5, IM+NN
>cb65	70 cb				                .word nt_asm_and_x
>cb67	42 a9 47 a9					.word xt_asm_and_h, z_asm_and_h
>cb6b	61 6e 64 2e 23					.text "and.#"
.cb70					nt_asm_and_x:
>cb70	05 0c						.byte 5, IM+NN
>cb72	7d cb				                .word nt_asm_and_y
>cb74	47 a9 4c a9					.word xt_asm_and_x, z_asm_and_x
>cb78	61 6e 64 2e 78					.text "and.x"
.cb7d					nt_asm_and_y:
>cb7d	05 0c						.byte 5, IM+NN
>cb7f	8a cb				                .word nt_asm_and_z
>cb81	4c a9 51 a9					.word xt_asm_and_y, z_asm_and_y
>cb85	61 6e 64 2e 79					.text "and.y"
.cb8a					nt_asm_and_z:
>cb8a	05 0c						.byte 5, IM+NN
>cb8c	97 cb				                .word nt_asm_and_zi
>cb8e	51 a9 56 a9					.word xt_asm_and_z, z_asm_and_z
>cb92	61 6e 64 2e 7a					.text "and.z"
.cb97					nt_asm_and_zi:
>cb97	06 0c						.byte 6, IM+NN
>cb99	a5 cb				                .word nt_asm_and_ziy
>cb9b	56 a9 5b a9					.word xt_asm_and_zi, z_asm_and_zi
>cb9f	61 6e 64 2e 7a 69				.text "and.zi"
.cba5					nt_asm_and_ziy:
>cba5	07 0c						.byte 7, IM+NN
>cba7	b4 cb				                .word nt_asm_and_zx
>cba9	5b a9 60 a9					.word xt_asm_and_ziy, z_asm_and_ziy
>cbad	61 6e 64 2e 7a 69 79				.text "and.ziy"
.cbb4					nt_asm_and_zx:
>cbb4	06 0c						.byte 6, IM+NN
>cbb6	c2 cb				                .word nt_asm_and_zxi
>cbb8	60 a9 65 a9					.word xt_asm_and_zx, z_asm_and_zx
>cbbc	61 6e 64 2e 7a 78				.text "and.zx"
.cbc2					nt_asm_and_zxi:
>cbc2	07 0c						.byte 7, IM+NN
>cbc4	d1 cb				                .word nt_asm_asl
>cbc6	65 a9 6a a9					.word xt_asm_and_zxi, z_asm_and_zxi
>cbca	61 6e 64 2e 7a 78 69				.text "and.zxi"
.cbd1					nt_asm_asl:
>cbd1	03 0c						.byte 3, IM+NN
>cbd3	dc cb				                .word nt_asm_asl_a
>cbd5	6a a9 6f a9					.word xt_asm_asl, z_asm_asl
>cbd9	61 73 6c					.text "asl"
.cbdc					nt_asm_asl_a:
>cbdc	05 0c						.byte 5, IM+NN
>cbde	e9 cb				                .word nt_asm_asl_x
>cbe0	6f a9 74 a9					.word xt_asm_asl_a, z_asm_asl_a
>cbe4	61 73 6c 2e 61					.text "asl.a"
.cbe9					nt_asm_asl_x:
>cbe9	05 0c						.byte 5, IM+NN
>cbeb	f6 cb				                .word nt_asm_asl_z
>cbed	74 a9 79 a9					.word xt_asm_asl_x, z_asm_asl_x
>cbf1	61 73 6c 2e 78					.text "asl.x"
.cbf6					nt_asm_asl_z:
>cbf6	05 0c						.byte 5, IM+NN
>cbf8	03 cc				                .word nt_asm_asl_zx
>cbfa	79 a9 7e a9					.word xt_asm_asl_z, z_asm_asl_z
>cbfe	61 73 6c 2e 7a					.text "asl.z"
.cc03					nt_asm_asl_zx:
>cc03	06 0c						.byte 6, IM+NN
>cc05	11 cc				                .word nt_asm_bcc
>cc07	7e a9 83 a9					.word xt_asm_asl_zx, z_asm_asl_zx
>cc0b	61 73 6c 2e 7a 78				.text "asl.zx"
.cc11					nt_asm_bcc:
>cc11	03 0c						.byte 3, IM+NN
>cc13	1c cc				                .word nt_asm_bcs
>cc15	83 a9 88 a9					.word xt_asm_bcc, z_asm_bcc
>cc19	62 63 63					.text "bcc"
.cc1c					nt_asm_bcs:
>cc1c	03 0c						.byte 3, IM+NN
>cc1e	27 cc				                .word nt_asm_beq
>cc20	88 a9 8f a9					.word xt_asm_bcs, z_asm_bcs
>cc24	62 63 73					.text "bcs"
.cc27					nt_asm_beq:
>cc27	03 0c						.byte 3, IM+NN
>cc29	32 cc				                .word nt_asm_bit
>cc2b	8f a9 94 a9					.word xt_asm_beq, z_asm_beq
>cc2f	62 65 71					.text "beq"
.cc32					nt_asm_bit:
>cc32	03 0c						.byte 3, IM+NN
>cc34	3d cc				                .word nt_asm_bit_h
>cc36	94 a9 99 a9					.word xt_asm_bit, z_asm_bit
>cc3a	62 69 74					.text "bit"
.cc3d					nt_asm_bit_h:
>cc3d	05 0c						.byte 5, IM+NN
>cc3f	4a cc				                .word nt_asm_bit_x
>cc41	99 a9 9e a9					.word xt_asm_bit_h, z_asm_bit_h
>cc45	62 69 74 2e 23					.text "bit.#"
.cc4a					nt_asm_bit_x:
>cc4a	05 0c						.byte 5, IM+NN
>cc4c	57 cc				                .word nt_asm_bit_z
>cc4e	9e a9 a3 a9					.word xt_asm_bit_x, z_asm_bit_x
>cc52	62 69 74 2e 78					.text "bit.x"
.cc57					nt_asm_bit_z:
>cc57	05 0c						.byte 5, IM+NN
>cc59	64 cc				                .word nt_asm_bit_zx
>cc5b	a3 a9 a8 a9					.word xt_asm_bit_z, z_asm_bit_z
>cc5f	62 69 74 2e 7a					.text "bit.z"
.cc64					nt_asm_bit_zx:
>cc64	06 0c						.byte 6, IM+NN
>cc66	72 cc				                .word nt_asm_bmi
>cc68	a8 a9 ad a9					.word xt_asm_bit_zx, z_asm_bit_zx
>cc6c	62 69 74 2e 7a 78				.text "bit.zx"
.cc72					nt_asm_bmi:
>cc72	03 0c						.byte 3, IM+NN
>cc74	7d cc				                .word nt_asm_bne
>cc76	ad a9 b2 a9					.word xt_asm_bmi, z_asm_bmi
>cc7a	62 6d 69					.text "bmi"
.cc7d					nt_asm_bne:
>cc7d	03 0c						.byte 3, IM+NN
>cc7f	88 cc				                .word nt_asm_bpl
>cc81	b2 a9 b7 a9					.word xt_asm_bne, z_asm_bne
>cc85	62 6e 65					.text "bne"
.cc88					nt_asm_bpl:
>cc88	03 0c						.byte 3, IM+NN
>cc8a	93 cc				                .word nt_asm_bra
>cc8c	b7 a9 bc a9					.word xt_asm_bpl, z_asm_bpl
>cc90	62 70 6c					.text "bpl"
.cc93					nt_asm_bra:
>cc93	03 0c						.byte 3, IM+NN
>cc95	9e cc				                .word nt_asm_brk
>cc97	bc a9 c1 a9					.word xt_asm_bra, z_asm_bra
>cc9b	62 72 61					.text "bra"
.cc9e					nt_asm_brk:
>cc9e	03 0c						.byte 3, IM+NN
>cca0	a9 cc				                .word nt_asm_bvc
>cca2	c1 a9 c6 a9					.word xt_asm_brk, z_asm_brk
>cca6	62 72 6b					.text "brk"
.cca9					nt_asm_bvc:
>cca9	03 0c						.byte 3, IM+NN
>ccab	b4 cc				                .word nt_asm_bvs
>ccad	c6 a9 cb a9					.word xt_asm_bvc, z_asm_bvc
>ccb1	62 76 63					.text "bvc"
.ccb4					nt_asm_bvs:
>ccb4	03 0c						.byte 3, IM+NN
>ccb6	bf cc				                .word nt_asm_clc
>ccb8	cb a9 d0 a9					.word xt_asm_bvs, z_asm_bvs
>ccbc	62 76 73					.text "bvs"
.ccbf					nt_asm_clc:
>ccbf	03 0c						.byte 3, IM+NN
>ccc1	ca cc				                .word nt_asm_cld
>ccc3	d0 a9 d5 a9					.word xt_asm_clc, z_asm_clc
>ccc7	63 6c 63					.text "clc"
.ccca					nt_asm_cld:
>ccca	03 0c						.byte 3, IM+NN
>cccc	d5 cc				                .word nt_asm_cli
>ccce	d5 a9 da a9					.word xt_asm_cld, z_asm_cld
>ccd2	63 6c 64					.text "cld"
.ccd5					nt_asm_cli:
>ccd5	03 0c						.byte 3, IM+NN
>ccd7	e0 cc				                .word nt_asm_clv
>ccd9	da a9 df a9					.word xt_asm_cli, z_asm_cli
>ccdd	63 6c 69					.text "cli"
.cce0					nt_asm_clv:
>cce0	03 0c						.byte 3, IM+NN
>cce2	eb cc				                .word nt_asm_cmp
>cce4	df a9 e4 a9					.word xt_asm_clv, z_asm_clv
>cce8	63 6c 76					.text "clv"
.cceb					nt_asm_cmp:
>cceb	03 0c						.byte 3, IM+NN
>cced	f6 cc				                .word nt_asm_cmp_h
>ccef	e4 a9 e9 a9					.word xt_asm_cmp, z_asm_cmp
>ccf3	63 6d 70					.text "cmp"
.ccf6					nt_asm_cmp_h:
>ccf6	05 0c						.byte 5, IM+NN
>ccf8	03 cd				                .word nt_asm_cmp_x
>ccfa	e9 a9 ee a9					.word xt_asm_cmp_h, z_asm_cmp_h
>ccfe	63 6d 70 2e 23					.text "cmp.#"
.cd03					nt_asm_cmp_x:
>cd03	05 0c						.byte 5, IM+NN
>cd05	10 cd				                .word nt_asm_cmp_y
>cd07	ee a9 f3 a9					.word xt_asm_cmp_x, z_asm_cmp_x
>cd0b	63 6d 70 2e 78					.text "cmp.x"
.cd10					nt_asm_cmp_y:
>cd10	05 0c						.byte 5, IM+NN
>cd12	1d cd				                .word nt_asm_cmp_z
>cd14	f3 a9 f8 a9					.word xt_asm_cmp_y, z_asm_cmp_y
>cd18	63 6d 70 2e 79					.text "cmp.y"
.cd1d					nt_asm_cmp_z:
>cd1d	05 0c						.byte 5, IM+NN
>cd1f	2a cd				                .word nt_asm_cmp_zi
>cd21	f8 a9 fd a9					.word xt_asm_cmp_z, z_asm_cmp_z
>cd25	63 6d 70 2e 7a					.text "cmp.z"
.cd2a					nt_asm_cmp_zi:
>cd2a	06 0c						.byte 6, IM+NN
>cd2c	38 cd				                .word nt_asm_cmp_ziy
>cd2e	fd a9 02 aa					.word xt_asm_cmp_zi, z_asm_cmp_zi
>cd32	63 6d 70 2e 7a 69				.text "cmp.zi"
.cd38					nt_asm_cmp_ziy:
>cd38	07 0c						.byte 7, IM+NN
>cd3a	47 cd				                .word nt_asm_cmp_zx
>cd3c	02 aa 07 aa					.word xt_asm_cmp_ziy, z_asm_cmp_ziy
>cd40	63 6d 70 2e 7a 69 79				.text "cmp.ziy"
.cd47					nt_asm_cmp_zx:
>cd47	06 0c						.byte 6, IM+NN
>cd49	55 cd				                .word nt_asm_cmp_zxi
>cd4b	07 aa 0c aa					.word xt_asm_cmp_zx, z_asm_cmp_zx
>cd4f	63 6d 70 2e 7a 78				.text "cmp.zx"
.cd55					nt_asm_cmp_zxi:
>cd55	07 0c						.byte 7, IM+NN
>cd57	64 cd				                .word nt_asm_cpx
>cd59	0c aa 11 aa					.word xt_asm_cmp_zxi, z_asm_cmp_zxi
>cd5d	63 6d 70 2e 7a 78 69				.text "cmp.zxi"
.cd64					nt_asm_cpx:
>cd64	03 0c						.byte 3, IM+NN
>cd66	6f cd				                .word nt_asm_cpx_h
>cd68	11 aa 16 aa					.word xt_asm_cpx, z_asm_cpx
>cd6c	63 70 78					.text "cpx"
.cd6f					nt_asm_cpx_h:
>cd6f	05 0c						.byte 5, IM+NN
>cd71	7c cd				                .word nt_asm_cpx_z
>cd73	16 aa 1b aa					.word xt_asm_cpx_h, z_asm_cpx_h
>cd77	63 70 78 2e 23					.text "cpx.#"
.cd7c					nt_asm_cpx_z:
>cd7c	05 0c						.byte 5, IM+NN
>cd7e	89 cd				                .word nt_asm_cpy
>cd80	1b aa 20 aa					.word xt_asm_cpx_z, z_asm_cpx_z
>cd84	63 70 78 2e 7a					.text "cpx.z"
.cd89					nt_asm_cpy:
>cd89	03 0c						.byte 3, IM+NN
>cd8b	94 cd				                .word nt_asm_cpy_h
>cd8d	20 aa 27 aa					.word xt_asm_cpy, z_asm_cpy
>cd91	63 70 79					.text "cpy"
.cd94					nt_asm_cpy_h:
>cd94	05 0c						.byte 5, IM+NN
>cd96	a1 cd				                .word nt_asm_cpy_z
>cd98	27 aa 2c aa					.word xt_asm_cpy_h, z_asm_cpy_h
>cd9c	63 70 79 2e 23					.text "cpy.#"
.cda1					nt_asm_cpy_z:
>cda1	05 0c						.byte 5, IM+NN
>cda3	ae cd				                .word nt_asm_dec
>cda5	2c aa 31 aa					.word xt_asm_cpy_z, z_asm_cpy_z
>cda9	63 70 79 2e 7a					.text "cpy.z"
.cdae					nt_asm_dec:
>cdae	03 0c						.byte 3, IM+NN
>cdb0	b9 cd				                .word nt_asm_dec_a
>cdb2	31 aa 36 aa					.word xt_asm_dec, z_asm_dec
>cdb6	64 65 63					.text "dec"
.cdb9					nt_asm_dec_a:
>cdb9	05 0c						.byte 5, IM+NN
>cdbb	c6 cd				                .word nt_asm_dec_x
>cdbd	36 aa 3b aa					.word xt_asm_dec_a, z_asm_dec_a
>cdc1	64 65 63 2e 61					.text "dec.a"
.cdc6					nt_asm_dec_x:
>cdc6	05 0c						.byte 5, IM+NN
>cdc8	d3 cd				                .word nt_asm_dec_z
>cdca	3b aa 40 aa					.word xt_asm_dec_x, z_asm_dec_x
>cdce	64 65 63 2e 78					.text "dec.x"
.cdd3					nt_asm_dec_z:
>cdd3	05 0c						.byte 5, IM+NN
>cdd5	e0 cd				                .word nt_asm_dec_zx
>cdd7	40 aa 45 aa					.word xt_asm_dec_z, z_asm_dec_z
>cddb	64 65 63 2e 7a					.text "dec.z"
.cde0					nt_asm_dec_zx:
>cde0	06 0c						.byte 6, IM+NN
>cde2	ee cd				                .word nt_asm_dex
>cde4	45 aa 4a aa					.word xt_asm_dec_zx, z_asm_dec_zx
>cde8	64 65 63 2e 7a 78				.text "dec.zx"
.cdee					nt_asm_dex:
>cdee	03 0c						.byte 3, IM+NN
>cdf0	f9 cd				                .word nt_asm_dey
>cdf2	4a aa 4f aa					.word xt_asm_dex, z_asm_dex
>cdf6	64 65 78					.text "dex"
.cdf9					nt_asm_dey:
>cdf9	03 0c						.byte 3, IM+NN
>cdfb	04 ce				                .word nt_asm_eor
>cdfd	4f aa 54 aa					.word xt_asm_dey, z_asm_dey
>ce01	64 65 79					.text "dey"
.ce04					nt_asm_eor:
>ce04	03 0c						.byte 3, IM+NN
>ce06	0f ce				                .word nt_asm_eor_h
>ce08	54 aa 59 aa					.word xt_asm_eor, z_asm_eor
>ce0c	65 6f 72					.text "eor"
.ce0f					nt_asm_eor_h:
>ce0f	05 0c						.byte 5, IM+NN
>ce11	1c ce				                .word nt_asm_eor_x
>ce13	59 aa 5e aa					.word xt_asm_eor_h, z_asm_eor_h
>ce17	65 6f 72 2e 23					.text "eor.#"
.ce1c					nt_asm_eor_x:
>ce1c	05 0c						.byte 5, IM+NN
>ce1e	29 ce				                .word nt_asm_eor_y
>ce20	5e aa 63 aa					.word xt_asm_eor_x, z_asm_eor_x
>ce24	65 6f 72 2e 78					.text "eor.x"
.ce29					nt_asm_eor_y:
>ce29	05 0c						.byte 5, IM+NN
>ce2b	36 ce				                .word nt_asm_eor_z
>ce2d	63 aa 68 aa					.word xt_asm_eor_y, z_asm_eor_y
>ce31	65 6f 72 2e 79					.text "eor.y"
.ce36					nt_asm_eor_z:
>ce36	05 0c						.byte 5, IM+NN
>ce38	43 ce				                .word nt_asm_eor_zi
>ce3a	68 aa 6d aa					.word xt_asm_eor_z, z_asm_eor_z
>ce3e	65 6f 72 2e 7a					.text "eor.z"
.ce43					nt_asm_eor_zi:
>ce43	06 0c						.byte 6, IM+NN
>ce45	51 ce				                .word nt_asm_eor_ziy
>ce47	6d aa 72 aa					.word xt_asm_eor_zi, z_asm_eor_zi
>ce4b	65 6f 72 2e 7a 69				.text "eor.zi"
.ce51					nt_asm_eor_ziy:
>ce51	07 0c						.byte 7, IM+NN
>ce53	60 ce				                .word nt_asm_eor_zx
>ce55	72 aa 77 aa					.word xt_asm_eor_ziy, z_asm_eor_ziy
>ce59	65 6f 72 2e 7a 69 79				.text "eor.ziy"
.ce60					nt_asm_eor_zx:
>ce60	06 0c						.byte 6, IM+NN
>ce62	6e ce				                .word nt_asm_eor_zxi
>ce64	77 aa 7c aa					.word xt_asm_eor_zx, z_asm_eor_zx
>ce68	65 6f 72 2e 7a 78				.text "eor.zx"
.ce6e					nt_asm_eor_zxi:
>ce6e	07 0c						.byte 7, IM+NN
>ce70	7d ce				                .word nt_asm_inc
>ce72	7c aa 81 aa					.word xt_asm_eor_zxi, z_asm_eor_zxi
>ce76	65 6f 72 2e 7a 78 69				.text "eor.zxi"
.ce7d					nt_asm_inc:
>ce7d	03 0c						.byte 3, IM+NN
>ce7f	88 ce				                .word nt_asm_inc_a
>ce81	81 aa 86 aa					.word xt_asm_inc, z_asm_inc
>ce85	69 6e 63					.text "inc"
.ce88					nt_asm_inc_a:
>ce88	05 0c						.byte 5, IM+NN
>ce8a	95 ce				                .word nt_asm_inc_x
>ce8c	86 aa 8b aa					.word xt_asm_inc_a, z_asm_inc_a
>ce90	69 6e 63 2e 61					.text "inc.a"
.ce95					nt_asm_inc_x:
>ce95	05 0c						.byte 5, IM+NN
>ce97	a2 ce				                .word nt_asm_inc_z
>ce99	8b aa 90 aa					.word xt_asm_inc_x, z_asm_inc_x
>ce9d	69 6e 63 2e 78					.text "inc.x"
.cea2					nt_asm_inc_z:
>cea2	05 0c						.byte 5, IM+NN
>cea4	af ce				                .word nt_asm_inc_zx
>cea6	90 aa 95 aa					.word xt_asm_inc_z, z_asm_inc_z
>ceaa	69 6e 63 2e 7a					.text "inc.z"
.ceaf					nt_asm_inc_zx:
>ceaf	06 0c						.byte 6, IM+NN
>ceb1	bd ce				                .word nt_asm_inx
>ceb3	95 aa 9a aa					.word xt_asm_inc_zx, z_asm_inc_zx
>ceb7	69 6e 63 2e 7a 78				.text "inc.zx"
.cebd					nt_asm_inx:
>cebd	03 0c						.byte 3, IM+NN
>cebf	c8 ce				                .word nt_asm_iny
>cec1	9a aa 9f aa					.word xt_asm_inx, z_asm_inx
>cec5	69 6e 78					.text "inx"
.cec8					nt_asm_iny:
>cec8	03 0c						.byte 3, IM+NN
>ceca	d3 ce				                .word nt_asm_jmp
>cecc	9f aa a4 aa					.word xt_asm_iny, z_asm_iny
>ced0	69 6e 79					.text "iny"
.ced3					nt_asm_jmp:
>ced3	03 0c						.byte 3, IM+NN
>ced5	de ce				                .word nt_asm_jmp_i
>ced7	a4 aa a9 aa					.word xt_asm_jmp, z_asm_jmp
>cedb	6a 6d 70					.text "jmp"
.cede					nt_asm_jmp_i:
>cede	05 0c						.byte 5, IM+NN
>cee0	eb ce				                .word nt_asm_jmp_xi
>cee2	a9 aa ae aa					.word xt_asm_jmp_i, z_asm_jmp_i
>cee6	6a 6d 70 2e 69					.text "jmp.i"
.ceeb					nt_asm_jmp_xi:
>ceeb	06 0c						.byte 6, IM+NN
>ceed	f9 ce				                .word nt_asm_jsr
>ceef	ae aa b3 aa					.word xt_asm_jmp_xi, z_asm_jmp_xi
>cef3	6a 6d 70 2e 78 69				.text "jmp.xi"
.cef9					nt_asm_jsr:
>cef9	03 0c						.byte 3, IM+NN
>cefb	04 cf				                .word nt_asm_lda
>cefd	b3 aa b8 aa					.word xt_asm_jsr, z_asm_jsr
>cf01	6a 73 72					.text "jsr"
.cf04					nt_asm_lda:
>cf04	03 0c						.byte 3, IM+NN
>cf06	0f cf				                .word nt_asm_lda_h
>cf08	b8 aa bd aa					.word xt_asm_lda, z_asm_lda
>cf0c	6c 64 61					.text "lda"
.cf0f					nt_asm_lda_h:
>cf0f	05 0c						.byte 5, IM+NN
>cf11	1c cf				                .word nt_asm_lda_x
>cf13	bd aa c2 aa					.word xt_asm_lda_h, z_asm_lda_h
>cf17	6c 64 61 2e 23					.text "lda.#"
.cf1c					nt_asm_lda_x:
>cf1c	05 0c						.byte 5, IM+NN
>cf1e	29 cf				                .word nt_asm_lda_y
>cf20	c2 aa c7 aa					.word xt_asm_lda_x, z_asm_lda_x
>cf24	6c 64 61 2e 78					.text "lda.x"
.cf29					nt_asm_lda_y:
>cf29	05 0c						.byte 5, IM+NN
>cf2b	36 cf				                .word nt_asm_lda_z
>cf2d	c7 aa cc aa					.word xt_asm_lda_y, z_asm_lda_y
>cf31	6c 64 61 2e 79					.text "lda.y"
.cf36					nt_asm_lda_z:
>cf36	05 0c						.byte 5, IM+NN
>cf38	43 cf				                .word nt_asm_lda_zi
>cf3a	cc aa d1 aa					.word xt_asm_lda_z, z_asm_lda_z
>cf3e	6c 64 61 2e 7a					.text "lda.z"
.cf43					nt_asm_lda_zi:
>cf43	06 0c						.byte 6, IM+NN
>cf45	51 cf				                .word nt_asm_lda_ziy
>cf47	d1 aa d6 aa					.word xt_asm_lda_zi, z_asm_lda_zi
>cf4b	6c 64 61 2e 7a 69				.text "lda.zi"
.cf51					nt_asm_lda_ziy:
>cf51	07 0c						.byte 7, IM+NN
>cf53	60 cf				                .word nt_asm_lda_zx
>cf55	d6 aa db aa					.word xt_asm_lda_ziy, z_asm_lda_ziy
>cf59	6c 64 61 2e 7a 69 79				.text "lda.ziy"
.cf60					nt_asm_lda_zx:
>cf60	06 0c						.byte 6, IM+NN
>cf62	6e cf				                .word nt_asm_lda_zxi
>cf64	db aa e0 aa					.word xt_asm_lda_zx, z_asm_lda_zx
>cf68	6c 64 61 2e 7a 78				.text "lda.zx"
.cf6e					nt_asm_lda_zxi:
>cf6e	07 0c						.byte 7, IM+NN
>cf70	7d cf				                .word nt_asm_ldx
>cf72	e0 aa e5 aa					.word xt_asm_lda_zxi, z_asm_lda_zxi
>cf76	6c 64 61 2e 7a 78 69				.text "lda.zxi"
.cf7d					nt_asm_ldx:
>cf7d	03 0c						.byte 3, IM+NN
>cf7f	88 cf				                .word nt_asm_ldx_h
>cf81	e5 aa ea aa					.word xt_asm_ldx, z_asm_ldx
>cf85	6c 64 78					.text "ldx"
.cf88					nt_asm_ldx_h:
>cf88	05 0c						.byte 5, IM+NN
>cf8a	95 cf				                .word nt_asm_ldx_y
>cf8c	ea aa ef aa					.word xt_asm_ldx_h, z_asm_ldx_h
>cf90	6c 64 78 2e 23					.text "ldx.#"
.cf95					nt_asm_ldx_y:
>cf95	05 0c						.byte 5, IM+NN
>cf97	a2 cf				                .word nt_asm_ldx_z
>cf99	ef aa f4 aa					.word xt_asm_ldx_y, z_asm_ldx_y
>cf9d	6c 64 78 2e 79					.text "ldx.y"
.cfa2					nt_asm_ldx_z:
>cfa2	05 0c						.byte 5, IM+NN
>cfa4	af cf				                .word nt_asm_ldx_zy
>cfa6	f4 aa f9 aa					.word xt_asm_ldx_z, z_asm_ldx_z
>cfaa	6c 64 78 2e 7a					.text "ldx.z"
.cfaf					nt_asm_ldx_zy:
>cfaf	06 0c						.byte 6, IM+NN
>cfb1	bd cf				                .word nt_asm_ldy
>cfb3	f9 aa fe aa					.word xt_asm_ldx_zy, z_asm_ldx_zy
>cfb7	6c 64 78 2e 7a 79				.text "ldx.zy"
.cfbd					nt_asm_ldy:
>cfbd	03 0c						.byte 3, IM+NN
>cfbf	c8 cf				                .word nt_asm_ldy_h
>cfc1	fe aa 03 ab					.word xt_asm_ldy, z_asm_ldy
>cfc5	6c 64 79					.text "ldy"
.cfc8					nt_asm_ldy_h:
>cfc8	05 0c						.byte 5, IM+NN
>cfca	d5 cf				                .word nt_asm_ldy_x
>cfcc	03 ab 08 ab					.word xt_asm_ldy_h, z_asm_ldy_h
>cfd0	6c 64 79 2e 23					.text "ldy.#"
.cfd5					nt_asm_ldy_x:
>cfd5	05 0c						.byte 5, IM+NN
>cfd7	e2 cf				                .word nt_asm_ldy_z
>cfd9	08 ab 0d ab					.word xt_asm_ldy_x, z_asm_ldy_x
>cfdd	6c 64 79 2e 78					.text "ldy.x"
.cfe2					nt_asm_ldy_z:
>cfe2	05 0c						.byte 5, IM+NN
>cfe4	ef cf				                .word nt_asm_ldy_zx
>cfe6	0d ab 12 ab					.word xt_asm_ldy_z, z_asm_ldy_z
>cfea	6c 64 79 2e 7a					.text "ldy.z"
.cfef					nt_asm_ldy_zx:
>cfef	06 0c						.byte 6, IM+NN
>cff1	fd cf				                .word nt_asm_lsr
>cff3	12 ab 17 ab					.word xt_asm_ldy_zx, z_asm_ldy_zx
>cff7	6c 64 79 2e 7a 78				.text "ldy.zx"
.cffd					nt_asm_lsr:
>cffd	03 0c						.byte 3, IM+NN
>cfff	08 d0				                .word nt_asm_lsr_a
>d001	17 ab 1c ab					.word xt_asm_lsr, z_asm_lsr
>d005	6c 73 72					.text "lsr"
.d008					nt_asm_lsr_a:
>d008	05 0c						.byte 5, IM+NN
>d00a	15 d0				                .word nt_asm_lsr_x
>d00c	1c ab 21 ab					.word xt_asm_lsr_a, z_asm_lsr_a
>d010	6c 73 72 2e 61					.text "lsr.a"
.d015					nt_asm_lsr_x:
>d015	05 0c						.byte 5, IM+NN
>d017	22 d0				                .word nt_asm_lsr_z
>d019	21 ab 26 ab					.word xt_asm_lsr_x, z_asm_lsr_x
>d01d	6c 73 72 2e 78					.text "lsr.x"
.d022					nt_asm_lsr_z:
>d022	05 0c						.byte 5, IM+NN
>d024	2f d0				                .word nt_asm_lsr_zx
>d026	26 ab 2b ab					.word xt_asm_lsr_z, z_asm_lsr_z
>d02a	6c 73 72 2e 7a					.text "lsr.z"
.d02f					nt_asm_lsr_zx:
>d02f	06 0c						.byte 6, IM+NN
>d031	3d d0				                .word nt_asm_nop
>d033	2b ab 30 ab					.word xt_asm_lsr_zx, z_asm_lsr_zx
>d037	6c 73 72 2e 7a 78				.text "lsr.zx"
.d03d					nt_asm_nop:
>d03d	03 0c						.byte 3, IM+NN
>d03f	48 d0				                .word nt_asm_ora
>d041	30 ab 35 ab					.word xt_asm_nop, z_asm_nop
>d045	6e 6f 70					.text "nop"
.d048					nt_asm_ora:
>d048	03 0c						.byte 3, IM+NN
>d04a	53 d0				                .word nt_asm_ora_h
>d04c	35 ab 3a ab					.word xt_asm_ora, z_asm_ora
>d050	6f 72 61					.text "ora"
.d053					nt_asm_ora_h:
>d053	05 0c						.byte 5, IM+NN
>d055	60 d0				                .word nt_asm_ora_x
>d057	3a ab 3f ab					.word xt_asm_ora_h, z_asm_ora_h
>d05b	6f 72 61 2e 23					.text "ora.#"
.d060					nt_asm_ora_x:
>d060	05 0c						.byte 5, IM+NN
>d062	6d d0				                .word nt_asm_ora_y
>d064	3f ab 44 ab					.word xt_asm_ora_x, z_asm_ora_x
>d068	6f 72 61 2e 78					.text "ora.x"
.d06d					nt_asm_ora_y:
>d06d	05 0c						.byte 5, IM+NN
>d06f	7a d0				                .word nt_asm_ora_z
>d071	44 ab 49 ab					.word xt_asm_ora_y, z_asm_ora_y
>d075	6f 72 61 2e 79					.text "ora.y"
.d07a					nt_asm_ora_z:
>d07a	05 0c						.byte 5, IM+NN
>d07c	87 d0				                .word nt_asm_ora_zi
>d07e	49 ab 4e ab					.word xt_asm_ora_z, z_asm_ora_z
>d082	6f 72 61 2e 7a					.text "ora.z"
.d087					nt_asm_ora_zi:
>d087	06 0c						.byte 6, IM+NN
>d089	95 d0				                .word nt_asm_ora_ziy
>d08b	4e ab 55 ab					.word xt_asm_ora_zi, z_asm_ora_zi
>d08f	6f 72 61 2e 7a 69				.text "ora.zi"
.d095					nt_asm_ora_ziy:
>d095	07 0c						.byte 7, IM+NN
>d097	a4 d0				                .word nt_asm_ora_zx
>d099	55 ab 5a ab					.word xt_asm_ora_ziy, z_asm_ora_ziy
>d09d	6f 72 61 2e 7a 69 79				.text "ora.ziy"
.d0a4					nt_asm_ora_zx:
>d0a4	06 0c						.byte 6, IM+NN
>d0a6	b2 d0				                .word nt_asm_ora_zxi
>d0a8	5a ab 5f ab					.word xt_asm_ora_zx, z_asm_ora_zx
>d0ac	6f 72 61 2e 7a 78				.text "ora.zx"
.d0b2					nt_asm_ora_zxi:
>d0b2	07 0c						.byte 7, IM+NN
>d0b4	c1 d0				                .word nt_asm_pha
>d0b6	5f ab 64 ab					.word xt_asm_ora_zxi, z_asm_ora_zxi
>d0ba	6f 72 61 2e 7a 78 69				.text "ora.zxi"
.d0c1					nt_asm_pha:
>d0c1	03 0c						.byte 3, IM+NN
>d0c3	cc d0				                .word nt_asm_php
>d0c5	64 ab 69 ab					.word xt_asm_pha, z_asm_pha
>d0c9	70 68 61					.text "pha"
.d0cc					nt_asm_php:
>d0cc	03 0c						.byte 3, IM+NN
>d0ce	d7 d0				                .word nt_asm_phx
>d0d0	69 ab 6e ab					.word xt_asm_php, z_asm_php
>d0d4	70 68 70					.text "php"
.d0d7					nt_asm_phx:
>d0d7	03 0c						.byte 3, IM+NN
>d0d9	e2 d0				                .word nt_asm_phy
>d0db	6e ab 73 ab					.word xt_asm_phx, z_asm_phx
>d0df	70 68 78					.text "phx"
.d0e2					nt_asm_phy:
>d0e2	03 0c						.byte 3, IM+NN
>d0e4	ed d0				                .word nt_asm_pla
>d0e6	73 ab 78 ab					.word xt_asm_phy, z_asm_phy
>d0ea	70 68 79					.text "phy"
.d0ed					nt_asm_pla:
>d0ed	03 0c						.byte 3, IM+NN
>d0ef	f8 d0				                .word nt_asm_plp
>d0f1	78 ab 7d ab					.word xt_asm_pla, z_asm_pla
>d0f5	70 6c 61					.text "pla"
.d0f8					nt_asm_plp:
>d0f8	03 0c						.byte 3, IM+NN
>d0fa	03 d1				                .word nt_asm_plx
>d0fc	7d ab 82 ab					.word xt_asm_plp, z_asm_plp
>d100	70 6c 70					.text "plp"
.d103					nt_asm_plx:
>d103	03 0c						.byte 3, IM+NN
>d105	0e d1				                .word nt_asm_ply
>d107	82 ab 87 ab					.word xt_asm_plx, z_asm_plx
>d10b	70 6c 78					.text "plx"
.d10e					nt_asm_ply:
>d10e	03 0c						.byte 3, IM+NN
>d110	19 d1				                .word nt_asm_rol
>d112	87 ab 8c ab					.word xt_asm_ply, z_asm_ply
>d116	70 6c 79					.text "ply"
.d119					nt_asm_rol:
>d119	03 0c						.byte 3, IM+NN
>d11b	24 d1				                .word nt_asm_rol_a
>d11d	8c ab 91 ab					.word xt_asm_rol, z_asm_rol
>d121	72 6f 6c					.text "rol"
.d124					nt_asm_rol_a:
>d124	05 0c						.byte 5, IM+NN
>d126	31 d1				                .word nt_asm_rol_x
>d128	91 ab 96 ab					.word xt_asm_rol_a, z_asm_rol_a
>d12c	72 6f 6c 2e 61					.text "rol.a"
.d131					nt_asm_rol_x:
>d131	05 0c						.byte 5, IM+NN
>d133	3e d1				                .word nt_asm_rol_z
>d135	96 ab 9b ab					.word xt_asm_rol_x, z_asm_rol_x
>d139	72 6f 6c 2e 78					.text "rol.x"
.d13e					nt_asm_rol_z:
>d13e	05 0c						.byte 5, IM+NN
>d140	4b d1				                .word nt_asm_rol_zx
>d142	9b ab a0 ab					.word xt_asm_rol_z, z_asm_rol_z
>d146	72 6f 6c 2e 7a					.text "rol.z"
.d14b					nt_asm_rol_zx:
>d14b	06 0c						.byte 6, IM+NN
>d14d	59 d1				                .word nt_asm_ror
>d14f	a0 ab a5 ab					.word xt_asm_rol_zx, z_asm_rol_zx
>d153	72 6f 6c 2e 7a 78				.text "rol.zx"
.d159					nt_asm_ror:
>d159	03 0c						.byte 3, IM+NN
>d15b	64 d1				                .word nt_asm_ror_a
>d15d	a5 ab aa ab					.word xt_asm_ror, z_asm_ror
>d161	72 6f 72					.text "ror"
.d164					nt_asm_ror_a:
>d164	05 0c						.byte 5, IM+NN
>d166	71 d1				                .word nt_asm_ror_x
>d168	aa ab af ab					.word xt_asm_ror_a, z_asm_ror_a
>d16c	72 6f 72 2e 61					.text "ror.a"
.d171					nt_asm_ror_x:
>d171	05 0c						.byte 5, IM+NN
>d173	7e d1				                .word nt_asm_ror_z
>d175	af ab b4 ab					.word xt_asm_ror_x, z_asm_ror_x
>d179	72 6f 72 2e 78					.text "ror.x"
.d17e					nt_asm_ror_z:
>d17e	05 0c						.byte 5, IM+NN
>d180	8b d1				                .word nt_asm_ror_zx
>d182	b4 ab b9 ab					.word xt_asm_ror_z, z_asm_ror_z
>d186	72 6f 72 2e 7a					.text "ror.z"
.d18b					nt_asm_ror_zx:
>d18b	06 0c						.byte 6, IM+NN
>d18d	99 d1				                .word nt_asm_rti
>d18f	b9 ab be ab					.word xt_asm_ror_zx, z_asm_ror_zx
>d193	72 6f 72 2e 7a 78				.text "ror.zx"
.d199					nt_asm_rti:
>d199	03 0c						.byte 3, IM+NN
>d19b	a4 d1				                .word nt_asm_rts
>d19d	be ab c3 ab					.word xt_asm_rti, z_asm_rti
>d1a1	72 74 69					.text "rti"
.d1a4					nt_asm_rts:
>d1a4	03 0c						.byte 3, IM+NN
>d1a6	af d1				                .word nt_asm_sbc
>d1a8	c3 ab c8 ab					.word xt_asm_rts, z_asm_rts
>d1ac	72 74 73					.text "rts"
.d1af					nt_asm_sbc:
>d1af	03 0c						.byte 3, IM+NN
>d1b1	ba d1				                .word nt_asm_sbc_h
>d1b3	c8 ab cd ab					.word xt_asm_sbc, z_asm_sbc
>d1b7	73 62 63					.text "sbc"
.d1ba					nt_asm_sbc_h:
>d1ba	05 0c						.byte 5, IM+NN
>d1bc	c7 d1				                .word nt_asm_sbc_x
>d1be	cd ab d2 ab					.word xt_asm_sbc_h, z_asm_sbc_h
>d1c2	73 62 63 2e 23					.text "sbc.#"
.d1c7					nt_asm_sbc_x:
>d1c7	05 0c						.byte 5, IM+NN
>d1c9	d4 d1				                .word nt_asm_sbc_y
>d1cb	d2 ab d7 ab					.word xt_asm_sbc_x, z_asm_sbc_x
>d1cf	73 62 63 2e 78					.text "sbc.x"
.d1d4					nt_asm_sbc_y:
>d1d4	05 0c						.byte 5, IM+NN
>d1d6	e1 d1				                .word nt_asm_sbc_z
>d1d8	d7 ab dc ab					.word xt_asm_sbc_y, z_asm_sbc_y
>d1dc	73 62 63 2e 79					.text "sbc.y"
.d1e1					nt_asm_sbc_z:
>d1e1	05 0c						.byte 5, IM+NN
>d1e3	ee d1				                .word nt_asm_sbc_zi
>d1e5	dc ab e1 ab					.word xt_asm_sbc_z, z_asm_sbc_z
>d1e9	73 62 63 2e 7a					.text "sbc.z"
.d1ee					nt_asm_sbc_zi:
>d1ee	06 0c						.byte 6, IM+NN
>d1f0	fc d1				                .word nt_asm_sbc_ziy
>d1f2	e1 ab e6 ab					.word xt_asm_sbc_zi, z_asm_sbc_zi
>d1f6	73 62 63 2e 7a 69				.text "sbc.zi"
.d1fc					nt_asm_sbc_ziy:
>d1fc	07 0c						.byte 7, IM+NN
>d1fe	0b d2				                .word nt_asm_sbc_zx
>d200	e6 ab eb ab					.word xt_asm_sbc_ziy, z_asm_sbc_ziy
>d204	73 62 63 2e 7a 69 79				.text "sbc.ziy"
.d20b					nt_asm_sbc_zx:
>d20b	06 0c						.byte 6, IM+NN
>d20d	19 d2				                .word nt_asm_sbc_zxi
>d20f	eb ab f0 ab					.word xt_asm_sbc_zx, z_asm_sbc_zx
>d213	73 62 63 2e 7a 78				.text "sbc.zx"
.d219					nt_asm_sbc_zxi:
>d219	07 0c						.byte 7, IM+NN
>d21b	28 d2				                .word nt_asm_sec
>d21d	f0 ab f4 ab					.word xt_asm_sbc_zxi, z_asm_sbc_zxi
>d221	73 62 63 2e 7a 78 69				.text "sbc.zxi"
.d228					nt_asm_sec:
>d228	03 0c						.byte 3, IM+NN
>d22a	33 d2				                .word nt_asm_sed
>d22c	f4 ab f8 ab					.word xt_asm_sec, z_asm_sec
>d230	73 65 63					.text "sec"
.d233					nt_asm_sed:
>d233	03 0c						.byte 3, IM+NN
>d235	3e d2				                .word nt_asm_sei
>d237	f8 ab fc ab					.word xt_asm_sed, z_asm_sed
>d23b	73 65 64					.text "sed"
.d23e					nt_asm_sei:
>d23e	03 0c						.byte 3, IM+NN
>d240	49 d2				                .word nt_asm_sta
>d242	fc ab 00 ac					.word xt_asm_sei, z_asm_sei
>d246	73 65 69					.text "sei"
.d249					nt_asm_sta:
>d249	03 0c						.byte 3, IM+NN
>d24b	54 d2				                .word nt_asm_sta_x
>d24d	00 ac 04 ac					.word xt_asm_sta, z_asm_sta
>d251	73 74 61					.text "sta"
.d254					nt_asm_sta_x:
>d254	05 0c						.byte 5, IM+NN
>d256	61 d2				                .word nt_asm_sta_y
>d258	04 ac 08 ac					.word xt_asm_sta_x, z_asm_sta_x
>d25c	73 74 61 2e 78					.text "sta.x"
.d261					nt_asm_sta_y:
>d261	05 0c						.byte 5, IM+NN
>d263	6e d2				                .word nt_asm_sta_z
>d265	08 ac 0c ac					.word xt_asm_sta_y, z_asm_sta_y
>d269	73 74 61 2e 79					.text "sta.y"
.d26e					nt_asm_sta_z:
>d26e	05 0c						.byte 5, IM+NN
>d270	7b d2				                .word nt_asm_sta_zi
>d272	0c ac 10 ac					.word xt_asm_sta_z, z_asm_sta_z
>d276	73 74 61 2e 7a					.text "sta.z"
.d27b					nt_asm_sta_zi:
>d27b	06 0c						.byte 6, IM+NN
>d27d	89 d2				                .word nt_asm_sta_ziy
>d27f	10 ac 14 ac					.word xt_asm_sta_zi, z_asm_sta_zi
>d283	73 74 61 2e 7a 69				.text "sta.zi"
.d289					nt_asm_sta_ziy:
>d289	07 0c						.byte 7, IM+NN
>d28b	98 d2				                .word nt_asm_sta_zx
>d28d	14 ac 18 ac					.word xt_asm_sta_ziy, z_asm_sta_ziy
>d291	73 74 61 2e 7a 69 79				.text "sta.ziy"
.d298					nt_asm_sta_zx:
>d298	06 0c						.byte 6, IM+NN
>d29a	a6 d2				                .word nt_asm_sta_zxi
>d29c	18 ac 1c ac					.word xt_asm_sta_zx, z_asm_sta_zx
>d2a0	73 74 61 2e 7a 78				.text "sta.zx"
.d2a6					nt_asm_sta_zxi:
>d2a6	07 0c						.byte 7, IM+NN
>d2a8	b5 d2				                .word nt_asm_stx
>d2aa	1c ac 20 ac					.word xt_asm_sta_zxi, z_asm_sta_zxi
>d2ae	73 74 61 2e 7a 78 69				.text "sta.zxi"
.d2b5					nt_asm_stx:
>d2b5	03 0c						.byte 3, IM+NN
>d2b7	c0 d2				                .word nt_asm_stx_z
>d2b9	20 ac 24 ac					.word xt_asm_stx, z_asm_stx
>d2bd	73 74 78					.text "stx"
.d2c0					nt_asm_stx_z:
>d2c0	05 0c						.byte 5, IM+NN
>d2c2	cd d2				                .word nt_asm_stx_zy
>d2c4	24 ac 28 ac					.word xt_asm_stx_z, z_asm_stx_z
>d2c8	73 74 78 2e 7a					.text "stx.z"
.d2cd					nt_asm_stx_zy:
>d2cd	06 0c						.byte 6, IM+NN
>d2cf	db d2				                .word nt_asm_sty
>d2d1	28 ac 2c ac					.word xt_asm_stx_zy, z_asm_stx_zy
>d2d5	73 74 78 2e 7a 79				.text "stx.zy"
.d2db					nt_asm_sty:
>d2db	03 0c						.byte 3, IM+NN
>d2dd	e6 d2				                .word nt_asm_sty_z
>d2df	2c ac 30 ac					.word xt_asm_sty, z_asm_sty
>d2e3	73 74 79					.text "sty"
.d2e6					nt_asm_sty_z:
>d2e6	05 0c						.byte 5, IM+NN
>d2e8	f3 d2				                .word nt_asm_sty_zx
>d2ea	30 ac 34 ac					.word xt_asm_sty_z, z_asm_sty_z
>d2ee	73 74 79 2e 7a					.text "sty.z"
.d2f3					nt_asm_sty_zx:
>d2f3	06 0c						.byte 6, IM+NN
>d2f5	01 d3				                .word nt_asm_stz
>d2f7	34 ac 38 ac					.word xt_asm_sty_zx, z_asm_sty_zx
>d2fb	73 74 79 2e 7a 78				.text "sty.zx"
.d301					nt_asm_stz:
>d301	03 0c						.byte 3, IM+NN
>d303	0c d3				                .word nt_asm_stz_x
>d305	38 ac 3c ac					.word xt_asm_stz, z_asm_stz
>d309	73 74 7a					.text "stz"
.d30c					nt_asm_stz_x:
>d30c	05 0c						.byte 5, IM+NN
>d30e	19 d3				                .word nt_asm_stz_z
>d310	3c ac 40 ac					.word xt_asm_stz_x, z_asm_stz_x
>d314	73 74 7a 2e 78					.text "stz.x"
.d319					nt_asm_stz_z:
>d319	05 0c						.byte 5, IM+NN
>d31b	26 d3				                .word nt_asm_stz_zx
>d31d	40 ac 44 ac					.word xt_asm_stz_z, z_asm_stz_z
>d321	73 74 7a 2e 7a					.text "stz.z"
.d326					nt_asm_stz_zx:
>d326	06 0c						.byte 6, IM+NN
>d328	34 d3				                .word nt_asm_tax
>d32a	44 ac 48 ac					.word xt_asm_stz_zx, z_asm_stz_zx
>d32e	73 74 7a 2e 7a 78				.text "stz.zx"
.d334					nt_asm_tax:
>d334	03 0c						.byte 3, IM+NN
>d336	3f d3				                .word nt_asm_tay
>d338	48 ac 4c ac					.word xt_asm_tax, z_asm_tax
>d33c	74 61 78					.text "tax"
.d33f					nt_asm_tay:
>d33f	03 0c						.byte 3, IM+NN
>d341	4a d3				                .word nt_asm_trb
>d343	4c ac 50 ac					.word xt_asm_tay, z_asm_tay
>d347	74 61 79					.text "tay"
.d34a					nt_asm_trb:
>d34a	03 0c						.byte 3, IM+NN
>d34c	55 d3				                .word nt_asm_trb_z
>d34e	50 ac 54 ac					.word xt_asm_trb, z_asm_trb
>d352	74 72 62					.text "trb"
.d355					nt_asm_trb_z:
>d355	05 0c						.byte 5, IM+NN
>d357	62 d3				                .word nt_asm_tsb
>d359	54 ac 58 ac					.word xt_asm_trb_z, z_asm_trb_z
>d35d	74 72 62 2e 7a					.text "trb.z"
.d362					nt_asm_tsb:
>d362	03 0c						.byte 3, IM+NN
>d364	6d d3				                .word nt_asm_tsb_z
>d366	58 ac 5c ac					.word xt_asm_tsb, z_asm_tsb
>d36a	74 73 62					.text "tsb"
.d36d					nt_asm_tsb_z:
>d36d	05 0c						.byte 5, IM+NN
>d36f	7a d3				                .word nt_asm_tsx
>d371	5c ac 60 ac					.word xt_asm_tsb_z, z_asm_tsb_z
>d375	74 73 62 2e 7a					.text "tsb.z"
.d37a					nt_asm_tsx:
>d37a	03 0c						.byte 3, IM+NN
>d37c	85 d3				                .word nt_asm_txa
>d37e	60 ac 64 ac					.word xt_asm_tsx, z_asm_tsx
>d382	74 73 78					.text "tsx"
.d385					nt_asm_txa:
>d385	03 0c						.byte 3, IM+NN
>d387	90 d3				                .word nt_asm_txs
>d389	64 ac 68 ac					.word xt_asm_txa, z_asm_txa
>d38d	74 78 61					.text "txa"
.d390					nt_asm_txs:
>d390	03 0c						.byte 3, IM+NN
>d392	9b d3				                .word nt_asm_tya
>d394	68 ac 6c ac					.word xt_asm_txs, z_asm_txs
>d398	74 78 73					.text "txs"
.d39b					nt_asm_tya:
>d39b	03 0c						.byte 3, IM+NN
>d39d	a6 d3				                .word nt_asm_arrow
>d39f	6c ac 70 ac					.word xt_asm_tya, z_asm_tya
>d3a3	74 79 61					.text "tya"
.d3a6					nt_asm_arrow:
>d3a6	03 04				                .byte 3, IM
>d3a8	b1 d3				                .word nt_asm_back_jump
>d3aa	7e 91 88 91			                .word xt_asm_arrow, z_asm_arrow
>d3ae	2d 2d 3e			                .text "-->"
.d3b1					nt_asm_back_jump:
>d3b1	02 04				                .byte 2, IM
>d3b3	bb d3				                .word nt_asm_back_branch
>d3b5	c1 ac c1 ac			                .word xt_asm_back_jump, z_asm_back_jump
>d3b9	3c 6a				                .text "<j"
.d3bb					nt_asm_back_branch:
>d3bb	02 04				                .byte 2, IM
>d3bd	c5 d3				                .word nt_asm_push_a
>d3bf	c2 ac ca ac			                .word xt_asm_back_branch, z_asm_back_branch
>d3c3	3c 62				                .text "<b"
.d3c5					nt_asm_push_a:
>d3c5	06 0c				                .byte 6, IM+NN
>d3c7	00 00				                .word 0000
>d3c9	aa ac b9 ac			                .word xt_asm_push_a, z_asm_push_a
>d3cd	70 75 73 68 2d 61		                .text "push-a"

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../strings.asm

=0					ix := 0
=0					str_ok             = ix
=1					ix += 1
=1					str_compile        = ix
=2					ix += 1
=2					str_redefined      = ix
=3					ix += 1
=3					str_abc_upper      = ix
=4					ix += 1
=4					str_wid_forth      = ix
=5					ix += 1
=5					str_wid_editor     = ix
=6					ix += 1
=6					str_wid_assembler  = ix
=7					ix += 1
=7					str_wid_root       = ix
=8					ix += 1
=8					str_see_flags      = ix
=9					ix += 1
=9					str_see_nt         = ix
=10					ix += 1
=10					str_see_xt         = ix
=11					ix += 1
=11					str_see_size       = ix
=12					ix += 1
=12					str_disasm_lit     = ix
=13					ix += 1
=13					str_disasm_sdc     = ix
=14					ix += 1
=14					str_disasm_bra     = ix
=15					ix += 1
.d3d3					string_table:
>d3d3	f1 d3 f5 d3 ff d3 0a d4		        .word s_ok, s_compiled, s_redefined, s_abc_upper              ; 0-3
>d3db	41 d4 39 d4 2e d4 48 d4		        .word s_wid_forth, s_wid_editor, s_wid_asm, s_wid_root        ; 4-7
>d3e3	4e d4 6a d4 6f d4 74 d4		        .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 8-11
>d3eb	85 d4 8e d4 a0 d4		        .word s_disasm_lit, s_disasm_sdc, s_disasm_bra                ; 12-14
>d3f1	20 6f 6b 00			s_ok:         .text " ok", 0         ; note space at beginning
>d3f5	20 63 6f 6d 70 69 6c 65		s_compiled:   .text " compiled", 0   ; note space at beginning
>d3fd	64 00
>d3ff	72 65 64 65 66 69 6e 65		s_redefined:  .text "redefined ", 0  ; note space at end
>d407	64 20 00
>d40a	30 31 32 33 34 35 36 37		s_abc_upper:  .text "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
>d412	38 39 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e
>d422	4f 50 51 52 53 54 55 56 57 58 59 5a
>d42e	41 73 73 65 6d 62 6c 65		s_wid_asm:    .text "Assembler ", 0  ; Wordlist ID 2, note space at end
>d436	72 20 00
>d439	45 64 69 74 6f 72 20 00		s_wid_editor: .text "Editor ", 0     ; Wordlist ID 1, note space at end
>d441	46 6f 72 74 68 20 00		s_wid_forth:  .text "Forth ", 0      ; Wordlist ID 0, note space at end
>d448	52 6f 6f 74 20 00		s_wid_root:   .text "Root ", 0       ; Wordlist ID 3, note space at end
>d44e	66 6c 61 67 73 20 28 43		s_see_flags:  .text "flags (CO AN IM NN UF HC): ", 0
>d456	4f 20 41 4e 20 49 4d 20 4e 4e 20 55 46 20 48 43
>d466	29 3a 20 00
>d46a	6e 74 3a 20 00			s_see_nt:     .text "nt: ", 0
>d46f	78 74 3a 20 00			s_see_xt:     .text "xt: ", 0
>d474	73 69 7a 65 20 28 64 65		s_see_size:   .text "size (decimal): ", 0
>d47c	63 69 6d 61 6c 29 3a 20 00
>d485	4c 49 54 45 52 41 4c 20		s_disasm_lit: .text "LITERAL ", 0
>d48d	00
>d48e	53 54 41 43 4b 20 44 45		s_disasm_sdc: .text "STACK DEPTH CHECK", 0
>d496	50 54 48 20 43 48 45 43 4b 00
>d4a0	42 52 41 4e 43 48 20 00		s_disasm_bra: .text "BRANCH ",0
=0					err_allot        = 0
=1					err_badsource    = 1
=2					err_compileonly  = 2
=3					err_defer        = 3
=4					err_divzero      = 4
=5					err_noname       = 5
=6					err_refill       = 6
=7					err_state        = 7
=8					err_syntax       = 8
=9					err_underflow    = 9
=10					err_negallot     = 10
=11					err_wordlist     = 11
=12					err_blockwords   = 12
=13					err_returnstack  = 13
.d4a8					error_table:
>d4a8	c4 d4 e5 d4 05 d5 26 d5		        .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
>d4b0	43 d5 54 d5 64 d5 92 d5		        .word es_divzero, es_noname, es_refill, es_state        ;  4-7
>d4b8	aa d5 b9 d5 ce d5 ea d5		        .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
>d4c0	01 d6 40 d6			        .word es_blockwords, es_returnstack                     ; 12-13
>d4c4	41 4c 4c 4f 54 20 75 73		es_allot:       .text "ALLOT using all available memory", 0
>d4cc	69 6e 67 20 61 6c 6c 20 61 76 61 69 6c 61 62 6c
>d4dc	65 20 6d 65 6d 6f 72 79 00
>d4e5	49 6c 6c 65 67 61 6c 20		es_badsource:   .text "Illegal SOURCE-ID during REFILL", 0
>d4ed	53 4f 55 52 43 45 2d 49 44 20 64 75 72 69 6e 67
>d4fd	20 52 45 46 49 4c 4c 00
>d505	49 6e 74 65 72 70 72 65		es_compileonly: .text "Interpreting a compile-only word", 0
>d50d	74 69 6e 67 20 61 20 63 6f 6d 70 69 6c 65 2d 6f
>d51d	6e 6c 79 20 77 6f 72 64 00
>d526	44 45 46 45 52 65 64 20		es_defer:       .text "DEFERed word not defined yet", 0
>d52e	77 6f 72 64 20 6e 6f 74 20 64 65 66 69 6e 65 64
>d53e	20 79 65 74 00
>d543	44 69 76 69 73 69 6f 6e		es_divzero:     .text "Division by zero", 0
>d54b	20 62 79 20 7a 65 72 6f 00
>d554	50 61 72 73 69 6e 67 20		es_noname:      .text "Parsing failure", 0
>d55c	66 61 69 6c 75 72 65 00
>d564	51 55 49 54 20 63 6f 75		es_refill:      .text "QUIT could not get input (REFILL returned -1)", 0
>d56c	6c 64 20 6e 6f 74 20 67 65 74 20 69 6e 70 75 74
>d57c	20 28 52 45 46 49 4c 4c 20 72 65 74 75 72 6e 65
>d58c	64 20 2d 31 29 00
>d592	41 6c 72 65 61 64 79 20		es_state:       .text "Already in compile mode", 0
>d59a	69 6e 20 63 6f 6d 70 69 6c 65 20 6d 6f 64 65 00
>d5aa	55 6e 64 65 66 69 6e 65		es_syntax:      .text "Undefined word", 0
>d5b2	64 20 77 6f 72 64 00
>d5b9	44 61 74 61 20 73 74 61		es_underflow:   .text "Data stack underflow", 0
>d5c1	63 6b 20 75 6e 64 65 72 66 6c 6f 77 00
>d5ce	4d 61 78 20 6d 65 6d 6f		es_negallot:    .text "Max memory freed with ALLOT", 0
>d5d6	72 79 20 66 72 65 65 64 20 77 69 74 68 20 41 4c
>d5e6	4c 4f 54 00
>d5ea	4e 6f 20 77 6f 72 64 6c		es_wordlist:    .text "No wordlists available", 0
>d5f2	69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>d601	50 6c 65 61 73 65 20 61		es_blockwords:  .text "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
>d609	73 73 69 67 6e 20 76 65 63 74 6f 72 73 20 42 4c
>d619	4f 43 4b 2d 52 45 41 44 2d 56 45 43 54 4f 52 20
>d629	61 6e 64 20 42 4c 4f 43 4b 2d 57 52 49 54 45 2d
>d639	56 45 43 54 4f 52 00
>d640	52 65 74 75 72 6e 20 73		es_returnstack: .text "Return stack:", 0
>d648	74 61 63 6b 3a 00
>d64e	0f 2f 43 4f 55 4e 54 45		envs_cs:        .text 15, "/COUNTED-STRING"
>d656	44 2d 53 54 52 49 4e 47
>d65e	05 2f 48 4f 4c 44		envs_hold:      .text 5, "/HOLD"
>d664	04 2f 50 41 44			envs_pad:       .text 4, "/PAD"
>d669	11 41 44 44 52 45 53 53		envs_aub:       .text 17, "ADDRESS-UNIT-BITS"
>d671	2d 55 4e 49 54 2d 42 49 54 53
>d67b	07 46 4c 4f 4f 52 45 44		envs_floored:   .text 7, "FLOORED"
>d683	08 4d 41 58 2d 43 48 41		envs_max_char:  .text 8, "MAX-CHAR"
>d68b	52
>d68c	05 4d 41 58 2d 4e		envs_max_n:     .text 5, "MAX-N"
>d692	05 4d 41 58 2d 55		envs_max_u:     .text 5, "MAX-U"
>d698	12 52 45 54 55 52 4e 2d		envs_rsc:       .text 18, "RETURN-STACK-CELLS"
>d6a0	53 54 41 43 4b 2d 43 45 4c 4c 53
>d6ab	0b 53 54 41 43 4b 2d 43		envs_sc:        .text 11, "STACK-CELLS"
>d6b3	45 4c 4c 53
>d6b7	09 57 4f 52 44 4c 49 53		envs_wl:        .text 9, "WORDLISTS"
>d6bf	54 53
>d6c1	05 4d 41 58 2d 44		envs_max_d:     .text 5, "MAX-D"
>d6c7	06 4d 41 58 2d 55 44		envs_max_ud:    .text 6, "MAX-UD"

;******  Return to file: platform/../taliforth.asm

.d6ce					cmpl_subroutine:
.d6ce	48		pha		                pha             ; save LSB of address
.d6cf	a9 20		lda #$20	                lda #$20        ; load opcode for JSR
.d6d1	80 03		bra $d6d6	                bra cmpl_common
.d6d3					cmpl_jump:
.d6d3	48		pha		                pha             ; save LSB of address
.d6d4	a9 4c		lda #$4c	                lda #$4c        ; load opcode for JMP, fall thru to cmpl_common
.d6d6					cmpl_common:
.d6d6	20 de d6	jsr $d6de	                jsr cmpl_a      ; compile opcode
.d6d9	68		pla		                pla             ; retrieve address LSB; fall thru to cmpl_word
.d6da					cmpl_word:
.d6da	20 de d6	jsr $d6de	                jsr cmpl_a      ; compile LSB of address
.d6dd	98		tya		                tya             ; fall thru for MSB
.d6de					cmpl_a:
.d6de	92 00		sta ($00)	                sta (cp)
.d6e0	e6 00		inc $00		                inc cp
.d6e2	d0 02		bne $d6e6	                bne _done
.d6e4	e6 01		inc $01		                inc cp+1
.d6e6					_done:
.d6e6	60		rts		                rts
.d6e7					doconst:
.d6e7	ca		dex		                dex             ; make room for constant
.d6e8	ca		dex		                dex
.d6e9	68		pla		                pla             ; LSB of return address
.d6ea	85 24		sta $24		                sta tmp1
.d6ec	68		pla		                pla             ; MSB of return address
.d6ed	85 25		sta $25		                sta tmp1+1
.d6ef	a0 01		ldy #$01	                ldy #1
.d6f1	b1 24		lda ($24),y	                lda (tmp1),y
.d6f3	95 00		sta $00,x	                sta 0,x
.d6f5	c8		iny		                iny
.d6f6	b1 24		lda ($24),y	                lda (tmp1),y
.d6f8	95 01		sta $01,x	                sta 1,x
.d6fa	60		rts		                rts
.d6fb					dodefer:
.d6fb	68		pla		                pla             ; LSB
.d6fc	85 24		sta $24		                sta tmp1
.d6fe	68		pla		                pla             ; MSB
.d6ff	85 25		sta $25		                sta tmp1+1
.d701	a0 01		ldy #$01	                ldy #1
.d703	b1 24		lda ($24),y	                lda (tmp1),y
.d705	85 26		sta $26		                sta tmp2
.d707	c8		iny		                iny
.d708	b1 24		lda ($24),y	                lda (tmp1),y
.d70a	85 27		sta $27		                sta tmp2+1
.d70c	6c 26 00	jmp ($0026)	                jmp (tmp2)      ; This is actually a jump to the new target
.d70f					defer_error:
.d70f	a9 03		lda #$03	                lda #err_defer
.d711	4c 4e d8	jmp $d84e	                jmp error
.d714					dodoes:
.d714	7a		ply		                ply             ; LSB
.d715	68		pla		                pla             ; MSB
.d716	c8		iny		                iny
.d717	d0 01		bne $d71a	                bne +
.d719	1a		inc a		                ina
.d71a					+
.d71a	84 26		sty $26		                sty tmp2
.d71c	85 27		sta $27		                sta tmp2+1
.d71e	ca		dex		                dex
.d71f	ca		dex		                dex
.d720	7a		ply		                ply
.d721	68		pla		                pla
.d722	c8		iny		                iny
.d723	d0 01		bne $d726	                bne +
.d725	1a		inc a		                ina
.d726					+
.d726	94 00		sty $00,x	                sty 0,x         ; LSB
.d728	95 01		sta $01,x	                sta 1,x         ; MSB
.d72a	6c 26 00	jmp ($0026)	                jmp (tmp2)
.d72d					dovar:
.d72d	7a		ply		                ply             ; LSB
.d72e	68		pla		                pla             ; MSB
.d72f	c8		iny		                iny
.d730	d0 01		bne $d733	                bne +
.d732	1a		inc a		                ina
.d733					+
.d733	ca		dex		                dex
.d734	ca		dex		                dex
.d735	95 01		sta $01,x	                sta 1,x
.d737	98		tya		                tya
.d738	95 00		sta $00,x	                sta 0,x
.d73a	60		rts		                rts
.d73b					byte_to_ascii:
.d73b	48		pha		                pha
.d73c	4a		lsr a		                lsr             ; convert high nibble first
.d73d	4a		lsr a		                lsr
.d73e	4a		lsr a		                lsr
.d73f	4a		lsr a		                lsr
.d740	20 44 d7	jsr $d744	                jsr _nibble_to_ascii
.d743	68		pla		                pla
.d744					_nibble_to_ascii:
.d744	29 0f		and #$0f	                and #$0F
.d746	09 30		ora #$30	                ora #'0'
.d748	c9 3a		cmp #$3a	                cmp #$3A        ; '9+1
.d74a	90 02		bcc $d74e	                bcc +
.d74c	69 06		adc #$06	                adc #$06
.d74e	4c 02 8e	jmp $8e02	+               jmp emit_a
.d751	60		rts		                rts
.d752					compare_16bit:
.d752	b5 00		lda $00,x	                lda 0,x                 ; LSB of TOS
.d754	d5 02		cmp $02,x	                cmp 2,x                 ; LSB of NOS
.d756	f0 0a		beq $d762	                beq _equal
.d758	b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d75a	f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d75c	09 01		ora #$01	                ora #1                  ; Make zero flag 0 because not equal
.d75e	70 08		bvs $d768	                bvs _overflow
.d760	80 08		bra $d76a	                bra _not_equal
.d762					_equal:
.d762	b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d764	f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d766	50 04		bvc $d76c	                bvc _done
.d768					_overflow:
.d768	49 80		eor #$80	                eor #$80                ; complement negative flag
.d76a					_not_equal:
.d76a	09 01		ora #$01	                ora #1                  ; if overflow, we can't be eqal
.d76c					_done:
.d76c	60		rts		                rts
.d76d					current_to_dp:
.d76d	a0 04		ldy #$04	                ldy #current_offset
.d76f	b1 1e		lda ($1e),y	                lda (up),y      ; current is a byte variable
.d771	0a		asl a		                asl             ; turn it into an offset (in cells)
.d772	18		clc		                clc
.d773	69 06		adc #$06	                adc #wordlists_offset   ; add offset to wordlists base.
.d775	a8		tay		                tay
.d776	b1 1e		lda ($1e),y	                lda (up),y              ; get the dp for that wordlist.
.d778	85 02		sta $02		                sta dp
.d77a	c8		iny		                iny
.d77b	b1 1e		lda ($1e),y	                lda (up),y
.d77d	85 03		sta $03		                sta dp+1
.d77f	60		rts		                rts
.d780					dp_to_current:
.d780	a0 04		ldy #$04	                ldy #current_offset
.d782	b1 1e		lda ($1e),y	                lda (up),y      ; current is a byte variable
.d784	0a		asl a		                asl             ; turn it into an offset (in cells)
.d785	18		clc		                clc
.d786	69 06		adc #$06	                adc #wordlists_offset   ; add offset to wordlists base.
.d788	a8		tay		                tay
.d789	a5 02		lda $02		                lda dp
.d78b	91 1e		sta ($1e),y	                sta (up),y              ; get the dp for that wordlist.
.d78d	c8		iny		                iny
.d78e	a5 03		lda $03		                lda dp+1
.d790	91 1e		sta ($1e),y	                sta (up),y
.d792	60		rts		                rts
.d793					interpret:
.d793					_loop:
.d793	20 02 99	jsr $9902	                jsr xt_parse_name       ; ( "string" -- addr u )
.d796	b5 00		lda $00,x	                lda 0,x
.d798	15 01		ora $01,x	                ora 1,x
.d79a	f0 7d		beq $d819	                beq _line_done
.d79c	20 ac a3	jsr $a3ac	                jsr xt_two_dup          ; ( addr u -- addr u addr u )
.d79f	20 e7 8f	jsr $8fe7	                jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
.d7a2	b5 00		lda $00,x	                lda 0,x
.d7a4	15 01		ora $01,x	                ora 1,x
.d7a6	d0 35		bne $d7dd	                bne _got_name_token
.d7a8	e8		inx		                inx                     ; ( addr u 0 -- addr u )
.d7a9	e8		inx		                inx
.d7aa	20 ad 96	jsr $96ad	                jsr xt_number           ; ( addr u -- u|d )
.d7ad	a5 16		lda $16		                lda state
.d7af	f0 e2		beq $d793	                beq _loop
.d7b1	a9 20		lda #$20	                lda #$20
.d7b3	24 20		bit $20		                bit status
.d7b5	f0 06		beq $d7bd	                beq _single_number
.d7b7	20 a2 a1	jsr $a1a2	                jsr xt_swap
.d7ba	20 c2 d7	jsr $d7c2	                jsr _add_lit
.d7bd					_single_number:
.d7bd	20 c2 d7	jsr $d7c2	                jsr _add_lit
.d7c0	80 d1		bra $d793	                bra _loop
.d7c2	b5 01		lda $01,x	_add_lit:       lda 1,x
.d7c4	f0 06		beq $d7cc	                beq _byte_rt
.d7c6	a0 93		ldy #$93	                ldy #>literal_runtime
.d7c8	a9 a4		lda #$a4	                lda #<literal_runtime
.d7ca	80 04		bra $d7d0	                bra _cmpl_rt
.d7cc	a0 93		ldy #$93	_byte_rt:       ldy #>byte_runtime
.d7ce	a9 c3		lda #$c3	                lda #<byte_runtime
.d7d0	20 ce d6	jsr $d6ce	_cmpl_rt:       jsr cmpl_subroutine
.d7d3	b5 01		lda $01,x	                lda 1,x
.d7d5	f0 03		beq $d7da	                beq _c_comma
.d7d7	4c 7a 87	jmp $877a	                jmp xt_comma
.d7da	4c 0c 86	jmp $860c	_c_comma:       jmp xt_c_comma
.d7dd					_got_name_token:
.d7dd	b5 00		lda $00,x	                lda 0,x
.d7df	95 04		sta $04,x	                sta 4,x
.d7e1	b5 01		lda $01,x	                lda 1,x
.d7e3	95 05		sta $05,x	                sta 5,x
.d7e5	e8		inx		                inx
.d7e6	e8		inx		                inx
.d7e7	e8		inx		                inx
.d7e8	e8		inx		                inx                     ; ( nt )
.d7e9	b5 00		lda $00,x	                lda 0,x
.d7eb	85 22		sta $22		                sta tmpbranch
.d7ed	b5 01		lda $01,x	                lda 1,x
.d7ef	85 23		sta $23		                sta tmpbranch+1
.d7f1	20 04 96	jsr $9604	                jsr xt_name_to_int      ; ( nt - xt )
.d7f4	a5 16		lda $16		                lda state
.d7f6	d0 13		bne $d80b	                bne _compile
.d7f8	a0 01		ldy #$01	                ldy #1
.d7fa	b1 22		lda ($22),y	                lda (tmpbranch),y
.d7fc	29 01		and #$01	                and #CO                 ; mask everything but Compile Only bit
.d7fe	f0 05		beq $d805	                beq _interpret
.d800	a9 02		lda #$02	                lda #err_compileonly
.d802	4c 4e d8	jmp $d84e	                jmp error
.d805					_interpret:
.d805	20 49 8f	jsr $8f49	                jsr xt_execute
.d808	4c 93 d7	jmp $d793	                jmp _loop
.d80b					_compile:
.d80b	a0 01		ldy #$01	                ldy #1
.d80d	b1 22		lda ($22),y	                lda (tmpbranch),y
.d80f	29 04		and #$04	                and #IM                 ; Mask all but IM bit
.d811	d0 f2		bne $d805	                bne _interpret          ; IMMEDIATE word, execute right now
.d813	20 f9 87	jsr $87f9	                jsr xt_compile_comma
.d816	4c 93 d7	jmp $d793	                jmp _loop
.d819					_line_done:
.d819	e8		inx		                inx
.d81a	e8		inx		                inx
.d81b	e8		inx		                inx
.d81c	e8		inx		                inx
.d81d	60		rts		                rts
.d81e					is_printable:
.d81e	c9 20		cmp #$20	                cmp #AscSP              ; $20
.d820	90 08		bcc $d82a	                bcc _done
.d822	c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.d824	b0 03		bcs $d829	                bcs _failed
.d826	38		sec		                sec
.d827	80 01		bra $d82a	                bra _done
.d829					_failed:
.d829	18		clc		                clc
.d82a					_done:
.d82a	60		rts		                rts
.d82b					is_whitespace:
.d82b	c9 00		cmp #$00	                cmp #00         ; explicit comparison to leave Y untouched
.d82d	90 08		bcc $d837	                bcc _done
.d82f	c9 21		cmp #$21	                cmp #AscSP+1
.d831	b0 03		bcs $d836	                bcs _failed
.d833	38		sec		                sec
.d834	80 01		bra $d837	                bra _done
.d836					_failed:
.d836	18		clc		                clc
.d837					_done:
.d837	60		rts		                rts
.d838					underflow_1:
.d838	e0 77		cpx #$77	                cpx #dsp0-1
.d83a	10 10		bpl $d84c	                bpl underflow_error
.d83c	60		rts		                rts
.d83d					underflow_2:
.d83d	e0 75		cpx #$75	                cpx #dsp0-3
.d83f	10 0b		bpl $d84c	                bpl underflow_error
.d841	60		rts		                rts
.d842					underflow_3:
.d842	e0 73		cpx #$73	                cpx #dsp0-5
.d844	10 06		bpl $d84c	                bpl underflow_error
.d846	60		rts		                rts
.d847					underflow_4:
.d847	e0 71		cpx #$71	                cpx #dsp0-7
.d849	10 01		bpl $d84c	                bpl underflow_error
.d84b	60		rts		                rts
.d84c					underflow_error:
.d84c	a9 09		lda #$09	                lda #err_underflow      ; fall through to error
.d84e					error:
.d84e	48		pha		                pha                     ; save error
.d84f	20 8e d8	jsr $d88e	                jsr print_error
.d852	20 6f 89	jsr $896f	                jsr xt_cr
.d855	68		pla		                pla
.d856	c9 09		cmp #$09	                cmp #err_underflow      ; should we display return stack?
.d858	d0 17		bne $d871	                bne _no_underflow
.d85a	a9 0d		lda #$0d	                lda #err_returnstack
.d85c	20 8e d8	jsr $d88e	                jsr print_error
.d85f	ba		tsx		                tsx
.d860					-
.d860	e8		inx		                inx
.d861	f0 0b		beq $d86e	                beq +
.d863	20 12 a1	jsr $a112	                jsr xt_space
.d866	bd 00 01	lda $0100,x	                lda $100,x
.d869	20 3b d7	jsr $d73b	                jsr byte_to_ascii
.d86c	80 f2		bra $d860	                bra -
.d86e					+
.d86e	20 6f 89	jsr $896f	                jsr xt_cr
.d871					_no_underflow:
.d871	4c 60 80	jmp $8060	                jmp xt_abort            ; no jsr, as we clobber return stack
.d874					print_string_no_lf:
.d874	0a		asl a		                asl
.d875	a8		tay		                tay
.d876	b9 d3 d3	lda $d3d3,y	                lda string_table,y
.d879	85 28		sta $28		                sta tmp3                ; LSB
.d87b	c8		iny		                iny
.d87c	b9 d3 d3	lda $d3d3,y	                lda string_table,y
.d87f	85 29		sta $29		                sta tmp3+1              ; MSB
.d881					print_common:
.d881	a0 00		ldy #$00	                ldy #0
.d883					_loop:
.d883	b1 28		lda ($28),y	                lda (tmp3),y
.d885	f0 06		beq $d88d	                beq _done               ; strings are zero-terminated
.d887	20 02 8e	jsr $8e02	                jsr emit_a              ; allows vectoring via output
.d88a	c8		iny		                iny
.d88b	80 f6		bra $d883	                bra _loop
.d88d					_done:
.d88d	60		rts		                rts
.d88e					print_error:
.d88e	0a		asl a		                asl
.d88f	a8		tay		                tay
.d890	b9 a8 d4	lda $d4a8,y	                lda error_table,y
.d893	85 28		sta $28		                sta tmp3                ; LSB
.d895	c8		iny		                iny
.d896	b9 a8 d4	lda $d4a8,y	                lda error_table,y
.d899	85 29		sta $29		                sta tmp3+1              ; MSB
.d89b	20 81 d8	jsr $d881	                jsr print_common
.d89e	60		rts		                rts
.d89f					print_string:
.d89f	20 74 d8	jsr $d874	                jsr print_string_no_lf
.d8a2	4c 6f 89	jmp $896f	                jmp xt_cr               ; JSR/RTS because never compiled
.d8a5					print_u:
.d8a5	20 9c a7	jsr $a79c	                jsr xt_zero                     ; 0
.d8a8	20 66 93	jsr $9366	                jsr xt_less_number_sign         ; <#
.d8ab	20 01 98	jsr $9801	                jsr xt_number_sign_s            ; #S
.d8ae	20 df 97	jsr $97df	                jsr xt_number_sign_greater      ; #>
.d8b1	4c f7 a4	jmp $a4f7	                jmp xt_type                     ; JSR/RTS because never compiled

;******  Return to file: platform/platform-py65mon.asm

.f010					v_nmi:
.f010					v_reset:
.f010					v_irq:
.f010					kernel_init:
.f010	78		sei		                sei             ; Disable interrupts
.f011	a2 00		ldx #$00	                ldx #0
.f013	bd 2c f0	lda $f02c,x	-               lda s_kernel_id,x
.f016	f0 06		beq $f01e	                beq _done
.f018	20 27 f0	jsr $f027	                jsr kernel_putc
.f01b	e8		inx		                inx
.f01c	80 f5		bra $f013	                bra -
.f01e					_done:
.f01e	4c 00 80	jmp $8000	                jmp forth
.f021					kernel_getc:
.f021					_loop:
.f021	ad 04 f0	lda $f004	                lda $f004
.f024	f0 fb		beq $f021	                beq _loop
.f026	60		rts		                rts
.f027					kernel_putc:
.f027	8d 01 f0	sta $f001	                sta $f001
.f02a	60		rts		                rts
.f02b					platform_bye:
.f02b	00		brk #		                brk
.f02c					s_kernel_id:
>f02c	54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 default kernel for py65mon (04. Dec 2022)", AscLF, 0
>f034	74 68 20 32 20 64 65 66 61 75 6c 74 20 6b 65 72
>f044	6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f 6e 20
>f054	28 30 34 2e 20 44 65 63 20 32 30 32 32 29 0a 00
>fffa	10 f0				.word v_nmi
>fffc	10 f0				.word v_reset
>fffe	10 f0				.word v_irq

;******  End of listing
